/*
 * flash.c
 *
 *  Created on: Nov 12, 2023
 *      Author: USER
 */

#incldue "stdint.h"

#define FLASH_USER_START_ADDR   ADDR_FLASH_SECTOR_2
#define FLASH_USER_END_ADDR     ADDR_FLASH_SECTOR_3 + GetSectorSize(ADDR_FLASH_SECTOR_3) -1
#define DATA_32                 ((uint32_t)0x99999999)

typedef enum {
	RW_OK = 0x0, RW_ERROR = 0x1
} stat_flashRW;

stat_flashRW readFlash(uint32_t startADDR) {
	unsigned int value = *(unsigned int*) startADDR;
	printf("addr[0x%08x] = %08x\r\n", startADDR, value);
	return RW_OK;
}

stat_flashRW eraseFlash(uint32_t ADDR_FLASH_SECTOR_x) {
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();

	/* Erase the user Flash area
	 (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	EraseInitStruct.Sector = FirstSector;
	EraseInitStruct.NbSectors = NbOfSectors;

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
		/*
		 Error occurred while sector erase.
		 User can add here some code to deal with this error.
		 SECTORError will contain the faulty sector and then to know the code error on this sector,
		 user can call function 'HAL_FLASH_GetError()'
		 */
		/* Infinite loop */
		while (1) {
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
			//       BSP_LED_On(LD3_Pin);
		}
	}

	/* Program the user Flash area word by word
	 (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	Address = FLASH_USER_START_ADDR;

	while (Address < FLASH_USER_END_ADDR) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32)
				== HAL_OK) {

			readFlash(Address);
			Address = Address + 4;

		} else {
			/* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
			while (1) {
				HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);

				//         BSP_LED_On(LD3_Pin);
			}
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();

	/* Check if the programmed data is OK
	 MemoryProgramStatus = 0: data programmed correctly
	 MemoryProgramStatus != 0: number of words not programmed correctly ******/
	Address = FLASH_USER_START_ADDR;
	MemoryProgramStatus = 0x0;

	while (Address < FLASH_USER_END_ADDR) {
		data32 = *(__IO uint32_t*) Address;

		if (data32 != DATA_32) {
			MemoryProgramStatus++;
		}
		Address = Address + 4;
	}

	/*Check if there is an issue to program data*/
	if (MemoryProgramStatus == 0) {
		/* No error detected. Switch on LED1*/
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
		//	   BSP_LED_On(LD1_Pin);
	} else {
		/* Error detected. Switch on LED2*/
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
		//	   BSP_LED_On(LD2_Pin);
	}
}

uint32_t GetSector(uint32_t Address) {
	uint32_t sector = 0;

	if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
		sector = FLASH_SECTOR_0;
	} else if ((Address < ADDR_FLASH_SECTOR_2)
			&& (Address >= ADDR_FLASH_SECTOR_1)) {
		sector = FLASH_SECTOR_1;
	} else if ((Address < ADDR_FLASH_SECTOR_3)
			&& (Address >= ADDR_FLASH_SECTOR_2)) {
		sector = FLASH_SECTOR_2;
	} else if ((Address < ADDR_FLASH_SECTOR_4)
			&& (Address >= ADDR_FLASH_SECTOR_3)) {
		sector = FLASH_SECTOR_3;
	} else if ((Address < ADDR_FLASH_SECTOR_5)
			&& (Address >= ADDR_FLASH_SECTOR_4)) {
		sector = FLASH_SECTOR_4;
	} else if ((Address < ADDR_FLASH_SECTOR_6)
			&& (Address >= ADDR_FLASH_SECTOR_5)) {
		sector = FLASH_SECTOR_5;
	} else if ((Address < ADDR_FLASH_SECTOR_7)
			&& (Address >= ADDR_FLASH_SECTOR_6)) {
		sector = FLASH_SECTOR_6;
	} else if ((Address < ADDR_FLASH_SECTOR_8)
			&& (Address >= ADDR_FLASH_SECTOR_7)) {
		sector = FLASH_SECTOR_7;
	} else if ((Address < ADDR_FLASH_SECTOR_9)
			&& (Address >= ADDR_FLASH_SECTOR_8)) {
		sector = FLASH_SECTOR_8;
	} else if ((Address < ADDR_FLASH_SECTOR_10)
			&& (Address >= ADDR_FLASH_SECTOR_9)) {
		sector = FLASH_SECTOR_9;
	} else if ((Address < ADDR_FLASH_SECTOR_11)
			&& (Address >= ADDR_FLASH_SECTOR_10)) {
		sector = FLASH_SECTOR_10;
	} else if ((Address < ADDR_FLASH_SECTOR_12)
			&& (Address >= ADDR_FLASH_SECTOR_11)) {
		sector = FLASH_SECTOR_11;
	} else if ((Address < ADDR_FLASH_SECTOR_13)
			&& (Address >= ADDR_FLASH_SECTOR_12)) {
		sector = FLASH_SECTOR_12;
	} else if ((Address < ADDR_FLASH_SECTOR_14)
			&& (Address >= ADDR_FLASH_SECTOR_13)) {
		sector = FLASH_SECTOR_13;
	} else if ((Address < ADDR_FLASH_SECTOR_15)
			&& (Address >= ADDR_FLASH_SECTOR_14)) {
		sector = FLASH_SECTOR_14;
	} else if ((Address < ADDR_FLASH_SECTOR_16)
			&& (Address >= ADDR_FLASH_SECTOR_15)) {
		sector = FLASH_SECTOR_15;
	} else if ((Address < ADDR_FLASH_SECTOR_17)
			&& (Address >= ADDR_FLASH_SECTOR_16)) {
		sector = FLASH_SECTOR_16;
	} else if ((Address < ADDR_FLASH_SECTOR_18)
			&& (Address >= ADDR_FLASH_SECTOR_17)) {
		sector = FLASH_SECTOR_17;
	} else if ((Address < ADDR_FLASH_SECTOR_19)
			&& (Address >= ADDR_FLASH_SECTOR_18)) {
		sector = FLASH_SECTOR_18;
	} else if ((Address < ADDR_FLASH_SECTOR_20)
			&& (Address >= ADDR_FLASH_SECTOR_19)) {
		sector = FLASH_SECTOR_19;
	} else if ((Address < ADDR_FLASH_SECTOR_21)
			&& (Address >= ADDR_FLASH_SECTOR_20)) {
		sector = FLASH_SECTOR_20;
	} else if ((Address < ADDR_FLASH_SECTOR_22)
			&& (Address >= ADDR_FLASH_SECTOR_21)) {
		sector = FLASH_SECTOR_21;
	} else if ((Address < ADDR_FLASH_SECTOR_23)
			&& (Address >= ADDR_FLASH_SECTOR_22)) {
		sector = FLASH_SECTOR_22;
	} else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
	{
		sector = FLASH_SECTOR_23;
	}
	return sector;
}

/**
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
uint32_t GetSectorSize(uint32_t Sector) {
	uint32_t sectorsize = 0x00;
	if ((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1)
			|| (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3)
			|| (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13)
			|| (Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15)) {
		sectorsize = 16 * 1024;
	} else if ((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16)) {
		sectorsize = 64 * 1024;
	} else {
		sectorsize = 128 * 1024;
	}
	return sectorsize;
}


