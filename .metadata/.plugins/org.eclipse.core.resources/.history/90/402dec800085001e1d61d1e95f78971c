/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "string.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//#include "flash.h"
#include "stdio.h"
#include "melody.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define ADDR_FLASH_SECTOR_0     ((uint32_t)0x08000000) /* Base @ of Sector 0, 16 Kbytes */
#define ADDR_FLASH_SECTOR_1     ((uint32_t)0x08004000) /* Base @ of Sector 1, 16 Kbytes */
#define ADDR_FLASH_SECTOR_2     ((uint32_t)0x08008000) /* Base @ of Sector 2, 16 Kbytes */
#define ADDR_FLASH_SECTOR_3     ((uint32_t)0x0800C000) /* Base @ of Sector 3, 16 Kbytes */
#define ADDR_FLASH_SECTOR_4     ((uint32_t)0x08010000) /* Base @ of Sector 4, 64 Kbytes */
#define ADDR_FLASH_SECTOR_5     ((uint32_t)0x08020000) /* Base @ of Sector 5, 128 Kbytes */
#define ADDR_FLASH_SECTOR_6     ((uint32_t)0x08040000) /* Base @ of Sector 6, 128 Kbytes */
#define ADDR_FLASH_SECTOR_7     ((uint32_t)0x08060000) /* Base @ of Sector 7, 128 Kbytes */
#define ADDR_FLASH_SECTOR_8     ((uint32_t)0x08080000) /* Base @ of Sector 8, 128 Kbytes */
#define ADDR_FLASH_SECTOR_9     ((uint32_t)0x080A0000) /* Base @ of Sector 9, 128 Kbytes */
#define ADDR_FLASH_SECTOR_10    ((uint32_t)0x080C0000) /* Base @ of Sector 10, 128 Kbytes */
#define ADDR_FLASH_SECTOR_11    ((uint32_t)0x080E0000) /* Base @ of Sector 11, 128 Kbytes */

/* Base address of the Flash sectors Bank 2 */
#define ADDR_FLASH_SECTOR_12     ((uint32_t)0x08100000) /* Base @ of Sector 0, 16 Kbytes */
#define ADDR_FLASH_SECTOR_13     ((uint32_t)0x08104000) /* Base @ of Sector 1, 16 Kbytes */
#define ADDR_FLASH_SECTOR_14     ((uint32_t)0x08108000) /* Base @ of Sector 2, 16 Kbytes */
#define ADDR_FLASH_SECTOR_15     ((uint32_t)0x0810C000) /* Base @ of Sector 3, 16 Kbytes */
#define ADDR_FLASH_SECTOR_16     ((uint32_t)0x08110000) /* Base @ of Sector 4, 64 Kbytes */
#define ADDR_FLASH_SECTOR_17     ((uint32_t)0x08120000) /* Base @ of Sector 5, 128 Kbytes */
#define ADDR_FLASH_SECTOR_18     ((uint32_t)0x08140000) /* Base @ of Sector 6, 128 Kbytes */
#define ADDR_FLASH_SECTOR_19     ((uint32_t)0x08160000) /* Base @ of Sector 7, 128 Kbytes */
#define ADDR_FLASH_SECTOR_20     ((uint32_t)0x08180000) /* Base @ of Sector 8, 128 Kbytes  */
#define ADDR_FLASH_SECTOR_21     ((uint32_t)0x081A0000) /* Base @ of Sector 9, 128 Kbytes  */
#define ADDR_FLASH_SECTOR_22     ((uint32_t)0x081C0000) /* Base @ of Sector 10, 128 Kbytes */
#define ADDR_FLASH_SECTOR_23     ((uint32_t)0x081E0000) /* Base @ of Sector 11, 128 Kbytes */

#define C	262  	// do
#define D	294		// re
#define E	330		// mi
#define F	349		// pa
#define G	392		// sol
#define A	440		// la
#define B	494		// si
#define C1	523		// do
#define D1	587		// re
#define E1	659		// mi



/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LCD_ADDR 				(0x27 << 1)
#define FLASH_USER_START_ADDR   ADDR_FLASH_SECTOR_10
#define MAGIC_NUM 				0xeeeeeeee
#define nv_items 				((NVitemTypeDef *) ADDR_FLASH_SECTOR_10)
//#define FLASH_USER_END_ADDR     ADDR_FLASH_SECTOR_10 + GetSectorSize(ADDR_FLASH_SECTOR_10) - 1

typedef enum {
	RW_OK = 0x0, RW_ERROR = 0x1
} stat_flashRW;

enum CLOCK_MODE {
	NORMAL_STATE, TIME_SETTING, ALARM_TIME_SETTING, MUSIC_SELECT
};

enum CLOCK_BUTTON {
	NO_KEY, UP, DOWN, RIGHT, LEFT, SELECT
};

enum MUSIC_LIST {
	MUSIC_NUM_0, MUSIC_NUM_1, MUSIC_NUM_2, MUSIC_NUM_3, MUSIC_NUM_4
};

struct clock_state {
	enum CLOCK_MODE mode;
	enum CLOCK_BUTTON button;
	int music_num;
};

typedef struct {
	int8_t hours;
	int8_t minutes;
	int8_t seconds;
} TimeTypeDef;

typedef struct {
//	uint32_t magic_num;
	TimeTypeDef setting_time;
	TimeTypeDef alarm_time;
	int8_t alarm_music_num;
} NVitemTypeDef;

typedef struct {
	int8_t musicNum;
	char musicTitle[20];
} MusicTypeDef;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

ETH_TxPacketConfig TxConfig;
ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

ETH_HandleTypeDef heth;

I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
uint32_t xy[2];
uint32_t current_time, last_time, interval;

int btn_cnt = 0;
int t_position = 0;
int al_position = 0;
int mu_position = 0;

char showTime[30] = { 0 };
//char showDate[30] = { 0 };
char ampm[2][3] = { "AM", "PM" };
char timeStr[30];
char temp_time_buf[30];

struct clock_state current_state;

TimeTypeDef ctime;
TimeTypeDef stime;
TimeTypeDef atime;

RTC_DateTypeDef sDate;
RTC_TimeTypeDef RTC_Time;
RTC_AlarmTypeDef RTC_Alarm;

uint8_t temp_flash_h;
uint8_t temp_flash_m;
uint8_t temp_flash_s;

NVitemTypeDef default_nvitem = { { 0, 0, 0 }, { 0, 0, 0 }, 0 };

MusicTypeDef alarmMusic[] = { { 0, "Music 0" }, { 1, "Music 1" },
		{ 2, "Music 2" }, { 3, "Music 3" }, { 4, "Music 4" }, };

uint32_t FirstSector = 0, NbOfSectors = 0;
uint32_t Address = 0, SECTORError = 0;
__IO uint32_t data32 = 0, MemoryProgramStatus = 0;

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
//uint32_t GetSector(uint32_t Address);
//uint32_t GetSectorSize(uint32_t Sector);
//stat_flashRW readFlash(uint32_t startADDR);
//stat_flashRW eraseFlash(uint32_t ADDR_FLASH_SECTOR_x);
void init();
uint8_t readFlash(uint32_t addr);
HAL_StatusTypeDef update_nvitems(void);
void init_getFlashTime(void);
void get_time(void);
int _write(int file, char *ptr, int len);
void showCurrentTime(void);
void lcd_clear(void);
uint8_t readFlash(uint32_t addr);
HAL_StatusTypeDef update_nvitems(void);
void timeDisplay(void);
enum CLOCK_BUTTON joyStick_btn_chk(void);
void time_set_mode(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SCHOOL_MEL_NUM 	24

typedef struct {
	uint16_t freq;
	uint16_t delay;
} _BUZZER;

_BUZZER schoolBell[SCHOOL_MEL_NUM] = { { G, 1 }, { G, 1 }, { A, 1 }, { A, 1 }, 	// 4
		{ G, 1 }, { G, 1 }, { E, 2 }, 									// 3
		{ G, 1 }, { G, 1 }, { E, 1 }, { E, 1 }, { D, 3 }, 				// 5
		{ G, 1 }, { G, 1 }, { A, 1 }, { A, 1 },							// 4
		{ G, 1 }, { G, 1 }, { E, 2 }, 									// 3
		{ G, 1 }, { E, 1 }, { D, 1 }, { E, 1 }, { C, 3 } 				// 5
};

uint8_t start = 0;
uint8_t seq = 0;
uint8_t stop = 0;

int _write(int file, char *ptr, int len) {
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
	return len;
}

//char temp_alarm_buf[30];

void get_time(void) {
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
			RTC_Time.Seconds);

//	sprintf((char*) temp_alarm_buf, "%s %02d: %02d: %02d",
//			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
//			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
}

void showCurrentTime() {
	LCD_SendCommand(LCD_ADDR, 0b10000000);
	LCD_SendString(LCD_ADDR, "Current Time");

	LCD_SendCommand(LCD_ADDR, 0b11000000);
	LCD_SendString(LCD_ADDR, temp_time_buf);
}

void lcd_clear() {
	LCD_SendCommand(LCD_ADDR, 0b00000001);
}

uint8_t readFlash(uint32_t addr) {
	uint8_t value = *(uint8_t*) addr;

//	printf("flash value=%d\r\n", value);

	return value;
}

HAL_StatusTypeDef update_nvitems(void) {
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();

	FirstSector = ADDR_FLASH_SECTOR_10;
	NbOfSectors = 1;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_1;
	EraseInitStruct.Sector = FirstSector;
	EraseInitStruct.NbSectors = NbOfSectors;

//	printf("\r\n--------------erase-----------\r\n");

//	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK) {
		printf("\r\n--------------erase complete-----------\r\n");
	} else {
		printf("\r\n--------------erase error-----------\r\n");
		return error;
	}

	ptr = (uint8_t*) &default_nvitem;

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
		Address = (uint8_t*) nv_items + i;
		Data = *((uint8_t*) ptr + i);
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);

		printf("DATA: %ld\r\n", Data);

		if (error != HAL_OK) {
			printf("\r\n--------------overwrite error-----------\r\n");
			return error;
		}
	}
	printf("\r\n--------------overwrite complete-----------\r\n");
	HAL_FLASH_Lock();
}

void timeDisplay() {
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == TIME_SETTING) {
		LCD_SendCommand(LCD_ADDR, 0b10000000);
		LCD_SendString(LCD_ADDR, "Time Setting");

		hours = stime.hours;
		minutes = stime.minutes;
		seconds = stime.seconds;
	} else if (current_state.mode == ALARM_TIME_SETTING) {
		LCD_SendCommand(LCD_ADDR, 0b10000000);
		LCD_SendString(LCD_ADDR, "Alarm Setting");

		hours = atime.hours;
		minutes = atime.minutes;
		seconds = atime.seconds;
	}

	if (hours >= 12) {
		if (current_state.mode == TIME_SETTING) {
			sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
					hours - 12, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
			sprintf(timeStr, "%s %02d: %02d: %02d",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours - 12, minutes,
					seconds);
		}
	} else {
		if (current_state.mode == TIME_SETTING) {
			sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
					hours, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
			sprintf(timeStr, "%s %02d: %02d: %02d",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours, minutes,
					seconds);
		}
	}

	LCD_SendCommand(LCD_ADDR, 0b11000000);
	LCD_SendString(LCD_ADDR, timeStr);
}

void musicDisplay(int musicNumber) {
	char music_str[30];

	sprintf(music_str, "%d. %s", musicNumber,
			alarmMusic[musicNumber].musicTitle);

	LCD_SendCommand(LCD_ADDR, 0b10000000);
	LCD_SendString(LCD_ADDR, "Music Setting");
	LCD_SendCommand(LCD_ADDR, 0b11000000);
	LCD_SendString(LCD_ADDR, music_str);
}

enum MUSIC_LIST musicList;
void musicPlay(int musicNumber) {

	switch(musicNuber) {
	case 0:
		musicList = MUSIC_NUM_0;
		break;
	case 1:
		musicList = MUSIC_NUM_1;
		break;
	case 2:
		musicList = MUSIC_NUM_2;
		break;
	case 3:
		misicList = MUSIC_NUM_3;
		break;
	case 4:
		misicList = MUSIC_NUM_4;
		break;
	default:
		break;

	}
}

enum CLOCK_BUTTON joyStick_btn_chk() {

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
	if (xy[1] > 4000) {
		printf("up\r\n");
		return UP;
	}
	if (xy[1] < 1000) {
		printf("down\r\n");
		return DOWN;
	}
	if (xy[0] > 4000) {
		printf("left\r\n");
		return LEFT;
	}
	if (xy[0] < 1000) {
		printf("right\r\n");
		return RIGHT;
	}
}

void time_set_mode() {

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
	if (t_position == 0) {
		printf("t_position 0 \r\n");
		switch (t_button) {
		case DOWN:
			if (stime.hours >= 12) {
				stime.hours -= 12;
				RTC_Time.TimeFormat = 0;
			} else {
				stime.hours += 12;
				RTC_Time.TimeFormat = 1;
			}
			break;
		case RIGHT:
			t_position = 1;
			break;
		default:
			break;
		}
	} else if (t_position == 1) {
		printf("t_position 1 \r\n");
		switch (t_button) {
		case RIGHT:
			t_position = 2;
			break;
		case LEFT:
			t_position = 0;
			break;
		case UP:
			stime.hours++;
			if (stime.hours >= 12) {
				stime.hours = 0;
				RTC_Time.TimeFormat = 0;
			}
			break;
		case DOWN:
			stime.hours--;
			if (stime.hours < 0) {
				stime.hours = 11;
			}
		default:
			break;
		}

	} else if (t_position == 2) {
		printf("t_position 2 \r\n");
		switch (t_button) {
		case RIGHT:
			t_position = 3;
			break;
		case LEFT:
			t_position = 1;
		case UP:
			stime.minutes++;
			if (stime.minutes >= 60) {
				stime.minutes = 0;
			}
			break;
		case DOWN:
			stime.minutes--;
			if (stime.minutes < 0) {
				stime.minutes = 59;
			}
		default:
			break;
		}
	} else if (t_position == 3) {
		printf("t_position 3 \r\n");
		switch (t_button) {
		case RIGHT:

			default_nvitem.setting_time.hours = stime.hours;
			default_nvitem.setting_time.minutes = stime.minutes;
			default_nvitem.setting_time.seconds = stime.seconds;

			RTC_Time.Hours = default_nvitem.setting_time.hours;
			RTC_Time.Minutes = default_nvitem.setting_time.minutes;
			RTC_Time.Seconds = default_nvitem.setting_time.seconds;
			RTC_Time.Hours %= 12;

			update_nvitems();
			lcd_clear();

			current_state.mode = NORMAL_STATE;
			break;
		case LEFT:
			t_position = 2;
			break;
		case UP:
			stime.seconds++;
			if (stime.seconds >= 60) {
				stime.seconds = 0;
			}
			break;
		case DOWN:
			stime.seconds--;
			if (stime.seconds < 0) {
				stime.seconds = 59;
			}
			break;
		default:
			break;

		}
	}
	timeDisplay();
}

void alarm_set_mode(void) {

	enum CLOCK_BUTTON al_button;

	al_button = joyStick_btn_chk();

	if (al_position == 0) {
		printf("al_position 0 \r\n");
		switch (al_button) {
		case DOWN:
			if (atime.hours >= 12) {
				atime.hours -= 12;
				RTC_Alarm.AlarmTime.TimeFormat = 0;
			} else {
				atime.hours += 12;
				RTC_Alarm.AlarmTime.TimeFormat = 1;
			}
			break;
		case RIGHT:
			al_position = 1;
			break;
		default:
			break;
		}
	} else if (al_position == 1) {
		printf("al_position 1 \r\n");
		switch (al_button) {
		case RIGHT:
			al_position = 2;
			break;
		case LEFT:
			al_position = 0;
			break;
		case UP:
			atime.hours++;
			if (atime.hours >= 12) {
				atime.hours = 0;
				RTC_Alarm.AlarmTime.TimeFormat = 0;
			}
			break;
		case DOWN:
			atime.hours--;
			if (atime.hours < 0) {
				atime.hours = 11;
			}
		default:
			break;
		}

	} else if (al_position == 2) {
		printf("al_position 2 \r\n");
		switch (al_button) {
		case RIGHT:
			al_position = 3;
			break;
		case LEFT:
			al_position = 1;
		case UP:
			atime.minutes++;
			if (atime.minutes >= 60) {
				atime.minutes = 0;
			}
			break;
		case DOWN:
			atime.minutes--;
			if (atime.minutes < 0) {
				atime.minutes = 59;
			}
		default:
			break;
		}
	} else if (al_position == 3) {
		printf("al_position 3 \r\n");
		switch (al_button) {
		case RIGHT:

			default_nvitem.alarm_time.hours = atime.hours;
			default_nvitem.alarm_time.minutes = atime.minutes;
			default_nvitem.alarm_time.seconds = atime.seconds;

			RTC_Alarm.AlarmTime.Hours = default_nvitem.alarm_time.hours;
			RTC_Alarm.AlarmTime.Minutes = default_nvitem.alarm_time.minutes;
			RTC_Alarm.AlarmTime.Seconds = default_nvitem.alarm_time.seconds;
			RTC_Alarm.AlarmTime.Hours %= 12;

			printf("rtc alarm time %s %d: %d: %d\r\n", ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours, RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);

			update_nvitems();
			lcd_clear();

			current_state.mode = NORMAL_STATE;
			break;
		case LEFT:
			al_position = 2;
			break;
		case UP:
			atime.seconds++;
			if (atime.seconds >= 60) {
				atime.seconds = 0;
			}
			break;
		case DOWN:
			atime.seconds--;
			if (atime.seconds < 0) {
				atime.seconds = 59;
			}
			break;
		default:
			break;

		}
	}
	timeDisplay();
}

void music_set_mode() {
	enum CLOCK_BUTTON mu_button;
	int mu_position, mu_cnt;

	mu_button = joyStick_btn_chk();
	mu_position = current_state.music_num;
	mu_cnt = sizeof(alarmMusic) / sizeof(alarmMusic[0]);

	switch (mu_button) {
	case UP:
		mu_position++;
		if (mu_position == mu_cnt) {
			mu_position = 0;
		}
		break;
	case DOWN:
		mu_position--;
		if (mu_position < 0) {
			mu_position = mu_cnt - 1;
		}
		break;
	case RIGHT:
		default_nvitem.alarm_music_num = mu_position;

		update_nvitems();
		lcd_clear();

		current_state.mode = NORMAL_STATE;
	default:
		break;
	}

	current_state.music_num = mu_position;
//	lcd_clear();
	musicDisplay(mu_position);
	musicPlay(mu_position);

	printf("%d. %s\r\n", mu_position, alarmMusic[mu_position].musicTitle);

}




void init_getFlashTime() {
	RTC_Time.Hours = readFlash(FLASH_USER_START_ADDR);
	RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 1);
	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);

	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
			RTC_Time.Seconds);
}

void init_getFlashAlarm() {
	RTC_Alarm.AlarmTime.Hours = readFlash(FLASH_USER_START_ADDR + 3);
	RTC_Alarm.AlarmTime.Minutes = readFlash(FLASH_USER_START_ADDR + 4);
	RTC_Alarm.AlarmTime.Seconds = readFlash(FLASH_USER_START_ADDR + 5);

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);

	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
}

void init_getFlashMusic() {
	current_state.music_num = readFlash(FLASH_USER_START_ADDR + 6);

	printf("Setting Music: %d %s\r\n", current_state.music_num,
			alarmMusic[current_state.music_num].musicTitle);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
//	unsigned int value, addr, i;
//	unsigned char buf[30];
//	HAL_StatusTypeDef error;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_RTC_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, xy, 2);
//	HAL_ADC_Start_IT(&hadc1);
//	HAL_TIM_Base_Start_IT(&htim3);
	init();

	init_getFlashTime();
	init_getFlashAlarm();
	init_getFlashMusic();
	lcd_clear();
	current_state.mode = NORMAL_STATE;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (current_state.mode) {
		case NORMAL_STATE:
			get_time();
			showCurrentTime();
			break;
		case TIME_SETTING:
			time_set_mode();
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
			break;
		case ALARM_TIME_SETTING:
			alarm_set_mode();
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
			break;
		case MUSIC_SELECT:
			music_set_mode();
			break;
		default:
			break;
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{

  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
  MACAddr[0] = 0x00;
  MACAddr[1] = 0x80;
  MACAddr[2] = 0xE1;
  MACAddr[3] = 0x00;
  MACAddr[4] = 0x00;
  MACAddr[5] = 0x00;
  heth.Init.MACAddr = &MACAddr[0];
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
  heth.Init.TxDesc = DMATxDscrTab;
  heth.Init.RxDesc = DMARxDscrTab;
  heth.Init.RxBuffLen = 1524;

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
  {
    Error_Handler();
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
  sDate.Month = RTC_MONTH_NOVEMBER;
  sDate.Date = 0x16;
  sDate.Year = 0x23;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
  sAlarm.AlarmTime.Minutes = 0x0;
  sAlarm.AlarmTime.Seconds = 0x0;
  sAlarm.AlarmTime.SubSeconds = 0x20;
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8400-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 200-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 15;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 199;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{

  /* USER CODE BEGIN USB_OTG_FS_Init 0 */

  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Joy_btn_Pin */
  GPIO_InitStruct.Pin = Joy_btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void musicOn() {
	start = 1;
	seq = 0;

	HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == GPIO_PIN_3) {
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		current_time = HAL_GetTick();
		interval = current_time - last_time;
		last_time = current_time;

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
			if (interval < 130) {
				btn_cnt += 3;
			} else if (interval >= 130 && interval < 200) {
				printf("One click!!  interval = %u\r\n",
						(unsigned int) interval);
				btn_cnt = 0;
				current_state.mode = TIME_SETTING;
			} else if (interval >= 300 && interval <= 1000) {
				printf("Long click!!  interval = %u\r\n",
						(unsigned int) interval);
				btn_cnt = 0;
				current_state.mode = ALARM_TIME_SETTING;
			}
			if (btn_cnt >= 5) {
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
				musicOn();
				current_state.mode = MUSIC_SELECT;
			}
		}
	}
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);

//	start = 1;
//	seq = 0;
//
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	uint16_t melody = (uint16_t) (1000000 / schoolBell[seq].freq);

	if (stop == 1) {
		TIM2->ARR = 2000;
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		stop = 0;
	} else {
		if (seq == SCHOOL_MEL_NUM) {
			HAL_TIM_Base_Stop_IT(&htim2);
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		} else {
			TIM3->ARR = melody;
			TIM3->CCR3 = melody / 2;
			TIM2->ARR = schoolBell[seq].delay * 2000;
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
			stop = 1;
			seq++;
		}
	}

}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
