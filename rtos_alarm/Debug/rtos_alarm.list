
rtos_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005718  08005718  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005720  08005720  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000489c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004908  20004908  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013261  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d95  00000000  00000000  00033340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c8  00000000  00000000  000360d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cda  00000000  00000000  000371a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026cae  00000000  00000000  00037e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013318  00000000  00000000  0005eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e481d  00000000  00000000  00071e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d2c  00000000  00000000  00156660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015b38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005660 	.word	0x08005660

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08005660 	.word	0x08005660

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088
 80005bc:	200000dc 	.word	0x200000dc

080005c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0a      	cmp	r3, #10
 80005cc:	d106      	bne.n	80005dc <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4907      	ldr	r1, [pc, #28]	; (80005f4 <__io_putchar+0x34>)
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <__io_putchar+0x38>)
 80005d8:	f002 f91b 	bl	8002812 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <__io_putchar+0x38>)
 80005e6:	f002 f914 	bl	8002812 <HAL_UART_Transmit>
 return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08005678 	.word	0x08005678
 80005f8:	20000504 	.word	0x20000504

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fc9c 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f812 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f920 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f878 	bl	8000700 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f8c4 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000614:	f000 f8ec 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("Test: Main Start\n");
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0x2c>)
 800061a:	f004 f9b7 	bl	800498c <puts>
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  USER_threads();
 800061e:	f000 fc35 	bl	8000e8c <USER_threads>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f002 ff6d 	bl	8003500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x2a>
 8000628:	0800567c 	.word	0x0800567c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fa86 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	; 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fbc9 	bl	8001e48 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f974 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe2a 	bl	8002338 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f95d 	bl	80009a8 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ETH_Init+0x84>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <MX_ETH_Init+0x88>)
 8000708:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ETH_Init+0x8c>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ETH_Init+0x8c>)
 8000718:	22e1      	movs	r2, #225	; 0xe1
 800071a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ETH_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ETH_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ETH_Init+0x84>)
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_ETH_Init+0x8c>)
 8000732:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ETH_Init+0x84>)
 8000736:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ETH_Init+0x84>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_ETH_Init+0x90>)
 8000740:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_ETH_Init+0x84>)
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x94>)
 8000746:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ETH_Init+0x84>)
 800074a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800074e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x84>)
 8000752:	f000 fd6f 	bl	8001234 <HAL_ETH_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f924 	bl	80009a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000760:	2238      	movs	r2, #56	; 0x38
 8000762:	2100      	movs	r1, #0
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x98>)
 8000766:	f004 f9f1 	bl	8004b4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_ETH_Init+0x98>)
 800076c:	2221      	movs	r2, #33	; 0x21
 800076e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_ETH_Init+0x98>)
 8000772:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000776:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_ETH_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000454 	.word	0x20000454
 8000788:	40028000 	.word	0x40028000
 800078c:	20000a54 	.word	0x20000a54
 8000790:	200003b4 	.word	0x200003b4
 8000794:	20000314 	.word	0x20000314
 8000798:	200002dc 	.word	0x200002dc

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART3_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007d4:	f001 ffd0 	bl	8002778 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f8e3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000504 	.word	0x20000504
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2204      	movs	r2, #4
 8000800:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 f9eb 	bl	8001c0e <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8b3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000548 	.word	0x20000548

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4b      	ldr	r2, [pc, #300]	; (8000998 <MX_GPIO_Init+0x14c>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b49      	ldr	r3, [pc, #292]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a44      	ldr	r2, [pc, #272]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x150>)
 8000912:	f001 f963 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <MX_GPIO_Init+0x154>)
 800091c:	f001 f95e 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x158>)
 8000938:	f000 ffa4 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0x150>)
 8000956:	f000 ff95 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x154>)
 8000972:	f000 ff87 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x154>)
 800098a:	f000 ff7b 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <HAL_MspInit+0x54>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_MspInit+0x54>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fbf2 	bl	80011e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <HAL_ETH_MspInit+0x174>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	f040 80a4 	bne.w	8000b78 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
 8000a34:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a52      	ldr	r2, [pc, #328]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a4b      	ldr	r2, [pc, #300]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a44      	ldr	r2, [pc, #272]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a3d      	ldr	r2, [pc, #244]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a36      	ldr	r2, [pc, #216]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000af4:	2332      	movs	r3, #50	; 0x32
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481e      	ldr	r0, [pc, #120]	; (8000b88 <HAL_ETH_MspInit+0x17c>)
 8000b10:	f000 feb8 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b14:	2386      	movs	r3, #134	; 0x86
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b24:	230b      	movs	r3, #11
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4817      	ldr	r0, [pc, #92]	; (8000b8c <HAL_ETH_MspInit+0x180>)
 8000b30:	f000 fea8 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b46:	230b      	movs	r3, #11
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <HAL_ETH_MspInit+0x184>)
 8000b52:	f000 fe97 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <HAL_ETH_MspInit+0x188>)
 8000b74:	f000 fe86 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3738      	adds	r7, #56	; 0x38
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40028000 	.word	0x40028000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40021800 	.word	0x40021800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c10:	f000 fe38 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c48:	d13f      	bne.n	8000cca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <HAL_PCD_MspInit+0xb0>)
 8000c84:	f000 fdfe 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <HAL_PCD_MspInit+0xb0>)
 8000c9e:	f000 fdf1 	bl	8001884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6353      	str	r3, [r2, #52]	; 0x34
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f968 	bl	8000fe0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d10:	f003 f900 	bl	8003f14 <xTaskGetSchedulerState>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d1a:	f003 fad5 	bl	80042c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00a      	b.n	8000d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d34:	f3af 8000 	nop.w
 8000d38:	4601      	mov	r1, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	b2ca      	uxtb	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dbf0      	blt.n	8000d34 <_read+0x12>
  }

  return len;
 8000d52:	687b      	ldr	r3, [r7, #4]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e009      	b.n	8000d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	60ba      	str	r2, [r7, #8]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fc22 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbf1      	blt.n	8000d6e <_write+0x12>
  }
  return len;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_close>:

int _close(int file)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_isatty>:

int _isatty(int file)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f003 fedc 	bl	8004be8 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20030000 	.word	0x20030000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000a5c 	.word	0x20000a5c
 8000e64:	20004908 	.word	0x20004908

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <USER_threads>:
void TaskMain(void);

/*Task functions*/

void USER_threads(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af02      	add	r7, sp, #8
	printf("User threads start!!\n");
 8000e92:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <USER_threads+0x28>)
 8000e94:	f003 fd7a 	bl	800498c <puts>
	xTaskCreate((TaskFunction_t)TaskMain, "TaskMain", 256, NULL, TASK_MAIN_PRIO, &xHandleMain);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <USER_threads+0x2c>)
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2314      	movs	r3, #20
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea6:	4905      	ldr	r1, [pc, #20]	; (8000ebc <USER_threads+0x30>)
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <USER_threads+0x34>)
 8000eaa:	f002 fc08 	bl	80036be <xTaskCreate>
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	08005690 	.word	0x08005690
 8000eb8:	20000a60 	.word	0x20000a60
 8000ebc:	080056a8 	.word	0x080056a8
 8000ec0:	08000ec5 	.word	0x08000ec5

08000ec4 <TaskMain>:

void TaskMain(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	const char* taskMainName = "TaskMain";
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <TaskMain+0x1c>)
 8000ecc:	607b      	str	r3, [r7, #4]

	printf("%s is running\r\n", taskMainName);
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <TaskMain+0x20>)
 8000ed2:	f003 fcf5 	bl	80048c0 <iprintf>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	080056a8 	.word	0x080056a8
 8000ee4:	080056b4 	.word	0x080056b4

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffa9 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f003 fe6d 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fb6f 	bl	80005fc <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f2c:	08005728 	.word	0x08005728
  ldr r2, =_sbss
 8000f30:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f34:	20004908 	.word	0x20004908

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f931 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fd20 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f93b 	bl	800121a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f911 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000a64 	.word	0x20000a64

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000a64 	.word	0x20000a64

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e06c      	b.n	8001320 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800124c:	2b00      	cmp	r3, #0
 800124e:	d106      	bne.n	800125e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2223      	movs	r2, #35	; 0x23
 8001254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fbd7 	bl	8000a0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_ETH_Init+0xf4>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a30      	ldr	r2, [pc, #192]	; (8001328 <HAL_ETH_Init+0xf4>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_ETH_Init+0xf4>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_ETH_Init+0xf8>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_ETH_Init+0xf8>)
 8001280:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001284:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_ETH_Init+0xf8>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4927      	ldr	r1, [pc, #156]	; (800132c <HAL_ETH_Init+0xf8>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_ETH_Init+0xf8>)
 8001296:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b0:	f7ff feaa 	bl	8001008 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012b6:	e011      	b.n	80012dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012b8:	f7ff fea6 	bl	8001008 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012c6:	d909      	bls.n	80012dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2204      	movs	r2, #4
 80012cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	22e0      	movs	r2, #224	; 0xe0
 80012d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e021      	b.n	8001320 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1e4      	bne.n	80012b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f958 	bl	80015a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9ff 	bl	80016f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fa55 	bl	80017aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	461a      	mov	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f9bd 	bl	8001688 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2210      	movs	r2, #16
 800131a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40013800 	.word	0x40013800

08001330 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <ETH_SetMACConfig+0x15c>)
 8001346:	4013      	ands	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	7c1b      	ldrb	r3, [r3, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <ETH_SetMACConfig+0x28>
 8001352:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001356:	e000      	b.n	800135a <ETH_SetMACConfig+0x2a>
 8001358:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	7c5b      	ldrb	r3, [r3, #17]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <ETH_SetMACConfig+0x38>
 8001362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001366:	e000      	b.n	800136a <ETH_SetMACConfig+0x3a>
 8001368:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001370:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7fdb      	ldrb	r3, [r3, #31]
 8001376:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001378:	431a      	orrs	r2, r3
                        macconf->Speed |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800137e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	7f92      	ldrb	r2, [r2, #30]
 8001384:	2a00      	cmp	r2, #0
 8001386:	d102      	bne.n	800138e <ETH_SetMACConfig+0x5e>
 8001388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138c:	e000      	b.n	8001390 <ETH_SetMACConfig+0x60>
 800138e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	7f1b      	ldrb	r3, [r3, #28]
 8001396:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001398:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800139e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d102      	bne.n	80013b8 <ETH_SetMACConfig+0x88>
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	e000      	b.n	80013ba <ETH_SetMACConfig+0x8a>
 80013b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	7bdb      	ldrb	r3, [r3, #15]
 80013c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fe18 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001406:	4013      	ands	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001416:	2a00      	cmp	r2, #0
 8001418:	d101      	bne.n	800141e <ETH_SetMACConfig+0xee>
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	e000      	b.n	8001420 <ETH_SetMACConfig+0xf0>
 800141e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001420:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800142e:	2a01      	cmp	r2, #1
 8001430:	d101      	bne.n	8001436 <ETH_SetMACConfig+0x106>
 8001432:	2208      	movs	r2, #8
 8001434:	e000      	b.n	8001438 <ETH_SetMACConfig+0x108>
 8001436:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001438:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001440:	2a01      	cmp	r2, #1
 8001442:	d101      	bne.n	8001448 <ETH_SetMACConfig+0x118>
 8001444:	2204      	movs	r2, #4
 8001446:	e000      	b.n	800144a <ETH_SetMACConfig+0x11a>
 8001448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800144a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001452:	2a01      	cmp	r2, #1
 8001454:	d101      	bne.n	800145a <ETH_SetMACConfig+0x12a>
 8001456:	2202      	movs	r2, #2
 8001458:	e000      	b.n	800145c <ETH_SetMACConfig+0x12c>
 800145a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800145c:	4313      	orrs	r3, r2
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fdd3 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	ff20810f 	.word	0xff20810f

08001490 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <ETH_SetDMAConfig+0x110>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7b1b      	ldrb	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ETH_SetDMAConfig+0x2c>
 80014b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ba:	e000      	b.n	80014be <ETH_SetDMAConfig+0x2e>
 80014bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7b5b      	ldrb	r3, [r3, #13]
 80014c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	7f52      	ldrb	r2, [r2, #29]
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetDMAConfig+0x44>
 80014ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d2:	e000      	b.n	80014d6 <ETH_SetDMAConfig+0x46>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7b9b      	ldrb	r3, [r3, #14]
 80014dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7f1b      	ldrb	r3, [r3, #28]
 80014ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7f9b      	ldrb	r3, [r3, #30]
 80014f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001502:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001504:	4313      	orrs	r3, r2
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fd7a 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001544:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800154a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001550:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001558:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800155a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001562:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001568:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001576:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff fd4b 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	f8de3f23 	.word	0xf8de3f23

080015a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0a6      	sub	sp, #152	; 0x98
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015e0:	2300      	movs	r3, #0
 80015e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800160c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161c:	4619      	mov	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fe86 	bl	8001330 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001628:	2301      	movs	r3, #1
 800162a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001632:	2301      	movs	r3, #1
 8001634:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001650:	2301      	movs	r3, #1
 8001652:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001658:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800165a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff08 	bl	8001490 <ETH_SetDMAConfig>
}
 8001680:	bf00      	nop
 8001682:	3798      	adds	r7, #152	; 0x98
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3305      	adds	r3, #5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	3204      	adds	r2, #4
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <ETH_MACAddressConfig+0x68>)
 80016aa:	4413      	add	r3, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3303      	adds	r3, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3302      	adds	r3, #2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3301      	adds	r3, #1
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4313      	orrs	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <ETH_MACAddressConfig+0x6c>)
 80016da:	4413      	add	r3, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40028040 	.word	0x40028040
 80016f4:	40028044 	.word	0x40028044

080016f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e03e      	b.n	8001784 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68d9      	ldr	r1, [r3, #12]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	3206      	adds	r2, #6
 8001738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d80c      	bhi.n	8001768 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68d9      	ldr	r1, [r3, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e004      	b.n	8001772 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d9bd      	bls.n	8001706 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	611a      	str	r2, [r3, #16]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	e046      	b.n	8001846 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6919      	ldr	r1, [r3, #16]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	3212      	adds	r2, #18
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d80c      	bhi.n	8001836 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	e004      	b.n	8001840 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d9b5      	bls.n	80017b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	60da      	str	r2, [r3, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e177      	b.n	8001b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8166 	bne.w	8001b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80c0 	beq.w	8001b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d037      	beq.n	8001ac2 <HAL_GPIO_Init+0x23e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_GPIO_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_GPIO_Init+0x334>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x236>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_GPIO_Init+0x338>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x232>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_GPIO_Init+0x33c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x22e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x340>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x22a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_Init+0x344>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_GPIO_Init+0x348>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	; (8001bd0 <HAL_GPIO_Init+0x34c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x350>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	e012      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e010      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00e      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f ae84 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022400 	.word	0x40022400
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c10:	b08f      	sub	sp, #60	; 0x3c
 8001c12:	af0a      	add	r7, sp, #40	; 0x28
 8001c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e10f      	b.n	8001e40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fff4 	bl	8000c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 f9ad 	bl	8002fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	687e      	ldr	r6, [r7, #4]
 8001c6c:	466d      	mov	r5, sp
 8001c6e:	f106 0410 	add.w	r4, r6, #16
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c82:	1d33      	adds	r3, r6, #4
 8001c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f001 f938 	bl	8002efc <USB_CoreInit>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0d0      	b.n	8001e40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 f99b 	bl	8002fe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e04a      	b.n	8001d46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	333d      	adds	r3, #61	; 0x3d
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	b298      	uxth	r0, r3
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3344      	adds	r3, #68	; 0x44
 8001cec:	4602      	mov	r2, r0
 8001cee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3340      	adds	r3, #64	; 0x40
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3348      	adds	r3, #72	; 0x48
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	334c      	adds	r3, #76	; 0x4c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3354      	adds	r3, #84	; 0x54
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	3301      	adds	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3af      	bcc.n	8001cb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e044      	b.n	8001de0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3b5      	bcc.n	8001d56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	687e      	ldr	r6, [r7, #4]
 8001df2:	466d      	mov	r5, sp
 8001df4:	f106 0410 	add.w	r4, r6, #16
 8001df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e08:	1d33      	adds	r3, r6, #4
 8001e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f001 f933 	bl	8003078 <USB_DevInit>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00d      	b.n	8001e40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fafe 	bl	800343a <USB_DevDisconnect>

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e267      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d00c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b85      	ldr	r3, [pc, #532]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d112      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x108>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d157      	bne.n	8001f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e242      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0x74>
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a75      	ldr	r2, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6f      	ldr	r2, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6c      	ldr	r2, [pc, #432]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ee0:	4b69      	ldr	r3, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a68      	ldr	r2, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f882 	bl	8001008 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff f87e 	bl	8001008 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e207      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xc0>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f86e 	bl	8001008 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f86a 	bl	8001008 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1f3      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0xe8>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1c7      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x244>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f823 	bl	8001008 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f81f 	bl	8001008 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1a8      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4925      	ldr	r1, [pc, #148]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x244>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f802 	bl	8001008 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002008:	f7fe fffe 	bl	8001008 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e187      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d036      	beq.n	80020a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x248>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe ffe2 	bl	8001008 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7fe ffde 	bl	8001008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e167      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x200>
 8002066:	e01b      	b.n	80020a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_OscConfig+0x248>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe ffcb 	bl	8001008 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	e00e      	b.n	8002094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe ffc7 	bl	8001008 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d907      	bls.n	8002094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e150      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
 8002088:	40023800 	.word	0x40023800
 800208c:	42470000 	.word	0x42470000
 8002090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ea      	bne.n	8002076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8097 	beq.w	80021dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b7d      	ldr	r3, [pc, #500]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a7c      	ldr	r2, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b77      	ldr	r3, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a73      	ldr	r2, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff87 	bl	8001008 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe ff83 	bl	8001008 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e10c      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x2ea>
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x324>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x30c>
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a5e      	ldr	r2, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	4b5c      	ldr	r3, [pc, #368]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a5b      	ldr	r2, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0x324>
 8002154:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe ff48 	bl	8001008 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe ff44 	bl	8001008 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0cb      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0ee      	beq.n	800217c <HAL_RCC_OscConfig+0x334>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe ff32 	bl	8001008 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff2e 	bl	8001008 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0b5      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ee      	bne.n	80021a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a1 	beq.w	8002328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d05c      	beq.n	80022ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d141      	bne.n	800227e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe ff02 	bl	8001008 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fefe 	bl	8001008 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e087      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	491b      	ldr	r1, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fed7 	bl	8001008 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fed3 	bl	8001008 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e05c      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x416>
 800227c:	e054      	b.n	8002328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fec0 	bl	8001008 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe febc 	bl	8001008 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e045      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x444>
 80022aa:	e03d      	b.n	8002328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e038      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4ec>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d028      	beq.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d121      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d11a      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d111      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	3b01      	subs	r3, #1
 800230e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0cc      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d90c      	bls.n	8002374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d044      	beq.n	8002458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d119      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e067      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fdee 	bl	8001008 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fdea 	bl	8001008 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e04f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d20c      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fd4e 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023c00 	.word	0x40023c00
 80024f4:	40023800 	.word	0x40023800
 80024f8:	080056cc 	.word	0x080056cc
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002508:	b094      	sub	sp, #80	; 0x50
 800250a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002514:	2300      	movs	r3, #0
 8002516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251c:	4b79      	ldr	r3, [pc, #484]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d00d      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x40>
 8002528:	2b08      	cmp	r3, #8
 800252a:	f200 80e1 	bhi.w	80026f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x34>
 8002532:	2b04      	cmp	r3, #4
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x3a>
 8002536:	e0db      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_GetSysClockFreq+0x204>)
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800253c:	e0db      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253e:	4b73      	ldr	r3, [pc, #460]	; (800270c <HAL_RCC_GetSysClockFreq+0x208>)
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002542:	e0d8      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002544:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	2200      	movs	r2, #0
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
 8002564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	f04f 0000 	mov.w	r0, #0
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	0159      	lsls	r1, r3, #5
 8002584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002588:	0150      	lsls	r0, r2, #5
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4621      	mov	r1, r4
 8002590:	1a51      	subs	r1, r2, r1
 8002592:	6139      	str	r1, [r7, #16]
 8002594:	4629      	mov	r1, r5
 8002596:	eb63 0301 	sbc.w	r3, r3, r1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a8:	4659      	mov	r1, fp
 80025aa:	018b      	lsls	r3, r1, #6
 80025ac:	4651      	mov	r1, sl
 80025ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b2:	4651      	mov	r1, sl
 80025b4:	018a      	lsls	r2, r1, #6
 80025b6:	4651      	mov	r1, sl
 80025b8:	ebb2 0801 	subs.w	r8, r2, r1
 80025bc:	4659      	mov	r1, fp
 80025be:	eb63 0901 	sbc.w	r9, r3, r1
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d6:	4690      	mov	r8, r2
 80025d8:	4699      	mov	r9, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	eb18 0303 	adds.w	r3, r8, r3
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	462b      	mov	r3, r5
 80025e4:	eb49 0303 	adc.w	r3, r9, r3
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f6:	4629      	mov	r1, r5
 80025f8:	024b      	lsls	r3, r1, #9
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002600:	4621      	mov	r1, r4
 8002602:	024a      	lsls	r2, r1, #9
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 800260e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002614:	f7fd fe3c 	bl	8000290 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	e058      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	4618      	mov	r0, r3
 800262c:	4611      	mov	r1, r2
 800262e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002632:	623b      	str	r3, [r7, #32]
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	0159      	lsls	r1, r3, #5
 800264a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264e:	0150      	lsls	r0, r2, #5
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4641      	mov	r1, r8
 8002656:	ebb2 0a01 	subs.w	sl, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800266c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002674:	ebb2 040a 	subs.w	r4, r2, sl
 8002678:	eb63 050b 	sbc.w	r5, r3, fp
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	00eb      	lsls	r3, r5, #3
 8002686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800268a:	00e2      	lsls	r2, r4, #3
 800268c:	4614      	mov	r4, r2
 800268e:	461d      	mov	r5, r3
 8002690:	4643      	mov	r3, r8
 8002692:	18e3      	adds	r3, r4, r3
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	464b      	mov	r3, r9
 8002698:	eb45 0303 	adc.w	r3, r5, r3
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026aa:	4629      	mov	r1, r5
 80026ac:	028b      	lsls	r3, r1, #10
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b4:	4621      	mov	r1, r4
 80026b6:	028a      	lsls	r2, r1, #10
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	2200      	movs	r2, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	61fa      	str	r2, [r7, #28]
 80026c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c8:	f7fd fde2 	bl	8000290 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	3301      	adds	r3, #1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetSysClockFreq+0x204>)
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3750      	adds	r7, #80	; 0x50
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	00f42400 	.word	0x00f42400
 800270c:	007a1200 	.word	0x007a1200

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_GetHCLKFreq+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000

08002728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800272c:	f7ff fff0 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCC_GetPCLK1Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	080056dc 	.word	0x080056dc

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002754:	f7ff ffdc 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0b5b      	lsrs	r3, r3, #13
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4903      	ldr	r1, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	080056dc 	.word	0x080056dc

08002778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e03f      	b.n	800280a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe f9fa 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f929 	bl	8002a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b08a      	sub	sp, #40	; 0x28
 8002816:	af02      	add	r7, sp, #8
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	d17c      	bne.n	800292c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_UART_Transmit+0x2c>
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e075      	b.n	800292e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_UART_Transmit+0x3e>
 800284c:	2302      	movs	r3, #2
 800284e:	e06e      	b.n	800292e <HAL_UART_Transmit+0x11c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2221      	movs	r2, #33	; 0x21
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002866:	f7fe fbcf 	bl	8001008 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d108      	bne.n	8002894 <HAL_UART_Transmit+0x82>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e003      	b.n	800289c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028a4:	e02a      	b.n	80028fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f840 	bl	8002936 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e036      	b.n	800292e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3302      	adds	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	e007      	b.n	80028ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1cf      	bne.n	80028a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	2140      	movs	r1, #64	; 0x40
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f810 	bl	8002936 <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e006      	b.n	800292e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b090      	sub	sp, #64	; 0x40
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002946:	e050      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d04c      	beq.n	80029ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <UART_WaitOnFlagUntilTimeout+0x30>
 8002956:	f7fe fb57 	bl	8001008 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002962:	429a      	cmp	r2, r3
 8002964:	d241      	bcs.n	80029ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002986:	637a      	str	r2, [r7, #52]	; 0x34
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800298c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e5      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3314      	adds	r3, #20
 80029a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	613b      	str	r3, [r7, #16]
   return(result);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3314      	adds	r3, #20
 80029b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ba:	623a      	str	r2, [r7, #32]
 80029bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	69f9      	ldr	r1, [r7, #28]
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e5      	bne.n	800299a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e00f      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d09f      	beq.n	8002948 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3740      	adds	r7, #64	; 0x40
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b0c0      	sub	sp, #256	; 0x100
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	68d9      	ldr	r1, [r3, #12]
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	ea40 0301 	orr.w	r3, r0, r1
 8002a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a6c:	f021 010c 	bic.w	r1, r1, #12
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	6999      	ldr	r1, [r3, #24]
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	ea40 0301 	orr.w	r3, r0, r1
 8002a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d005      	beq.n	8002ab4 <UART_SetConfig+0xa0>
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b8d      	ldr	r3, [pc, #564]	; (8002ce4 <UART_SetConfig+0x2d0>)
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d104      	bne.n	8002abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab4:	f7ff fe4c 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8002ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002abc:	e003      	b.n	8002ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002abe:	f7ff fe33 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad0:	f040 810c 	bne.w	8002cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	1891      	adds	r1, r2, r2
 8002aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aee:	415b      	adcs	r3, r3
 8002af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002af6:	4621      	mov	r1, r4
 8002af8:	eb12 0801 	adds.w	r8, r2, r1
 8002afc:	4629      	mov	r1, r5
 8002afe:	eb43 0901 	adc.w	r9, r3, r1
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b16:	4690      	mov	r8, r2
 8002b18:	4699      	mov	r9, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	eb18 0303 	adds.w	r3, r8, r3
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b24:	462b      	mov	r3, r5
 8002b26:	eb49 0303 	adc.w	r3, r9, r3
 8002b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b42:	460b      	mov	r3, r1
 8002b44:	18db      	adds	r3, r3, r3
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
 8002b48:	4613      	mov	r3, r2
 8002b4a:	eb42 0303 	adc.w	r3, r2, r3
 8002b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b58:	f7fd fb9a 	bl	8000290 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002b62:	fba3 2302 	umull	r2, r3, r3, r2
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	011c      	lsls	r4, r3, #4
 8002b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	1891      	adds	r1, r2, r2
 8002b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b84:	415b      	adcs	r3, r3
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b92:	4649      	mov	r1, r9
 8002b94:	eb43 0b01 	adc.w	fp, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bac:	4692      	mov	sl, r2
 8002bae:	469b      	mov	fp, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	18db      	adds	r3, r3, r3
 8002bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bde:	4613      	mov	r3, r2
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
 8002be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bee:	f7fd fb4f 	bl	8000290 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2264      	movs	r2, #100	; 0x64
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	1acb      	subs	r3, r1, r3
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002c10:	fba3 2302 	umull	r2, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c1c:	441c      	add	r4, r3
 8002c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c40:	4641      	mov	r1, r8
 8002c42:	1851      	adds	r1, r2, r1
 8002c44:	6339      	str	r1, [r7, #48]	; 0x30
 8002c46:	4649      	mov	r1, r9
 8002c48:	414b      	adcs	r3, r1
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c58:	4659      	mov	r1, fp
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c62:	4651      	mov	r1, sl
 8002c64:	00ca      	lsls	r2, r1, #3
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c74:	464b      	mov	r3, r9
 8002c76:	460a      	mov	r2, r1
 8002c78:	eb42 0303 	adc.w	r3, r2, r3
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002caa:	f7fd faf1 	bl	8000290 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 0207 	and.w	r2, r3, #7
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4422      	add	r2, r4
 8002cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cdc:	e106      	b.n	8002eec <UART_SetConfig+0x4d8>
 8002cde:	bf00      	nop
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40011400 	.word	0x40011400
 8002ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	6239      	str	r1, [r7, #32]
 8002d06:	415b      	adcs	r3, r3
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d0e:	4641      	mov	r1, r8
 8002d10:	1854      	adds	r4, r2, r1
 8002d12:	4649      	mov	r1, r9
 8002d14:	eb43 0501 	adc.w	r5, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	00eb      	lsls	r3, r5, #3
 8002d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d26:	00e2      	lsls	r2, r4, #3
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	18e3      	adds	r3, r4, r3
 8002d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d34:	464b      	mov	r3, r9
 8002d36:	eb45 0303 	adc.w	r3, r5, r3
 8002d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	008b      	lsls	r3, r1, #2
 8002d5e:	4621      	mov	r1, r4
 8002d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d64:	4621      	mov	r1, r4
 8002d66:	008a      	lsls	r2, r1, #2
 8002d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d6c:	f7fd fa90 	bl	8000290 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002d76:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	011c      	lsls	r4, r3, #4
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	61b9      	str	r1, [r7, #24]
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	4641      	mov	r1, r8
 8002da2:	1851      	adds	r1, r2, r1
 8002da4:	6139      	str	r1, [r7, #16]
 8002da6:	4649      	mov	r1, r9
 8002da8:	414b      	adcs	r3, r1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db8:	4659      	mov	r1, fp
 8002dba:	00cb      	lsls	r3, r1, #3
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	00ca      	lsls	r2, r1, #3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4642      	mov	r2, r8
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd4:	464b      	mov	r3, r9
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	eb42 0303 	adc.w	r3, r2, r3
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002df8:	4649      	mov	r1, r9
 8002dfa:	008b      	lsls	r3, r1, #2
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e02:	4641      	mov	r1, r8
 8002e04:	008a      	lsls	r2, r1, #2
 8002e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e0a:	f7fd fa41 	bl	8000290 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002e16:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	1acb      	subs	r3, r1, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	441c      	add	r4, r3
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e3e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e54:	4641      	mov	r1, r8
 8002e56:	1851      	adds	r1, r2, r1
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	00cb      	lsls	r3, r1, #3
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e76:	4651      	mov	r1, sl
 8002e78:	00ca      	lsls	r2, r1, #3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4642      	mov	r2, r8
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e86:	464b      	mov	r3, r9
 8002e88:	460a      	mov	r2, r1
 8002e8a:	eb42 0303 	adc.w	r3, r2, r3
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	663b      	str	r3, [r7, #96]	; 0x60
 8002e9a:	667a      	str	r2, [r7, #100]	; 0x64
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	008b      	lsls	r3, r1, #2
 8002eac:	4641      	mov	r1, r8
 8002eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	008a      	lsls	r2, r1, #2
 8002eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002eba:	f7fd f9e9 	bl	8000290 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	2164      	movs	r1, #100	; 0x64
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	3332      	adds	r3, #50	; 0x32
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4422      	add	r2, r4
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002efc:	b084      	sub	sp, #16
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	f107 001c 	add.w	r0, r7, #28
 8002f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d122      	bne.n	8002f5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 faa2 	bl	8003498 <USB_CoreReset>
 8002f54:	4603      	mov	r3, r0
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e01a      	b.n	8002f90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fa96 	bl	8003498 <USB_CoreReset>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
 8002f82:	e005      	b.n	8002f90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10b      	bne.n	8002fae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f043 0206 	orr.w	r2, r3, #6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f043 0220 	orr.w	r2, r3, #32
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fba:	b004      	add	sp, #16
 8002fbc:	4770      	bx	lr

08002fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d115      	bne.n	800302e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800300e:	2001      	movs	r0, #1
 8003010:	f7fe f806 	bl	8001020 <HAL_Delay>
      ms++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa2e 	bl	800347c <USB_GetMode>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d01e      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b31      	cmp	r3, #49	; 0x31
 800302a:	d9f0      	bls.n	800300e <USB_SetCurrentMode+0x2e>
 800302c:	e01a      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd ffed 	bl	8001020 <HAL_Delay>
      ms++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa15 	bl	800347c <USB_GetMode>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b31      	cmp	r3, #49	; 0x31
 800305c:	d9f0      	bls.n	8003040 <USB_SetCurrentMode+0x60>
 800305e:	e001      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e005      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b32      	cmp	r3, #50	; 0x32
 8003068:	d101      	bne.n	800306e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003078:	b084      	sub	sp, #16
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e009      	b.n	80030ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3340      	adds	r3, #64	; 0x40
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3301      	adds	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0e      	cmp	r3, #14
 80030b0:	d9f2      	bls.n	8003098 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11c      	bne.n	80030f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
 80030f0:	e00b      	b.n	800310a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003110:	461a      	mov	r2, r3
 8003112:	2300      	movs	r3, #0
 8003114:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	4619      	mov	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	461a      	mov	r2, r3
 8003126:	680b      	ldr	r3, [r1, #0]
 8003128:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003136:	2100      	movs	r1, #0
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f965 	bl	8003408 <USB_SetDevSpeed>
 800313e:	e008      	b.n	8003152 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003140:	2101      	movs	r1, #1
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f960 	bl	8003408 <USB_SetDevSpeed>
 8003148:	e003      	b.n	8003152 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800314a:	2103      	movs	r1, #3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f95b 	bl	8003408 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003152:	2110      	movs	r1, #16
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8f3 	bl	8003340 <USB_FlushTxFifo>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f91f 	bl	80033a8 <USB_FlushRxFifo>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e043      	b.n	8003226 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b4:	d118      	bne.n	80031e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e013      	b.n	80031fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e008      	b.n	80031fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	461a      	mov	r2, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800321e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3301      	adds	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3b7      	bcc.n	800319e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e043      	b.n	80032bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324a:	d118      	bne.n	800327e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e013      	b.n	8003290 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e008      	b.n	8003290 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	2300      	movs	r3, #0
 800328e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	3301      	adds	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3b7      	bcc.n	8003234 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <USB_DevInit+0x2c4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003338:	b004      	add	sp, #16
 800333a:	4770      	bx	lr
 800333c:	803c3800 	.word	0x803c3800

08003340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <USB_FlushTxFifo+0x64>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e01b      	b.n	8003398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	daf2      	bge.n	800334e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <USB_FlushTxFifo+0x64>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e006      	b.n	8003398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d0f0      	beq.n	8003378 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	00030d40 	.word	0x00030d40

080033a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <USB_FlushRxFifo+0x5c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e018      	b.n	80033f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	daf2      	bge.n	80033b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2210      	movs	r2, #16
 80033d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <USB_FlushRxFifo+0x5c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e006      	b.n	80033f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d0f0      	beq.n	80033d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	00030d40 	.word	0x00030d40

08003408 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003454:	f023 0303 	bic.w	r3, r3, #3
 8003458:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <USB_CoreReset+0x64>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e01b      	b.n	80034ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	daf2      	bge.n	80034a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <USB_CoreReset+0x64>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d0f0      	beq.n	80034ce <USB_CoreReset+0x36>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	00030d40 	.word	0x00030d40

08003500 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003504:	f000 fa12 	bl	800392c <vTaskStartScheduler>
  
  return osOK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}

0800350e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f103 0208 	add.w	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f04f 32ff 	mov.w	r2, #4294967295
 8003526:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0208 	add.w	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f103 0208 	add.w	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d103      	bne.n	80035e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1e5a      	subs	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	; 0x38
 8003608:	af04      	add	r7, sp, #16
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCreateStatic+0x46>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	61fb      	str	r3, [r7, #28]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800364a:	2354      	movs	r3, #84	; 0x54
 800364c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b54      	cmp	r3, #84	; 0x54
 8003652:	d00a      	beq.n	800366a <xTaskCreateStatic+0x66>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61bb      	str	r3, [r7, #24]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800366a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01e      	beq.n	80036b0 <xTaskCreateStatic+0xac>
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800368a:	2300      	movs	r3, #0
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f850 	bl	8003748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036aa:	f000 f8d5 	bl	8003858 <prvAddNewTaskToReadyList>
 80036ae:	e001      	b.n	80036b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b4:	697b      	ldr	r3, [r7, #20]
	}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08c      	sub	sp, #48	; 0x30
 80036c2:	af04      	add	r7, sp, #16
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fe48 	bl	8004368 <pvPortMalloc>
 80036d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036e0:	2054      	movs	r0, #84	; 0x54
 80036e2:	f000 fe41 	bl	8004368 <pvPortMalloc>
 80036e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
 80036f4:	e005      	b.n	8003702 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f000 ff02 	bl	8004500 <vPortFree>
 80036fc:	e001      	b.n	8003702 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d017      	beq.n	8003738 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	2300      	movs	r3, #0
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f80e 	bl	8003748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372c:	69f8      	ldr	r0, [r7, #28]
 800372e:	f000 f893 	bl	8003858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e002      	b.n	800373e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800373e:	69bb      	ldr	r3, [r7, #24]
	}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003760:	3b01      	subs	r3, #1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <prvInitialiseNewTask+0x48>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	617b      	str	r3, [r7, #20]
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01f      	beq.n	80037d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	e012      	b.n	80037c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	7819      	ldrb	r1, [r3, #0]
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	3334      	adds	r3, #52	; 0x34
 80037ac:	460a      	mov	r2, r1
 80037ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d9e9      	bls.n	800379c <prvInitialiseNewTask+0x54>
 80037c8:	e000      	b.n	80037cc <prvInitialiseNewTask+0x84>
			{
				break;
 80037ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d4:	e003      	b.n	80037de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d901      	bls.n	80037e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e4:	2306      	movs	r3, #6
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	3304      	adds	r3, #4
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fea5 	bl	800354e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	3318      	adds	r3, #24
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fea0 	bl	800354e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	f1c3 0207 	rsb	r2, r3, #7
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	69b8      	ldr	r0, [r7, #24]
 8003838:	f000 fb8a 	bl	8003f50 <pxPortInitialiseStack>
 800383c:	4602      	mov	r2, r0
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384e:	bf00      	nop
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003860:	f000 fca0 	bl	80041a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <prvAddNewTaskToReadyList+0xb8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <prvAddNewTaskToReadyList+0xb8>)
 800386c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <prvAddNewTaskToReadyList+0xbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003876:	4a27      	ldr	r2, [pc, #156]	; (8003914 <prvAddNewTaskToReadyList+0xbc>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <prvAddNewTaskToReadyList+0xb8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d110      	bne.n	80038a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003884:	f000 fa88 	bl	8003d98 <prvInitialiseTaskLists>
 8003888:	e00d      	b.n	80038a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <prvAddNewTaskToReadyList+0xc0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <prvAddNewTaskToReadyList+0xbc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d802      	bhi.n	80038a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <prvAddNewTaskToReadyList+0xbc>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <prvAddNewTaskToReadyList+0xc4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <prvAddNewTaskToReadyList+0xc4>)
 80038ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <prvAddNewTaskToReadyList+0xc8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <prvAddNewTaskToReadyList+0xc8>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <prvAddNewTaskToReadyList+0xcc>)
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7ff fe45 	bl	8003568 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038de:	f000 fc91 	bl	8004204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <prvAddNewTaskToReadyList+0xc0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <prvAddNewTaskToReadyList+0xbc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <prvAddNewTaskToReadyList+0xd0>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000b68 	.word	0x20000b68
 8003914:	20000a68 	.word	0x20000a68
 8003918:	20000b74 	.word	0x20000b74
 800391c:	20000b84 	.word	0x20000b84
 8003920:	20000b70 	.word	0x20000b70
 8003924:	20000a6c 	.word	0x20000a6c
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800393a:	463a      	mov	r2, r7
 800393c:	1d39      	adds	r1, r7, #4
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fe22 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	9202      	str	r2, [sp, #8]
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	460a      	mov	r2, r1
 800395a:	491e      	ldr	r1, [pc, #120]	; (80039d4 <vTaskStartScheduler+0xa8>)
 800395c:	481e      	ldr	r0, [pc, #120]	; (80039d8 <vTaskStartScheduler+0xac>)
 800395e:	f7ff fe51 	bl	8003604 <xTaskCreateStatic>
 8003962:	4603      	mov	r3, r0
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <vTaskStartScheduler+0xb0>)
 8003966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003968:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <vTaskStartScheduler+0xb0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e001      	b.n	800397a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d116      	bne.n	80039ae <vTaskStartScheduler+0x82>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <vTaskStartScheduler+0xb4>)
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <vTaskStartScheduler+0xb8>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <vTaskStartScheduler+0xbc>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039a8:	f000 fb5a 	bl	8004060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039ac:	e00e      	b.n	80039cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d10a      	bne.n	80039cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60fb      	str	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <vTaskStartScheduler+0x9e>
}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	080056c4 	.word	0x080056c4
 80039d8:	08003d69 	.word	0x08003d69
 80039dc:	20000b8c 	.word	0x20000b8c
 80039e0:	20000b88 	.word	0x20000b88
 80039e4:	20000b74 	.word	0x20000b74
 80039e8:	20000b6c 	.word	0x20000b6c

080039ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000b90 	.word	0x20000b90

08003a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	603b      	str	r3, [r7, #0]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a34:	f000 fbb6 	bl	80041a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4a37      	ldr	r2, [pc, #220]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d161      	bne.n	8003b0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05d      	beq.n	8003b0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a52:	e02e      	b.n	8003ab2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <xTaskResumeAll+0x11c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fda5 	bl	80035b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fda0 	bl	80035b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	409a      	lsls	r2, r3
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <xTaskResumeAll+0x120>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <xTaskResumeAll+0x120>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <xTaskResumeAll+0x124>)
 8003a90:	441a      	add	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7ff fd65 	bl	8003568 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <xTaskResumeAll+0x128>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <xTaskResumeAll+0x11c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cc      	bne.n	8003a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ac0:	f000 fa08 	bl	8003ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <xTaskResumeAll+0x130>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ad0:	f000 f836 	bl	8003b40 <xTaskIncrementTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f1      	bne.n	8003ad0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <xTaskResumeAll+0x130>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <xTaskResumeAll+0x134>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b0e:	f000 fb79 	bl	8004204 <vPortExitCritical>

	return xAlreadyYielded;
 8003b12:	68bb      	ldr	r3, [r7, #8]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000b90 	.word	0x20000b90
 8003b20:	20000b68 	.word	0x20000b68
 8003b24:	20000b28 	.word	0x20000b28
 8003b28:	20000b70 	.word	0x20000b70
 8003b2c:	20000a6c 	.word	0x20000a6c
 8003b30:	20000a68 	.word	0x20000a68
 8003b34:	20000b7c 	.word	0x20000b7c
 8003b38:	20000b78 	.word	0x20000b78
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <xTaskIncrementTick+0x144>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 808e 	bne.w	8003c70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b54:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <xTaskIncrementTick+0x148>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <xTaskIncrementTick+0x148>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d120      	bne.n	8003baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b68:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	603b      	str	r3, [r7, #0]
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <xTaskIncrementTick+0x46>
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <xTaskIncrementTick+0x150>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <xTaskIncrementTick+0x150>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <xTaskIncrementTick+0x154>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <xTaskIncrementTick+0x154>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	f000 f995 	bl	8003ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003baa:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d348      	bcc.n	8003c46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	601a      	str	r2, [r3, #0]
					break;
 8003bc6:	e03e      	b.n	8003c46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d203      	bcs.n	8003be8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003be0:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003be6:	e02e      	b.n	8003c46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fcdf 	bl	80035b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fcd6 	bl	80035b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <xTaskIncrementTick+0x15c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <xTaskIncrementTick+0x15c>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <xTaskIncrementTick+0x160>)
 8003c24:	441a      	add	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff fc9b 	bl	8003568 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <xTaskIncrementTick+0x164>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b9      	bcc.n	8003bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c44:	e7b6      	b.n	8003bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <xTaskIncrementTick+0x164>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4914      	ldr	r1, [pc, #80]	; (8003ca0 <xTaskIncrementTick+0x160>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d901      	bls.n	8003c62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <xTaskIncrementTick+0x168>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e004      	b.n	8003c7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <xTaskIncrementTick+0x16c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <xTaskIncrementTick+0x16c>)
 8003c78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000b90 	.word	0x20000b90
 8003c88:	20000b6c 	.word	0x20000b6c
 8003c8c:	20000b20 	.word	0x20000b20
 8003c90:	20000b24 	.word	0x20000b24
 8003c94:	20000b80 	.word	0x20000b80
 8003c98:	20000b88 	.word	0x20000b88
 8003c9c:	20000b70 	.word	0x20000b70
 8003ca0:	20000a6c 	.word	0x20000a6c
 8003ca4:	20000a68 	.word	0x20000a68
 8003ca8:	20000b7c 	.word	0x20000b7c
 8003cac:	20000b78 	.word	0x20000b78

08003cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <vTaskSwitchContext+0xa4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <vTaskSwitchContext+0xa8>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cc4:	e03f      	b.n	8003d46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <vTaskSwitchContext+0xa8>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <vTaskSwitchContext+0xac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f1c3 031f 	rsb	r3, r3, #31
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	491f      	ldr	r1, [pc, #124]	; (8003d60 <vTaskSwitchContext+0xb0>)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <vTaskSwitchContext+0x5a>
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <vTaskSwitchContext+0xb0>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d104      	bne.n	8003d3c <vTaskSwitchContext+0x8c>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <vTaskSwitchContext+0xb4>)
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000b90 	.word	0x20000b90
 8003d58:	20000b7c 	.word	0x20000b7c
 8003d5c:	20000b70 	.word	0x20000b70
 8003d60:	20000a6c 	.word	0x20000a6c
 8003d64:	20000a68 	.word	0x20000a68

08003d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d70:	f000 f852 	bl	8003e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <prvIdleTask+0x28>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d9f9      	bls.n	8003d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <prvIdleTask+0x2c>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d8c:	e7f0      	b.n	8003d70 <prvIdleTask+0x8>
 8003d8e:	bf00      	nop
 8003d90:	20000a6c 	.word	0x20000a6c
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	e00c      	b.n	8003dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <prvInitialiseTaskLists+0x60>)
 8003db0:	4413      	add	r3, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fbab 	bl	800350e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d9ef      	bls.n	8003da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003dc6:	f7ff fba2 	bl	800350e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dca:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dcc:	f7ff fb9f 	bl	800350e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <prvInitialiseTaskLists+0x6c>)
 8003dd2:	f7ff fb9c 	bl	800350e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dd6:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x70>)
 8003dd8:	f7ff fb99 	bl	800350e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <prvInitialiseTaskLists+0x74>)
 8003dde:	f7ff fb96 	bl	800350e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x78>)
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <prvInitialiseTaskLists+0x7c>)
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dec:	601a      	str	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000a6c 	.word	0x20000a6c
 8003dfc:	20000af8 	.word	0x20000af8
 8003e00:	20000b0c 	.word	0x20000b0c
 8003e04:	20000b28 	.word	0x20000b28
 8003e08:	20000b3c 	.word	0x20000b3c
 8003e0c:	20000b54 	.word	0x20000b54
 8003e10:	20000b20 	.word	0x20000b20
 8003e14:	20000b24 	.word	0x20000b24

08003e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e1e:	e019      	b.n	8003e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e20:	f000 f9c0 	bl	80041a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <prvCheckTasksWaitingTermination+0x50>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fbbd 	bl	80035b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4a:	f000 f9db 	bl	8004204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f810 	bl	8003e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e1      	bne.n	8003e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000b3c 	.word	0x20000b3c
 8003e6c:	20000b68 	.word	0x20000b68
 8003e70:	20000b50 	.word	0x20000b50

08003e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb38 	bl	8004500 <vPortFree>
				vPortFree( pxTCB );
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb35 	bl	8004500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e96:	e018      	b.n	8003eca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d103      	bne.n	8003eaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fb2c 	bl	8004500 <vPortFree>
	}
 8003ea8:	e00f      	b.n	8003eca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00a      	beq.n	8003eca <prvDeleteTCB+0x56>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <prvDeleteTCB+0x54>
	}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eec:	e008      	b.n	8003f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	20000b20 	.word	0x20000b20
 8003f10:	20000b88 	.word	0x20000b88

08003f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <xTaskGetSchedulerState+0x34>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f22:	2301      	movs	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	e008      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <xTaskGetSchedulerState+0x38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f30:	2302      	movs	r3, #2
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e001      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f3a:	687b      	ldr	r3, [r7, #4]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000b74 	.word	0x20000b74
 8003f4c:	20000b90 	.word	0x20000b90

08003f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b04      	subs	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f80:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <pxPortInitialiseStack+0x64>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b14      	subs	r3, #20
 8003f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b04      	subs	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f06f 0202 	mvn.w	r2, #2
 8003f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b20      	subs	r3, #32
 8003fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	08003fb9 	.word	0x08003fb9

08003fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <prvTaskExitError+0x54>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d00a      	beq.n	8003fe2 <prvTaskExitError+0x2a>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <prvTaskExitError+0x28>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
}
 8003ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ff6:	bf00      	nop
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0fc      	beq.n	8003ff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c

08004010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <pxCurrentTCBConst2>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401a:	f380 8809 	msr	PSP, r0
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	4770      	bx	lr
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst2>:
 8004030:	20000a68 	.word	0x20000a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004038:	4808      	ldr	r0, [pc, #32]	; (800405c <prvPortStartFirstTask+0x24>)
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f380 8808 	msr	MSP, r0
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8814 	msr	CONTROL, r0
 800404a:	b662      	cpsie	i
 800404c:	b661      	cpsie	f
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	df00      	svc	0
 8004058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800405a:	bf00      	nop
 800405c:	e000ed08 	.word	0xe000ed08

08004060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <xPortStartScheduler+0x120>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a46      	ldr	r2, [pc, #280]	; (8004184 <xPortStartScheduler+0x124>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10a      	bne.n	8004086 <xPortStartScheduler+0x26>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <xPortStartScheduler+0x120>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <xPortStartScheduler+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10a      	bne.n	80040a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040a6:	4b39      	ldr	r3, [pc, #228]	; (800418c <xPortStartScheduler+0x12c>)
 80040a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	22ff      	movs	r2, #255	; 0xff
 80040b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <xPortStartScheduler+0x130>)
 80040cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <xPortStartScheduler+0x134>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040d4:	e009      	b.n	80040ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <xPortStartScheduler+0x134>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <xPortStartScheduler+0x134>)
 80040de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d0ef      	beq.n	80040d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <xPortStartScheduler+0x134>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1c3 0307 	rsb	r3, r3, #7
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d00a      	beq.n	8004118 <xPortStartScheduler+0xb8>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60bb      	str	r3, [r7, #8]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <xPortStartScheduler+0x134>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <xPortStartScheduler+0x134>)
 8004120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <xPortStartScheduler+0x134>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <xPortStartScheduler+0x134>)
 800412c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <xPortStartScheduler+0x138>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <xPortStartScheduler+0x138>)
 800413c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <xPortStartScheduler+0x138>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <xPortStartScheduler+0x138>)
 8004148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800414c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800414e:	f000 f8dd 	bl	800430c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <xPortStartScheduler+0x13c>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004158:	f000 f8fc 	bl	8004354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <xPortStartScheduler+0x140>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <xPortStartScheduler+0x140>)
 8004162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004168:	f7ff ff66 	bl	8004038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800416c:	f7ff fda0 	bl	8003cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004170:	f7ff ff22 	bl	8003fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00
 8004184:	410fc271 	.word	0x410fc271
 8004188:	410fc270 	.word	0x410fc270
 800418c:	e000e400 	.word	0xe000e400
 8004190:	20000b94 	.word	0x20000b94
 8004194:	20000b98 	.word	0x20000b98
 8004198:	e000ed20 	.word	0xe000ed20
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	e000ef34 	.word	0xe000ef34

080041a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	607b      	str	r3, [r7, #4]
}
 80041bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <vPortEnterCritical+0x58>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <vPortEnterCritical+0x58>)
 80041c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <vPortEnterCritical+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10f      	bne.n	80041f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <vPortEnterCritical+0x5c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	603b      	str	r3, [r7, #0]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <vPortEnterCritical+0x4a>
	}
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <vPortExitCritical+0x50>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <vPortExitCritical+0x24>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	607b      	str	r3, [r7, #4]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <vPortExitCritical+0x50>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <vPortExitCritical+0x50>)
 8004230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <vPortExitCritical+0x42>
 800423a:	2300      	movs	r3, #0
 800423c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c
	...

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	f01e 0f10 	tst.w	lr, #16
 8004270:	bf08      	it	eq
 8004272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	6010      	str	r0, [r2, #0]
 800427c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004284:	f380 8811 	msr	BASEPRI, r0
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f7ff fd0e 	bl	8003cb0 <vTaskSwitchContext>
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f380 8811 	msr	BASEPRI, r0
 800429c:	bc09      	pop	{r0, r3}
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a6:	f01e 0f10 	tst.w	lr, #16
 80042aa:	bf08      	it	eq
 80042ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042b0:	f380 8809 	msr	PSP, r0
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst>:
 80042c0:	20000a68 	.word	0x20000a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042e2:	f7ff fc2d 	bl	8003b40 <xTaskIncrementTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <xPortSysTickHandler+0x40>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
}
 80042fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <vPortSetupTimerInterrupt+0x38>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <vPortSetupTimerInterrupt+0x3c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <vPortSetupTimerInterrupt+0x40>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <vPortSetupTimerInterrupt+0x44>)
 800432a:	3b01      	subs	r3, #1
 800432c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010
 8004344:	e000e018 	.word	0xe000e018
 8004348:	20000000 	.word	0x20000000
 800434c:	10624dd3 	.word	0x10624dd3
 8004350:	e000e014 	.word	0xe000e014

08004354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004364 <vPortEnableVFP+0x10>
 8004358:	6801      	ldr	r1, [r0, #0]
 800435a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800435e:	6001      	str	r1, [r0, #0]
 8004360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004362:	bf00      	nop
 8004364:	e000ed88 	.word	0xe000ed88

08004368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004374:	f7ff fb3a 	bl	80039ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004378:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <pvPortMalloc+0x180>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004380:	f000 f920 	bl	80045c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004384:	4b59      	ldr	r3, [pc, #356]	; (80044ec <pvPortMalloc+0x184>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 8093 	bne.w	80044b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01d      	beq.n	80043d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004398:	2208      	movs	r2, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d014      	beq.n	80043d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	3308      	adds	r3, #8
 80043b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <pvPortMalloc+0x6c>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	617b      	str	r3, [r7, #20]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d06e      	beq.n	80044b8 <pvPortMalloc+0x150>
 80043da:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <pvPortMalloc+0x188>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d869      	bhi.n	80044b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <pvPortMalloc+0x18c>)
 80043e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043e8:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <pvPortMalloc+0x18c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ee:	e004      	b.n	80043fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <pvPortMalloc+0xa4>
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f1      	bne.n	80043f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <pvPortMalloc+0x180>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	429a      	cmp	r2, r3
 8004414:	d050      	beq.n	80044b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2208      	movs	r2, #8
 800441c:	4413      	add	r3, r2
 800441e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	2308      	movs	r3, #8
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	429a      	cmp	r2, r3
 8004436:	d91f      	bls.n	8004478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <pvPortMalloc+0xf8>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	613b      	str	r3, [r7, #16]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad2      	subs	r2, r2, r3
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004472:	69b8      	ldr	r0, [r7, #24]
 8004474:	f000 f908 	bl	8004688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <pvPortMalloc+0x188>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <pvPortMalloc+0x188>)
 8004484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <pvPortMalloc+0x188>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <pvPortMalloc+0x190>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d203      	bcs.n	800449a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <pvPortMalloc+0x188>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <pvPortMalloc+0x190>)
 8004498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <pvPortMalloc+0x184>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <pvPortMalloc+0x194>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <pvPortMalloc+0x194>)
 80044b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044b8:	f7ff faa6 	bl	8003a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <pvPortMalloc+0x174>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <pvPortMalloc+0x172>
	return pvReturn;
 80044dc:	69fb      	ldr	r3, [r7, #28]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200047a4 	.word	0x200047a4
 80044ec:	200047b8 	.word	0x200047b8
 80044f0:	200047a8 	.word	0x200047a8
 80044f4:	2000479c 	.word	0x2000479c
 80044f8:	200047ac 	.word	0x200047ac
 80044fc:	200047b0 	.word	0x200047b0

08004500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d04d      	beq.n	80045ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004512:	2308      	movs	r3, #8
 8004514:	425b      	negs	r3, r3
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <vPortFree+0xb8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <vPortFree+0x44>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60fb      	str	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <vPortFree+0x62>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <vPortFree+0xb8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01e      	beq.n	80045ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11a      	bne.n	80045ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <vPortFree+0xb8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004588:	f7ff fa30 	bl	80039ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <vPortFree+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4413      	add	r3, r2
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <vPortFree+0xbc>)
 8004598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800459a:	6938      	ldr	r0, [r7, #16]
 800459c:	f000 f874 	bl	8004688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <vPortFree+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <vPortFree+0xc0>)
 80045a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045aa:	f7ff fa2d 	bl	8003a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200047b8 	.word	0x200047b8
 80045bc:	200047a8 	.word	0x200047a8
 80045c0:	200047b4 	.word	0x200047b4

080045c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80045ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <prvHeapInit+0xac>)
 80045d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3307      	adds	r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0307 	bic.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <prvHeapInit+0xac>)
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <prvHeapInit+0xb0>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <prvHeapInit+0xb0>)
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4413      	add	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004610:	2208      	movs	r2, #8
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <prvHeapInit+0xb4>)
 8004624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <prvHeapInit+0xb4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <prvHeapInit+0xb4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <prvHeapInit+0xb4>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <prvHeapInit+0xb8>)
 8004652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <prvHeapInit+0xbc>)
 800465a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <prvHeapInit+0xc0>)
 800465e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20000b9c 	.word	0x20000b9c
 8004674:	2000479c 	.word	0x2000479c
 8004678:	200047a4 	.word	0x200047a4
 800467c:	200047ac 	.word	0x200047ac
 8004680:	200047a8 	.word	0x200047a8
 8004684:	200047b8 	.word	0x200047b8

08004688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <prvInsertBlockIntoFreeList+0xac>)
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e002      	b.n	800469c <prvInsertBlockIntoFreeList+0x14>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d8f7      	bhi.n	8004696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d108      	bne.n	80046ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d118      	bne.n	8004710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <prvInsertBlockIntoFreeList+0xb0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d00d      	beq.n	8004706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	441a      	add	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e008      	b.n	8004718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <prvInsertBlockIntoFreeList+0xb0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e003      	b.n	8004718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d002      	beq.n	8004726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	2000479c 	.word	0x2000479c
 8004738:	200047a4 	.word	0x200047a4

0800473c <std>:
 800473c:	2300      	movs	r3, #0
 800473e:	b510      	push	{r4, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	e9c0 3300 	strd	r3, r3, [r0]
 8004746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800474a:	6083      	str	r3, [r0, #8]
 800474c:	8181      	strh	r1, [r0, #12]
 800474e:	6643      	str	r3, [r0, #100]	; 0x64
 8004750:	81c2      	strh	r2, [r0, #14]
 8004752:	6183      	str	r3, [r0, #24]
 8004754:	4619      	mov	r1, r3
 8004756:	2208      	movs	r2, #8
 8004758:	305c      	adds	r0, #92	; 0x5c
 800475a:	f000 f9f7 	bl	8004b4c <memset>
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <std+0x58>)
 8004760:	6263      	str	r3, [r4, #36]	; 0x24
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <std+0x5c>)
 8004764:	62a3      	str	r3, [r4, #40]	; 0x28
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <std+0x60>)
 8004768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <std+0x64>)
 800476c:	6323      	str	r3, [r4, #48]	; 0x30
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <std+0x68>)
 8004770:	6224      	str	r4, [r4, #32]
 8004772:	429c      	cmp	r4, r3
 8004774:	d006      	beq.n	8004784 <std+0x48>
 8004776:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800477a:	4294      	cmp	r4, r2
 800477c:	d002      	beq.n	8004784 <std+0x48>
 800477e:	33d0      	adds	r3, #208	; 0xd0
 8004780:	429c      	cmp	r4, r3
 8004782:	d105      	bne.n	8004790 <std+0x54>
 8004784:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	f000 ba56 	b.w	8004c3c <__retarget_lock_init_recursive>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	0800499d 	.word	0x0800499d
 8004798:	080049bf 	.word	0x080049bf
 800479c:	080049f7 	.word	0x080049f7
 80047a0:	08004a1b 	.word	0x08004a1b
 80047a4:	200047bc 	.word	0x200047bc

080047a8 <stdio_exit_handler>:
 80047a8:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <stdio_exit_handler+0xc>)
 80047aa:	4903      	ldr	r1, [pc, #12]	; (80047b8 <stdio_exit_handler+0x10>)
 80047ac:	4803      	ldr	r0, [pc, #12]	; (80047bc <stdio_exit_handler+0x14>)
 80047ae:	f000 b869 	b.w	8004884 <_fwalk_sglue>
 80047b2:	bf00      	nop
 80047b4:	20000010 	.word	0x20000010
 80047b8:	080054e9 	.word	0x080054e9
 80047bc:	2000001c 	.word	0x2000001c

080047c0 <cleanup_stdio>:
 80047c0:	6841      	ldr	r1, [r0, #4]
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <cleanup_stdio+0x34>)
 80047c4:	4299      	cmp	r1, r3
 80047c6:	b510      	push	{r4, lr}
 80047c8:	4604      	mov	r4, r0
 80047ca:	d001      	beq.n	80047d0 <cleanup_stdio+0x10>
 80047cc:	f000 fe8c 	bl	80054e8 <_fflush_r>
 80047d0:	68a1      	ldr	r1, [r4, #8]
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <cleanup_stdio+0x38>)
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <cleanup_stdio+0x1e>
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fe85 	bl	80054e8 <_fflush_r>
 80047de:	68e1      	ldr	r1, [r4, #12]
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <cleanup_stdio+0x3c>)
 80047e2:	4299      	cmp	r1, r3
 80047e4:	d004      	beq.n	80047f0 <cleanup_stdio+0x30>
 80047e6:	4620      	mov	r0, r4
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	f000 be7c 	b.w	80054e8 <_fflush_r>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop
 80047f4:	200047bc 	.word	0x200047bc
 80047f8:	20004824 	.word	0x20004824
 80047fc:	2000488c 	.word	0x2000488c

08004800 <global_stdio_init.part.0>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <global_stdio_init.part.0+0x30>)
 8004804:	4c0b      	ldr	r4, [pc, #44]	; (8004834 <global_stdio_init.part.0+0x34>)
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <global_stdio_init.part.0+0x38>)
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	4620      	mov	r0, r4
 800480c:	2200      	movs	r2, #0
 800480e:	2104      	movs	r1, #4
 8004810:	f7ff ff94 	bl	800473c <std>
 8004814:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004818:	2201      	movs	r2, #1
 800481a:	2109      	movs	r1, #9
 800481c:	f7ff ff8e 	bl	800473c <std>
 8004820:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004824:	2202      	movs	r2, #2
 8004826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800482a:	2112      	movs	r1, #18
 800482c:	f7ff bf86 	b.w	800473c <std>
 8004830:	200048f4 	.word	0x200048f4
 8004834:	200047bc 	.word	0x200047bc
 8004838:	080047a9 	.word	0x080047a9

0800483c <__sfp_lock_acquire>:
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <__sfp_lock_acquire+0x8>)
 800483e:	f000 b9fe 	b.w	8004c3e <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	200048fd 	.word	0x200048fd

08004848 <__sfp_lock_release>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__sfp_lock_release+0x8>)
 800484a:	f000 b9f9 	b.w	8004c40 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	200048fd 	.word	0x200048fd

08004854 <__sinit>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4604      	mov	r4, r0
 8004858:	f7ff fff0 	bl	800483c <__sfp_lock_acquire>
 800485c:	6a23      	ldr	r3, [r4, #32]
 800485e:	b11b      	cbz	r3, 8004868 <__sinit+0x14>
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f7ff bff0 	b.w	8004848 <__sfp_lock_release>
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <__sinit+0x28>)
 800486a:	6223      	str	r3, [r4, #32]
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__sinit+0x2c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f5      	bne.n	8004860 <__sinit+0xc>
 8004874:	f7ff ffc4 	bl	8004800 <global_stdio_init.part.0>
 8004878:	e7f2      	b.n	8004860 <__sinit+0xc>
 800487a:	bf00      	nop
 800487c:	080047c1 	.word	0x080047c1
 8004880:	200048f4 	.word	0x200048f4

08004884 <_fwalk_sglue>:
 8004884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004888:	4607      	mov	r7, r0
 800488a:	4688      	mov	r8, r1
 800488c:	4614      	mov	r4, r2
 800488e:	2600      	movs	r6, #0
 8004890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004894:	f1b9 0901 	subs.w	r9, r9, #1
 8004898:	d505      	bpl.n	80048a6 <_fwalk_sglue+0x22>
 800489a:	6824      	ldr	r4, [r4, #0]
 800489c:	2c00      	cmp	r4, #0
 800489e:	d1f7      	bne.n	8004890 <_fwalk_sglue+0xc>
 80048a0:	4630      	mov	r0, r6
 80048a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d907      	bls.n	80048bc <_fwalk_sglue+0x38>
 80048ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048b0:	3301      	adds	r3, #1
 80048b2:	d003      	beq.n	80048bc <_fwalk_sglue+0x38>
 80048b4:	4629      	mov	r1, r5
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c0      	blx	r8
 80048ba:	4306      	orrs	r6, r0
 80048bc:	3568      	adds	r5, #104	; 0x68
 80048be:	e7e9      	b.n	8004894 <_fwalk_sglue+0x10>

080048c0 <iprintf>:
 80048c0:	b40f      	push	{r0, r1, r2, r3}
 80048c2:	b507      	push	{r0, r1, r2, lr}
 80048c4:	4906      	ldr	r1, [pc, #24]	; (80048e0 <iprintf+0x20>)
 80048c6:	ab04      	add	r3, sp, #16
 80048c8:	6808      	ldr	r0, [r1, #0]
 80048ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ce:	6881      	ldr	r1, [r0, #8]
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f000 fad9 	bl	8004e88 <_vfiprintf_r>
 80048d6:	b003      	add	sp, #12
 80048d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048dc:	b004      	add	sp, #16
 80048de:	4770      	bx	lr
 80048e0:	20000068 	.word	0x20000068

080048e4 <_puts_r>:
 80048e4:	6a03      	ldr	r3, [r0, #32]
 80048e6:	b570      	push	{r4, r5, r6, lr}
 80048e8:	6884      	ldr	r4, [r0, #8]
 80048ea:	4605      	mov	r5, r0
 80048ec:	460e      	mov	r6, r1
 80048ee:	b90b      	cbnz	r3, 80048f4 <_puts_r+0x10>
 80048f0:	f7ff ffb0 	bl	8004854 <__sinit>
 80048f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f6:	07db      	lsls	r3, r3, #31
 80048f8:	d405      	bmi.n	8004906 <_puts_r+0x22>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	0598      	lsls	r0, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_puts_r+0x22>
 8004900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004902:	f000 f99c 	bl	8004c3e <__retarget_lock_acquire_recursive>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	0719      	lsls	r1, r3, #28
 800490a:	d513      	bpl.n	8004934 <_puts_r+0x50>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	b18b      	cbz	r3, 8004934 <_puts_r+0x50>
 8004910:	3e01      	subs	r6, #1
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004918:	3b01      	subs	r3, #1
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	b9e9      	cbnz	r1, 800495a <_puts_r+0x76>
 800491e:	2b00      	cmp	r3, #0
 8004920:	da2e      	bge.n	8004980 <_puts_r+0x9c>
 8004922:	4622      	mov	r2, r4
 8004924:	210a      	movs	r1, #10
 8004926:	4628      	mov	r0, r5
 8004928:	f000 f87b 	bl	8004a22 <__swbuf_r>
 800492c:	3001      	adds	r0, #1
 800492e:	d007      	beq.n	8004940 <_puts_r+0x5c>
 8004930:	250a      	movs	r5, #10
 8004932:	e007      	b.n	8004944 <_puts_r+0x60>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f8b0 	bl	8004a9c <__swsetup_r>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0e7      	beq.n	8004910 <_puts_r+0x2c>
 8004940:	f04f 35ff 	mov.w	r5, #4294967295
 8004944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004946:	07da      	lsls	r2, r3, #31
 8004948:	d405      	bmi.n	8004956 <_puts_r+0x72>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	059b      	lsls	r3, r3, #22
 800494e:	d402      	bmi.n	8004956 <_puts_r+0x72>
 8004950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004952:	f000 f975 	bl	8004c40 <__retarget_lock_release_recursive>
 8004956:	4628      	mov	r0, r5
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	2b00      	cmp	r3, #0
 800495c:	da04      	bge.n	8004968 <_puts_r+0x84>
 800495e:	69a2      	ldr	r2, [r4, #24]
 8004960:	429a      	cmp	r2, r3
 8004962:	dc06      	bgt.n	8004972 <_puts_r+0x8e>
 8004964:	290a      	cmp	r1, #10
 8004966:	d004      	beq.n	8004972 <_puts_r+0x8e>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	e7cf      	b.n	8004912 <_puts_r+0x2e>
 8004972:	4622      	mov	r2, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f854 	bl	8004a22 <__swbuf_r>
 800497a:	3001      	adds	r0, #1
 800497c:	d1c9      	bne.n	8004912 <_puts_r+0x2e>
 800497e:	e7df      	b.n	8004940 <_puts_r+0x5c>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	250a      	movs	r5, #10
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	701d      	strb	r5, [r3, #0]
 800498a:	e7db      	b.n	8004944 <_puts_r+0x60>

0800498c <puts>:
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <puts+0xc>)
 800498e:	4601      	mov	r1, r0
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	f7ff bfa7 	b.w	80048e4 <_puts_r>
 8004996:	bf00      	nop
 8004998:	20000068 	.word	0x20000068

0800499c <__sread>:
 800499c:	b510      	push	{r4, lr}
 800499e:	460c      	mov	r4, r1
 80049a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a4:	f000 f8fc 	bl	8004ba0 <_read_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	bfab      	itete	ge
 80049ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ae:	89a3      	ldrhlt	r3, [r4, #12]
 80049b0:	181b      	addge	r3, r3, r0
 80049b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049b6:	bfac      	ite	ge
 80049b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049ba:	81a3      	strhlt	r3, [r4, #12]
 80049bc:	bd10      	pop	{r4, pc}

080049be <__swrite>:
 80049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	461f      	mov	r7, r3
 80049c4:	898b      	ldrh	r3, [r1, #12]
 80049c6:	05db      	lsls	r3, r3, #23
 80049c8:	4605      	mov	r5, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	4616      	mov	r6, r2
 80049ce:	d505      	bpl.n	80049dc <__swrite+0x1e>
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	2302      	movs	r3, #2
 80049d6:	2200      	movs	r2, #0
 80049d8:	f000 f8d0 	bl	8004b7c <_lseek_r>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	4632      	mov	r2, r6
 80049ea:	463b      	mov	r3, r7
 80049ec:	4628      	mov	r0, r5
 80049ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	f000 b8e7 	b.w	8004bc4 <_write_r>

080049f6 <__sseek>:
 80049f6:	b510      	push	{r4, lr}
 80049f8:	460c      	mov	r4, r1
 80049fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fe:	f000 f8bd 	bl	8004b7c <_lseek_r>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	bf15      	itete	ne
 8004a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a12:	81a3      	strheq	r3, [r4, #12]
 8004a14:	bf18      	it	ne
 8004a16:	81a3      	strhne	r3, [r4, #12]
 8004a18:	bd10      	pop	{r4, pc}

08004a1a <__sclose>:
 8004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1e:	f000 b89d 	b.w	8004b5c <_close_r>

08004a22 <__swbuf_r>:
 8004a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a24:	460e      	mov	r6, r1
 8004a26:	4614      	mov	r4, r2
 8004a28:	4605      	mov	r5, r0
 8004a2a:	b118      	cbz	r0, 8004a34 <__swbuf_r+0x12>
 8004a2c:	6a03      	ldr	r3, [r0, #32]
 8004a2e:	b90b      	cbnz	r3, 8004a34 <__swbuf_r+0x12>
 8004a30:	f7ff ff10 	bl	8004854 <__sinit>
 8004a34:	69a3      	ldr	r3, [r4, #24]
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	071a      	lsls	r2, r3, #28
 8004a3c:	d525      	bpl.n	8004a8a <__swbuf_r+0x68>
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	b31b      	cbz	r3, 8004a8a <__swbuf_r+0x68>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	6922      	ldr	r2, [r4, #16]
 8004a46:	1a98      	subs	r0, r3, r2
 8004a48:	6963      	ldr	r3, [r4, #20]
 8004a4a:	b2f6      	uxtb	r6, r6
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	4637      	mov	r7, r6
 8004a50:	dc04      	bgt.n	8004a5c <__swbuf_r+0x3a>
 8004a52:	4621      	mov	r1, r4
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 fd47 	bl	80054e8 <_fflush_r>
 8004a5a:	b9e0      	cbnz	r0, 8004a96 <__swbuf_r+0x74>
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	6022      	str	r2, [r4, #0]
 8004a68:	701e      	strb	r6, [r3, #0]
 8004a6a:	6962      	ldr	r2, [r4, #20]
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d004      	beq.n	8004a7c <__swbuf_r+0x5a>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	07db      	lsls	r3, r3, #31
 8004a76:	d506      	bpl.n	8004a86 <__swbuf_r+0x64>
 8004a78:	2e0a      	cmp	r6, #10
 8004a7a:	d104      	bne.n	8004a86 <__swbuf_r+0x64>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 fd32 	bl	80054e8 <_fflush_r>
 8004a84:	b938      	cbnz	r0, 8004a96 <__swbuf_r+0x74>
 8004a86:	4638      	mov	r0, r7
 8004a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f805 	bl	8004a9c <__swsetup_r>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0d5      	beq.n	8004a42 <__swbuf_r+0x20>
 8004a96:	f04f 37ff 	mov.w	r7, #4294967295
 8004a9a:	e7f4      	b.n	8004a86 <__swbuf_r+0x64>

08004a9c <__swsetup_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <__swsetup_r+0xac>)
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b118      	cbz	r0, 8004ab0 <__swsetup_r+0x14>
 8004aa8:	6a03      	ldr	r3, [r0, #32]
 8004aaa:	b90b      	cbnz	r3, 8004ab0 <__swsetup_r+0x14>
 8004aac:	f7ff fed2 	bl	8004854 <__sinit>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab6:	0718      	lsls	r0, r3, #28
 8004ab8:	d422      	bmi.n	8004b00 <__swsetup_r+0x64>
 8004aba:	06d9      	lsls	r1, r3, #27
 8004abc:	d407      	bmi.n	8004ace <__swsetup_r+0x32>
 8004abe:	2309      	movs	r3, #9
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	e034      	b.n	8004b38 <__swsetup_r+0x9c>
 8004ace:	0758      	lsls	r0, r3, #29
 8004ad0:	d512      	bpl.n	8004af8 <__swsetup_r+0x5c>
 8004ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad4:	b141      	cbz	r1, 8004ae8 <__swsetup_r+0x4c>
 8004ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ada:	4299      	cmp	r1, r3
 8004adc:	d002      	beq.n	8004ae4 <__swsetup_r+0x48>
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 f8b0 	bl	8004c44 <_free_r>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	2300      	movs	r3, #0
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0308 	orr.w	r3, r3, #8
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	b94b      	cbnz	r3, 8004b18 <__swsetup_r+0x7c>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0e:	d003      	beq.n	8004b18 <__swsetup_r+0x7c>
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 fd36 	bl	8005584 <__smakebuf_r>
 8004b18:	89a0      	ldrh	r0, [r4, #12]
 8004b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b1e:	f010 0301 	ands.w	r3, r0, #1
 8004b22:	d00a      	beq.n	8004b3a <__swsetup_r+0x9e>
 8004b24:	2300      	movs	r3, #0
 8004b26:	60a3      	str	r3, [r4, #8]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	425b      	negs	r3, r3
 8004b2c:	61a3      	str	r3, [r4, #24]
 8004b2e:	6923      	ldr	r3, [r4, #16]
 8004b30:	b943      	cbnz	r3, 8004b44 <__swsetup_r+0xa8>
 8004b32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b36:	d1c4      	bne.n	8004ac2 <__swsetup_r+0x26>
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	0781      	lsls	r1, r0, #30
 8004b3c:	bf58      	it	pl
 8004b3e:	6963      	ldrpl	r3, [r4, #20]
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	e7f4      	b.n	8004b2e <__swsetup_r+0x92>
 8004b44:	2000      	movs	r0, #0
 8004b46:	e7f7      	b.n	8004b38 <__swsetup_r+0x9c>
 8004b48:	20000068 	.word	0x20000068

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <_close_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_close_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f7fc f914 	bl	8000d94 <_close>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_close_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_close_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200048f8 	.word	0x200048f8

08004b7c <_lseek_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_lseek_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fc f929 	bl	8000de2 <_lseek>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_lseek_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_lseek_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200048f8 	.word	0x200048f8

08004ba0 <_read_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	; (8004bc0 <_read_r+0x20>)
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	4611      	mov	r1, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f7fc f8b7 	bl	8000d22 <_read>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_read_r+0x1e>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_read_r+0x1e>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	200048f8 	.word	0x200048f8

08004bc4 <_write_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d07      	ldr	r5, [pc, #28]	; (8004be4 <_write_r+0x20>)
 8004bc8:	4604      	mov	r4, r0
 8004bca:	4608      	mov	r0, r1
 8004bcc:	4611      	mov	r1, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	602a      	str	r2, [r5, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7fc f8c2 	bl	8000d5c <_write>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_write_r+0x1e>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_write_r+0x1e>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200048f8 	.word	0x200048f8

08004be8 <__errno>:
 8004be8:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <__errno+0x8>)
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000068 	.word	0x20000068

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4d0d      	ldr	r5, [pc, #52]	; (8004c2c <__libc_init_array+0x38>)
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	4d0b      	ldr	r5, [pc, #44]	; (8004c34 <__libc_init_array+0x40>)
 8004c06:	4c0c      	ldr	r4, [pc, #48]	; (8004c38 <__libc_init_array+0x44>)
 8004c08:	f000 fd2a 	bl	8005660 <_init>
 8004c0c:	1b64      	subs	r4, r4, r5
 8004c0e:	10a4      	asrs	r4, r4, #2
 8004c10:	2600      	movs	r6, #0
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08005720 	.word	0x08005720
 8004c30:	08005720 	.word	0x08005720
 8004c34:	08005720 	.word	0x08005720
 8004c38:	08005724 	.word	0x08005724

08004c3c <__retarget_lock_init_recursive>:
 8004c3c:	4770      	bx	lr

08004c3e <__retarget_lock_acquire_recursive>:
 8004c3e:	4770      	bx	lr

08004c40 <__retarget_lock_release_recursive>:
 8004c40:	4770      	bx	lr
	...

08004c44 <_free_r>:
 8004c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d044      	beq.n	8004cd4 <_free_r+0x90>
 8004c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4e:	9001      	str	r0, [sp, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f1a1 0404 	sub.w	r4, r1, #4
 8004c56:	bfb8      	it	lt
 8004c58:	18e4      	addlt	r4, r4, r3
 8004c5a:	f000 f8df 	bl	8004e1c <__malloc_lock>
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <_free_r+0x94>)
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	b933      	cbnz	r3, 8004c74 <_free_r+0x30>
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	6014      	str	r4, [r2, #0]
 8004c6a:	b003      	add	sp, #12
 8004c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c70:	f000 b8da 	b.w	8004e28 <__malloc_unlock>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d908      	bls.n	8004c8a <_free_r+0x46>
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf01      	itttt	eq
 8004c80:	6819      	ldreq	r1, [r3, #0]
 8004c82:	685b      	ldreq	r3, [r3, #4]
 8004c84:	1949      	addeq	r1, r1, r5
 8004c86:	6021      	streq	r1, [r4, #0]
 8004c88:	e7ed      	b.n	8004c66 <_free_r+0x22>
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b10b      	cbz	r3, 8004c94 <_free_r+0x50>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d9fa      	bls.n	8004c8a <_free_r+0x46>
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	1855      	adds	r5, r2, r1
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d10b      	bne.n	8004cb4 <_free_r+0x70>
 8004c9c:	6824      	ldr	r4, [r4, #0]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	d1e0      	bne.n	8004c6a <_free_r+0x26>
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	440c      	add	r4, r1
 8004cb0:	6014      	str	r4, [r2, #0]
 8004cb2:	e7da      	b.n	8004c6a <_free_r+0x26>
 8004cb4:	d902      	bls.n	8004cbc <_free_r+0x78>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	e7d6      	b.n	8004c6a <_free_r+0x26>
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf04      	itt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	bf04      	itt	eq
 8004ccc:	1949      	addeq	r1, r1, r5
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6054      	str	r4, [r2, #4]
 8004cd2:	e7ca      	b.n	8004c6a <_free_r+0x26>
 8004cd4:	b003      	add	sp, #12
 8004cd6:	bd30      	pop	{r4, r5, pc}
 8004cd8:	20004900 	.word	0x20004900

08004cdc <sbrk_aligned>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4e0e      	ldr	r6, [pc, #56]	; (8004d18 <sbrk_aligned+0x3c>)
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	6831      	ldr	r1, [r6, #0]
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	b911      	cbnz	r1, 8004cee <sbrk_aligned+0x12>
 8004ce8:	f000 fcaa 	bl	8005640 <_sbrk_r>
 8004cec:	6030      	str	r0, [r6, #0]
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 fca5 	bl	8005640 <_sbrk_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d00a      	beq.n	8004d10 <sbrk_aligned+0x34>
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d007      	beq.n	8004d14 <sbrk_aligned+0x38>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fc9a 	bl	8005640 <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d101      	bne.n	8004d14 <sbrk_aligned+0x38>
 8004d10:	f04f 34ff 	mov.w	r4, #4294967295
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	20004904 	.word	0x20004904

08004d1c <_malloc_r>:
 8004d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d20:	1ccd      	adds	r5, r1, #3
 8004d22:	f025 0503 	bic.w	r5, r5, #3
 8004d26:	3508      	adds	r5, #8
 8004d28:	2d0c      	cmp	r5, #12
 8004d2a:	bf38      	it	cc
 8004d2c:	250c      	movcc	r5, #12
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	4607      	mov	r7, r0
 8004d32:	db01      	blt.n	8004d38 <_malloc_r+0x1c>
 8004d34:	42a9      	cmp	r1, r5
 8004d36:	d905      	bls.n	8004d44 <_malloc_r+0x28>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e18 <_malloc_r+0xfc>
 8004d48:	f000 f868 	bl	8004e1c <__malloc_lock>
 8004d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d50:	461c      	mov	r4, r3
 8004d52:	bb5c      	cbnz	r4, 8004dac <_malloc_r+0x90>
 8004d54:	4629      	mov	r1, r5
 8004d56:	4638      	mov	r0, r7
 8004d58:	f7ff ffc0 	bl	8004cdc <sbrk_aligned>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	4604      	mov	r4, r0
 8004d60:	d155      	bne.n	8004e0e <_malloc_r+0xf2>
 8004d62:	f8d8 4000 	ldr.w	r4, [r8]
 8004d66:	4626      	mov	r6, r4
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	d145      	bne.n	8004df8 <_malloc_r+0xdc>
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d048      	beq.n	8004e02 <_malloc_r+0xe6>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	4631      	mov	r1, r6
 8004d74:	4638      	mov	r0, r7
 8004d76:	eb04 0903 	add.w	r9, r4, r3
 8004d7a:	f000 fc61 	bl	8005640 <_sbrk_r>
 8004d7e:	4581      	cmp	r9, r0
 8004d80:	d13f      	bne.n	8004e02 <_malloc_r+0xe6>
 8004d82:	6821      	ldr	r1, [r4, #0]
 8004d84:	1a6d      	subs	r5, r5, r1
 8004d86:	4629      	mov	r1, r5
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff ffa7 	bl	8004cdc <sbrk_aligned>
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d037      	beq.n	8004e02 <_malloc_r+0xe6>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	442b      	add	r3, r5
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	f8d8 3000 	ldr.w	r3, [r8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d038      	beq.n	8004e12 <_malloc_r+0xf6>
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	42a2      	cmp	r2, r4
 8004da4:	d12b      	bne.n	8004dfe <_malloc_r+0xe2>
 8004da6:	2200      	movs	r2, #0
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	e00f      	b.n	8004dcc <_malloc_r+0xb0>
 8004dac:	6822      	ldr	r2, [r4, #0]
 8004dae:	1b52      	subs	r2, r2, r5
 8004db0:	d41f      	bmi.n	8004df2 <_malloc_r+0xd6>
 8004db2:	2a0b      	cmp	r2, #11
 8004db4:	d917      	bls.n	8004de6 <_malloc_r+0xca>
 8004db6:	1961      	adds	r1, r4, r5
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	6025      	str	r5, [r4, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	6059      	strne	r1, [r3, #4]
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	bf08      	it	eq
 8004dc4:	f8c8 1000 	streq.w	r1, [r8]
 8004dc8:	5162      	str	r2, [r4, r5]
 8004dca:	604b      	str	r3, [r1, #4]
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f104 060b 	add.w	r6, r4, #11
 8004dd2:	f000 f829 	bl	8004e28 <__malloc_unlock>
 8004dd6:	f026 0607 	bic.w	r6, r6, #7
 8004dda:	1d23      	adds	r3, r4, #4
 8004ddc:	1af2      	subs	r2, r6, r3
 8004dde:	d0ae      	beq.n	8004d3e <_malloc_r+0x22>
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	50a3      	str	r3, [r4, r2]
 8004de4:	e7ab      	b.n	8004d3e <_malloc_r+0x22>
 8004de6:	42a3      	cmp	r3, r4
 8004de8:	6862      	ldr	r2, [r4, #4]
 8004dea:	d1dd      	bne.n	8004da8 <_malloc_r+0x8c>
 8004dec:	f8c8 2000 	str.w	r2, [r8]
 8004df0:	e7ec      	b.n	8004dcc <_malloc_r+0xb0>
 8004df2:	4623      	mov	r3, r4
 8004df4:	6864      	ldr	r4, [r4, #4]
 8004df6:	e7ac      	b.n	8004d52 <_malloc_r+0x36>
 8004df8:	4634      	mov	r4, r6
 8004dfa:	6876      	ldr	r6, [r6, #4]
 8004dfc:	e7b4      	b.n	8004d68 <_malloc_r+0x4c>
 8004dfe:	4613      	mov	r3, r2
 8004e00:	e7cc      	b.n	8004d9c <_malloc_r+0x80>
 8004e02:	230c      	movs	r3, #12
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4638      	mov	r0, r7
 8004e08:	f000 f80e 	bl	8004e28 <__malloc_unlock>
 8004e0c:	e797      	b.n	8004d3e <_malloc_r+0x22>
 8004e0e:	6025      	str	r5, [r4, #0]
 8004e10:	e7dc      	b.n	8004dcc <_malloc_r+0xb0>
 8004e12:	605b      	str	r3, [r3, #4]
 8004e14:	deff      	udf	#255	; 0xff
 8004e16:	bf00      	nop
 8004e18:	20004900 	.word	0x20004900

08004e1c <__malloc_lock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__malloc_lock+0x8>)
 8004e1e:	f7ff bf0e 	b.w	8004c3e <__retarget_lock_acquire_recursive>
 8004e22:	bf00      	nop
 8004e24:	200048fc 	.word	0x200048fc

08004e28 <__malloc_unlock>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__malloc_unlock+0x8>)
 8004e2a:	f7ff bf09 	b.w	8004c40 <__retarget_lock_release_recursive>
 8004e2e:	bf00      	nop
 8004e30:	200048fc 	.word	0x200048fc

08004e34 <__sfputc_r>:
 8004e34:	6893      	ldr	r3, [r2, #8]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	b410      	push	{r4}
 8004e3c:	6093      	str	r3, [r2, #8]
 8004e3e:	da08      	bge.n	8004e52 <__sfputc_r+0x1e>
 8004e40:	6994      	ldr	r4, [r2, #24]
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	db01      	blt.n	8004e4a <__sfputc_r+0x16>
 8004e46:	290a      	cmp	r1, #10
 8004e48:	d103      	bne.n	8004e52 <__sfputc_r+0x1e>
 8004e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e4e:	f7ff bde8 	b.w	8004a22 <__swbuf_r>
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	1c58      	adds	r0, r3, #1
 8004e56:	6010      	str	r0, [r2, #0]
 8004e58:	7019      	strb	r1, [r3, #0]
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <__sfputs_r>:
 8004e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	18d5      	adds	r5, r2, r3
 8004e6c:	42ac      	cmp	r4, r5
 8004e6e:	d101      	bne.n	8004e74 <__sfputs_r+0x12>
 8004e70:	2000      	movs	r0, #0
 8004e72:	e007      	b.n	8004e84 <__sfputs_r+0x22>
 8004e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e78:	463a      	mov	r2, r7
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f7ff ffda 	bl	8004e34 <__sfputc_r>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d1f3      	bne.n	8004e6c <__sfputs_r+0xa>
 8004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e88 <_vfiprintf_r>:
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	b09d      	sub	sp, #116	; 0x74
 8004e90:	4614      	mov	r4, r2
 8004e92:	4698      	mov	r8, r3
 8004e94:	4606      	mov	r6, r0
 8004e96:	b118      	cbz	r0, 8004ea0 <_vfiprintf_r+0x18>
 8004e98:	6a03      	ldr	r3, [r0, #32]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <_vfiprintf_r+0x18>
 8004e9c:	f7ff fcda 	bl	8004854 <__sinit>
 8004ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea2:	07d9      	lsls	r1, r3, #31
 8004ea4:	d405      	bmi.n	8004eb2 <_vfiprintf_r+0x2a>
 8004ea6:	89ab      	ldrh	r3, [r5, #12]
 8004ea8:	059a      	lsls	r2, r3, #22
 8004eaa:	d402      	bmi.n	8004eb2 <_vfiprintf_r+0x2a>
 8004eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eae:	f7ff fec6 	bl	8004c3e <__retarget_lock_acquire_recursive>
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	071b      	lsls	r3, r3, #28
 8004eb6:	d501      	bpl.n	8004ebc <_vfiprintf_r+0x34>
 8004eb8:	692b      	ldr	r3, [r5, #16]
 8004eba:	b99b      	cbnz	r3, 8004ee4 <_vfiprintf_r+0x5c>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff fdec 	bl	8004a9c <__swsetup_r>
 8004ec4:	b170      	cbz	r0, 8004ee4 <_vfiprintf_r+0x5c>
 8004ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ec8:	07dc      	lsls	r4, r3, #31
 8004eca:	d504      	bpl.n	8004ed6 <_vfiprintf_r+0x4e>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	b01d      	add	sp, #116	; 0x74
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	89ab      	ldrh	r3, [r5, #12]
 8004ed8:	0598      	lsls	r0, r3, #22
 8004eda:	d4f7      	bmi.n	8004ecc <_vfiprintf_r+0x44>
 8004edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ede:	f7ff feaf 	bl	8004c40 <__retarget_lock_release_recursive>
 8004ee2:	e7f3      	b.n	8004ecc <_vfiprintf_r+0x44>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ef2:	2330      	movs	r3, #48	; 0x30
 8004ef4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80050a8 <_vfiprintf_r+0x220>
 8004ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004efc:	f04f 0901 	mov.w	r9, #1
 8004f00:	4623      	mov	r3, r4
 8004f02:	469a      	mov	sl, r3
 8004f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f08:	b10a      	cbz	r2, 8004f0e <_vfiprintf_r+0x86>
 8004f0a:	2a25      	cmp	r2, #37	; 0x25
 8004f0c:	d1f9      	bne.n	8004f02 <_vfiprintf_r+0x7a>
 8004f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f12:	d00b      	beq.n	8004f2c <_vfiprintf_r+0xa4>
 8004f14:	465b      	mov	r3, fp
 8004f16:	4622      	mov	r2, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff ffa1 	bl	8004e62 <__sfputs_r>
 8004f20:	3001      	adds	r0, #1
 8004f22:	f000 80a9 	beq.w	8005078 <_vfiprintf_r+0x1f0>
 8004f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f28:	445a      	add	r2, fp
 8004f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a1 	beq.w	8005078 <_vfiprintf_r+0x1f0>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f40:	f10a 0a01 	add.w	sl, sl, #1
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	9307      	str	r3, [sp, #28]
 8004f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f4e:	4654      	mov	r4, sl
 8004f50:	2205      	movs	r2, #5
 8004f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f56:	4854      	ldr	r0, [pc, #336]	; (80050a8 <_vfiprintf_r+0x220>)
 8004f58:	f7fb f94a 	bl	80001f0 <memchr>
 8004f5c:	9a04      	ldr	r2, [sp, #16]
 8004f5e:	b9d8      	cbnz	r0, 8004f98 <_vfiprintf_r+0x110>
 8004f60:	06d1      	lsls	r1, r2, #27
 8004f62:	bf44      	itt	mi
 8004f64:	2320      	movmi	r3, #32
 8004f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6a:	0713      	lsls	r3, r2, #28
 8004f6c:	bf44      	itt	mi
 8004f6e:	232b      	movmi	r3, #43	; 0x2b
 8004f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f74:	f89a 3000 	ldrb.w	r3, [sl]
 8004f78:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7a:	d015      	beq.n	8004fa8 <_vfiprintf_r+0x120>
 8004f7c:	9a07      	ldr	r2, [sp, #28]
 8004f7e:	4654      	mov	r4, sl
 8004f80:	2000      	movs	r0, #0
 8004f82:	f04f 0c0a 	mov.w	ip, #10
 8004f86:	4621      	mov	r1, r4
 8004f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f8c:	3b30      	subs	r3, #48	; 0x30
 8004f8e:	2b09      	cmp	r3, #9
 8004f90:	d94d      	bls.n	800502e <_vfiprintf_r+0x1a6>
 8004f92:	b1b0      	cbz	r0, 8004fc2 <_vfiprintf_r+0x13a>
 8004f94:	9207      	str	r2, [sp, #28]
 8004f96:	e014      	b.n	8004fc2 <_vfiprintf_r+0x13a>
 8004f98:	eba0 0308 	sub.w	r3, r0, r8
 8004f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	46a2      	mov	sl, r4
 8004fa6:	e7d2      	b.n	8004f4e <_vfiprintf_r+0xc6>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	1d19      	adds	r1, r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	9103      	str	r1, [sp, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfbb      	ittet	lt
 8004fb4:	425b      	neglt	r3, r3
 8004fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8004fba:	9307      	strge	r3, [sp, #28]
 8004fbc:	9307      	strlt	r3, [sp, #28]
 8004fbe:	bfb8      	it	lt
 8004fc0:	9204      	strlt	r2, [sp, #16]
 8004fc2:	7823      	ldrb	r3, [r4, #0]
 8004fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc6:	d10c      	bne.n	8004fe2 <_vfiprintf_r+0x15a>
 8004fc8:	7863      	ldrb	r3, [r4, #1]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d134      	bne.n	8005038 <_vfiprintf_r+0x1b0>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	9203      	str	r2, [sp, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfb8      	it	lt
 8004fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fde:	3402      	adds	r4, #2
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80050b8 <_vfiprintf_r+0x230>
 8004fe6:	7821      	ldrb	r1, [r4, #0]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	4650      	mov	r0, sl
 8004fec:	f7fb f900 	bl	80001f0 <memchr>
 8004ff0:	b138      	cbz	r0, 8005002 <_vfiprintf_r+0x17a>
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	eba0 000a 	sub.w	r0, r0, sl
 8004ff8:	2240      	movs	r2, #64	; 0x40
 8004ffa:	4082      	lsls	r2, r0
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	3401      	adds	r4, #1
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005006:	4829      	ldr	r0, [pc, #164]	; (80050ac <_vfiprintf_r+0x224>)
 8005008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800500c:	2206      	movs	r2, #6
 800500e:	f7fb f8ef 	bl	80001f0 <memchr>
 8005012:	2800      	cmp	r0, #0
 8005014:	d03f      	beq.n	8005096 <_vfiprintf_r+0x20e>
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <_vfiprintf_r+0x228>)
 8005018:	bb1b      	cbnz	r3, 8005062 <_vfiprintf_r+0x1da>
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	3307      	adds	r3, #7
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	3308      	adds	r3, #8
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005028:	443b      	add	r3, r7
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	e768      	b.n	8004f00 <_vfiprintf_r+0x78>
 800502e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005032:	460c      	mov	r4, r1
 8005034:	2001      	movs	r0, #1
 8005036:	e7a6      	b.n	8004f86 <_vfiprintf_r+0xfe>
 8005038:	2300      	movs	r3, #0
 800503a:	3401      	adds	r4, #1
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	4619      	mov	r1, r3
 8005040:	f04f 0c0a 	mov.w	ip, #10
 8005044:	4620      	mov	r0, r4
 8005046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800504a:	3a30      	subs	r2, #48	; 0x30
 800504c:	2a09      	cmp	r2, #9
 800504e:	d903      	bls.n	8005058 <_vfiprintf_r+0x1d0>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0c6      	beq.n	8004fe2 <_vfiprintf_r+0x15a>
 8005054:	9105      	str	r1, [sp, #20]
 8005056:	e7c4      	b.n	8004fe2 <_vfiprintf_r+0x15a>
 8005058:	fb0c 2101 	mla	r1, ip, r1, r2
 800505c:	4604      	mov	r4, r0
 800505e:	2301      	movs	r3, #1
 8005060:	e7f0      	b.n	8005044 <_vfiprintf_r+0x1bc>
 8005062:	ab03      	add	r3, sp, #12
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	462a      	mov	r2, r5
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <_vfiprintf_r+0x22c>)
 800506a:	a904      	add	r1, sp, #16
 800506c:	4630      	mov	r0, r6
 800506e:	f3af 8000 	nop.w
 8005072:	4607      	mov	r7, r0
 8005074:	1c78      	adds	r0, r7, #1
 8005076:	d1d6      	bne.n	8005026 <_vfiprintf_r+0x19e>
 8005078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800507a:	07d9      	lsls	r1, r3, #31
 800507c:	d405      	bmi.n	800508a <_vfiprintf_r+0x202>
 800507e:	89ab      	ldrh	r3, [r5, #12]
 8005080:	059a      	lsls	r2, r3, #22
 8005082:	d402      	bmi.n	800508a <_vfiprintf_r+0x202>
 8005084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005086:	f7ff fddb 	bl	8004c40 <__retarget_lock_release_recursive>
 800508a:	89ab      	ldrh	r3, [r5, #12]
 800508c:	065b      	lsls	r3, r3, #25
 800508e:	f53f af1d 	bmi.w	8004ecc <_vfiprintf_r+0x44>
 8005092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005094:	e71c      	b.n	8004ed0 <_vfiprintf_r+0x48>
 8005096:	ab03      	add	r3, sp, #12
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	462a      	mov	r2, r5
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <_vfiprintf_r+0x22c>)
 800509e:	a904      	add	r1, sp, #16
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 f879 	bl	8005198 <_printf_i>
 80050a6:	e7e4      	b.n	8005072 <_vfiprintf_r+0x1ea>
 80050a8:	080056e4 	.word	0x080056e4
 80050ac:	080056ee 	.word	0x080056ee
 80050b0:	00000000 	.word	0x00000000
 80050b4:	08004e63 	.word	0x08004e63
 80050b8:	080056ea 	.word	0x080056ea

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4616      	mov	r6, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d8:	4607      	mov	r7, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b10a      	cbz	r2, 80050e2 <_printf_common+0x26>
 80050de:	3301      	adds	r3, #1
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	0699      	lsls	r1, r3, #26
 80050e6:	bf42      	ittt	mi
 80050e8:	6833      	ldrmi	r3, [r6, #0]
 80050ea:	3302      	addmi	r3, #2
 80050ec:	6033      	strmi	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	f015 0506 	ands.w	r5, r5, #6
 80050f4:	d106      	bne.n	8005104 <_printf_common+0x48>
 80050f6:	f104 0a19 	add.w	sl, r4, #25
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dc26      	bgt.n	8005152 <_printf_common+0x96>
 8005104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	2301      	movne	r3, #1
 8005110:	0692      	lsls	r2, r2, #26
 8005112:	d42b      	bmi.n	800516c <_printf_common+0xb0>
 8005114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d01e      	beq.n	8005160 <_printf_common+0xa4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	f003 0306 	and.w	r3, r3, #6
 800512a:	2b04      	cmp	r3, #4
 800512c:	bf02      	ittt	eq
 800512e:	68e5      	ldreq	r5, [r4, #12]
 8005130:	6833      	ldreq	r3, [r6, #0]
 8005132:	1aed      	subeq	r5, r5, r3
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	2600      	movs	r6, #0
 8005148:	341a      	adds	r4, #26
 800514a:	42b5      	cmp	r5, r6
 800514c:	d11a      	bne.n	8005184 <_printf_common+0xc8>
 800514e:	2000      	movs	r0, #0
 8005150:	e008      	b.n	8005164 <_printf_common+0xa8>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d103      	bne.n	8005168 <_printf_common+0xac>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005168:	3501      	adds	r5, #1
 800516a:	e7c6      	b.n	80050fa <_printf_common+0x3e>
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005176:	4422      	add	r2, r4
 8005178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005180:	3302      	adds	r3, #2
 8005182:	e7c7      	b.n	8005114 <_printf_common+0x58>
 8005184:	2301      	movs	r3, #1
 8005186:	4622      	mov	r2, r4
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0e6      	beq.n	8005160 <_printf_common+0xa4>
 8005192:	3601      	adds	r6, #1
 8005194:	e7d9      	b.n	800514a <_printf_common+0x8e>
	...

08005198 <_printf_i>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	7e0f      	ldrb	r7, [r1, #24]
 800519e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051a0:	2f78      	cmp	r7, #120	; 0x78
 80051a2:	4691      	mov	r9, r2
 80051a4:	4680      	mov	r8, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	469a      	mov	sl, r3
 80051aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ae:	d807      	bhi.n	80051c0 <_printf_i+0x28>
 80051b0:	2f62      	cmp	r7, #98	; 0x62
 80051b2:	d80a      	bhi.n	80051ca <_printf_i+0x32>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	f000 80d4 	beq.w	8005362 <_printf_i+0x1ca>
 80051ba:	2f58      	cmp	r7, #88	; 0x58
 80051bc:	f000 80c0 	beq.w	8005340 <_printf_i+0x1a8>
 80051c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c8:	e03a      	b.n	8005240 <_printf_i+0xa8>
 80051ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d8f6      	bhi.n	80051c0 <_printf_i+0x28>
 80051d2:	a101      	add	r1, pc, #4	; (adr r1, 80051d8 <_printf_i+0x40>)
 80051d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005245 	.word	0x08005245
 80051e0:	080051c1 	.word	0x080051c1
 80051e4:	080051c1 	.word	0x080051c1
 80051e8:	080051c1 	.word	0x080051c1
 80051ec:	080051c1 	.word	0x080051c1
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080051c1 	.word	0x080051c1
 80051f8:	080051c1 	.word	0x080051c1
 80051fc:	080051c1 	.word	0x080051c1
 8005200:	080051c1 	.word	0x080051c1
 8005204:	08005349 	.word	0x08005349
 8005208:	08005271 	.word	0x08005271
 800520c:	08005303 	.word	0x08005303
 8005210:	080051c1 	.word	0x080051c1
 8005214:	080051c1 	.word	0x080051c1
 8005218:	0800536b 	.word	0x0800536b
 800521c:	080051c1 	.word	0x080051c1
 8005220:	08005271 	.word	0x08005271
 8005224:	080051c1 	.word	0x080051c1
 8005228:	080051c1 	.word	0x080051c1
 800522c:	0800530b 	.word	0x0800530b
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005240:	2301      	movs	r3, #1
 8005242:	e09f      	b.n	8005384 <_printf_i+0x1ec>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	0607      	lsls	r7, r0, #24
 800524a:	f103 0104 	add.w	r1, r3, #4
 800524e:	6029      	str	r1, [r5, #0]
 8005250:	d501      	bpl.n	8005256 <_printf_i+0xbe>
 8005252:	681e      	ldr	r6, [r3, #0]
 8005254:	e003      	b.n	800525e <_printf_i+0xc6>
 8005256:	0646      	lsls	r6, r0, #25
 8005258:	d5fb      	bpl.n	8005252 <_printf_i+0xba>
 800525a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800525e:	2e00      	cmp	r6, #0
 8005260:	da03      	bge.n	800526a <_printf_i+0xd2>
 8005262:	232d      	movs	r3, #45	; 0x2d
 8005264:	4276      	negs	r6, r6
 8005266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526a:	485a      	ldr	r0, [pc, #360]	; (80053d4 <_printf_i+0x23c>)
 800526c:	230a      	movs	r3, #10
 800526e:	e012      	b.n	8005296 <_printf_i+0xfe>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	1d19      	adds	r1, r3, #4
 8005276:	6029      	str	r1, [r5, #0]
 8005278:	0605      	lsls	r5, r0, #24
 800527a:	d501      	bpl.n	8005280 <_printf_i+0xe8>
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	e002      	b.n	8005286 <_printf_i+0xee>
 8005280:	0641      	lsls	r1, r0, #25
 8005282:	d5fb      	bpl.n	800527c <_printf_i+0xe4>
 8005284:	881e      	ldrh	r6, [r3, #0]
 8005286:	4853      	ldr	r0, [pc, #332]	; (80053d4 <_printf_i+0x23c>)
 8005288:	2f6f      	cmp	r7, #111	; 0x6f
 800528a:	bf0c      	ite	eq
 800528c:	2308      	moveq	r3, #8
 800528e:	230a      	movne	r3, #10
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005296:	6865      	ldr	r5, [r4, #4]
 8005298:	60a5      	str	r5, [r4, #8]
 800529a:	2d00      	cmp	r5, #0
 800529c:	bfa2      	ittt	ge
 800529e:	6821      	ldrge	r1, [r4, #0]
 80052a0:	f021 0104 	bicge.w	r1, r1, #4
 80052a4:	6021      	strge	r1, [r4, #0]
 80052a6:	b90e      	cbnz	r6, 80052ac <_printf_i+0x114>
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	d04b      	beq.n	8005344 <_printf_i+0x1ac>
 80052ac:	4615      	mov	r5, r2
 80052ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80052b2:	fb03 6711 	mls	r7, r3, r1, r6
 80052b6:	5dc7      	ldrb	r7, [r0, r7]
 80052b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052bc:	4637      	mov	r7, r6
 80052be:	42bb      	cmp	r3, r7
 80052c0:	460e      	mov	r6, r1
 80052c2:	d9f4      	bls.n	80052ae <_printf_i+0x116>
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <_printf_i+0x148>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07de      	lsls	r6, r3, #31
 80052cc:	d508      	bpl.n	80052e0 <_printf_i+0x148>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6861      	ldr	r1, [r4, #4]
 80052d2:	4299      	cmp	r1, r3
 80052d4:	bfde      	ittt	le
 80052d6:	2330      	movle	r3, #48	; 0x30
 80052d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e0:	1b52      	subs	r2, r2, r5
 80052e2:	6122      	str	r2, [r4, #16]
 80052e4:	f8cd a000 	str.w	sl, [sp]
 80052e8:	464b      	mov	r3, r9
 80052ea:	aa03      	add	r2, sp, #12
 80052ec:	4621      	mov	r1, r4
 80052ee:	4640      	mov	r0, r8
 80052f0:	f7ff fee4 	bl	80050bc <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d14a      	bne.n	800538e <_printf_i+0x1f6>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b004      	add	sp, #16
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f043 0320 	orr.w	r3, r3, #32
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	4833      	ldr	r0, [pc, #204]	; (80053d8 <_printf_i+0x240>)
 800530c:	2778      	movs	r7, #120	; 0x78
 800530e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	6829      	ldr	r1, [r5, #0]
 8005316:	061f      	lsls	r7, r3, #24
 8005318:	f851 6b04 	ldr.w	r6, [r1], #4
 800531c:	d402      	bmi.n	8005324 <_printf_i+0x18c>
 800531e:	065f      	lsls	r7, r3, #25
 8005320:	bf48      	it	mi
 8005322:	b2b6      	uxthmi	r6, r6
 8005324:	07df      	lsls	r7, r3, #31
 8005326:	bf48      	it	mi
 8005328:	f043 0320 	orrmi.w	r3, r3, #32
 800532c:	6029      	str	r1, [r5, #0]
 800532e:	bf48      	it	mi
 8005330:	6023      	strmi	r3, [r4, #0]
 8005332:	b91e      	cbnz	r6, 800533c <_printf_i+0x1a4>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	f023 0320 	bic.w	r3, r3, #32
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	2310      	movs	r3, #16
 800533e:	e7a7      	b.n	8005290 <_printf_i+0xf8>
 8005340:	4824      	ldr	r0, [pc, #144]	; (80053d4 <_printf_i+0x23c>)
 8005342:	e7e4      	b.n	800530e <_printf_i+0x176>
 8005344:	4615      	mov	r5, r2
 8005346:	e7bd      	b.n	80052c4 <_printf_i+0x12c>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	6826      	ldr	r6, [r4, #0]
 800534c:	6961      	ldr	r1, [r4, #20]
 800534e:	1d18      	adds	r0, r3, #4
 8005350:	6028      	str	r0, [r5, #0]
 8005352:	0635      	lsls	r5, r6, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	d501      	bpl.n	800535c <_printf_i+0x1c4>
 8005358:	6019      	str	r1, [r3, #0]
 800535a:	e002      	b.n	8005362 <_printf_i+0x1ca>
 800535c:	0670      	lsls	r0, r6, #25
 800535e:	d5fb      	bpl.n	8005358 <_printf_i+0x1c0>
 8005360:	8019      	strh	r1, [r3, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	4615      	mov	r5, r2
 8005368:	e7bc      	b.n	80052e4 <_printf_i+0x14c>
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	602a      	str	r2, [r5, #0]
 8005370:	681d      	ldr	r5, [r3, #0]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	4628      	mov	r0, r5
 8005378:	f7fa ff3a 	bl	80001f0 <memchr>
 800537c:	b108      	cbz	r0, 8005382 <_printf_i+0x1ea>
 800537e:	1b40      	subs	r0, r0, r5
 8005380:	6060      	str	r0, [r4, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	e7aa      	b.n	80052e4 <_printf_i+0x14c>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	462a      	mov	r2, r5
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d0ad      	beq.n	80052f8 <_printf_i+0x160>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	079b      	lsls	r3, r3, #30
 80053a0:	d413      	bmi.n	80053ca <_printf_i+0x232>
 80053a2:	68e0      	ldr	r0, [r4, #12]
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	4298      	cmp	r0, r3
 80053a8:	bfb8      	it	lt
 80053aa:	4618      	movlt	r0, r3
 80053ac:	e7a6      	b.n	80052fc <_printf_i+0x164>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d09d      	beq.n	80052f8 <_printf_i+0x160>
 80053bc:	3501      	adds	r5, #1
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	9903      	ldr	r1, [sp, #12]
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dcf2      	bgt.n	80053ae <_printf_i+0x216>
 80053c8:	e7eb      	b.n	80053a2 <_printf_i+0x20a>
 80053ca:	2500      	movs	r5, #0
 80053cc:	f104 0619 	add.w	r6, r4, #25
 80053d0:	e7f5      	b.n	80053be <_printf_i+0x226>
 80053d2:	bf00      	nop
 80053d4:	080056f5 	.word	0x080056f5
 80053d8:	08005706 	.word	0x08005706

080053dc <__sflush_r>:
 80053dc:	898a      	ldrh	r2, [r1, #12]
 80053de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e2:	4605      	mov	r5, r0
 80053e4:	0710      	lsls	r0, r2, #28
 80053e6:	460c      	mov	r4, r1
 80053e8:	d458      	bmi.n	800549c <__sflush_r+0xc0>
 80053ea:	684b      	ldr	r3, [r1, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dc05      	bgt.n	80053fc <__sflush_r+0x20>
 80053f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	dc02      	bgt.n	80053fc <__sflush_r+0x20>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053fe:	2e00      	cmp	r6, #0
 8005400:	d0f9      	beq.n	80053f6 <__sflush_r+0x1a>
 8005402:	2300      	movs	r3, #0
 8005404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005408:	682f      	ldr	r7, [r5, #0]
 800540a:	6a21      	ldr	r1, [r4, #32]
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	d032      	beq.n	8005476 <__sflush_r+0x9a>
 8005410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	075a      	lsls	r2, r3, #29
 8005416:	d505      	bpl.n	8005424 <__sflush_r+0x48>
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	1ac0      	subs	r0, r0, r3
 800541c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800541e:	b10b      	cbz	r3, 8005424 <__sflush_r+0x48>
 8005420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005422:	1ac0      	subs	r0, r0, r3
 8005424:	2300      	movs	r3, #0
 8005426:	4602      	mov	r2, r0
 8005428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800542a:	6a21      	ldr	r1, [r4, #32]
 800542c:	4628      	mov	r0, r5
 800542e:	47b0      	blx	r6
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	d106      	bne.n	8005444 <__sflush_r+0x68>
 8005436:	6829      	ldr	r1, [r5, #0]
 8005438:	291d      	cmp	r1, #29
 800543a:	d82b      	bhi.n	8005494 <__sflush_r+0xb8>
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <__sflush_r+0x108>)
 800543e:	410a      	asrs	r2, r1
 8005440:	07d6      	lsls	r6, r2, #31
 8005442:	d427      	bmi.n	8005494 <__sflush_r+0xb8>
 8005444:	2200      	movs	r2, #0
 8005446:	6062      	str	r2, [r4, #4]
 8005448:	04d9      	lsls	r1, r3, #19
 800544a:	6922      	ldr	r2, [r4, #16]
 800544c:	6022      	str	r2, [r4, #0]
 800544e:	d504      	bpl.n	800545a <__sflush_r+0x7e>
 8005450:	1c42      	adds	r2, r0, #1
 8005452:	d101      	bne.n	8005458 <__sflush_r+0x7c>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b903      	cbnz	r3, 800545a <__sflush_r+0x7e>
 8005458:	6560      	str	r0, [r4, #84]	; 0x54
 800545a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800545c:	602f      	str	r7, [r5, #0]
 800545e:	2900      	cmp	r1, #0
 8005460:	d0c9      	beq.n	80053f6 <__sflush_r+0x1a>
 8005462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005466:	4299      	cmp	r1, r3
 8005468:	d002      	beq.n	8005470 <__sflush_r+0x94>
 800546a:	4628      	mov	r0, r5
 800546c:	f7ff fbea 	bl	8004c44 <_free_r>
 8005470:	2000      	movs	r0, #0
 8005472:	6360      	str	r0, [r4, #52]	; 0x34
 8005474:	e7c0      	b.n	80053f8 <__sflush_r+0x1c>
 8005476:	2301      	movs	r3, #1
 8005478:	4628      	mov	r0, r5
 800547a:	47b0      	blx	r6
 800547c:	1c41      	adds	r1, r0, #1
 800547e:	d1c8      	bne.n	8005412 <__sflush_r+0x36>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0c5      	beq.n	8005412 <__sflush_r+0x36>
 8005486:	2b1d      	cmp	r3, #29
 8005488:	d001      	beq.n	800548e <__sflush_r+0xb2>
 800548a:	2b16      	cmp	r3, #22
 800548c:	d101      	bne.n	8005492 <__sflush_r+0xb6>
 800548e:	602f      	str	r7, [r5, #0]
 8005490:	e7b1      	b.n	80053f6 <__sflush_r+0x1a>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	e7ad      	b.n	80053f8 <__sflush_r+0x1c>
 800549c:	690f      	ldr	r7, [r1, #16]
 800549e:	2f00      	cmp	r7, #0
 80054a0:	d0a9      	beq.n	80053f6 <__sflush_r+0x1a>
 80054a2:	0793      	lsls	r3, r2, #30
 80054a4:	680e      	ldr	r6, [r1, #0]
 80054a6:	bf08      	it	eq
 80054a8:	694b      	ldreq	r3, [r1, #20]
 80054aa:	600f      	str	r7, [r1, #0]
 80054ac:	bf18      	it	ne
 80054ae:	2300      	movne	r3, #0
 80054b0:	eba6 0807 	sub.w	r8, r6, r7
 80054b4:	608b      	str	r3, [r1, #8]
 80054b6:	f1b8 0f00 	cmp.w	r8, #0
 80054ba:	dd9c      	ble.n	80053f6 <__sflush_r+0x1a>
 80054bc:	6a21      	ldr	r1, [r4, #32]
 80054be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054c0:	4643      	mov	r3, r8
 80054c2:	463a      	mov	r2, r7
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b0      	blx	r6
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dc06      	bgt.n	80054da <__sflush_r+0xfe>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	e78e      	b.n	80053f8 <__sflush_r+0x1c>
 80054da:	4407      	add	r7, r0
 80054dc:	eba8 0800 	sub.w	r8, r8, r0
 80054e0:	e7e9      	b.n	80054b6 <__sflush_r+0xda>
 80054e2:	bf00      	nop
 80054e4:	dfbffffe 	.word	0xdfbffffe

080054e8 <_fflush_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	690b      	ldr	r3, [r1, #16]
 80054ec:	4605      	mov	r5, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	b913      	cbnz	r3, 80054f8 <_fflush_r+0x10>
 80054f2:	2500      	movs	r5, #0
 80054f4:	4628      	mov	r0, r5
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	b118      	cbz	r0, 8005502 <_fflush_r+0x1a>
 80054fa:	6a03      	ldr	r3, [r0, #32]
 80054fc:	b90b      	cbnz	r3, 8005502 <_fflush_r+0x1a>
 80054fe:	f7ff f9a9 	bl	8004854 <__sinit>
 8005502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f3      	beq.n	80054f2 <_fflush_r+0xa>
 800550a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800550c:	07d0      	lsls	r0, r2, #31
 800550e:	d404      	bmi.n	800551a <_fflush_r+0x32>
 8005510:	0599      	lsls	r1, r3, #22
 8005512:	d402      	bmi.n	800551a <_fflush_r+0x32>
 8005514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005516:	f7ff fb92 	bl	8004c3e <__retarget_lock_acquire_recursive>
 800551a:	4628      	mov	r0, r5
 800551c:	4621      	mov	r1, r4
 800551e:	f7ff ff5d 	bl	80053dc <__sflush_r>
 8005522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005524:	07da      	lsls	r2, r3, #31
 8005526:	4605      	mov	r5, r0
 8005528:	d4e4      	bmi.n	80054f4 <_fflush_r+0xc>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	059b      	lsls	r3, r3, #22
 800552e:	d4e1      	bmi.n	80054f4 <_fflush_r+0xc>
 8005530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005532:	f7ff fb85 	bl	8004c40 <__retarget_lock_release_recursive>
 8005536:	e7dd      	b.n	80054f4 <_fflush_r+0xc>

08005538 <__swhatbuf_r>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	2900      	cmp	r1, #0
 8005542:	b096      	sub	sp, #88	; 0x58
 8005544:	4615      	mov	r5, r2
 8005546:	461e      	mov	r6, r3
 8005548:	da0d      	bge.n	8005566 <__swhatbuf_r+0x2e>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	bf0c      	ite	eq
 8005556:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800555a:	2340      	movne	r3, #64	; 0x40
 800555c:	2000      	movs	r0, #0
 800555e:	6031      	str	r1, [r6, #0]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	b016      	add	sp, #88	; 0x58
 8005564:	bd70      	pop	{r4, r5, r6, pc}
 8005566:	466a      	mov	r2, sp
 8005568:	f000 f848 	bl	80055fc <_fstat_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	dbec      	blt.n	800554a <__swhatbuf_r+0x12>
 8005570:	9901      	ldr	r1, [sp, #4]
 8005572:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005576:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800557a:	4259      	negs	r1, r3
 800557c:	4159      	adcs	r1, r3
 800557e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005582:	e7eb      	b.n	800555c <__swhatbuf_r+0x24>

08005584 <__smakebuf_r>:
 8005584:	898b      	ldrh	r3, [r1, #12]
 8005586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005588:	079d      	lsls	r5, r3, #30
 800558a:	4606      	mov	r6, r0
 800558c:	460c      	mov	r4, r1
 800558e:	d507      	bpl.n	80055a0 <__smakebuf_r+0x1c>
 8005590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	2301      	movs	r3, #1
 800559a:	6163      	str	r3, [r4, #20]
 800559c:	b002      	add	sp, #8
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	ab01      	add	r3, sp, #4
 80055a2:	466a      	mov	r2, sp
 80055a4:	f7ff ffc8 	bl	8005538 <__swhatbuf_r>
 80055a8:	9900      	ldr	r1, [sp, #0]
 80055aa:	4605      	mov	r5, r0
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff fbb5 	bl	8004d1c <_malloc_r>
 80055b2:	b948      	cbnz	r0, 80055c8 <__smakebuf_r+0x44>
 80055b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b8:	059a      	lsls	r2, r3, #22
 80055ba:	d4ef      	bmi.n	800559c <__smakebuf_r+0x18>
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e7e3      	b.n	8005590 <__smakebuf_r+0xc>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	6020      	str	r0, [r4, #0]
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	6163      	str	r3, [r4, #20]
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	6120      	str	r0, [r4, #16]
 80055da:	b15b      	cbz	r3, 80055f4 <__smakebuf_r+0x70>
 80055dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e0:	4630      	mov	r0, r6
 80055e2:	f000 f81d 	bl	8005620 <_isatty_r>
 80055e6:	b128      	cbz	r0, 80055f4 <__smakebuf_r+0x70>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	431d      	orrs	r5, r3
 80055f8:	81a5      	strh	r5, [r4, #12]
 80055fa:	e7cf      	b.n	800559c <__smakebuf_r+0x18>

080055fc <_fstat_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d07      	ldr	r5, [pc, #28]	; (800561c <_fstat_r+0x20>)
 8005600:	2300      	movs	r3, #0
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	f7fb fbcf 	bl	8000dac <_fstat>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	d102      	bne.n	8005618 <_fstat_r+0x1c>
 8005612:	682b      	ldr	r3, [r5, #0]
 8005614:	b103      	cbz	r3, 8005618 <_fstat_r+0x1c>
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	bd38      	pop	{r3, r4, r5, pc}
 800561a:	bf00      	nop
 800561c:	200048f8 	.word	0x200048f8

08005620 <_isatty_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	; (800563c <_isatty_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fbce 	bl	8000dcc <_isatty>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_isatty_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_isatty_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	200048f8 	.word	0x200048f8

08005640 <_sbrk_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d06      	ldr	r5, [pc, #24]	; (800565c <_sbrk_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb fbd6 	bl	8000dfc <_sbrk>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_sbrk_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_sbrk_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	200048f8 	.word	0x200048f8

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
