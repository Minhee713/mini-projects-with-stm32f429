
rtos_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d4c  08007d4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d54  08007d54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000496c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049e0  200049e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000193eb  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039c4  00000000  00000000  000394d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a0  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010bc  00000000  00000000  0003e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002863b  00000000  00000000  0003f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a68e  00000000  00000000  00067b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed2db  00000000  00000000  000821bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063d4  00000000  00000000  0016f498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0017586c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b20 	.word	0x08007b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007b20 	.word	0x08007b20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000090 	.word	0x20000090
 80005bc:	200000e4 	.word	0x200000e4

080005c0 <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	460b      	mov	r3, r1
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	4613      	mov	r3, r2
 80005d0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	b299      	uxth	r1, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4822      	ldr	r0, [pc, #136]	; (8000668 <LCD_SendInternal+0xa8>)
 80005de:	f002 f93d 	bl	800285c <HAL_I2C_IsDeviceReady>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d000      	beq.n	80005ee <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80005ec:	e7f1      	b.n	80005d2 <LCD_SendInternal+0x12>
            break;
 80005ee:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	f023 030f 	bic.w	r3, r3, #15
 80005f6:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80005fe:	7bba      	ldrb	r2, [r7, #14]
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800060e:	7bba      	ldrb	r2, [r7, #14]
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	4313      	orrs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	b2db      	uxtb	r3, r3
 800061c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800061e:	7b7a      	ldrb	r2, [r7, #13]
 8000620:	797b      	ldrb	r3, [r7, #5]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 030c 	orr.w	r3, r3, #12
 800062a:	b2db      	uxtb	r3, r3
 800062c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800062e:	7b7a      	ldrb	r2, [r7, #13]
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	4313      	orrs	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b299      	uxth	r1, r3
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2304      	movs	r3, #4
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <LCD_SendInternal+0xa8>)
 8000650:	f002 f806 	bl	8002660 <HAL_I2C_Master_Transmit>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000658:	2005      	movs	r0, #5
 800065a:	f001 f84f 	bl	80016fc <HAL_Delay>
    return res;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000050c 	.word	0x2000050c

0800066c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 800067c:	79b9      	ldrb	r1, [r7, #6]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2200      	movs	r2, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff9c 	bl	80005c0 <LCD_SendInternal>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80006a0:	79b9      	ldrb	r1, [r7, #6]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff8a 	bl	80005c0 <LCD_SendInternal>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2130      	movs	r1, #48	; 0x30
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffd2 	bl	800066c <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffcd 	bl	800066c <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	210c      	movs	r1, #12
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffc8 	bl	800066c <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2101      	movs	r1, #1
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffc3 	bl	800066c <LCD_SendCommand>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	6039      	str	r1, [r7, #0]
 80006f8:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80006fa:	e009      	b.n	8000710 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffc3 	bl	8000690 <LCD_SendData>
        str++;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f1      	bne.n	80006fc <LCD_SendString+0xe>
    }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <lcd_init>:

void lcd_init() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //I2C_Scan();
    LCD_Init(LCD_ADDR);
 8000728:	204e      	movs	r0, #78	; 0x4e
 800072a:	f7ff ffc3 	bl	80006b4 <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	204e      	movs	r0, #78	; 0x4e
 8000732:	f7ff ff9b 	bl	800066c <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
 8000736:	4907      	ldr	r1, [pc, #28]	; (8000754 <lcd_init+0x30>)
 8000738:	204e      	movs	r0, #78	; 0x4e
 800073a:	f7ff ffd8 	bl	80006ee <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 800073e:	21c0      	movs	r1, #192	; 0xc0
 8000740:	204e      	movs	r0, #78	; 0x4e
 8000742:	f7ff ff93 	bl	800066c <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
 8000746:	4904      	ldr	r1, [pc, #16]	; (8000758 <lcd_init+0x34>)
 8000748:	204e      	movs	r0, #78	; 0x4e
 800074a:	f7ff ffd0 	bl	80006ee <LCD_SendString>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08007b60 	.word	0x08007b60
 8000758:	08007b70 	.word	0x08007b70

0800075c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b0a      	cmp	r3, #10
 8000768:	d106      	bne.n	8000778 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4907      	ldr	r1, [pc, #28]	; (8000790 <__io_putchar+0x34>)
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <__io_putchar+0x38>)
 8000774:	f003 fee5 	bl	8004542 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2201      	movs	r2, #1
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <__io_putchar+0x38>)
 8000782:	f003 fede 	bl	8004542 <HAL_UART_Transmit>
 return ch;
 8000786:	687b      	ldr	r3, [r7, #4]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	08007bb0 	.word	0x08007bb0
 8000794:	20000560 	.word	0x20000560

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 ff3b 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f82b 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f000 f987 	bl	8000ab8 <MX_GPIO_Init>
  MX_ETH_Init();
 80007aa:	f000 f89f 	bl	80008ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ae:	f000 f92b 	bl	8000a08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007b2:	f000 f953 	bl	8000a5c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80007b6:	f000 f8e7 	bl	8000988 <MX_I2C1_Init>
  //MX_RTC_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007ba:	f000 f88b 	bl	80008d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Test: Main Start\n");
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <main+0x58>)
 80007c0:	f006 f96c 	bl	8006a9c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <main+0x5c>)
 80007c6:	1d3c      	adds	r4, r7, #4
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fd47 	bl	800526e <osThreadCreate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <main+0x60>)
 80007e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  USER_threads();
 80007e6:	f000 fd25 	bl	8001234 <USER_threads>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ea:	f004 fd39 	bl	8005260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x56>
 80007f0:	08007bb4 	.word	0x08007bb4
 80007f4:	08007bd4 	.word	0x08007bd4
 80007f8:	20000ab0 	.word	0x20000ab0

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 fa46 	bl	8006c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <SystemClock_Config+0xd0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a28      	ldr	r2, [pc, #160]	; (80008cc <SystemClock_Config+0xd0>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <SystemClock_Config+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <SystemClock_Config+0xd4>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <SystemClock_Config+0xd4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000858:	2309      	movs	r3, #9
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000874:	23a8      	movs	r3, #168	; 0xa8
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fcb9 	bl	80031fc <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000890:	f000 f9e4 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2105      	movs	r1, #5
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 ff1a 	bl	80036ec <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008be:	f000 f9cd 	bl	8000c5c <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f001 f80c 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f001 f825 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ETH_Init+0x84>)
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <MX_ETH_Init+0x88>)
 80008f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_ETH_Init+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_ETH_Init+0x8c>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_ETH_Init+0x8c>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_ETH_Init+0x8c>)
 800090a:	2200      	movs	r2, #0
 800090c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_ETH_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_ETH_Init+0x8c>)
 8000916:	2200      	movs	r2, #0
 8000918:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_ETH_Init+0x84>)
 800091c:	4a16      	ldr	r2, [pc, #88]	; (8000978 <MX_ETH_Init+0x8c>)
 800091e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ETH_Init+0x84>)
 8000922:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000926:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_ETH_Init+0x84>)
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <MX_ETH_Init+0x90>)
 800092c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ETH_Init+0x84>)
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_ETH_Init+0x94>)
 8000932:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_ETH_Init+0x84>)
 8000936:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800093a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_ETH_Init+0x84>)
 800093e:	f001 f813 	bl	8001968 <HAL_ETH_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f988 	bl	8000c5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800094c:	2238      	movs	r2, #56	; 0x38
 800094e:	2100      	movs	r1, #0
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ETH_Init+0x98>)
 8000952:	f006 f9a3 	bl	8006c9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_ETH_Init+0x98>)
 8000958:	2221      	movs	r2, #33	; 0x21
 800095a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_ETH_Init+0x98>)
 800095e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000962:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_ETH_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000045c 	.word	0x2000045c
 8000974:	40028000 	.word	0x40028000
 8000978:	20000ab4 	.word	0x20000ab4
 800097c:	200003bc 	.word	0x200003bc
 8000980:	2000031c 	.word	0x2000031c
 8000984:	200002e4 	.word	0x200002e4

08000988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_I2C1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_I2C1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_I2C1_Init+0x74>)
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <MX_I2C1_Init+0x7c>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_I2C1_Init+0x74>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_I2C1_Init+0x74>)
 80009c6:	f001 fd07 	bl	80023d8 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 f944 	bl	8000c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <MX_I2C1_Init+0x74>)
 80009d8:	f002 fa77 	bl	8002eca <HAL_I2CEx_ConfigAnalogFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f000 f93b 	bl	8000c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2C1_Init+0x74>)
 80009ea:	f002 faaa 	bl	8002f42 <HAL_I2CEx_ConfigDigitalFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 f932 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000050c 	.word	0x2000050c
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART3_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART3_UART_Init+0x4c>)
 8000a40:	f003 fd32 	bl	80044a8 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f907 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000560 	.word	0x20000560
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	f002 fa8e 	bl	8002fc0 <HAL_PCD_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 f8d7 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200005a4 	.word	0x200005a4

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b59      	ldr	r3, [pc, #356]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a58      	ldr	r2, [pc, #352]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a43      	ldr	r2, [pc, #268]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a3c      	ldr	r2, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a35      	ldr	r2, [pc, #212]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0x180>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x184>)
 8000b9a:	f001 fbd1 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	4827      	ldr	r0, [pc, #156]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ba4:	f001 fbcc 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4821      	ldr	r0, [pc, #132]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000bc0:	f001 f9fa 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bc4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_GPIO_Init+0x184>)
 8000bde:	f001 f9eb 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000bf8:	f001 f9de 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfc:	2340      	movs	r3, #64	; 0x40
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000c14:	f001 f9d0 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000c2c:	f001 f9c4 	bl	8001fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40021400 	.word	0x40021400

08000c4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 fb56 	bl	8005306 <osDelay>
 8000c5a:	e7fb      	b.n	8000c54 <StartDefaultTask+0x8>

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_MspInit+0x54>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x54>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x54>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x54>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fe24 	bl	80018fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <HAL_ETH_MspInit+0x174>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	f040 80a4 	bne.w	8000e2c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfc:	623b      	str	r3, [r7, #32]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a4b      	ldr	r2, [pc, #300]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a36      	ldr	r2, [pc, #216]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_ETH_MspInit+0x178>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000da8:	2332      	movs	r3, #50	; 0x32
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <HAL_ETH_MspInit+0x17c>)
 8000dc4:	f001 f8f8 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dc8:	2386      	movs	r3, #134	; 0x86
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4817      	ldr	r0, [pc, #92]	; (8000e40 <HAL_ETH_MspInit+0x180>)
 8000de4:	f001 f8e8 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <HAL_ETH_MspInit+0x184>)
 8000e06:	f001 f8d7 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_ETH_MspInit+0x188>)
 8000e28:	f001 f8c6 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3738      	adds	r7, #56	; 0x38
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40028000 	.word	0x40028000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40021800 	.word	0x40021800

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_I2C_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12c      	bne.n	8000ec8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e90:	2312      	movs	r3, #18
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_I2C_MspInit+0x8c>)
 8000ea8:	f001 f886 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020400 	.word	0x40020400

08000edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2230      	movs	r2, #48	; 0x30
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fed5 	bl	8006c9c <memset>
  if(hrtc->Instance==RTC)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <HAL_RTC_MspInit+0x4c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d111      	bne.n	8000f20 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000efc:	2320      	movs	r3, #32
 8000efe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fe0e 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f16:	f7ff fea1 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_RTC_MspInit+0x50>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40002800 	.word	0x40002800
 8000f2c:	42470e3c 	.word	0x42470e3c

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d12c      	bne.n	8000fac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x8c>)
 8000fa8:	f001 f806 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe0:	d13f      	bne.n	8001062 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_PCD_MspInit+0xac>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a20      	ldr	r2, [pc, #128]	; (800106c <HAL_PCD_MspInit+0xac>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_PCD_MspInit+0xac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ffe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001010:	230a      	movs	r3, #10
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <HAL_PCD_MspInit+0xb0>)
 800101c:	f000 ffcc 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480e      	ldr	r0, [pc, #56]	; (8001070 <HAL_PCD_MspInit+0xb0>)
 8001036:	f000 ffbf 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_PCD_MspInit+0xac>)
 800103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_PCD_MspInit+0xac>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6353      	str	r3, [r2, #52]	; 0x34
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_PCD_MspInit+0xac>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_PCD_MspInit+0xac>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_PCD_MspInit+0xac>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 fb0a 	bl	80016bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010a8:	f004 ff52 	bl	8005f50 <xTaskGetSchedulerState>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d001      	beq.n	80010b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010b2:	f005 f991 	bl	80063d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}

080010ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80010be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010c2:	f001 f971 	bl	80023a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e00a      	b.n	80010f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010dc:	f3af 8000 	nop.w
 80010e0:	4601      	mov	r1, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	60ba      	str	r2, [r7, #8]
 80010e8:	b2ca      	uxtb	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbf0      	blt.n	80010dc <_read+0x12>
  }

  return len;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e009      	b.n	800112a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb1c 	bl	800075c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbf1      	blt.n	8001116 <_write+0x12>
  }
  return len;
 8001132:	687b      	ldr	r3, [r7, #4]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_close>:

int _close(int file)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001164:	605a      	str	r2, [r3, #4]
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_isatty>:

int _isatty(int file)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f005 fdb0 	bl	8006d38 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20030000 	.word	0x20030000
 8001204:	00000400 	.word	0x00000400
 8001208:	20000abc 	.word	0x20000abc
 800120c:	200049e0 	.word	0x200049e0

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <USER_threads>:

void buttonCheck(void);
void selecClockMode(void);

/*Task functions*/
void USER_threads(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af02      	add	r7, sp, #8
	printf("User threads start!!\n");
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <USER_threads+0x28>)
 800123c:	f005 fc2e 	bl	8006a9c <puts>
	/*lcd_init();
	 vTaskDelay(pdMS_TO_TICKS(2000)); // why this doesnt work?*/
	xTaskCreate((TaskFunction_t) TaskMain, "TaskMain", 256, NULL,
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <USER_threads+0x2c>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2307      	movs	r3, #7
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	4905      	ldr	r1, [pc, #20]	; (8001264 <USER_threads+0x30>)
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <USER_threads+0x34>)
 8001252:	f004 f97d 	bl	8005550 <xTaskCreate>
			TASK_4_PRIO, &xHandleMain);
	//xTaskCreate((TaskFunction_t)Task1, "Task1", 256, NULL, TASK_1_PRIO, &xHandle1);
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08007bf0 	.word	0x08007bf0
 8001260:	20000b30 	.word	0x20000b30
 8001264:	08007c08 	.word	0x08007c08
 8001268:	0800126d 	.word	0x0800126d

0800126c <TaskMain>:

void TaskMain(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
	const char *taskMainName = "TaskMain";
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <TaskMain+0x4c>)
 8001274:	607b      	str	r3, [r7, #4]
	printf("%s start\n", taskMainName);
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <TaskMain+0x50>)
 800127a:	f005 fba9 	bl	80069d0 <iprintf>

	MX_RTC_Init();
 800127e:	f000 f947 	bl	8001510 <MX_RTC_Init>

	lcd_init();
 8001282:	f7ff fa4f 	bl	8000724 <lcd_init>
	vTaskDelay(pdMS_TO_TICKS(2000));
 8001286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800128a:	f004 fa97 	bl	80057bc <vTaskDelay>
	xTaskCreate((TaskFunction_t) TaskShowCurrentTime, "TaskShowCurrentTime", 256, NULL, TASK_1_PRIO,
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <TaskMain+0x54>)
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	230a      	movs	r3, #10
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <TaskMain+0x58>)
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <TaskMain+0x5c>)
 80012a0:	f004 f956 	bl	8005550 <xTaskCreate>
			&xHandle1);
	vTaskSuspend(xHandleMain);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <TaskMain+0x60>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 fabb 	bl	8005824 <vTaskSuspend>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08007c08 	.word	0x08007c08
 80012bc:	08007c14 	.word	0x08007c14
 80012c0:	20000b34 	.word	0x20000b34
 80012c4:	08007c20 	.word	0x08007c20
 80012c8:	080012d1 	.word	0x080012d1
 80012cc:	20000b30 	.word	0x20000b30

080012d0 <TaskShowCurrentTime>:

void TaskShowCurrentTime(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af02      	add	r7, sp, #8
	const char *task1 = "TaskShowCurrentTime";
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <TaskShowCurrentTime+0x44>)
 80012d8:	607b      	str	r3, [r7, #4]
	printf("%s start\n", task1);
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	480e      	ldr	r0, [pc, #56]	; (8001318 <TaskShowCurrentTime+0x48>)
 80012de:	f005 fb77 	bl	80069d0 <iprintf>


	while (1) {
		get_time();
 80012e2:	f000 f831 	bl	8001348 <get_time>
		showCurrentTime();
 80012e6:	f000 f863 	bl	80013b0 <showCurrentTime>
		printf("test\n");
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <TaskShowCurrentTime+0x4c>)
 80012ec:	f005 fbd6 	bl	8006a9c <puts>
		xTaskCreate((TaskFunction_t) TaskbuttonCheck, "TaskbuttonCheck", 256, NULL, TASK_2_PRIO,
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <TaskShowCurrentTime+0x50>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2309      	movs	r3, #9
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2300      	movs	r3, #0
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	4909      	ldr	r1, [pc, #36]	; (8001324 <TaskShowCurrentTime+0x54>)
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <TaskShowCurrentTime+0x58>)
 8001302:	f004 f925 	bl	8005550 <xTaskCreate>
				&xHandle2);
		vTaskSuspend(xHandle1);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <TaskShowCurrentTime+0x5c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fa8a 	bl	8005824 <vTaskSuspend>
	while (1) {
 8001310:	e7e7      	b.n	80012e2 <TaskShowCurrentTime+0x12>
 8001312:	bf00      	nop
 8001314:	08007c20 	.word	0x08007c20
 8001318:	08007c14 	.word	0x08007c14
 800131c:	08007c34 	.word	0x08007c34
 8001320:	20000b38 	.word	0x20000b38
 8001324:	08007c3c 	.word	0x08007c3c
 8001328:	08001331 	.word	0x08001331
 800132c:	20000b34 	.word	0x20000b34

08001330 <TaskbuttonCheck>:
		//buttonCheck();
	}

}

void TaskbuttonCheck(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	printf("button check!!\n");
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <TaskbuttonCheck+0x14>)
 8001336:	f005 fbb1 	bl	8006a9c <puts>

	buttonCheck();
 800133a:	f000 f851 	bl	80013e0 <buttonCheck>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	08007c4c 	.word	0x08007c4c

08001348 <get_time>:

void get_time(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800134e:	2200      	movs	r2, #0
 8001350:	4911      	ldr	r1, [pc, #68]	; (8001398 <get_time+0x50>)
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <get_time+0x54>)
 8001354:	f002 feba 	bl	80040cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001358:	2200      	movs	r2, #0
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <get_time+0x58>)
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <get_time+0x54>)
 800135e:	f002 ff97 	bl	8004290 <HAL_RTC_GetDate>

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d  ",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <get_time+0x50>)
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <get_time+0x5c>)
 8001370:	441a      	add	r2, r3
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <get_time+0x50>)
 8001374:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d  ",
 8001376:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <get_time+0x50>)
 800137a:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d  ",
 800137c:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <get_time+0x50>)
 8001380:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d  ",
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9100      	str	r1, [sp, #0]
 8001386:	4603      	mov	r3, r0
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <get_time+0x60>)
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <get_time+0x64>)
 800138c:	f005 fb8e 	bl	8006aac <siprintf>
//	showCurrentTime();
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000af8 	.word	0x20000af8
 800139c:	20000b10 	.word	0x20000b10
 80013a0:	20000b0c 	.word	0x20000b0c
 80013a4:	20000004 	.word	0x20000004
 80013a8:	08007c5c 	.word	0x08007c5c
 80013ac:	20000ad8 	.word	0x20000ad8

080013b0 <showCurrentTime>:

void showCurrentTime() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	204e      	movs	r0, #78	; 0x4e
 80013b8:	f7ff f958 	bl	800066c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time ");
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <showCurrentTime+0x28>)
 80013be:	204e      	movs	r0, #78	; 0x4e
 80013c0:	f7ff f995 	bl	80006ee <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80013c4:	21c0      	movs	r1, #192	; 0xc0
 80013c6:	204e      	movs	r0, #78	; 0x4e
 80013c8:	f7ff f950 	bl	800066c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 80013cc:	4903      	ldr	r1, [pc, #12]	; (80013dc <showCurrentTime+0x2c>)
 80013ce:	204e      	movs	r0, #78	; 0x4e
 80013d0:	f7ff f98d 	bl	80006ee <LCD_SendString>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08007c74 	.word	0x08007c74
 80013dc:	20000ad8 	.word	0x20000ad8

080013e0 <buttonCheck>:

void buttonCheck(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)) {
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <buttonCheck+0x20>)
 80013ea:	f000 ff91 	bl	8002310 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <buttonCheck+0x1c>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <buttonCheck+0x24>)
 80013f8:	f000 ffbb 	bl	8002372 <HAL_GPIO_TogglePin>
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021400 	.word	0x40021400
 8001404:	40020400 	.word	0x40020400

08001408 <HAL_GPIO_EXTI_Callback>:
 default:
 break;
 }
 }*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001418:	d162      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0xd8>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800141a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141e:	4832      	ldr	r0, [pc, #200]	; (80014e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001420:	f000 ffa7 	bl	8002372 <HAL_GPIO_TogglePin>

		current_time = xTaskGetTickCount();
 8001424:	f004 fb9a 	bl	8005b5c <xTaskGetTickCount>
 8001428:	4603      	mov	r3, r0
 800142a:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_GPIO_EXTI_Callback+0xe4>)
 800142c:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4a2e      	ldr	r2, [pc, #184]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 800143a:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_GPIO_EXTI_Callback+0xe4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001442:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 8001444:	2108      	movs	r1, #8
 8001446:	482c      	ldr	r0, [pc, #176]	; (80014f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001448:	f000 ff62 	bl	8002310 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d146      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0xd8>
			if (interval < 130) {
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b81      	cmp	r3, #129	; 0x81
 8001458:	d805      	bhi.n	8001466 <HAL_GPIO_EXTI_Callback+0x5e>
				btn_cnt += 3;
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3303      	adds	r3, #3
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e02a      	b.n	80014bc <HAL_GPIO_EXTI_Callback+0xb4>
			} else if (interval >= 130 && interval < 200) {
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b81      	cmp	r3, #129	; 0x81
 800146c:	d910      	bls.n	8001490 <HAL_GPIO_EXTI_Callback+0x88>
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2bc7      	cmp	r3, #199	; 0xc7
 8001474:	d80c      	bhi.n	8001490 <HAL_GPIO_EXTI_Callback+0x88>
				printf("One click!!  interval = %u\r\n",
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	4820      	ldr	r0, [pc, #128]	; (8001500 <HAL_GPIO_EXTI_Callback+0xf8>)
 800147e:	f005 faa7 	bl	80069d0 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_GPIO_EXTI_Callback+0xfc>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e015      	b.n	80014bc <HAL_GPIO_EXTI_Callback+0xb4>
			} else if (interval >= 300 && interval <= 1000) {
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001498:	d310      	bcc.n	80014bc <HAL_GPIO_EXTI_Callback+0xb4>
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a2:	d80b      	bhi.n	80014bc <HAL_GPIO_EXTI_Callback+0xb4>
				printf("Long click!!  interval = %u\r\n",
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4817      	ldr	r0, [pc, #92]	; (8001508 <HAL_GPIO_EXTI_Callback+0x100>)
 80014ac:	f005 fa90 	bl	80069d0 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	701a      	strb	r2, [r3, #0]
			}
			if (btn_cnt >= 5) {
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	dd0d      	ble.n	80014e0 <HAL_GPIO_EXTI_Callback+0xd8>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_GPIO_EXTI_Callback+0xec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <HAL_GPIO_EXTI_Callback+0x104>)
 80014d0:	f005 fa7e 	bl	80069d0 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_GPIO_EXTI_Callback+0xf4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014dc:	2203      	movs	r2, #3
 80014de:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40020400 	.word	0x40020400
 80014ec:	20000ac8 	.word	0x20000ac8
 80014f0:	20000acc 	.word	0x20000acc
 80014f4:	20000ad0 	.word	0x20000ad0
 80014f8:	40021400 	.word	0x40021400
 80014fc:	20000ad4 	.word	0x20000ad4
 8001500:	08007c84 	.word	0x08007c84
 8001504:	20000ac0 	.word	0x20000ac0
 8001508:	08007ca4 	.word	0x08007ca4
 800150c:	08007cc4 	.word	0x08007cc4

08001510 <MX_RTC_Init>:

static void MX_RTC_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

	/*USER CODE BEGIN RTC_Init 0*/

	/*USER CODE END RTC_Init 0*/

	RTC_TimeTypeDef sTime = { 0 };
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]

	/*USER CODE END RTC_Init 1*/

	/*Initialize RTC Only*/

	hrtc.Instance = RTC;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <MX_RTC_Init+0xac>)
 800152a:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <MX_RTC_Init+0xb0>)
 800152c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <MX_RTC_Init+0xac>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_RTC_Init+0xac>)
 8001536:	227f      	movs	r2, #127	; 0x7f
 8001538:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_RTC_Init+0xac>)
 800153c:	22ff      	movs	r2, #255	; 0xff
 800153e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_RTC_Init+0xac>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_RTC_Init+0xac>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_RTC_Init+0xac>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <MX_RTC_Init+0xac>)
 8001554:	f002 fcaa 	bl	8003eac <HAL_RTC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_RTC_Init+0x52>
		Error_Handler();
 800155e:	f7ff fb7d 	bl	8000c5c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001562:	2300      	movs	r3, #0
 8001564:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001566:	2300      	movs	r3, #0
 8001568:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800156a:	2300      	movs	r3, #0
 800156c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	480f      	ldr	r0, [pc, #60]	; (80015bc <MX_RTC_Init+0xac>)
 800157e:	f002 fd0b 	bl	8003f98 <HAL_RTC_SetTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_RTC_Init+0x7c>
		Error_Handler();
 8001588:	f7ff fb68 	bl	8000c5c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800158c:	2301      	movs	r3, #1
 800158e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001590:	2301      	movs	r3, #1
 8001592:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001594:	2301      	movs	r3, #1
 8001596:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001598:	2300      	movs	r3, #0
 800159a:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800159c:	463b      	mov	r3, r7
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_RTC_Init+0xac>)
 80015a4:	f002 fdf0 	bl	8004188 <HAL_RTC_SetDate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_RTC_Init+0xa2>
		Error_Handler();
 80015ae:	f7ff fb55 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000b10 	.word	0x20000b10
 80015c0:	40002800 	.word	0x40002800

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	; (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ee:	f7ff fe0f 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f005 fba7 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f8cf 	bl	8000798 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001608:	08007d5c 	.word	0x08007d5c
  ldr r2, =_sbss
 800160c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001610:	200049e0 	.word	0x200049e0

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fb0c 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000010 	.word	0x20000010
 80016b8:	2000000c 	.word	0x2000000c

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000010 	.word	0x20000010
 80016e0:	20000b3c 	.word	0x20000b3c

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000b3c 	.word	0x20000b3c

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000010 	.word	0x20000010

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06c      	b.n	8001a54 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2223      	movs	r2, #35	; 0x23
 8001988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff f997 	bl	8000cc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_ETH_Init+0xf4>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <HAL_ETH_Init+0xf4>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_ETH_Init+0xf4>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_ETH_Init+0xf8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <HAL_ETH_Init+0xf8>)
 80019b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_ETH_Init+0xf8>)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4927      	ldr	r1, [pc, #156]	; (8001a60 <HAL_ETH_Init+0xf8>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_ETH_Init+0xf8>)
 80019ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e4:	f7ff fe7e 	bl	80016e4 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019ea:	e011      	b.n	8001a10 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019ec:	f7ff fe7a 	bl	80016e4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019fa:	d909      	bls.n	8001a10 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	22e0      	movs	r2, #224	; 0xe0
 8001a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e021      	b.n	8001a54 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e4      	bne.n	80019ec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f958 	bl	8001cd8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f9ff 	bl	8001e2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fa55 	bl	8001ede <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f9bd 	bl	8001dbc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800

08001a64 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <ETH_SetMACConfig+0x15c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	7c1b      	ldrb	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <ETH_SetMACConfig+0x28>
 8001a86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a8a:	e000      	b.n	8001a8e <ETH_SetMACConfig+0x2a>
 8001a8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7c5b      	ldrb	r3, [r3, #17]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <ETH_SetMACConfig+0x38>
 8001a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9a:	e000      	b.n	8001a9e <ETH_SetMACConfig+0x3a>
 8001a9c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aa4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	7fdb      	ldrb	r3, [r3, #31]
 8001aaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001aac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	7f92      	ldrb	r2, [r2, #30]
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d102      	bne.n	8001ac2 <ETH_SetMACConfig+0x5e>
 8001abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac0:	e000      	b.n	8001ac4 <ETH_SetMACConfig+0x60>
 8001ac2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ac4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7f1b      	ldrb	r3, [r3, #28]
 8001aca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001acc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ad2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ada:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d102      	bne.n	8001aec <ETH_SetMACConfig+0x88>
 8001ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aea:	e000      	b.n	8001aee <ETH_SetMACConfig+0x8a>
 8001aec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7bdb      	ldrb	r3, [r3, #15]
 8001af4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001af6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001afc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b06:	4313      	orrs	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fdec 	bl	80016fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d101      	bne.n	8001b52 <ETH_SetMACConfig+0xee>
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	e000      	b.n	8001b54 <ETH_SetMACConfig+0xf0>
 8001b52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b62:	2a01      	cmp	r2, #1
 8001b64:	d101      	bne.n	8001b6a <ETH_SetMACConfig+0x106>
 8001b66:	2208      	movs	r2, #8
 8001b68:	e000      	b.n	8001b6c <ETH_SetMACConfig+0x108>
 8001b6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b74:	2a01      	cmp	r2, #1
 8001b76:	d101      	bne.n	8001b7c <ETH_SetMACConfig+0x118>
 8001b78:	2204      	movs	r2, #4
 8001b7a:	e000      	b.n	8001b7e <ETH_SetMACConfig+0x11a>
 8001b7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b86:	2a01      	cmp	r2, #1
 8001b88:	d101      	bne.n	8001b8e <ETH_SetMACConfig+0x12a>
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	e000      	b.n	8001b90 <ETH_SetMACConfig+0x12c>
 8001b8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b90:	4313      	orrs	r3, r2
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fda7 	bl	80016fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	ff20810f 	.word	0xff20810f

08001bc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <ETH_SetDMAConfig+0x110>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7b1b      	ldrb	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <ETH_SetDMAConfig+0x2c>
 8001bea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bee:	e000      	b.n	8001bf2 <ETH_SetDMAConfig+0x2e>
 8001bf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7b5b      	ldrb	r3, [r3, #13]
 8001bf6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bf8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	7f52      	ldrb	r2, [r2, #29]
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d102      	bne.n	8001c08 <ETH_SetDMAConfig+0x44>
 8001c02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c06:	e000      	b.n	8001c0a <ETH_SetDMAConfig+0x46>
 8001c08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	7b9b      	ldrb	r3, [r3, #14]
 8001c10:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c12:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	7f1b      	ldrb	r3, [r3, #28]
 8001c1e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7f9b      	ldrb	r3, [r3, #30]
 8001c26:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c28:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c36:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff fd4e 	bl	80016fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c78:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c7e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c84:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c8c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c8e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c96:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c9c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ca6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001caa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff fd1f 	bl	80016fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f8de3f23 	.word	0xf8de3f23

08001cd8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0a6      	sub	sp, #152	; 0x98
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d14:	2300      	movs	r3, #0
 8001d16:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe86 	bl	8001a64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ff08 	bl	8001bc4 <ETH_SetDMAConfig>
}
 8001db4:	bf00      	nop
 8001db6:	3798      	adds	r7, #152	; 0x98
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3305      	adds	r3, #5
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	3204      	adds	r2, #4
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <ETH_MACAddressConfig+0x68>)
 8001dde:	4413      	add	r3, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3303      	adds	r3, #3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	061a      	lsls	r2, r3, #24
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3302      	adds	r3, #2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	4313      	orrs	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <ETH_MACAddressConfig+0x6c>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40028040 	.word	0x40028040
 8001e28:	40028044 	.word	0x40028044

08001e2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e03e      	b.n	8001eb8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	3206      	adds	r2, #6
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d80c      	bhi.n	8001e9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	e004      	b.n	8001ea6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d9bd      	bls.n	8001e3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed0:	611a      	str	r2, [r3, #16]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e046      	b.n	8001f7a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f28:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f30:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	3212      	adds	r2, #18
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d80c      	bhi.n	8001f6a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6919      	ldr	r1, [r3, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	e004      	b.n	8001f74 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d9b5      	bls.n	8001eec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	60da      	str	r2, [r3, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e177      	b.n	80022c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 8166 	bne.w	80022be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d005      	beq.n	800200a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d130      	bne.n	800206c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80c0 	beq.w	80022be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_GPIO_Init+0x324>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_GPIO_Init+0x324>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_GPIO_Init+0x324>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <HAL_GPIO_Init+0x328>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_GPIO_Init+0x32c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d037      	beq.n	80021f6 <HAL_GPIO_Init+0x23e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_GPIO_Init+0x330>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_GPIO_Init+0x23a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a56      	ldr	r2, [pc, #344]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02b      	beq.n	80021ee <HAL_GPIO_Init+0x236>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <HAL_GPIO_Init+0x338>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d025      	beq.n	80021ea <HAL_GPIO_Init+0x232>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_GPIO_Init+0x33c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <HAL_GPIO_Init+0x22e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_GPIO_Init+0x340>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d019      	beq.n	80021e2 <HAL_GPIO_Init+0x22a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_GPIO_Init+0x344>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0x226>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a51      	ldr	r2, [pc, #324]	; (8002300 <HAL_GPIO_Init+0x348>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_Init+0x222>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_GPIO_Init+0x34c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_Init+0x21e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	; (8002308 <HAL_GPIO_Init+0x350>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_Init+0x21a>
 80021ce:	2309      	movs	r3, #9
 80021d0:	e012      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021d2:	230a      	movs	r3, #10
 80021d4:	e010      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021d6:	2308      	movs	r3, #8
 80021d8:	e00e      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021da:	2307      	movs	r3, #7
 80021dc:	e00c      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021de:	2306      	movs	r3, #6
 80021e0:	e00a      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x240>
 80021f6:	2300      	movs	r3, #0
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002208:	4935      	ldr	r1, [pc, #212]	; (80022e0 <HAL_GPIO_Init+0x328>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_GPIO_Init+0x354>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_GPIO_Init+0x354>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_GPIO_Init+0x354>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002264:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_GPIO_Init+0x354>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_GPIO_Init+0x354>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_GPIO_Init+0x354>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_GPIO_Init+0x354>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b8:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_GPIO_Init+0x354>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	f67f ae84 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40021400 	.word	0x40021400
 80022fc:	40021800 	.word	0x40021800
 8002300:	40021c00 	.word	0x40021c00
 8002304:	40022000 	.word	0x40022000
 8002308:	40022400 	.word	0x40022400
 800230c:	40013c00 	.word	0x40013c00

08002310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e001      	b.n	8002332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	041a      	lsls	r2, r3, #16
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43d9      	mvns	r1, r3
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	400b      	ands	r3, r1
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f81e 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e12b      	b.n	8002642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fd24 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800243a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800243c:	f001 fb4e 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8002440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a81      	ldr	r2, [pc, #516]	; (800264c <HAL_I2C_Init+0x274>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d807      	bhi.n	800245c <HAL_I2C_Init+0x84>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a80      	ldr	r2, [pc, #512]	; (8002650 <HAL_I2C_Init+0x278>)
 8002450:	4293      	cmp	r3, r2
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e006      	b.n	800246a <HAL_I2C_Init+0x92>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a7d      	ldr	r2, [pc, #500]	; (8002654 <HAL_I2C_Init+0x27c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0e7      	b.n	8002642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a78      	ldr	r2, [pc, #480]	; (8002658 <HAL_I2C_Init+0x280>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0c9b      	lsrs	r3, r3, #18
 800247c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a6a      	ldr	r2, [pc, #424]	; (800264c <HAL_I2C_Init+0x274>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d802      	bhi.n	80024ac <HAL_I2C_Init+0xd4>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3301      	adds	r3, #1
 80024aa:	e009      	b.n	80024c0 <HAL_I2C_Init+0xe8>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_I2C_Init+0x284>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	3301      	adds	r3, #1
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	495c      	ldr	r1, [pc, #368]	; (800264c <HAL_I2C_Init+0x274>)
 80024dc:	428b      	cmp	r3, r1
 80024de:	d819      	bhi.n	8002514 <HAL_I2C_Init+0x13c>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e59      	subs	r1, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ee:	1c59      	adds	r1, r3, #1
 80024f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f4:	400b      	ands	r3, r1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_I2C_Init+0x138>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e59      	subs	r1, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fbb1 f3f3 	udiv	r3, r1, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250e:	e051      	b.n	80025b4 <HAL_I2C_Init+0x1dc>
 8002510:	2304      	movs	r3, #4
 8002512:	e04f      	b.n	80025b4 <HAL_I2C_Init+0x1dc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <HAL_I2C_Init+0x168>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e012      	b.n	8002566 <HAL_I2C_Init+0x18e>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x196>
 800256a:	2301      	movs	r3, #1
 800256c:	e022      	b.n	80025b4 <HAL_I2C_Init+0x1dc>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10e      	bne.n	8002594 <HAL_I2C_Init+0x1bc>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e58      	subs	r0, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	440b      	add	r3, r1
 8002584:	fbb0 f3f3 	udiv	r3, r0, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Init+0x1dc>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	6809      	ldr	r1, [r1, #0]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6911      	ldr	r1, [r2, #16]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	000186a0 	.word	0x000186a0
 8002650:	001e847f 	.word	0x001e847f
 8002654:	003d08ff 	.word	0x003d08ff
 8002658:	431bde83 	.word	0x431bde83
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	461a      	mov	r2, r3
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
 8002670:	4613      	mov	r3, r2
 8002672:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff f836 	bl	80016e4 <HAL_GetTick>
 8002678:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	f040 80e0 	bne.w	8002848 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2319      	movs	r3, #25
 800268e:	2201      	movs	r2, #1
 8002690:	4970      	ldr	r1, [pc, #448]	; (8002854 <HAL_I2C_Master_Transmit+0x1f4>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fa92 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	e0d3      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_I2C_Master_Transmit+0x50>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e0cc      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d007      	beq.n	80026d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2221      	movs	r2, #33	; 0x21
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2210      	movs	r2, #16
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_I2C_Master_Transmit+0x1f8>)
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f9ca 	bl	8002ab8 <I2C_MasterRequestWrite>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e08d      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002744:	e066      	b.n	8002814 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fb0c 	bl	8002d68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b04      	cmp	r3, #4
 800275c:	d107      	bne.n	800276e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e06b      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11b      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x188>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d017      	beq.n	80027e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	6a39      	ldr	r1, [r7, #32]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fafc 	bl	8002dea <I2C_WaitOnBTFFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d107      	bne.n	8002810 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e01a      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d194      	bne.n	8002746 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e000      	b.n	800284a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	00100002 	.word	0x00100002
 8002858:	ffff0000 	.word	0xffff0000

0800285c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7fe ff3a 	bl	80016e4 <HAL_GetTick>
 8002870:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b20      	cmp	r3, #32
 8002880:	f040 8111 	bne.w	8002aa6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	4988      	ldr	r1, [pc, #544]	; (8002ab0 <HAL_I2C_IsDeviceReady+0x254>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f994 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	e104      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_I2C_IsDeviceReady+0x50>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0fd      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d007      	beq.n	80028d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a70      	ldr	r2, [pc, #448]	; (8002ab4 <HAL_I2C_IsDeviceReady+0x258>)
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f952 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292c:	d103      	bne.n	8002936 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0b6      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002948:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe fecb 	bl	80016e4 <HAL_GetTick>
 800294e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800297e:	e025      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002980:	f7fe feb0 	bl	80016e4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <HAL_I2C_IsDeviceReady+0x13a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22a0      	movs	r2, #160	; 0xa0
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2ba0      	cmp	r3, #160	; 0xa0
 80029d6:	d005      	beq.n	80029e4 <HAL_I2C_IsDeviceReady+0x188>
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_I2C_IsDeviceReady+0x188>
 80029de:	7dbb      	ldrb	r3, [r7, #22]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0cd      	beq.n	8002980 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d129      	bne.n	8002a4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	4921      	ldr	r1, [pc, #132]	; (8002ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8c6 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e036      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e02c      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	490f      	ldr	r1, [pc, #60]	; (8002ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8a2 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e012      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f4ff af32 	bcc.w	80028f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	00100002 	.word	0x00100002
 8002ab4:	ffff0000 	.word	0xffff0000

08002ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d006      	beq.n	8002ae2 <I2C_MasterRequestWrite+0x2a>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d003      	beq.n	8002ae2 <I2C_MasterRequestWrite+0x2a>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ae0:	d108      	bne.n	8002af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e00b      	b.n	8002b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d107      	bne.n	8002b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f84f 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b32:	d103      	bne.n	8002b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e035      	b.n	8002bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b48:	d108      	bne.n	8002b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e01b      	b.n	8002b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	11db      	asrs	r3, r3, #7
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0306 	and.w	r3, r3, #6
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f063 030f 	orn	r3, r3, #15
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <I2C_MasterRequestWrite+0xfc>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f875 	bl	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e010      	b.n	8002bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <I2C_MasterRequestWrite+0x100>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f865 	bl	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	00010008 	.word	0x00010008
 8002bb8:	00010002 	.word	0x00010002

08002bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bcc:	e025      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d021      	beq.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe fd85 	bl	80016e4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e023      	b.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10d      	bne.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	e00c      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d0b6      	beq.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c78:	e051      	b.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c88:	d123      	bne.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e046      	b.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d021      	beq.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fe fd03 	bl	80016e4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e020      	b.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e00b      	b.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d18d      	bne.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d74:	e02d      	b.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f878 	bl	8002e6c <I2C_IsAcknowledgeFailed>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e02d      	b.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d021      	beq.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fe fca9 	bl	80016e4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d1ca      	bne.n	8002d76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df6:	e02d      	b.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f837 	bl	8002e6c <I2C_IsAcknowledgeFailed>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e02d      	b.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d021      	beq.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7fe fc68 	bl	80016e4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e007      	b.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d1ca      	bne.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e82:	d11b      	bne.n	8002ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d129      	bne.n	8002f34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0210 	bic.w	r2, r2, #16
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d12a      	bne.n	8002fb2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f7c:	89fb      	ldrh	r3, [r7, #14]
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	89fb      	ldrh	r3, [r7, #14]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	89fa      	ldrh	r2, [r7, #14]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b08f      	sub	sp, #60	; 0x3c
 8002fc4:	af0a      	add	r7, sp, #40	; 0x28
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e10f      	b.n	80031f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7fd ffe7 	bl	8000fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fe6c 	bl	8004cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	687e      	ldr	r6, [r7, #4]
 800301e:	466d      	mov	r5, sp
 8003020:	f106 0410 	add.w	r4, r6, #16
 8003024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003030:	e885 0003 	stmia.w	r5, {r0, r1}
 8003034:	1d33      	adds	r3, r6, #4
 8003036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003038:	6838      	ldr	r0, [r7, #0]
 800303a:	f001 fdf7 	bl	8004c2c <USB_CoreInit>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0d0      	b.n	80031f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f001 fe5a 	bl	8004d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e04a      	b.n	80030f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	333d      	adds	r3, #61	; 0x3d
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	333c      	adds	r3, #60	; 0x3c
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	b298      	uxth	r0, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3344      	adds	r3, #68	; 0x44
 800309e:	4602      	mov	r2, r0
 80030a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3348      	adds	r3, #72	; 0x48
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334c      	adds	r3, #76	; 0x4c
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3354      	adds	r3, #84	; 0x54
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3af      	bcc.n	8003062 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e044      	b.n	8003192 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3b5      	bcc.n	8003108 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	687e      	ldr	r6, [r7, #4]
 80031a4:	466d      	mov	r5, sp
 80031a6:	f106 0410 	add.w	r4, r6, #16
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ba:	1d33      	adds	r3, r6, #4
 80031bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f001 fdf2 	bl	8004da8 <USB_DevInit>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00d      	b.n	80031f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 ffbd 	bl	800516a <USB_DevDisconnect>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080031fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e267      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d075      	beq.n	8003306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00c      	beq.n	8003240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d112      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b82      	ldr	r3, [pc, #520]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323e:	d10b      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d05b      	beq.n	8003304 <HAL_RCC_OscConfig+0x108>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d157      	bne.n	8003304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e242      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x74>
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6c      	ldr	r2, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003294:	4b69      	ldr	r3, [pc, #420]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b66      	ldr	r3, [pc, #408]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a65      	ldr	r2, [pc, #404]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fa16 	bl	80016e4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fa12 	bl	80016e4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e207      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b5b      	ldr	r3, [pc, #364]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xc0>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fa02 	bl	80016e4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe f9fe 	bl	80016e4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e1f3      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0xe8>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003326:	2b08      	cmp	r3, #8
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1c7      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4937      	ldr	r1, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe f9b7 	bl	80016e4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe f9b3 	bl	80016e4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1a8      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f996 	bl	80016e4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe f992 	bl	80016e4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e187      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x248>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe f976 	bl	80016e4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe f972 	bl	80016e4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e167      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x200>
 800341a:	e01b      	b.n	8003454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x248>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe f95f 	bl	80016e4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	e00e      	b.n	8003448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe f95b 	bl	80016e4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d907      	bls.n	8003448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e150      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ea      	bne.n	800342a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b7d      	ldr	r3, [pc, #500]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b7a      	ldr	r3, [pc, #488]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b77      	ldr	r3, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b74      	ldr	r3, [pc, #464]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a73      	ldr	r2, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe f91b 	bl	80016e4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe f917 	bl	80016e4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e10c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2ea>
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x30c>
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a5e      	ldr	r2, [pc, #376]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 8003508:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a57      	ldr	r2, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b55      	ldr	r3, [pc, #340]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe f8dc 	bl	80016e4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe f8d8 	bl	80016e4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0cb      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b49      	ldr	r3, [pc, #292]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x334>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fe f8c6 	bl	80016e4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe f8c2 	bl	80016e4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0b5      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a1 	beq.w	80036dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d05c      	beq.n	8003660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d141      	bne.n	8003632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe f896 	bl	80016e4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe f892 	bl	80016e4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e087      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	491b      	ldr	r1, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe f86b 	bl	80016e4 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe f867 	bl	80016e4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e05c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x416>
 8003630:	e054      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe f854 	bl	80016e4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f850 	bl	80016e4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e045      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x444>
 800365e:	e03d      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e038      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	40007000 	.word	0x40007000
 8003674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4ec>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d028      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d121      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11a      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fd ff82 	bl	80016e4 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fd ff7e 	bl	80016e4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f821 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fee2 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08007d00 	.word	0x08007d00
 80038b0:	20000000 	.word	0x20000000
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b094      	sub	sp, #80	; 0x50
 80038be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	2300      	movs	r3, #0
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d0:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d00d      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x40>
 80038dc:	2b08      	cmp	r3, #8
 80038de:	f200 80e1 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ea:	e0db      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038f0:	e0db      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f6:	e0d8      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f8:	4b6f      	ldr	r3, [pc, #444]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
 8003918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4621      	mov	r1, r4
 8003944:	1a51      	subs	r1, r2, r1
 8003946:	6139      	str	r1, [r7, #16]
 8003948:	4629      	mov	r1, r5
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800395c:	4659      	mov	r1, fp
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	4651      	mov	r1, sl
 8003962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003966:	4651      	mov	r1, sl
 8003968:	018a      	lsls	r2, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ebb2 0801 	subs.w	r8, r2, r1
 8003970:	4659      	mov	r1, fp
 8003972:	eb63 0901 	sbc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	462b      	mov	r3, r5
 8003998:	eb49 0303 	adc.w	r3, r9, r3
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039aa:	4629      	mov	r1, r5
 80039ac:	024b      	lsls	r3, r1, #9
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b4:	4621      	mov	r1, r4
 80039b6:	024a      	lsls	r2, r1, #9
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039c8:	f7fc fc62 	bl	8000290 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	e058      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	4611      	mov	r1, r2
 80039e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	f04f 0000 	mov.w	r0, #0
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a02:	0150      	lsls	r0, r2, #5
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a28:	ebb2 040a 	subs.w	r4, r2, sl
 8003a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	00eb      	lsls	r3, r5, #3
 8003a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3e:	00e2      	lsls	r2, r4, #3
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	18e3      	adds	r3, r4, r3
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	61fa      	str	r2, [r7, #28]
 8003a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7c:	f7fc fc08 	bl	8000290 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3750      	adds	r7, #80	; 0x50
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff0 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08007d10 	.word	0x08007d10

08003b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b08:	f7ff ffdc 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0b5b      	lsrs	r3, r3, #13
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08007d10 	.word	0x08007d10

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d075      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b60:	4b91      	ldr	r3, [pc, #580]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b66:	f7fd fdbd 	bl	80016e4 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b6e:	f7fd fdb9 	bl	80016e4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e189      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b80:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	019a      	lsls	r2, r3, #6
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	071b      	lsls	r3, r3, #28
 8003ba4:	4981      	ldr	r1, [pc, #516]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01f      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb8:	4b7c      	ldr	r3, [pc, #496]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbe:	0f1b      	lsrs	r3, r3, #28
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	019a      	lsls	r2, r3, #6
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	071b      	lsls	r3, r3, #28
 8003bd8:	4974      	ldr	r1, [pc, #464]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be0:	4b72      	ldr	r3, [pc, #456]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be6:	f023 021f 	bic.w	r2, r3, #31
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	496e      	ldr	r1, [pc, #440]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	019a      	lsls	r2, r3, #6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	071b      	lsls	r3, r3, #28
 8003c18:	4964      	ldr	r1, [pc, #400]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c26:	f7fd fd5d 	bl	80016e4 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c2e:	f7fd fd59 	bl	80016e4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e129      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c40:	4b5a      	ldr	r3, [pc, #360]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d079      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fd3b 	bl	80016e4 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c72:	f7fd fd37 	bl	80016e4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e107      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c90:	d0ef      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9e:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	0f1b      	lsrs	r3, r3, #28
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	019a      	lsls	r2, r3, #6
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	493b      	ldr	r1, [pc, #236]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cc6:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01e      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	0e1b      	lsrs	r3, r3, #24
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	019a      	lsls	r2, r3, #6
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	071b      	lsls	r3, r3, #28
 8003d0c:	4927      	ldr	r1, [pc, #156]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d30:	f7fd fcd8 	bl	80016e4 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d38:	f7fd fcd4 	bl	80016e4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0a4      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d56:	d1ef      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 808b 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd fca9 	bl	80016e4 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d94:	e010      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd fca5 	bl	80016e4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d909      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e075      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003da8:	42470068 	.word	0x42470068
 8003dac:	40023800 	.word	0x40023800
 8003db0:	42470070 	.word	0x42470070
 8003db4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0e8      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02f      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d028      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de2:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dec:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d114      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd fc6b 	bl	80016e4 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd fc67 	bl	80016e4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e035      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	4912      	ldr	r1, [pc, #72]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]
 8003e5c:	e005      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003e90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	42470e40 	.word	0x42470e40
 8003ea8:	424711e0 	.word	0x424711e0

08003eac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e066      	b.n	8003f90 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7f5b      	ldrb	r3, [r3, #29]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd f802 	bl	8000edc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	22ca      	movs	r2, #202	; 0xca
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2253      	movs	r2, #83	; 0x53
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa45 	bl	800437e <RTC_EnterInitMode>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d12c      	bne.n	8003f58 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f10:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68d2      	ldr	r2, [r2, #12]
 8003f38:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6919      	ldr	r1, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa4c 	bl	80043ec <RTC_ExitInitMode>
 8003f54:	4603      	mov	r3, r0
 8003f56:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d113      	bne.n	8003f86 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	22ff      	movs	r2, #255	; 0xff
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	7f1b      	ldrb	r3, [r3, #28]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_RTC_SetTime+0x1c>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e087      	b.n	80040c4 <HAL_RTC_SetTime+0x12c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d126      	bne.n	8004014 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa29 	bl	8004436 <RTC_ByteToBcd2>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa22 	bl	8004436 <RTC_ByteToBcd2>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ff6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	789b      	ldrb	r3, [r3, #2]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa1a 	bl	8004436 <RTC_ByteToBcd2>
 8004002:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004004:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e018      	b.n	8004046 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004034:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800403a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	78db      	ldrb	r3, [r3, #3]
 8004040:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	22ca      	movs	r2, #202	; 0xca
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2253      	movs	r2, #83	; 0x53
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f991 	bl	800437e <RTC_EnterInitMode>
 800405c:	4603      	mov	r3, r0
 800405e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d120      	bne.n	80040a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004070:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004074:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004084:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6899      	ldr	r1, [r3, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9a4 	bl	80043ec <RTC_ExitInitMode>
 80040a4:	4603      	mov	r3, r0
 80040a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	771a      	strb	r2, [r3, #28]

  return status;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004102:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	0d9b      	lsrs	r3, r3, #22
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11a      	bne.n	800417e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f98f 	bl	8004470 <RTC_Bcd2ToByte>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f986 	bl	8004470 <RTC_Bcd2ToByte>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	789b      	ldrb	r3, [r3, #2]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f97d 	bl	8004470 <RTC_Bcd2ToByte>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	7f1b      	ldrb	r3, [r3, #28]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_RTC_SetDate+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e071      	b.n	8004288 <HAL_RTC_SetDate+0x100>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2202      	movs	r2, #2
 80041ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <HAL_RTC_SetDate+0x4c>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	330a      	adds	r3, #10
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11c      	bne.n	8004214 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	78db      	ldrb	r3, [r3, #3]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f929 	bl	8004436 <RTC_ByteToBcd2>
 80041e4:	4603      	mov	r3, r0
 80041e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f922 	bl	8004436 <RTC_ByteToBcd2>
 80041f2:	4603      	mov	r3, r0
 80041f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	789b      	ldrb	r3, [r3, #2]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f91a 	bl	8004436 <RTC_ByteToBcd2>
 8004202:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004204:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e00e      	b.n	8004232 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	78db      	ldrb	r3, [r3, #3]
 8004218:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004220:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004226:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	22ca      	movs	r2, #202	; 0xca
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2253      	movs	r2, #83	; 0x53
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f89b 	bl	800437e <RTC_EnterInitMode>
 8004248:	4603      	mov	r3, r0
 800424a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10c      	bne.n	800426c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004260:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f8c2 	bl	80043ec <RTC_ExitInitMode>
 8004268:	4603      	mov	r3, r0
 800426a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	771a      	strb	r2, [r3, #28]

  return status;
 8004286:	7cfb      	ldrb	r3, [r7, #19]
}
 8004288:	4618      	mov	r0, r3
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd90      	pop	{r4, r7, pc}

08004290 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	0b5b      	lsrs	r3, r3, #13
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11a      	bne.n	8004324 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	78db      	ldrb	r3, [r3, #3]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8bc 	bl	8004470 <RTC_Bcd2ToByte>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f8b3 	bl	8004470 <RTC_Bcd2ToByte>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f8aa 	bl	8004470 <RTC_Bcd2ToByte>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004348:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800434a:	f7fd f9cb 	bl	80016e4 <HAL_GetTick>
 800434e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004350:	e009      	b.n	8004366 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004352:	f7fd f9c7 	bl	80016e4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004360:	d901      	bls.n	8004366 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e007      	b.n	8004376 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ee      	beq.n	8004352 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d122      	bne.n	80043e2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ac:	f7fd f99a 	bl	80016e4 <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043b2:	e00c      	b.n	80043ce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043b4:	f7fd f996 	bl	80016e4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c2:	d904      	bls.n	80043ce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2204      	movs	r2, #4
 80043c8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <RTC_EnterInitMode+0x64>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d1e8      	bne.n	80043b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004406:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ff89 	bl	800432e <HAL_RTC_WaitForSynchro>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004444:	e005      	b.n	8004452 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	3b0a      	subs	r3, #10
 8004450:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2b09      	cmp	r3, #9
 8004456:	d8f6      	bhi.n	8004446 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	b2da      	uxtb	r2, r3
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	4313      	orrs	r3, r2
 8004462:	b2db      	uxtb	r3, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	0092      	lsls	r2, r2, #2
 8004488:	4413      	add	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	4413      	add	r3, r2
 800449a:	b2db      	uxtb	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e03f      	b.n	800453a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fd2e 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	; 0x24
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f929 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b08a      	sub	sp, #40	; 0x28
 8004546:	af02      	add	r7, sp, #8
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d17c      	bne.n	800465c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_UART_Transmit+0x2c>
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e075      	b.n	800465e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_UART_Transmit+0x3e>
 800457c:	2302      	movs	r3, #2
 800457e:	e06e      	b.n	800465e <HAL_UART_Transmit+0x11c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2221      	movs	r2, #33	; 0x21
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004596:	f7fd f8a5 	bl	80016e4 <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d108      	bne.n	80045c4 <HAL_UART_Transmit+0x82>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e003      	b.n	80045cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045d4:	e02a      	b.n	800462c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f840 	bl	8004666 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e036      	b.n	800465e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	3302      	adds	r3, #2
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e007      	b.n	800461e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	3301      	adds	r3, #1
 800461c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1cf      	bne.n	80045d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	2140      	movs	r1, #64	; 0x40
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f810 	bl	8004666 <UART_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b090      	sub	sp, #64	; 0x40
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4613      	mov	r3, r2
 8004674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004676:	e050      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d04c      	beq.n	800471a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0x30>
 8004686:	f7fd f82d 	bl	80016e4 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004692:	429a      	cmp	r2, r3
 8004694:	d241      	bcs.n	800471a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b6:	637a      	str	r2, [r7, #52]	; 0x34
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	613b      	str	r3, [r7, #16]
   return(result);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ea:	623a      	str	r2, [r7, #32]
 80046ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e00f      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d09f      	beq.n	8004678 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3740      	adds	r7, #64	; 0x40
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0c0      	sub	sp, #256	; 0x100
 800474a:	af00      	add	r7, sp, #0
 800474c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	ea40 0301 	orr.w	r3, r0, r1
 800476c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800479c:	f021 010c 	bic.w	r1, r1, #12
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047aa:	430b      	orrs	r3, r1
 80047ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	6999      	ldr	r1, [r3, #24]
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	ea40 0301 	orr.w	r3, r0, r1
 80047ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <UART_SetConfig+0x2cc>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <UART_SetConfig+0xa0>
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <UART_SetConfig+0x2d0>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d104      	bne.n	80047ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7ff f98e 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 80047e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047ec:	e003      	b.n	80047f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ee:	f7ff f975 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 80047f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	f040 810c 	bne.w	8004a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800480e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	1891      	adds	r1, r2, r2
 800481c:	65b9      	str	r1, [r7, #88]	; 0x58
 800481e:	415b      	adcs	r3, r3
 8004820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004826:	4621      	mov	r1, r4
 8004828:	eb12 0801 	adds.w	r8, r2, r1
 800482c:	4629      	mov	r1, r5
 800482e:	eb43 0901 	adc.w	r9, r3, r1
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004846:	4690      	mov	r8, r2
 8004848:	4699      	mov	r9, r3
 800484a:	4623      	mov	r3, r4
 800484c:	eb18 0303 	adds.w	r3, r8, r3
 8004850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004854:	462b      	mov	r3, r5
 8004856:	eb49 0303 	adc.w	r3, r9, r3
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800486e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004872:	460b      	mov	r3, r1
 8004874:	18db      	adds	r3, r3, r3
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
 8004878:	4613      	mov	r3, r2
 800487a:	eb42 0303 	adc.w	r3, r2, r3
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
 8004880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004888:	f7fb fd02 	bl	8000290 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048b4:	415b      	adcs	r3, r3
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048bc:	4641      	mov	r1, r8
 80048be:	eb12 0a01 	adds.w	sl, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0b01 	adc.w	fp, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048dc:	4692      	mov	sl, r2
 80048de:	469b      	mov	fp, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	eb1a 0303 	adds.w	r3, sl, r3
 80048e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb4b 0303 	adc.w	r3, fp, r3
 80048f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
 8004916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800491a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800491e:	f7fb fcb7 	bl	8000290 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4611      	mov	r1, r2
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2301 	umull	r2, r3, r3, r1
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2264      	movs	r2, #100	; 0x64
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004940:	fba3 2302 	umull	r2, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800495c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	63b9      	str	r1, [r7, #56]	; 0x38
 8004968:	415b      	adcs	r3, r3
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6339      	str	r1, [r7, #48]	; 0x30
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049da:	f7fb fc59 	bl	8000290 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049e4:	fba3 1302 	umull	r1, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	2164      	movs	r1, #100	; 0x64
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	3332      	adds	r3, #50	; 0x32
 80049f6:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0207 	and.w	r2, r3, #7
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4422      	add	r2, r4
 8004a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a0c:	e106      	b.n	8004c1c <UART_SetConfig+0x4d8>
 8004a0e:	bf00      	nop
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40011400 	.word	0x40011400
 8004a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	6239      	str	r1, [r7, #32]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1854      	adds	r4, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0501 	adc.w	r5, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	00eb      	lsls	r3, r5, #3
 8004a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	18e3      	adds	r3, r4, r3
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a64:	464b      	mov	r3, r9
 8004a66:	eb45 0303 	adc.w	r3, r5, r3
 8004a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	008b      	lsls	r3, r1, #2
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a94:	4621      	mov	r1, r4
 8004a96:	008a      	lsls	r2, r1, #2
 8004a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a9c:	f7fb fbf8 	bl	8000290 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	011c      	lsls	r4, r3, #4
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	61b9      	str	r1, [r7, #24]
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	6139      	str	r1, [r7, #16]
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	00cb      	lsls	r3, r1, #3
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af2:	4651      	mov	r1, sl
 8004af4:	00ca      	lsls	r2, r1, #3
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4642      	mov	r2, r8
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b3a:	f7fb fba9 	bl	8000290 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b46:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2264      	movs	r2, #100	; 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	1acb      	subs	r3, r1, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a33      	ldr	r2, [pc, #204]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b84:	4641      	mov	r1, r8
 8004b86:	1851      	adds	r1, r2, r1
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	414b      	adcs	r3, r1
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	00cb      	lsls	r3, r1, #3
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	00ca      	lsls	r2, r1, #3
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	189b      	adds	r3, r3, r2
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	460a      	mov	r2, r1
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bca:	667a      	str	r2, [r7, #100]	; 0x64
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bd8:	4649      	mov	r1, r9
 8004bda:	008b      	lsls	r3, r1, #2
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be2:	4641      	mov	r1, r8
 8004be4:	008a      	lsls	r2, r1, #2
 8004be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bea:	f7fb fb51 	bl	8000290 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	; 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4422      	add	r2, r4
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c22:	46bd      	mov	sp, r7
 8004c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 001c 	add.w	r0, r7, #28
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d122      	bne.n	8004c8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 faa2 	bl	80051c8 <USB_CoreReset>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e01a      	b.n	8004cc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa96 	bl	80051c8 <USB_CoreReset>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb2:	e005      	b.n	8004cc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10b      	bne.n	8004cde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f043 0206 	orr.w	r2, r3, #6
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cea:	b004      	add	sp, #16
 8004cec:	4770      	bx	lr

08004cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d115      	bne.n	8004d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f7fc fcdc 	bl	80016fc <HAL_Delay>
      ms++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa2e 	bl	80051ac <USB_GetMode>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d01e      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b31      	cmp	r3, #49	; 0x31
 8004d5a:	d9f0      	bls.n	8004d3e <USB_SetCurrentMode+0x2e>
 8004d5c:	e01a      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d70:	2001      	movs	r0, #1
 8004d72:	f7fc fcc3 	bl	80016fc <HAL_Delay>
      ms++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa15 	bl	80051ac <USB_GetMode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b31      	cmp	r3, #49	; 0x31
 8004d8c:	d9f0      	bls.n	8004d70 <USB_SetCurrentMode+0x60>
 8004d8e:	e001      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e005      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b32      	cmp	r3, #50	; 0x32
 8004d98:	d101      	bne.n	8004d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e009      	b.n	8004ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3340      	adds	r3, #64	; 0x40
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0e      	cmp	r3, #14
 8004de0:	d9f2      	bls.n	8004dc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11c      	bne.n	8004e22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e20:	e00b      	b.n	8004e3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	461a      	mov	r2, r3
 8004e56:	680b      	ldr	r3, [r1, #0]
 8004e58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10c      	bne.n	8004e7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e66:	2100      	movs	r1, #0
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f965 	bl	8005138 <USB_SetDevSpeed>
 8004e6e:	e008      	b.n	8004e82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e70:	2101      	movs	r1, #1
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f960 	bl	8005138 <USB_SetDevSpeed>
 8004e78:	e003      	b.n	8004e82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e7a:	2103      	movs	r1, #3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f95b 	bl	8005138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e82:	2110      	movs	r1, #16
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8f3 	bl	8005070 <USB_FlushTxFifo>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f91f 	bl	80050d8 <USB_FlushRxFifo>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e043      	b.n	8004f56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee4:	d118      	bne.n	8004f18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e013      	b.n	8004f2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e008      	b.n	8004f2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b7      	bcc.n	8004ece <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e043      	b.n	8004fec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f7a:	d118      	bne.n	8004fae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e013      	b.n	8004fc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e008      	b.n	8004fc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3b7      	bcc.n	8004f64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f043 0210 	orr.w	r2, r3, #16
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <USB_DevInit+0x2c4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f043 0208 	orr.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d107      	bne.n	800505c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005068:	b004      	add	sp, #16
 800506a:	4770      	bx	lr
 800506c:	803c3800 	.word	0x803c3800

08005070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <USB_FlushTxFifo+0x64>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e01b      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	daf2      	bge.n	800507e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <USB_FlushTxFifo+0x64>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d0f0      	beq.n	80050a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	00030d40 	.word	0x00030d40

080050d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <USB_FlushRxFifo+0x5c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e018      	b.n	8005128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2210      	movs	r2, #16
 8005106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <USB_FlushRxFifo+0x5c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e006      	b.n	8005128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d0f0      	beq.n	8005108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	00030d40 	.word	0x00030d40

08005138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005184:	f023 0303 	bic.w	r3, r3, #3
 8005188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0301 	and.w	r3, r3, #1
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <USB_CoreReset+0x64>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e01b      	b.n	800521e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	daf2      	bge.n	80051d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <USB_CoreReset+0x64>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d0f0      	beq.n	80051fe <USB_CoreReset+0x36>

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	00030d40 	.word	0x00030d40

08005230 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800523e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005242:	2b84      	cmp	r3, #132	; 0x84
 8005244:	d005      	beq.n	8005252 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005246:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	3303      	adds	r3, #3
 8005250:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005264:	f000 fb70 	bl	8005948 <vTaskStartScheduler>
  
  return osOK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	bd80      	pop	{r7, pc}

0800526e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800526e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005270:	b089      	sub	sp, #36	; 0x24
 8005272:	af04      	add	r7, sp, #16
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <osThreadCreate+0x54>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01c      	beq.n	80052c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685c      	ldr	r4, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691e      	ldr	r6, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ffc8 	bl	8005230 <makeFreeRtosPriority>
 80052a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052aa:	9202      	str	r2, [sp, #8]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	9100      	str	r1, [sp, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4632      	mov	r2, r6
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f8ed 	bl	8005496 <xTaskCreateStatic>
 80052bc:	4603      	mov	r3, r0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e01c      	b.n	80052fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685c      	ldr	r4, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ffaa 	bl	8005230 <makeFreeRtosPriority>
 80052dc:	4602      	mov	r2, r0
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	9200      	str	r2, [sp, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	4632      	mov	r2, r6
 80052ea:	4629      	mov	r1, r5
 80052ec:	4620      	mov	r0, r4
 80052ee:	f000 f92f 	bl	8005550 <xTaskCreate>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d001      	beq.n	80052fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052fc:	68fb      	ldr	r3, [r7, #12]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005306 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <osDelay+0x16>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	e000      	b.n	800531e <osDelay+0x18>
 800531c:	2301      	movs	r3, #1
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fa4c 	bl	80057bc <vTaskDelay>
  
  return osOK;
 8005324:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 0208 	add.w	r2, r3, #8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f04f 32ff 	mov.w	r2, #4294967295
 8005346:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f103 0208 	add.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f103 0208 	add.w	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d103      	bne.n	80053f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e00c      	b.n	800540a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3308      	adds	r3, #8
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e002      	b.n	80053fe <vListInsert+0x2e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	d2f6      	bcs.n	80053f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6892      	ldr	r2, [r2, #8]
 8005458:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6852      	ldr	r2, [r2, #4]
 8005462:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d103      	bne.n	8005476 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005496:	b580      	push	{r7, lr}
 8005498:	b08e      	sub	sp, #56	; 0x38
 800549a:	af04      	add	r7, sp, #16
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <xTaskCreateStatic+0x46>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	61fb      	str	r3, [r7, #28]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054dc:	2354      	movs	r3, #84	; 0x54
 80054de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b54      	cmp	r3, #84	; 0x54
 80054e4:	d00a      	beq.n	80054fc <xTaskCreateStatic+0x66>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61bb      	str	r3, [r7, #24]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01e      	beq.n	8005542 <xTaskCreateStatic+0xac>
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800551c:	2300      	movs	r3, #0
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	f107 0314 	add.w	r3, r7, #20
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f850 	bl	80055da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800553a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800553c:	f000 f8d4 	bl	80056e8 <prvAddNewTaskToReadyList>
 8005540:	e001      	b.n	8005546 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005546:	697b      	ldr	r3, [r7, #20]
	}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	; 0x30
 8005554:	af04      	add	r7, sp, #16
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f000 ff87 	bl	8006478 <pvPortMalloc>
 800556a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005572:	2054      	movs	r0, #84	; 0x54
 8005574:	f000 ff80 	bl	8006478 <pvPortMalloc>
 8005578:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
 8005586:	e005      	b.n	8005594 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f001 f841 	bl	8006610 <vPortFree>
 800558e:	e001      	b.n	8005594 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d017      	beq.n	80055ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	2300      	movs	r3, #0
 80055a6:	9303      	str	r3, [sp, #12]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f80e 	bl	80055da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055be:	69f8      	ldr	r0, [r7, #28]
 80055c0:	f000 f892 	bl	80056e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055c4:	2301      	movs	r3, #1
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e002      	b.n	80055d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295
 80055ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055d0:	69bb      	ldr	r3, [r7, #24]
	}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055f2:	3b01      	subs	r3, #1
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f023 0307 	bic.w	r3, r3, #7
 8005600:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <prvInitialiseNewTask+0x48>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	617b      	str	r3, [r7, #20]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01f      	beq.n	8005668 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e012      	b.n	8005654 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	7819      	ldrb	r1, [r3, #0]
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	3334      	adds	r3, #52	; 0x34
 800563e:	460a      	mov	r2, r1
 8005640:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d006      	beq.n	800565c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3301      	adds	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b0f      	cmp	r3, #15
 8005658:	d9e9      	bls.n	800562e <prvInitialiseNewTask+0x54>
 800565a:	e000      	b.n	800565e <prvInitialiseNewTask+0x84>
			{
				break;
 800565c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005666:	e003      	b.n	8005670 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b06      	cmp	r3, #6
 8005674:	d901      	bls.n	800567a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005676:	2306      	movs	r3, #6
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2200      	movs	r2, #0
 800568a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fe6c 	bl	800536e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	3318      	adds	r3, #24
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fe67 	bl	800536e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	f1c3 0207 	rsb	r2, r3, #7
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2200      	movs	r2, #0
 80056ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	69b8      	ldr	r0, [r7, #24]
 80056ca:	f000 fcc5 	bl	8006058 <pxPortInitialiseStack>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e0:	bf00      	nop
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056f0:	f000 fde0 	bl	80062b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <prvAddNewTaskToReadyList+0xb8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <prvAddNewTaskToReadyList+0xb8>)
 80056fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <prvAddNewTaskToReadyList+0xbc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <prvAddNewTaskToReadyList+0xbc>)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <prvAddNewTaskToReadyList+0xb8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d110      	bne.n	8005736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005714:	f000 fb5e 	bl	8005dd4 <prvInitialiseTaskLists>
 8005718:	e00d      	b.n	8005736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <prvAddNewTaskToReadyList+0xc0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <prvAddNewTaskToReadyList+0xbc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	429a      	cmp	r2, r3
 800572e:	d802      	bhi.n	8005736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <prvAddNewTaskToReadyList+0xbc>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <prvAddNewTaskToReadyList+0xc4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <prvAddNewTaskToReadyList+0xc4>)
 800573e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	2201      	movs	r2, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <prvAddNewTaskToReadyList+0xc8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4313      	orrs	r3, r2
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <prvAddNewTaskToReadyList+0xc8>)
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <prvAddNewTaskToReadyList+0xcc>)
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f7ff fe0d 	bl	8005388 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800576e:	f000 fdd1 	bl	8006314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <prvAddNewTaskToReadyList+0xc0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00e      	beq.n	8005798 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <prvAddNewTaskToReadyList+0xbc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	429a      	cmp	r2, r3
 8005786:	d207      	bcs.n	8005798 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <prvAddNewTaskToReadyList+0xd0>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000c40 	.word	0x20000c40
 80057a4:	20000b40 	.word	0x20000b40
 80057a8:	20000c4c 	.word	0x20000c4c
 80057ac:	20000c5c 	.word	0x20000c5c
 80057b0:	20000c48 	.word	0x20000c48
 80057b4:	20000b44 	.word	0x20000b44
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d017      	beq.n	80057fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <vTaskDelay+0x60>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <vTaskDelay+0x30>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60bb      	str	r3, [r7, #8]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057ec:	f000 f90c 	bl	8005a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057f0:	2100      	movs	r1, #0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fbca 	bl	8005f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057f8:	f000 f914 	bl	8005a24 <xTaskResumeAll>
 80057fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <vTaskDelay+0x64>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000c68 	.word	0x20000c68
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800582c:	f000 fd42 	bl	80062b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <vTaskSuspend+0x18>
 8005836:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <vTaskSuspend+0x104>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	e000      	b.n	800583e <vTaskSuspend+0x1a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fdfc 	bl	8005442 <uxListRemove>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d115      	bne.n	800587c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4935      	ldr	r1, [pc, #212]	; (800592c <vTaskSuspend+0x108>)
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <vTaskSuspend+0x58>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	2201      	movs	r2, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43da      	mvns	r2, r3
 8005872:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <vTaskSuspend+0x10c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4013      	ands	r3, r2
 8005878:	4a2d      	ldr	r2, [pc, #180]	; (8005930 <vTaskSuspend+0x10c>)
 800587a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3318      	adds	r3, #24
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fdda 	bl	8005442 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4827      	ldr	r0, [pc, #156]	; (8005934 <vTaskSuspend+0x110>)
 8005896:	f7ff fd77 	bl	8005388 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d103      	bne.n	80058ae <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80058ae:	f000 fd31 	bl	8006314 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80058b2:	4b21      	ldr	r3, [pc, #132]	; (8005938 <vTaskSuspend+0x114>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80058ba:	f000 fcfb 	bl	80062b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80058be:	f000 fb27 	bl	8005f10 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80058c2:	f000 fd27 	bl	8006314 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <vTaskSuspend+0x104>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d127      	bne.n	8005920 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <vTaskSuspend+0x114>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <vTaskSuspend+0x118>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <vTaskSuspend+0xd2>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60bb      	str	r3, [r7, #8]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80058f6:	4b12      	ldr	r3, [pc, #72]	; (8005940 <vTaskSuspend+0x11c>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005906:	e00b      	b.n	8005920 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vTaskSuspend+0x110>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <vTaskSuspend+0x120>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d103      	bne.n	800591c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <vTaskSuspend+0x104>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
	}
 800591a:	e001      	b.n	8005920 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800591c:	f000 f9e6 	bl	8005cec <vTaskSwitchContext>
	}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000b40 	.word	0x20000b40
 800592c:	20000b44 	.word	0x20000b44
 8005930:	20000c48 	.word	0x20000c48
 8005934:	20000c2c 	.word	0x20000c2c
 8005938:	20000c4c 	.word	0x20000c4c
 800593c:	20000c68 	.word	0x20000c68
 8005940:	e000ed04 	.word	0xe000ed04
 8005944:	20000c40 	.word	0x20000c40

08005948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005956:	463a      	mov	r2, r7
 8005958:	1d39      	adds	r1, r7, #4
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7fa fe14 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	9202      	str	r2, [sp, #8]
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	460a      	mov	r2, r1
 8005976:	491e      	ldr	r1, [pc, #120]	; (80059f0 <vTaskStartScheduler+0xa8>)
 8005978:	481e      	ldr	r0, [pc, #120]	; (80059f4 <vTaskStartScheduler+0xac>)
 800597a:	f7ff fd8c 	bl	8005496 <xTaskCreateStatic>
 800597e:	4603      	mov	r3, r0
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <vTaskStartScheduler+0xb0>)
 8005982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <vTaskStartScheduler+0xb0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e001      	b.n	8005996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d116      	bne.n	80059ca <vTaskStartScheduler+0x82>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
}
 80059ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <vTaskStartScheduler+0xb4>)
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <vTaskStartScheduler+0xb8>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <vTaskStartScheduler+0xbc>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059c4:	f000 fbd4 	bl	8006170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059c8:	e00e      	b.n	80059e8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d10a      	bne.n	80059e8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60fb      	str	r3, [r7, #12]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vTaskStartScheduler+0x9e>
}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	08007cf8 	.word	0x08007cf8
 80059f4:	08005da5 	.word	0x08005da5
 80059f8:	20000c64 	.word	0x20000c64
 80059fc:	20000c60 	.word	0x20000c60
 8005a00:	20000c4c 	.word	0x20000c4c
 8005a04:	20000c44 	.word	0x20000c44

08005a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <vTaskSuspendAll+0x18>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a03      	ldr	r2, [pc, #12]	; (8005a20 <vTaskSuspendAll+0x18>)
 8005a14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a16:	bf00      	nop
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000c68 	.word	0x20000c68

08005a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a32:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <xTaskResumeAll+0x114>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	603b      	str	r3, [r7, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a50:	f000 fc30 	bl	80062b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a54:	4b38      	ldr	r3, [pc, #224]	; (8005b38 <xTaskResumeAll+0x114>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	4a37      	ldr	r2, [pc, #220]	; (8005b38 <xTaskResumeAll+0x114>)
 8005a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <xTaskResumeAll+0x114>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d161      	bne.n	8005b2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a66:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <xTaskResumeAll+0x118>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d05d      	beq.n	8005b2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a6e:	e02e      	b.n	8005ace <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <xTaskResumeAll+0x11c>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3318      	adds	r3, #24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fce0 	bl	8005442 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fcdb 	bl	8005442 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <xTaskResumeAll+0x120>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <xTaskResumeAll+0x120>)
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <xTaskResumeAll+0x124>)
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7ff fc67 	bl	8005388 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <xTaskResumeAll+0x128>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ac8:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <xTaskResumeAll+0x12c>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ace:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <xTaskResumeAll+0x11c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1cc      	bne.n	8005a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005adc:	f000 fa18 	bl	8005f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <xTaskResumeAll+0x130>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d010      	beq.n	8005b0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005aec:	f000 f846 	bl	8005b7c <xTaskIncrementTick>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005af6:	4b16      	ldr	r3, [pc, #88]	; (8005b50 <xTaskResumeAll+0x12c>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f1      	bne.n	8005aec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <xTaskResumeAll+0x130>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <xTaskResumeAll+0x12c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <xTaskResumeAll+0x134>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b2a:	f000 fbf3 	bl	8006314 <vPortExitCritical>

	return xAlreadyYielded;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000c68 	.word	0x20000c68
 8005b3c:	20000c40 	.word	0x20000c40
 8005b40:	20000c00 	.word	0x20000c00
 8005b44:	20000c48 	.word	0x20000c48
 8005b48:	20000b44 	.word	0x20000b44
 8005b4c:	20000b40 	.word	0x20000b40
 8005b50:	20000c54 	.word	0x20000c54
 8005b54:	20000c50 	.word	0x20000c50
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <xTaskGetTickCount+0x1c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b68:	687b      	ldr	r3, [r7, #4]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000c44 	.word	0x20000c44

08005b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <xTaskIncrementTick+0x144>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 808e 	bne.w	8005cac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b90:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <xTaskIncrementTick+0x148>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b98:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <xTaskIncrementTick+0x148>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d120      	bne.n	8005be6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ba4:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <xTaskIncrementTick+0x14c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	603b      	str	r3, [r7, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskIncrementTick+0x46>
 8005bc4:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <xTaskIncrementTick+0x14c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <xTaskIncrementTick+0x150>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a3e      	ldr	r2, [pc, #248]	; (8005cc8 <xTaskIncrementTick+0x14c>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4a3e      	ldr	r2, [pc, #248]	; (8005ccc <xTaskIncrementTick+0x150>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <xTaskIncrementTick+0x154>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <xTaskIncrementTick+0x154>)
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	f000 f995 	bl	8005f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005be6:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <xTaskIncrementTick+0x158>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d348      	bcc.n	8005c82 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf0:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <xTaskIncrementTick+0x14c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <xTaskIncrementTick+0x158>)
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	601a      	str	r2, [r3, #0]
					break;
 8005c02:	e03e      	b.n	8005c82 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c04:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <xTaskIncrementTick+0x14c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d203      	bcs.n	8005c24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	; (8005cd4 <xTaskIncrementTick+0x158>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c22:	e02e      	b.n	8005c82 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff fc0a 	bl	8005442 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3318      	adds	r3, #24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fc01 	bl	8005442 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <xTaskIncrementTick+0x15c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <xTaskIncrementTick+0x15c>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a1f      	ldr	r2, [pc, #124]	; (8005cdc <xTaskIncrementTick+0x160>)
 8005c60:	441a      	add	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7ff fb8d 	bl	8005388 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <xTaskIncrementTick+0x164>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3b9      	bcc.n	8005bf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c80:	e7b6      	b.n	8005bf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c82:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <xTaskIncrementTick+0x164>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	4914      	ldr	r1, [pc, #80]	; (8005cdc <xTaskIncrementTick+0x160>)
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d901      	bls.n	8005c9e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xTaskIncrementTick+0x168>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e004      	b.n	8005cb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cac:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <xTaskIncrementTick+0x16c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <xTaskIncrementTick+0x16c>)
 8005cb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cb6:	697b      	ldr	r3, [r7, #20]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000c68 	.word	0x20000c68
 8005cc4:	20000c44 	.word	0x20000c44
 8005cc8:	20000bf8 	.word	0x20000bf8
 8005ccc:	20000bfc 	.word	0x20000bfc
 8005cd0:	20000c58 	.word	0x20000c58
 8005cd4:	20000c60 	.word	0x20000c60
 8005cd8:	20000c48 	.word	0x20000c48
 8005cdc:	20000b44 	.word	0x20000b44
 8005ce0:	20000b40 	.word	0x20000b40
 8005ce4:	20000c54 	.word	0x20000c54
 8005ce8:	20000c50 	.word	0x20000c50

08005cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cf2:	4b27      	ldr	r3, [pc, #156]	; (8005d90 <vTaskSwitchContext+0xa4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cfa:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <vTaskSwitchContext+0xa8>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d00:	e03f      	b.n	8005d82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <vTaskSwitchContext+0xa8>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <vTaskSwitchContext+0xac>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	fab3 f383 	clz	r3, r3
 8005d14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	f1c3 031f 	rsb	r3, r3, #31
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	491f      	ldr	r1, [pc, #124]	; (8005d9c <vTaskSwitchContext+0xb0>)
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	607b      	str	r3, [r7, #4]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <vTaskSwitchContext+0x5a>
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a12      	ldr	r2, [pc, #72]	; (8005d9c <vTaskSwitchContext+0xb0>)
 8005d54:	4413      	add	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d104      	bne.n	8005d78 <vTaskSwitchContext+0x8c>
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <vTaskSwitchContext+0xb4>)
 8005d80:	6013      	str	r3, [r2, #0]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000c68 	.word	0x20000c68
 8005d94:	20000c54 	.word	0x20000c54
 8005d98:	20000c48 	.word	0x20000c48
 8005d9c:	20000b44 	.word	0x20000b44
 8005da0:	20000b40 	.word	0x20000b40

08005da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dac:	f000 f852 	bl	8005e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <prvIdleTask+0x28>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d9f9      	bls.n	8005dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <prvIdleTask+0x2c>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dc8:	e7f0      	b.n	8005dac <prvIdleTask+0x8>
 8005dca:	bf00      	nop
 8005dcc:	20000b44 	.word	0x20000b44
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e00c      	b.n	8005dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <prvInitialiseTaskLists+0x60>)
 8005dec:	4413      	add	r3, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fa9d 	bl	800532e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d9ef      	bls.n	8005de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e02:	f7ff fa94 	bl	800532e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e06:	480d      	ldr	r0, [pc, #52]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e08:	f7ff fa91 	bl	800532e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e0c:	480c      	ldr	r0, [pc, #48]	; (8005e40 <prvInitialiseTaskLists+0x6c>)
 8005e0e:	f7ff fa8e 	bl	800532e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e12:	480c      	ldr	r0, [pc, #48]	; (8005e44 <prvInitialiseTaskLists+0x70>)
 8005e14:	f7ff fa8b 	bl	800532e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e18:	480b      	ldr	r0, [pc, #44]	; (8005e48 <prvInitialiseTaskLists+0x74>)
 8005e1a:	f7ff fa88 	bl	800532e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvInitialiseTaskLists+0x78>)
 8005e20:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvInitialiseTaskLists+0x7c>)
 8005e26:	4a05      	ldr	r2, [pc, #20]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000b44 	.word	0x20000b44
 8005e38:	20000bd0 	.word	0x20000bd0
 8005e3c:	20000be4 	.word	0x20000be4
 8005e40:	20000c00 	.word	0x20000c00
 8005e44:	20000c14 	.word	0x20000c14
 8005e48:	20000c2c 	.word	0x20000c2c
 8005e4c:	20000bf8 	.word	0x20000bf8
 8005e50:	20000bfc 	.word	0x20000bfc

08005e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5a:	e019      	b.n	8005e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e5c:	f000 fa2a 	bl	80062b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <prvCheckTasksWaitingTermination+0x50>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fae8 	bl	8005442 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e72:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e86:	f000 fa45 	bl	8006314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f810 	bl	8005eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e1      	bne.n	8005e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000c14 	.word	0x20000c14
 8005ea8:	20000c40 	.word	0x20000c40
 8005eac:	20000c28 	.word	0x20000c28

08005eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d108      	bne.n	8005ed4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fba2 	bl	8006610 <vPortFree>
				vPortFree( pxTCB );
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fb9f 	bl	8006610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ed2:	e018      	b.n	8005f06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d103      	bne.n	8005ee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fb96 	bl	8006610 <vPortFree>
	}
 8005ee4:	e00f      	b.n	8005f06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d00a      	beq.n	8005f06 <prvDeleteTCB+0x56>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60fb      	str	r3, [r7, #12]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvDeleteTCB+0x54>
	}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvResetNextTaskUnblockTime+0x38>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <prvResetNextTaskUnblockTime+0x3c>)
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f28:	e008      	b.n	8005f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvResetNextTaskUnblockTime+0x38>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <prvResetNextTaskUnblockTime+0x3c>)
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20000bf8 	.word	0x20000bf8
 8005f4c:	20000c60 	.word	0x20000c60

08005f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <xTaskGetSchedulerState+0x34>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	e008      	b.n	8005f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f64:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <xTaskGetSchedulerState+0x38>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	e001      	b.n	8005f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f76:	687b      	ldr	r3, [r7, #4]
	}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20000c4c 	.word	0x20000c4c
 8005f88:	20000c68 	.word	0x20000c68

08005f8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f96:	4b29      	ldr	r3, [pc, #164]	; (800603c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f9c:	4b28      	ldr	r3, [pc, #160]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fa4d 	bl	8005442 <uxListRemove>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	4b21      	ldr	r3, [pc, #132]	; (8006044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	4a20      	ldr	r2, [pc, #128]	; (8006044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d10a      	bne.n	8005fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	481a      	ldr	r0, [pc, #104]	; (8006048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fde:	f7ff f9d3 	bl	8005388 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fe2:	e026      	b.n	8006032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fec:	4b14      	ldr	r3, [pc, #80]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d209      	bcs.n	8006010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f7ff f9e1 	bl	80053d0 <vListInsert>
}
 800600e:	e010      	b.n	8006032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f7ff f9d7 	bl	80053d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d202      	bcs.n	8006032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800602c:	4a09      	ldr	r2, [pc, #36]	; (8006054 <prvAddCurrentTaskToDelayedList+0xc8>)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000c44 	.word	0x20000c44
 8006040:	20000b40 	.word	0x20000b40
 8006044:	20000c48 	.word	0x20000c48
 8006048:	20000c2c 	.word	0x20000c2c
 800604c:	20000bfc 	.word	0x20000bfc
 8006050:	20000bf8 	.word	0x20000bf8
 8006054:	20000c60 	.word	0x20000c60

08006058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3b04      	subs	r3, #4
 8006068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3b04      	subs	r3, #4
 8006076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3b04      	subs	r3, #4
 8006086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006088:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <pxPortInitialiseStack+0x64>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3b14      	subs	r3, #20
 8006092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b04      	subs	r3, #4
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f06f 0202 	mvn.w	r2, #2
 80060a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b20      	subs	r3, #32
 80060ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060ae:	68fb      	ldr	r3, [r7, #12]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	080060c1 	.word	0x080060c1

080060c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <prvTaskExitError+0x54>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d00a      	beq.n	80060ea <prvTaskExitError+0x2a>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	60fb      	str	r3, [r7, #12]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <prvTaskExitError+0x28>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60bb      	str	r3, [r7, #8]
}
 80060fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060fe:	bf00      	nop
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0fc      	beq.n	8006100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000014 	.word	0x20000014
	...

08006120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <pxCurrentTCBConst2>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	f380 8809 	msr	PSP, r0
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8811 	msr	BASEPRI, r0
 800613a:	4770      	bx	lr
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst2>:
 8006140:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006148:	4808      	ldr	r0, [pc, #32]	; (800616c <prvPortStartFirstTask+0x24>)
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f380 8808 	msr	MSP, r0
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8814 	msr	CONTROL, r0
 800615a:	b662      	cpsie	i
 800615c:	b661      	cpsie	f
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	df00      	svc	0
 8006168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800616a:	bf00      	nop
 800616c:	e000ed08 	.word	0xe000ed08

08006170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006176:	4b46      	ldr	r3, [pc, #280]	; (8006290 <xPortStartScheduler+0x120>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a46      	ldr	r2, [pc, #280]	; (8006294 <xPortStartScheduler+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10a      	bne.n	8006196 <xPortStartScheduler+0x26>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006196:	4b3e      	ldr	r3, [pc, #248]	; (8006290 <xPortStartScheduler+0x120>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <xPortStartScheduler+0x128>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10a      	bne.n	80061b6 <xPortStartScheduler+0x46>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60fb      	str	r3, [r7, #12]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061b6:	4b39      	ldr	r3, [pc, #228]	; (800629c <xPortStartScheduler+0x12c>)
 80061b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <xPortStartScheduler+0x130>)
 80061dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <xPortStartScheduler+0x134>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061e4:	e009      	b.n	80061fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061e6:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <xPortStartScheduler+0x134>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4a2d      	ldr	r2, [pc, #180]	; (80062a4 <xPortStartScheduler+0x134>)
 80061ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d0ef      	beq.n	80061e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <xPortStartScheduler+0x134>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1c3 0307 	rsb	r3, r3, #7
 800620e:	2b04      	cmp	r3, #4
 8006210:	d00a      	beq.n	8006228 <xPortStartScheduler+0xb8>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60bb      	str	r3, [r7, #8]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <xPortStartScheduler+0x134>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <xPortStartScheduler+0x134>)
 8006230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <xPortStartScheduler+0x134>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <xPortStartScheduler+0x134>)
 800623c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006246:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <xPortStartScheduler+0x138>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <xPortStartScheduler+0x138>)
 800624c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <xPortStartScheduler+0x138>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <xPortStartScheduler+0x138>)
 8006258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800625c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800625e:	f000 f8dd 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <xPortStartScheduler+0x13c>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006268:	f000 f8fc 	bl	8006464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800626c:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <xPortStartScheduler+0x140>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <xPortStartScheduler+0x140>)
 8006272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006278:	f7ff ff66 	bl	8006148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800627c:	f7ff fd36 	bl	8005cec <vTaskSwitchContext>
	prvTaskExitError();
 8006280:	f7ff ff1e 	bl	80060c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	e000ed00 	.word	0xe000ed00
 8006294:	410fc271 	.word	0x410fc271
 8006298:	410fc270 	.word	0x410fc270
 800629c:	e000e400 	.word	0xe000e400
 80062a0:	20000c6c 	.word	0x20000c6c
 80062a4:	20000c70 	.word	0x20000c70
 80062a8:	e000ed20 	.word	0xe000ed20
 80062ac:	20000014 	.word	0x20000014
 80062b0:	e000ef34 	.word	0xe000ef34

080062b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	607b      	str	r3, [r7, #4]
}
 80062cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <vPortEnterCritical+0x58>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a0d      	ldr	r2, [pc, #52]	; (800630c <vPortEnterCritical+0x58>)
 80062d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <vPortEnterCritical+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10f      	bne.n	8006300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortEnterCritical+0x5c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <vPortEnterCritical+0x4c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <vPortEnterCritical+0x4a>
	}
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000014 	.word	0x20000014
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <vPortExitCritical+0x50>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <vPortExitCritical+0x24>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	607b      	str	r3, [r7, #4]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <vPortExitCritical+0x50>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <vPortExitCritical+0x50>)
 8006340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <vPortExitCritical+0x42>
 800634a:	2300      	movs	r3, #0
 800634c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000014 	.word	0x20000014
	...

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f01e 0f10 	tst.w	lr, #16
 8006380:	bf08      	it	eq
 8006382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006394:	f380 8811 	msr	BASEPRI, r0
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f7ff fca4 	bl	8005cec <vTaskSwitchContext>
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f380 8811 	msr	BASEPRI, r0
 80063ac:	bc09      	pop	{r0, r3}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	f01e 0f10 	tst.w	lr, #16
 80063ba:	bf08      	it	eq
 80063bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063c0:	f380 8809 	msr	PSP, r0
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst>:
 80063d0:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f7ff fbc3 	bl	8005b7c <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <xPortSysTickHandler+0x40>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	; (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006472:	bf00      	nop
 8006474:	e000ed88 	.word	0xe000ed88

08006478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006484:	f7ff fac0 	bl	8005a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006488:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <pvPortMalloc+0x180>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006490:	f000 f920 	bl	80066d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006494:	4b59      	ldr	r3, [pc, #356]	; (80065fc <pvPortMalloc+0x184>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8093 	bne.w	80065c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01d      	beq.n	80064e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064a8:	2208      	movs	r2, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d014      	beq.n	80064e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f023 0307 	bic.w	r3, r3, #7
 80064c0:	3308      	adds	r3, #8
 80064c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <pvPortMalloc+0x6c>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	617b      	str	r3, [r7, #20]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d06e      	beq.n	80065c8 <pvPortMalloc+0x150>
 80064ea:	4b45      	ldr	r3, [pc, #276]	; (8006600 <pvPortMalloc+0x188>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d869      	bhi.n	80065c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <pvPortMalloc+0x18c>)
 80064f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <pvPortMalloc+0x18c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fe:	e004      	b.n	800650a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d903      	bls.n	800651c <pvPortMalloc+0xa4>
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f1      	bne.n	8006500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <pvPortMalloc+0x180>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	429a      	cmp	r2, r3
 8006524:	d050      	beq.n	80065c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2208      	movs	r2, #8
 800652c:	4413      	add	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	2308      	movs	r3, #8
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	429a      	cmp	r2, r3
 8006546:	d91f      	bls.n	8006588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4413      	add	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <pvPortMalloc+0xf8>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	613b      	str	r3, [r7, #16]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006582:	69b8      	ldr	r0, [r7, #24]
 8006584:	f000 f908 	bl	8006798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <pvPortMalloc+0x188>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <pvPortMalloc+0x188>)
 8006594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <pvPortMalloc+0x188>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <pvPortMalloc+0x190>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d203      	bcs.n	80065aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <pvPortMalloc+0x188>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <pvPortMalloc+0x190>)
 80065a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <pvPortMalloc+0x184>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <pvPortMalloc+0x194>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a11      	ldr	r2, [pc, #68]	; (800660c <pvPortMalloc+0x194>)
 80065c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065c8:	f7ff fa2c 	bl	8005a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <pvPortMalloc+0x174>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <pvPortMalloc+0x172>
	return pvReturn;
 80065ec:	69fb      	ldr	r3, [r7, #28]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000487c 	.word	0x2000487c
 80065fc:	20004890 	.word	0x20004890
 8006600:	20004880 	.word	0x20004880
 8006604:	20004874 	.word	0x20004874
 8006608:	20004884 	.word	0x20004884
 800660c:	20004888 	.word	0x20004888

08006610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04d      	beq.n	80066be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006622:	2308      	movs	r3, #8
 8006624:	425b      	negs	r3, r3
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <vPortFree+0xb8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4013      	ands	r3, r2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <vPortFree+0x44>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	60fb      	str	r3, [r7, #12]
}
 8006650:	bf00      	nop
 8006652:	e7fe      	b.n	8006652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <vPortFree+0x62>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60bb      	str	r3, [r7, #8]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <vPortFree+0xb8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01e      	beq.n	80066be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11a      	bne.n	80066be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <vPortFree+0xb8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006698:	f7ff f9b6 	bl	8005a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <vPortFree+0xbc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	4a09      	ldr	r2, [pc, #36]	; (80066cc <vPortFree+0xbc>)
 80066a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f000 f874 	bl	8006798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <vPortFree+0xc0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <vPortFree+0xc0>)
 80066b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066ba:	f7ff f9b3 	bl	8005a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20004890 	.word	0x20004890
 80066cc:	20004880 	.word	0x20004880
 80066d0:	2000488c 	.word	0x2000488c

080066d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <prvHeapInit+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3307      	adds	r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <prvHeapInit+0xac>)
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <prvHeapInit+0xb0>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <prvHeapInit+0xb0>)
 8006714:	2200      	movs	r2, #0
 8006716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006720:	2208      	movs	r2, #8
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a15      	ldr	r2, [pc, #84]	; (8006788 <prvHeapInit+0xb4>)
 8006734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <prvHeapInit+0xb4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <prvHeapInit+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvHeapInit+0xb4>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <prvHeapInit+0xb8>)
 8006762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <prvHeapInit+0xbc>)
 800676a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800676c:	4b09      	ldr	r3, [pc, #36]	; (8006794 <prvHeapInit+0xc0>)
 800676e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	20000c74 	.word	0x20000c74
 8006784:	20004874 	.word	0x20004874
 8006788:	2000487c 	.word	0x2000487c
 800678c:	20004884 	.word	0x20004884
 8006790:	20004880 	.word	0x20004880
 8006794:	20004890 	.word	0x20004890

08006798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067a0:	4b28      	ldr	r3, [pc, #160]	; (8006844 <prvInsertBlockIntoFreeList+0xac>)
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e002      	b.n	80067ac <prvInsertBlockIntoFreeList+0x14>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d8f7      	bhi.n	80067a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d108      	bne.n	80067da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	441a      	add	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d118      	bne.n	8006820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <prvInsertBlockIntoFreeList+0xb0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d00d      	beq.n	8006816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e008      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006816:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <prvInsertBlockIntoFreeList+0xb0>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e003      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d002      	beq.n	8006836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20004874 	.word	0x20004874
 8006848:	2000487c 	.word	0x2000487c

0800684c <std>:
 800684c:	2300      	movs	r3, #0
 800684e:	b510      	push	{r4, lr}
 8006850:	4604      	mov	r4, r0
 8006852:	e9c0 3300 	strd	r3, r3, [r0]
 8006856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800685a:	6083      	str	r3, [r0, #8]
 800685c:	8181      	strh	r1, [r0, #12]
 800685e:	6643      	str	r3, [r0, #100]	; 0x64
 8006860:	81c2      	strh	r2, [r0, #14]
 8006862:	6183      	str	r3, [r0, #24]
 8006864:	4619      	mov	r1, r3
 8006866:	2208      	movs	r2, #8
 8006868:	305c      	adds	r0, #92	; 0x5c
 800686a:	f000 fa17 	bl	8006c9c <memset>
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <std+0x58>)
 8006870:	6263      	str	r3, [r4, #36]	; 0x24
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <std+0x5c>)
 8006874:	62a3      	str	r3, [r4, #40]	; 0x28
 8006876:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <std+0x60>)
 8006878:	62e3      	str	r3, [r4, #44]	; 0x2c
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <std+0x64>)
 800687c:	6323      	str	r3, [r4, #48]	; 0x30
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <std+0x68>)
 8006880:	6224      	str	r4, [r4, #32]
 8006882:	429c      	cmp	r4, r3
 8006884:	d006      	beq.n	8006894 <std+0x48>
 8006886:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800688a:	4294      	cmp	r4, r2
 800688c:	d002      	beq.n	8006894 <std+0x48>
 800688e:	33d0      	adds	r3, #208	; 0xd0
 8006890:	429c      	cmp	r4, r3
 8006892:	d105      	bne.n	80068a0 <std+0x54>
 8006894:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689c:	f000 ba76 	b.w	8006d8c <__retarget_lock_init_recursive>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	08006aed 	.word	0x08006aed
 80068a8:	08006b0f 	.word	0x08006b0f
 80068ac:	08006b47 	.word	0x08006b47
 80068b0:	08006b6b 	.word	0x08006b6b
 80068b4:	20004894 	.word	0x20004894

080068b8 <stdio_exit_handler>:
 80068b8:	4a02      	ldr	r2, [pc, #8]	; (80068c4 <stdio_exit_handler+0xc>)
 80068ba:	4903      	ldr	r1, [pc, #12]	; (80068c8 <stdio_exit_handler+0x10>)
 80068bc:	4803      	ldr	r0, [pc, #12]	; (80068cc <stdio_exit_handler+0x14>)
 80068be:	f000 b869 	b.w	8006994 <_fwalk_sglue>
 80068c2:	bf00      	nop
 80068c4:	20000018 	.word	0x20000018
 80068c8:	08007905 	.word	0x08007905
 80068cc:	20000024 	.word	0x20000024

080068d0 <cleanup_stdio>:
 80068d0:	6841      	ldr	r1, [r0, #4]
 80068d2:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <cleanup_stdio+0x34>)
 80068d4:	4299      	cmp	r1, r3
 80068d6:	b510      	push	{r4, lr}
 80068d8:	4604      	mov	r4, r0
 80068da:	d001      	beq.n	80068e0 <cleanup_stdio+0x10>
 80068dc:	f001 f812 	bl	8007904 <_fflush_r>
 80068e0:	68a1      	ldr	r1, [r4, #8]
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <cleanup_stdio+0x38>)
 80068e4:	4299      	cmp	r1, r3
 80068e6:	d002      	beq.n	80068ee <cleanup_stdio+0x1e>
 80068e8:	4620      	mov	r0, r4
 80068ea:	f001 f80b 	bl	8007904 <_fflush_r>
 80068ee:	68e1      	ldr	r1, [r4, #12]
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <cleanup_stdio+0x3c>)
 80068f2:	4299      	cmp	r1, r3
 80068f4:	d004      	beq.n	8006900 <cleanup_stdio+0x30>
 80068f6:	4620      	mov	r0, r4
 80068f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fc:	f001 b802 	b.w	8007904 <_fflush_r>
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	20004894 	.word	0x20004894
 8006908:	200048fc 	.word	0x200048fc
 800690c:	20004964 	.word	0x20004964

08006910 <global_stdio_init.part.0>:
 8006910:	b510      	push	{r4, lr}
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <global_stdio_init.part.0+0x30>)
 8006914:	4c0b      	ldr	r4, [pc, #44]	; (8006944 <global_stdio_init.part.0+0x34>)
 8006916:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <global_stdio_init.part.0+0x38>)
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	4620      	mov	r0, r4
 800691c:	2200      	movs	r2, #0
 800691e:	2104      	movs	r1, #4
 8006920:	f7ff ff94 	bl	800684c <std>
 8006924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006928:	2201      	movs	r2, #1
 800692a:	2109      	movs	r1, #9
 800692c:	f7ff ff8e 	bl	800684c <std>
 8006930:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006934:	2202      	movs	r2, #2
 8006936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693a:	2112      	movs	r1, #18
 800693c:	f7ff bf86 	b.w	800684c <std>
 8006940:	200049cc 	.word	0x200049cc
 8006944:	20004894 	.word	0x20004894
 8006948:	080068b9 	.word	0x080068b9

0800694c <__sfp_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sfp_lock_acquire+0x8>)
 800694e:	f000 ba1e 	b.w	8006d8e <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	200049d5 	.word	0x200049d5

08006958 <__sfp_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sfp_lock_release+0x8>)
 800695a:	f000 ba19 	b.w	8006d90 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	200049d5 	.word	0x200049d5

08006964 <__sinit>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4604      	mov	r4, r0
 8006968:	f7ff fff0 	bl	800694c <__sfp_lock_acquire>
 800696c:	6a23      	ldr	r3, [r4, #32]
 800696e:	b11b      	cbz	r3, 8006978 <__sinit+0x14>
 8006970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006974:	f7ff bff0 	b.w	8006958 <__sfp_lock_release>
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <__sinit+0x28>)
 800697a:	6223      	str	r3, [r4, #32]
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <__sinit+0x2c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f5      	bne.n	8006970 <__sinit+0xc>
 8006984:	f7ff ffc4 	bl	8006910 <global_stdio_init.part.0>
 8006988:	e7f2      	b.n	8006970 <__sinit+0xc>
 800698a:	bf00      	nop
 800698c:	080068d1 	.word	0x080068d1
 8006990:	200049cc 	.word	0x200049cc

08006994 <_fwalk_sglue>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	4607      	mov	r7, r0
 800699a:	4688      	mov	r8, r1
 800699c:	4614      	mov	r4, r2
 800699e:	2600      	movs	r6, #0
 80069a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069a4:	f1b9 0901 	subs.w	r9, r9, #1
 80069a8:	d505      	bpl.n	80069b6 <_fwalk_sglue+0x22>
 80069aa:	6824      	ldr	r4, [r4, #0]
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	d1f7      	bne.n	80069a0 <_fwalk_sglue+0xc>
 80069b0:	4630      	mov	r0, r6
 80069b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d907      	bls.n	80069cc <_fwalk_sglue+0x38>
 80069bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069c0:	3301      	adds	r3, #1
 80069c2:	d003      	beq.n	80069cc <_fwalk_sglue+0x38>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4638      	mov	r0, r7
 80069c8:	47c0      	blx	r8
 80069ca:	4306      	orrs	r6, r0
 80069cc:	3568      	adds	r5, #104	; 0x68
 80069ce:	e7e9      	b.n	80069a4 <_fwalk_sglue+0x10>

080069d0 <iprintf>:
 80069d0:	b40f      	push	{r0, r1, r2, r3}
 80069d2:	b507      	push	{r0, r1, r2, lr}
 80069d4:	4906      	ldr	r1, [pc, #24]	; (80069f0 <iprintf+0x20>)
 80069d6:	ab04      	add	r3, sp, #16
 80069d8:	6808      	ldr	r0, [r1, #0]
 80069da:	f853 2b04 	ldr.w	r2, [r3], #4
 80069de:	6881      	ldr	r1, [r0, #8]
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f000 fc5f 	bl	80072a4 <_vfiprintf_r>
 80069e6:	b003      	add	sp, #12
 80069e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr
 80069f0:	20000070 	.word	0x20000070

080069f4 <_puts_r>:
 80069f4:	6a03      	ldr	r3, [r0, #32]
 80069f6:	b570      	push	{r4, r5, r6, lr}
 80069f8:	6884      	ldr	r4, [r0, #8]
 80069fa:	4605      	mov	r5, r0
 80069fc:	460e      	mov	r6, r1
 80069fe:	b90b      	cbnz	r3, 8006a04 <_puts_r+0x10>
 8006a00:	f7ff ffb0 	bl	8006964 <__sinit>
 8006a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a06:	07db      	lsls	r3, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_puts_r+0x22>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	0598      	lsls	r0, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_puts_r+0x22>
 8006a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a12:	f000 f9bc 	bl	8006d8e <__retarget_lock_acquire_recursive>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	0719      	lsls	r1, r3, #28
 8006a1a:	d513      	bpl.n	8006a44 <_puts_r+0x50>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	b18b      	cbz	r3, 8006a44 <_puts_r+0x50>
 8006a20:	3e01      	subs	r6, #1
 8006a22:	68a3      	ldr	r3, [r4, #8]
 8006a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	60a3      	str	r3, [r4, #8]
 8006a2c:	b9e9      	cbnz	r1, 8006a6a <_puts_r+0x76>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	da2e      	bge.n	8006a90 <_puts_r+0x9c>
 8006a32:	4622      	mov	r2, r4
 8006a34:	210a      	movs	r1, #10
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f89b 	bl	8006b72 <__swbuf_r>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d007      	beq.n	8006a50 <_puts_r+0x5c>
 8006a40:	250a      	movs	r5, #10
 8006a42:	e007      	b.n	8006a54 <_puts_r+0x60>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f8d0 	bl	8006bec <__swsetup_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0e7      	beq.n	8006a20 <_puts_r+0x2c>
 8006a50:	f04f 35ff 	mov.w	r5, #4294967295
 8006a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d405      	bmi.n	8006a66 <_puts_r+0x72>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_puts_r+0x72>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f995 	bl	8006d90 <__retarget_lock_release_recursive>
 8006a66:	4628      	mov	r0, r5
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da04      	bge.n	8006a78 <_puts_r+0x84>
 8006a6e:	69a2      	ldr	r2, [r4, #24]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	dc06      	bgt.n	8006a82 <_puts_r+0x8e>
 8006a74:	290a      	cmp	r1, #10
 8006a76:	d004      	beq.n	8006a82 <_puts_r+0x8e>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	6022      	str	r2, [r4, #0]
 8006a7e:	7019      	strb	r1, [r3, #0]
 8006a80:	e7cf      	b.n	8006a22 <_puts_r+0x2e>
 8006a82:	4622      	mov	r2, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f874 	bl	8006b72 <__swbuf_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d1c9      	bne.n	8006a22 <_puts_r+0x2e>
 8006a8e:	e7df      	b.n	8006a50 <_puts_r+0x5c>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	250a      	movs	r5, #10
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	701d      	strb	r5, [r3, #0]
 8006a9a:	e7db      	b.n	8006a54 <_puts_r+0x60>

08006a9c <puts>:
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <puts+0xc>)
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f7ff bfa7 	b.w	80069f4 <_puts_r>
 8006aa6:	bf00      	nop
 8006aa8:	20000070 	.word	0x20000070

08006aac <siprintf>:
 8006aac:	b40e      	push	{r1, r2, r3}
 8006aae:	b500      	push	{lr}
 8006ab0:	b09c      	sub	sp, #112	; 0x70
 8006ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ab4:	9002      	str	r0, [sp, #8]
 8006ab6:	9006      	str	r0, [sp, #24]
 8006ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006abc:	4809      	ldr	r0, [pc, #36]	; (8006ae4 <siprintf+0x38>)
 8006abe:	9107      	str	r1, [sp, #28]
 8006ac0:	9104      	str	r1, [sp, #16]
 8006ac2:	4909      	ldr	r1, [pc, #36]	; (8006ae8 <siprintf+0x3c>)
 8006ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac8:	9105      	str	r1, [sp, #20]
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	a902      	add	r1, sp, #8
 8006ad0:	f000 fac0 	bl	8007054 <_svfiprintf_r>
 8006ad4:	9b02      	ldr	r3, [sp, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	b01c      	add	sp, #112	; 0x70
 8006adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae0:	b003      	add	sp, #12
 8006ae2:	4770      	bx	lr
 8006ae4:	20000070 	.word	0x20000070
 8006ae8:	ffff0208 	.word	0xffff0208

08006aec <__sread>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	f000 f8fc 	bl	8006cf0 <_read_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	bfab      	itete	ge
 8006afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006afe:	89a3      	ldrhlt	r3, [r4, #12]
 8006b00:	181b      	addge	r3, r3, r0
 8006b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b06:	bfac      	ite	ge
 8006b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b0a:	81a3      	strhlt	r3, [r4, #12]
 8006b0c:	bd10      	pop	{r4, pc}

08006b0e <__swrite>:
 8006b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	461f      	mov	r7, r3
 8006b14:	898b      	ldrh	r3, [r1, #12]
 8006b16:	05db      	lsls	r3, r3, #23
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	d505      	bpl.n	8006b2c <__swrite+0x1e>
 8006b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b24:	2302      	movs	r3, #2
 8006b26:	2200      	movs	r2, #0
 8006b28:	f000 f8d0 	bl	8006ccc <_lseek_r>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b42:	f000 b8e7 	b.w	8006d14 <_write_r>

08006b46 <__sseek>:
 8006b46:	b510      	push	{r4, lr}
 8006b48:	460c      	mov	r4, r1
 8006b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4e:	f000 f8bd 	bl	8006ccc <_lseek_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	bf15      	itete	ne
 8006b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b62:	81a3      	strheq	r3, [r4, #12]
 8006b64:	bf18      	it	ne
 8006b66:	81a3      	strhne	r3, [r4, #12]
 8006b68:	bd10      	pop	{r4, pc}

08006b6a <__sclose>:
 8006b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6e:	f000 b89d 	b.w	8006cac <_close_r>

08006b72 <__swbuf_r>:
 8006b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b74:	460e      	mov	r6, r1
 8006b76:	4614      	mov	r4, r2
 8006b78:	4605      	mov	r5, r0
 8006b7a:	b118      	cbz	r0, 8006b84 <__swbuf_r+0x12>
 8006b7c:	6a03      	ldr	r3, [r0, #32]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <__swbuf_r+0x12>
 8006b80:	f7ff fef0 	bl	8006964 <__sinit>
 8006b84:	69a3      	ldr	r3, [r4, #24]
 8006b86:	60a3      	str	r3, [r4, #8]
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	071a      	lsls	r2, r3, #28
 8006b8c:	d525      	bpl.n	8006bda <__swbuf_r+0x68>
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	b31b      	cbz	r3, 8006bda <__swbuf_r+0x68>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	1a98      	subs	r0, r3, r2
 8006b98:	6963      	ldr	r3, [r4, #20]
 8006b9a:	b2f6      	uxtb	r6, r6
 8006b9c:	4283      	cmp	r3, r0
 8006b9e:	4637      	mov	r7, r6
 8006ba0:	dc04      	bgt.n	8006bac <__swbuf_r+0x3a>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 fead 	bl	8007904 <_fflush_r>
 8006baa:	b9e0      	cbnz	r0, 8006be6 <__swbuf_r+0x74>
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	701e      	strb	r6, [r3, #0]
 8006bba:	6962      	ldr	r2, [r4, #20]
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d004      	beq.n	8006bcc <__swbuf_r+0x5a>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d506      	bpl.n	8006bd6 <__swbuf_r+0x64>
 8006bc8:	2e0a      	cmp	r6, #10
 8006bca:	d104      	bne.n	8006bd6 <__swbuf_r+0x64>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fe98 	bl	8007904 <_fflush_r>
 8006bd4:	b938      	cbnz	r0, 8006be6 <__swbuf_r+0x74>
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 f805 	bl	8006bec <__swsetup_r>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0d5      	beq.n	8006b92 <__swbuf_r+0x20>
 8006be6:	f04f 37ff 	mov.w	r7, #4294967295
 8006bea:	e7f4      	b.n	8006bd6 <__swbuf_r+0x64>

08006bec <__swsetup_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4b2a      	ldr	r3, [pc, #168]	; (8006c98 <__swsetup_r+0xac>)
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	b118      	cbz	r0, 8006c00 <__swsetup_r+0x14>
 8006bf8:	6a03      	ldr	r3, [r0, #32]
 8006bfa:	b90b      	cbnz	r3, 8006c00 <__swsetup_r+0x14>
 8006bfc:	f7ff feb2 	bl	8006964 <__sinit>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c06:	0718      	lsls	r0, r3, #28
 8006c08:	d422      	bmi.n	8006c50 <__swsetup_r+0x64>
 8006c0a:	06d9      	lsls	r1, r3, #27
 8006c0c:	d407      	bmi.n	8006c1e <__swsetup_r+0x32>
 8006c0e:	2309      	movs	r3, #9
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e034      	b.n	8006c88 <__swsetup_r+0x9c>
 8006c1e:	0758      	lsls	r0, r3, #29
 8006c20:	d512      	bpl.n	8006c48 <__swsetup_r+0x5c>
 8006c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c24:	b141      	cbz	r1, 8006c38 <__swsetup_r+0x4c>
 8006c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	d002      	beq.n	8006c34 <__swsetup_r+0x48>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 f8be 	bl	8006db0 <_free_r>
 8006c34:	2300      	movs	r3, #0
 8006c36:	6363      	str	r3, [r4, #52]	; 0x34
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	2300      	movs	r3, #0
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f043 0308 	orr.w	r3, r3, #8
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	b94b      	cbnz	r3, 8006c68 <__swsetup_r+0x7c>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5e:	d003      	beq.n	8006c68 <__swsetup_r+0x7c>
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 fe9c 	bl	80079a0 <__smakebuf_r>
 8006c68:	89a0      	ldrh	r0, [r4, #12]
 8006c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c6e:	f010 0301 	ands.w	r3, r0, #1
 8006c72:	d00a      	beq.n	8006c8a <__swsetup_r+0x9e>
 8006c74:	2300      	movs	r3, #0
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	6963      	ldr	r3, [r4, #20]
 8006c7a:	425b      	negs	r3, r3
 8006c7c:	61a3      	str	r3, [r4, #24]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	b943      	cbnz	r3, 8006c94 <__swsetup_r+0xa8>
 8006c82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c86:	d1c4      	bne.n	8006c12 <__swsetup_r+0x26>
 8006c88:	bd38      	pop	{r3, r4, r5, pc}
 8006c8a:	0781      	lsls	r1, r0, #30
 8006c8c:	bf58      	it	pl
 8006c8e:	6963      	ldrpl	r3, [r4, #20]
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	e7f4      	b.n	8006c7e <__swsetup_r+0x92>
 8006c94:	2000      	movs	r0, #0
 8006c96:	e7f7      	b.n	8006c88 <__swsetup_r+0x9c>
 8006c98:	20000070 	.word	0x20000070

08006c9c <memset>:
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <memset+0xa>
 8006ca4:	4770      	bx	lr
 8006ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8006caa:	e7f9      	b.n	8006ca0 <memset+0x4>

08006cac <_close_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_close_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa fa40 	bl	800113c <_close>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_close_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_close_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200049d0 	.word	0x200049d0

08006ccc <_lseek_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_lseek_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fa fa55 	bl	800118a <_lseek>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_lseek_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_lseek_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200049d0 	.word	0x200049d0

08006cf0 <_read_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	; (8006d10 <_read_r+0x20>)
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fa f9e3 	bl	80010ca <_read>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_read_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_read_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	200049d0 	.word	0x200049d0

08006d14 <_write_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4d07      	ldr	r5, [pc, #28]	; (8006d34 <_write_r+0x20>)
 8006d18:	4604      	mov	r4, r0
 8006d1a:	4608      	mov	r0, r1
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f7fa f9ee 	bl	8001104 <_write>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_write_r+0x1e>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_write_r+0x1e>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	200049d0 	.word	0x200049d0

08006d38 <__errno>:
 8006d38:	4b01      	ldr	r3, [pc, #4]	; (8006d40 <__errno+0x8>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000070 	.word	0x20000070

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4d0d      	ldr	r5, [pc, #52]	; (8006d7c <__libc_init_array+0x38>)
 8006d48:	4c0d      	ldr	r4, [pc, #52]	; (8006d80 <__libc_init_array+0x3c>)
 8006d4a:	1b64      	subs	r4, r4, r5
 8006d4c:	10a4      	asrs	r4, r4, #2
 8006d4e:	2600      	movs	r6, #0
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	; (8006d84 <__libc_init_array+0x40>)
 8006d56:	4c0c      	ldr	r4, [pc, #48]	; (8006d88 <__libc_init_array+0x44>)
 8006d58:	f000 fee2 	bl	8007b20 <_init>
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	2600      	movs	r6, #0
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	08007d54 	.word	0x08007d54
 8006d80:	08007d54 	.word	0x08007d54
 8006d84:	08007d54 	.word	0x08007d54
 8006d88:	08007d58 	.word	0x08007d58

08006d8c <__retarget_lock_init_recursive>:
 8006d8c:	4770      	bx	lr

08006d8e <__retarget_lock_acquire_recursive>:
 8006d8e:	4770      	bx	lr

08006d90 <__retarget_lock_release_recursive>:
 8006d90:	4770      	bx	lr

08006d92 <memcpy>:
 8006d92:	440a      	add	r2, r1
 8006d94:	4291      	cmp	r1, r2
 8006d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d9a:	d100      	bne.n	8006d9e <memcpy+0xc>
 8006d9c:	4770      	bx	lr
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da8:	4291      	cmp	r1, r2
 8006daa:	d1f9      	bne.n	8006da0 <memcpy+0xe>
 8006dac:	bd10      	pop	{r4, pc}
	...

08006db0 <_free_r>:
 8006db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d044      	beq.n	8006e40 <_free_r+0x90>
 8006db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dba:	9001      	str	r0, [sp, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8006dc2:	bfb8      	it	lt
 8006dc4:	18e4      	addlt	r4, r4, r3
 8006dc6:	f000 f8df 	bl	8006f88 <__malloc_lock>
 8006dca:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <_free_r+0x94>)
 8006dcc:	9801      	ldr	r0, [sp, #4]
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	b933      	cbnz	r3, 8006de0 <_free_r+0x30>
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	6014      	str	r4, [r2, #0]
 8006dd6:	b003      	add	sp, #12
 8006dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ddc:	f000 b8da 	b.w	8006f94 <__malloc_unlock>
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	d908      	bls.n	8006df6 <_free_r+0x46>
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	1961      	adds	r1, r4, r5
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf01      	itttt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	1949      	addeq	r1, r1, r5
 8006df2:	6021      	streq	r1, [r4, #0]
 8006df4:	e7ed      	b.n	8006dd2 <_free_r+0x22>
 8006df6:	461a      	mov	r2, r3
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b10b      	cbz	r3, 8006e00 <_free_r+0x50>
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d9fa      	bls.n	8006df6 <_free_r+0x46>
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	1855      	adds	r5, r2, r1
 8006e04:	42a5      	cmp	r5, r4
 8006e06:	d10b      	bne.n	8006e20 <_free_r+0x70>
 8006e08:	6824      	ldr	r4, [r4, #0]
 8006e0a:	4421      	add	r1, r4
 8006e0c:	1854      	adds	r4, r2, r1
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	d1e0      	bne.n	8006dd6 <_free_r+0x26>
 8006e14:	681c      	ldr	r4, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	440c      	add	r4, r1
 8006e1c:	6014      	str	r4, [r2, #0]
 8006e1e:	e7da      	b.n	8006dd6 <_free_r+0x26>
 8006e20:	d902      	bls.n	8006e28 <_free_r+0x78>
 8006e22:	230c      	movs	r3, #12
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	e7d6      	b.n	8006dd6 <_free_r+0x26>
 8006e28:	6825      	ldr	r5, [r4, #0]
 8006e2a:	1961      	adds	r1, r4, r5
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf04      	itt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	bf04      	itt	eq
 8006e38:	1949      	addeq	r1, r1, r5
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6054      	str	r4, [r2, #4]
 8006e3e:	e7ca      	b.n	8006dd6 <_free_r+0x26>
 8006e40:	b003      	add	sp, #12
 8006e42:	bd30      	pop	{r4, r5, pc}
 8006e44:	200049d8 	.word	0x200049d8

08006e48 <sbrk_aligned>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4e0e      	ldr	r6, [pc, #56]	; (8006e84 <sbrk_aligned+0x3c>)
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	6831      	ldr	r1, [r6, #0]
 8006e50:	4605      	mov	r5, r0
 8006e52:	b911      	cbnz	r1, 8006e5a <sbrk_aligned+0x12>
 8006e54:	f000 fe1c 	bl	8007a90 <_sbrk_r>
 8006e58:	6030      	str	r0, [r6, #0]
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 fe17 	bl	8007a90 <_sbrk_r>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d00a      	beq.n	8006e7c <sbrk_aligned+0x34>
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d007      	beq.n	8006e80 <sbrk_aligned+0x38>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 fe0c 	bl	8007a90 <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d101      	bne.n	8006e80 <sbrk_aligned+0x38>
 8006e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	200049dc 	.word	0x200049dc

08006e88 <_malloc_r>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	1ccd      	adds	r5, r1, #3
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	db01      	blt.n	8006ea4 <_malloc_r+0x1c>
 8006ea0:	42a9      	cmp	r1, r5
 8006ea2:	d905      	bls.n	8006eb0 <_malloc_r+0x28>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f84 <_malloc_r+0xfc>
 8006eb4:	f000 f868 	bl	8006f88 <__malloc_lock>
 8006eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	bb5c      	cbnz	r4, 8006f18 <_malloc_r+0x90>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f7ff ffc0 	bl	8006e48 <sbrk_aligned>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	4604      	mov	r4, r0
 8006ecc:	d155      	bne.n	8006f7a <_malloc_r+0xf2>
 8006ece:	f8d8 4000 	ldr.w	r4, [r8]
 8006ed2:	4626      	mov	r6, r4
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	d145      	bne.n	8006f64 <_malloc_r+0xdc>
 8006ed8:	2c00      	cmp	r4, #0
 8006eda:	d048      	beq.n	8006f6e <_malloc_r+0xe6>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	eb04 0903 	add.w	r9, r4, r3
 8006ee6:	f000 fdd3 	bl	8007a90 <_sbrk_r>
 8006eea:	4581      	cmp	r9, r0
 8006eec:	d13f      	bne.n	8006f6e <_malloc_r+0xe6>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	1a6d      	subs	r5, r5, r1
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff ffa7 	bl	8006e48 <sbrk_aligned>
 8006efa:	3001      	adds	r0, #1
 8006efc:	d037      	beq.n	8006f6e <_malloc_r+0xe6>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	442b      	add	r3, r5
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	f8d8 3000 	ldr.w	r3, [r8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d038      	beq.n	8006f7e <_malloc_r+0xf6>
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	42a2      	cmp	r2, r4
 8006f10:	d12b      	bne.n	8006f6a <_malloc_r+0xe2>
 8006f12:	2200      	movs	r2, #0
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	e00f      	b.n	8006f38 <_malloc_r+0xb0>
 8006f18:	6822      	ldr	r2, [r4, #0]
 8006f1a:	1b52      	subs	r2, r2, r5
 8006f1c:	d41f      	bmi.n	8006f5e <_malloc_r+0xd6>
 8006f1e:	2a0b      	cmp	r2, #11
 8006f20:	d917      	bls.n	8006f52 <_malloc_r+0xca>
 8006f22:	1961      	adds	r1, r4, r5
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	6025      	str	r5, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	6059      	strne	r1, [r3, #4]
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	bf08      	it	eq
 8006f30:	f8c8 1000 	streq.w	r1, [r8]
 8006f34:	5162      	str	r2, [r4, r5]
 8006f36:	604b      	str	r3, [r1, #4]
 8006f38:	4638      	mov	r0, r7
 8006f3a:	f104 060b 	add.w	r6, r4, #11
 8006f3e:	f000 f829 	bl	8006f94 <__malloc_unlock>
 8006f42:	f026 0607 	bic.w	r6, r6, #7
 8006f46:	1d23      	adds	r3, r4, #4
 8006f48:	1af2      	subs	r2, r6, r3
 8006f4a:	d0ae      	beq.n	8006eaa <_malloc_r+0x22>
 8006f4c:	1b9b      	subs	r3, r3, r6
 8006f4e:	50a3      	str	r3, [r4, r2]
 8006f50:	e7ab      	b.n	8006eaa <_malloc_r+0x22>
 8006f52:	42a3      	cmp	r3, r4
 8006f54:	6862      	ldr	r2, [r4, #4]
 8006f56:	d1dd      	bne.n	8006f14 <_malloc_r+0x8c>
 8006f58:	f8c8 2000 	str.w	r2, [r8]
 8006f5c:	e7ec      	b.n	8006f38 <_malloc_r+0xb0>
 8006f5e:	4623      	mov	r3, r4
 8006f60:	6864      	ldr	r4, [r4, #4]
 8006f62:	e7ac      	b.n	8006ebe <_malloc_r+0x36>
 8006f64:	4634      	mov	r4, r6
 8006f66:	6876      	ldr	r6, [r6, #4]
 8006f68:	e7b4      	b.n	8006ed4 <_malloc_r+0x4c>
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	e7cc      	b.n	8006f08 <_malloc_r+0x80>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	4638      	mov	r0, r7
 8006f74:	f000 f80e 	bl	8006f94 <__malloc_unlock>
 8006f78:	e797      	b.n	8006eaa <_malloc_r+0x22>
 8006f7a:	6025      	str	r5, [r4, #0]
 8006f7c:	e7dc      	b.n	8006f38 <_malloc_r+0xb0>
 8006f7e:	605b      	str	r3, [r3, #4]
 8006f80:	deff      	udf	#255	; 0xff
 8006f82:	bf00      	nop
 8006f84:	200049d8 	.word	0x200049d8

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f7ff bf00 	b.w	8006d8e <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200049d4 	.word	0x200049d4

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f7ff befb 	b.w	8006d90 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200049d4 	.word	0x200049d4

08006fa0 <__ssputs_r>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	688e      	ldr	r6, [r1, #8]
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	42be      	cmp	r6, r7
 8006faa:	680b      	ldr	r3, [r1, #0]
 8006fac:	4682      	mov	sl, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	d82c      	bhi.n	800700e <__ssputs_r+0x6e>
 8006fb4:	898a      	ldrh	r2, [r1, #12]
 8006fb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fba:	d026      	beq.n	800700a <__ssputs_r+0x6a>
 8006fbc:	6965      	ldr	r5, [r4, #20]
 8006fbe:	6909      	ldr	r1, [r1, #16]
 8006fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc4:	eba3 0901 	sub.w	r9, r3, r1
 8006fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fcc:	1c7b      	adds	r3, r7, #1
 8006fce:	444b      	add	r3, r9
 8006fd0:	106d      	asrs	r5, r5, #1
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	bf38      	it	cc
 8006fd6:	461d      	movcc	r5, r3
 8006fd8:	0553      	lsls	r3, r2, #21
 8006fda:	d527      	bpl.n	800702c <__ssputs_r+0x8c>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7ff ff53 	bl	8006e88 <_malloc_r>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	b360      	cbz	r0, 8007040 <__ssputs_r+0xa0>
 8006fe6:	6921      	ldr	r1, [r4, #16]
 8006fe8:	464a      	mov	r2, r9
 8006fea:	f7ff fed2 	bl	8006d92 <memcpy>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	6126      	str	r6, [r4, #16]
 8006ffc:	6165      	str	r5, [r4, #20]
 8006ffe:	444e      	add	r6, r9
 8007000:	eba5 0509 	sub.w	r5, r5, r9
 8007004:	6026      	str	r6, [r4, #0]
 8007006:	60a5      	str	r5, [r4, #8]
 8007008:	463e      	mov	r6, r7
 800700a:	42be      	cmp	r6, r7
 800700c:	d900      	bls.n	8007010 <__ssputs_r+0x70>
 800700e:	463e      	mov	r6, r7
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	4632      	mov	r2, r6
 8007014:	4641      	mov	r1, r8
 8007016:	f000 fcff 	bl	8007a18 <memmove>
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	1b9b      	subs	r3, r3, r6
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	4433      	add	r3, r6
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	2000      	movs	r0, #0
 8007028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702c:	462a      	mov	r2, r5
 800702e:	f000 fd3f 	bl	8007ab0 <_realloc_r>
 8007032:	4606      	mov	r6, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	d1e0      	bne.n	8006ffa <__ssputs_r+0x5a>
 8007038:	6921      	ldr	r1, [r4, #16]
 800703a:	4650      	mov	r0, sl
 800703c:	f7ff feb8 	bl	8006db0 <_free_r>
 8007040:	230c      	movs	r3, #12
 8007042:	f8ca 3000 	str.w	r3, [sl]
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	e7e9      	b.n	8007028 <__ssputs_r+0x88>

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	4698      	mov	r8, r3
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	b09d      	sub	sp, #116	; 0x74
 8007060:	4607      	mov	r7, r0
 8007062:	460d      	mov	r5, r1
 8007064:	4614      	mov	r4, r2
 8007066:	d50e      	bpl.n	8007086 <_svfiprintf_r+0x32>
 8007068:	690b      	ldr	r3, [r1, #16]
 800706a:	b963      	cbnz	r3, 8007086 <_svfiprintf_r+0x32>
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	f7ff ff0b 	bl	8006e88 <_malloc_r>
 8007072:	6028      	str	r0, [r5, #0]
 8007074:	6128      	str	r0, [r5, #16]
 8007076:	b920      	cbnz	r0, 8007082 <_svfiprintf_r+0x2e>
 8007078:	230c      	movs	r3, #12
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e0d0      	b.n	8007224 <_svfiprintf_r+0x1d0>
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	616b      	str	r3, [r5, #20]
 8007086:	2300      	movs	r3, #0
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	2320      	movs	r3, #32
 800708c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007090:	f8cd 800c 	str.w	r8, [sp, #12]
 8007094:	2330      	movs	r3, #48	; 0x30
 8007096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800723c <_svfiprintf_r+0x1e8>
 800709a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800709e:	f04f 0901 	mov.w	r9, #1
 80070a2:	4623      	mov	r3, r4
 80070a4:	469a      	mov	sl, r3
 80070a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070aa:	b10a      	cbz	r2, 80070b0 <_svfiprintf_r+0x5c>
 80070ac:	2a25      	cmp	r2, #37	; 0x25
 80070ae:	d1f9      	bne.n	80070a4 <_svfiprintf_r+0x50>
 80070b0:	ebba 0b04 	subs.w	fp, sl, r4
 80070b4:	d00b      	beq.n	80070ce <_svfiprintf_r+0x7a>
 80070b6:	465b      	mov	r3, fp
 80070b8:	4622      	mov	r2, r4
 80070ba:	4629      	mov	r1, r5
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff ff6f 	bl	8006fa0 <__ssputs_r>
 80070c2:	3001      	adds	r0, #1
 80070c4:	f000 80a9 	beq.w	800721a <_svfiprintf_r+0x1c6>
 80070c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ca:	445a      	add	r2, fp
 80070cc:	9209      	str	r2, [sp, #36]	; 0x24
 80070ce:	f89a 3000 	ldrb.w	r3, [sl]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80a1 	beq.w	800721a <_svfiprintf_r+0x1c6>
 80070d8:	2300      	movs	r3, #0
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e2:	f10a 0a01 	add.w	sl, sl, #1
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ee:	931a      	str	r3, [sp, #104]	; 0x68
 80070f0:	4654      	mov	r4, sl
 80070f2:	2205      	movs	r2, #5
 80070f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f8:	4850      	ldr	r0, [pc, #320]	; (800723c <_svfiprintf_r+0x1e8>)
 80070fa:	f7f9 f879 	bl	80001f0 <memchr>
 80070fe:	9a04      	ldr	r2, [sp, #16]
 8007100:	b9d8      	cbnz	r0, 800713a <_svfiprintf_r+0xe6>
 8007102:	06d0      	lsls	r0, r2, #27
 8007104:	bf44      	itt	mi
 8007106:	2320      	movmi	r3, #32
 8007108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710c:	0711      	lsls	r1, r2, #28
 800710e:	bf44      	itt	mi
 8007110:	232b      	movmi	r3, #43	; 0x2b
 8007112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007116:	f89a 3000 	ldrb.w	r3, [sl]
 800711a:	2b2a      	cmp	r3, #42	; 0x2a
 800711c:	d015      	beq.n	800714a <_svfiprintf_r+0xf6>
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	4654      	mov	r4, sl
 8007122:	2000      	movs	r0, #0
 8007124:	f04f 0c0a 	mov.w	ip, #10
 8007128:	4621      	mov	r1, r4
 800712a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712e:	3b30      	subs	r3, #48	; 0x30
 8007130:	2b09      	cmp	r3, #9
 8007132:	d94d      	bls.n	80071d0 <_svfiprintf_r+0x17c>
 8007134:	b1b0      	cbz	r0, 8007164 <_svfiprintf_r+0x110>
 8007136:	9207      	str	r2, [sp, #28]
 8007138:	e014      	b.n	8007164 <_svfiprintf_r+0x110>
 800713a:	eba0 0308 	sub.w	r3, r0, r8
 800713e:	fa09 f303 	lsl.w	r3, r9, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	46a2      	mov	sl, r4
 8007148:	e7d2      	b.n	80070f0 <_svfiprintf_r+0x9c>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	9103      	str	r1, [sp, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	bfbb      	ittet	lt
 8007156:	425b      	neglt	r3, r3
 8007158:	f042 0202 	orrlt.w	r2, r2, #2
 800715c:	9307      	strge	r3, [sp, #28]
 800715e:	9307      	strlt	r3, [sp, #28]
 8007160:	bfb8      	it	lt
 8007162:	9204      	strlt	r2, [sp, #16]
 8007164:	7823      	ldrb	r3, [r4, #0]
 8007166:	2b2e      	cmp	r3, #46	; 0x2e
 8007168:	d10c      	bne.n	8007184 <_svfiprintf_r+0x130>
 800716a:	7863      	ldrb	r3, [r4, #1]
 800716c:	2b2a      	cmp	r3, #42	; 0x2a
 800716e:	d134      	bne.n	80071da <_svfiprintf_r+0x186>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9203      	str	r2, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfb8      	it	lt
 800717c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007180:	3402      	adds	r4, #2
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800724c <_svfiprintf_r+0x1f8>
 8007188:	7821      	ldrb	r1, [r4, #0]
 800718a:	2203      	movs	r2, #3
 800718c:	4650      	mov	r0, sl
 800718e:	f7f9 f82f 	bl	80001f0 <memchr>
 8007192:	b138      	cbz	r0, 80071a4 <_svfiprintf_r+0x150>
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	eba0 000a 	sub.w	r0, r0, sl
 800719a:	2240      	movs	r2, #64	; 0x40
 800719c:	4082      	lsls	r2, r0
 800719e:	4313      	orrs	r3, r2
 80071a0:	3401      	adds	r4, #1
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	4825      	ldr	r0, [pc, #148]	; (8007240 <_svfiprintf_r+0x1ec>)
 80071aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ae:	2206      	movs	r2, #6
 80071b0:	f7f9 f81e 	bl	80001f0 <memchr>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d038      	beq.n	800722a <_svfiprintf_r+0x1d6>
 80071b8:	4b22      	ldr	r3, [pc, #136]	; (8007244 <_svfiprintf_r+0x1f0>)
 80071ba:	bb1b      	cbnz	r3, 8007204 <_svfiprintf_r+0x1b0>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	3307      	adds	r3, #7
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	3308      	adds	r3, #8
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	4433      	add	r3, r6
 80071cc:	9309      	str	r3, [sp, #36]	; 0x24
 80071ce:	e768      	b.n	80070a2 <_svfiprintf_r+0x4e>
 80071d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d4:	460c      	mov	r4, r1
 80071d6:	2001      	movs	r0, #1
 80071d8:	e7a6      	b.n	8007128 <_svfiprintf_r+0xd4>
 80071da:	2300      	movs	r3, #0
 80071dc:	3401      	adds	r4, #1
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 0c0a 	mov.w	ip, #10
 80071e6:	4620      	mov	r0, r4
 80071e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ec:	3a30      	subs	r2, #48	; 0x30
 80071ee:	2a09      	cmp	r2, #9
 80071f0:	d903      	bls.n	80071fa <_svfiprintf_r+0x1a6>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0c6      	beq.n	8007184 <_svfiprintf_r+0x130>
 80071f6:	9105      	str	r1, [sp, #20]
 80071f8:	e7c4      	b.n	8007184 <_svfiprintf_r+0x130>
 80071fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fe:	4604      	mov	r4, r0
 8007200:	2301      	movs	r3, #1
 8007202:	e7f0      	b.n	80071e6 <_svfiprintf_r+0x192>
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <_svfiprintf_r+0x1f4>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4638      	mov	r0, r7
 8007210:	f3af 8000 	nop.w
 8007214:	1c42      	adds	r2, r0, #1
 8007216:	4606      	mov	r6, r0
 8007218:	d1d6      	bne.n	80071c8 <_svfiprintf_r+0x174>
 800721a:	89ab      	ldrh	r3, [r5, #12]
 800721c:	065b      	lsls	r3, r3, #25
 800721e:	f53f af2d 	bmi.w	800707c <_svfiprintf_r+0x28>
 8007222:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007224:	b01d      	add	sp, #116	; 0x74
 8007226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722a:	ab03      	add	r3, sp, #12
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	462a      	mov	r2, r5
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <_svfiprintf_r+0x1f4>)
 8007232:	a904      	add	r1, sp, #16
 8007234:	4638      	mov	r0, r7
 8007236:	f000 f9bd 	bl	80075b4 <_printf_i>
 800723a:	e7eb      	b.n	8007214 <_svfiprintf_r+0x1c0>
 800723c:	08007d18 	.word	0x08007d18
 8007240:	08007d22 	.word	0x08007d22
 8007244:	00000000 	.word	0x00000000
 8007248:	08006fa1 	.word	0x08006fa1
 800724c:	08007d1e 	.word	0x08007d1e

08007250 <__sfputc_r>:
 8007250:	6893      	ldr	r3, [r2, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	b410      	push	{r4}
 8007258:	6093      	str	r3, [r2, #8]
 800725a:	da08      	bge.n	800726e <__sfputc_r+0x1e>
 800725c:	6994      	ldr	r4, [r2, #24]
 800725e:	42a3      	cmp	r3, r4
 8007260:	db01      	blt.n	8007266 <__sfputc_r+0x16>
 8007262:	290a      	cmp	r1, #10
 8007264:	d103      	bne.n	800726e <__sfputc_r+0x1e>
 8007266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800726a:	f7ff bc82 	b.w	8006b72 <__swbuf_r>
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	1c58      	adds	r0, r3, #1
 8007272:	6010      	str	r0, [r2, #0]
 8007274:	7019      	strb	r1, [r3, #0]
 8007276:	4608      	mov	r0, r1
 8007278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800727c:	4770      	bx	lr

0800727e <__sfputs_r>:
 800727e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007280:	4606      	mov	r6, r0
 8007282:	460f      	mov	r7, r1
 8007284:	4614      	mov	r4, r2
 8007286:	18d5      	adds	r5, r2, r3
 8007288:	42ac      	cmp	r4, r5
 800728a:	d101      	bne.n	8007290 <__sfputs_r+0x12>
 800728c:	2000      	movs	r0, #0
 800728e:	e007      	b.n	80072a0 <__sfputs_r+0x22>
 8007290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007294:	463a      	mov	r2, r7
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ffda 	bl	8007250 <__sfputc_r>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d1f3      	bne.n	8007288 <__sfputs_r+0xa>
 80072a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072a4 <_vfiprintf_r>:
 80072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	460d      	mov	r5, r1
 80072aa:	b09d      	sub	sp, #116	; 0x74
 80072ac:	4614      	mov	r4, r2
 80072ae:	4698      	mov	r8, r3
 80072b0:	4606      	mov	r6, r0
 80072b2:	b118      	cbz	r0, 80072bc <_vfiprintf_r+0x18>
 80072b4:	6a03      	ldr	r3, [r0, #32]
 80072b6:	b90b      	cbnz	r3, 80072bc <_vfiprintf_r+0x18>
 80072b8:	f7ff fb54 	bl	8006964 <__sinit>
 80072bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ca:	f7ff fd60 	bl	8006d8e <__retarget_lock_acquire_recursive>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	071b      	lsls	r3, r3, #28
 80072d2:	d501      	bpl.n	80072d8 <_vfiprintf_r+0x34>
 80072d4:	692b      	ldr	r3, [r5, #16]
 80072d6:	b99b      	cbnz	r3, 8007300 <_vfiprintf_r+0x5c>
 80072d8:	4629      	mov	r1, r5
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff fc86 	bl	8006bec <__swsetup_r>
 80072e0:	b170      	cbz	r0, 8007300 <_vfiprintf_r+0x5c>
 80072e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e4:	07dc      	lsls	r4, r3, #31
 80072e6:	d504      	bpl.n	80072f2 <_vfiprintf_r+0x4e>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b01d      	add	sp, #116	; 0x74
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d4f7      	bmi.n	80072e8 <_vfiprintf_r+0x44>
 80072f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fa:	f7ff fd49 	bl	8006d90 <__retarget_lock_release_recursive>
 80072fe:	e7f3      	b.n	80072e8 <_vfiprintf_r+0x44>
 8007300:	2300      	movs	r3, #0
 8007302:	9309      	str	r3, [sp, #36]	; 0x24
 8007304:	2320      	movs	r3, #32
 8007306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730a:	f8cd 800c 	str.w	r8, [sp, #12]
 800730e:	2330      	movs	r3, #48	; 0x30
 8007310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074c4 <_vfiprintf_r+0x220>
 8007314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007318:	f04f 0901 	mov.w	r9, #1
 800731c:	4623      	mov	r3, r4
 800731e:	469a      	mov	sl, r3
 8007320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007324:	b10a      	cbz	r2, 800732a <_vfiprintf_r+0x86>
 8007326:	2a25      	cmp	r2, #37	; 0x25
 8007328:	d1f9      	bne.n	800731e <_vfiprintf_r+0x7a>
 800732a:	ebba 0b04 	subs.w	fp, sl, r4
 800732e:	d00b      	beq.n	8007348 <_vfiprintf_r+0xa4>
 8007330:	465b      	mov	r3, fp
 8007332:	4622      	mov	r2, r4
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ffa1 	bl	800727e <__sfputs_r>
 800733c:	3001      	adds	r0, #1
 800733e:	f000 80a9 	beq.w	8007494 <_vfiprintf_r+0x1f0>
 8007342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007344:	445a      	add	r2, fp
 8007346:	9209      	str	r2, [sp, #36]	; 0x24
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80a1 	beq.w	8007494 <_vfiprintf_r+0x1f0>
 8007352:	2300      	movs	r3, #0
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735c:	f10a 0a01 	add.w	sl, sl, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007368:	931a      	str	r3, [sp, #104]	; 0x68
 800736a:	4654      	mov	r4, sl
 800736c:	2205      	movs	r2, #5
 800736e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007372:	4854      	ldr	r0, [pc, #336]	; (80074c4 <_vfiprintf_r+0x220>)
 8007374:	f7f8 ff3c 	bl	80001f0 <memchr>
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	b9d8      	cbnz	r0, 80073b4 <_vfiprintf_r+0x110>
 800737c:	06d1      	lsls	r1, r2, #27
 800737e:	bf44      	itt	mi
 8007380:	2320      	movmi	r3, #32
 8007382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007386:	0713      	lsls	r3, r2, #28
 8007388:	bf44      	itt	mi
 800738a:	232b      	movmi	r3, #43	; 0x2b
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b2a      	cmp	r3, #42	; 0x2a
 8007396:	d015      	beq.n	80073c4 <_vfiprintf_r+0x120>
 8007398:	9a07      	ldr	r2, [sp, #28]
 800739a:	4654      	mov	r4, sl
 800739c:	2000      	movs	r0, #0
 800739e:	f04f 0c0a 	mov.w	ip, #10
 80073a2:	4621      	mov	r1, r4
 80073a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a8:	3b30      	subs	r3, #48	; 0x30
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d94d      	bls.n	800744a <_vfiprintf_r+0x1a6>
 80073ae:	b1b0      	cbz	r0, 80073de <_vfiprintf_r+0x13a>
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	e014      	b.n	80073de <_vfiprintf_r+0x13a>
 80073b4:	eba0 0308 	sub.w	r3, r0, r8
 80073b8:	fa09 f303 	lsl.w	r3, r9, r3
 80073bc:	4313      	orrs	r3, r2
 80073be:	9304      	str	r3, [sp, #16]
 80073c0:	46a2      	mov	sl, r4
 80073c2:	e7d2      	b.n	800736a <_vfiprintf_r+0xc6>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	1d19      	adds	r1, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	9103      	str	r1, [sp, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfbb      	ittet	lt
 80073d0:	425b      	neglt	r3, r3
 80073d2:	f042 0202 	orrlt.w	r2, r2, #2
 80073d6:	9307      	strge	r3, [sp, #28]
 80073d8:	9307      	strlt	r3, [sp, #28]
 80073da:	bfb8      	it	lt
 80073dc:	9204      	strlt	r2, [sp, #16]
 80073de:	7823      	ldrb	r3, [r4, #0]
 80073e0:	2b2e      	cmp	r3, #46	; 0x2e
 80073e2:	d10c      	bne.n	80073fe <_vfiprintf_r+0x15a>
 80073e4:	7863      	ldrb	r3, [r4, #1]
 80073e6:	2b2a      	cmp	r3, #42	; 0x2a
 80073e8:	d134      	bne.n	8007454 <_vfiprintf_r+0x1b0>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	1d1a      	adds	r2, r3, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	9203      	str	r2, [sp, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfb8      	it	lt
 80073f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fa:	3402      	adds	r4, #2
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074d4 <_vfiprintf_r+0x230>
 8007402:	7821      	ldrb	r1, [r4, #0]
 8007404:	2203      	movs	r2, #3
 8007406:	4650      	mov	r0, sl
 8007408:	f7f8 fef2 	bl	80001f0 <memchr>
 800740c:	b138      	cbz	r0, 800741e <_vfiprintf_r+0x17a>
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	eba0 000a 	sub.w	r0, r0, sl
 8007414:	2240      	movs	r2, #64	; 0x40
 8007416:	4082      	lsls	r2, r0
 8007418:	4313      	orrs	r3, r2
 800741a:	3401      	adds	r4, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007422:	4829      	ldr	r0, [pc, #164]	; (80074c8 <_vfiprintf_r+0x224>)
 8007424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007428:	2206      	movs	r2, #6
 800742a:	f7f8 fee1 	bl	80001f0 <memchr>
 800742e:	2800      	cmp	r0, #0
 8007430:	d03f      	beq.n	80074b2 <_vfiprintf_r+0x20e>
 8007432:	4b26      	ldr	r3, [pc, #152]	; (80074cc <_vfiprintf_r+0x228>)
 8007434:	bb1b      	cbnz	r3, 800747e <_vfiprintf_r+0x1da>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	3308      	adds	r3, #8
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	443b      	add	r3, r7
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	e768      	b.n	800731c <_vfiprintf_r+0x78>
 800744a:	fb0c 3202 	mla	r2, ip, r2, r3
 800744e:	460c      	mov	r4, r1
 8007450:	2001      	movs	r0, #1
 8007452:	e7a6      	b.n	80073a2 <_vfiprintf_r+0xfe>
 8007454:	2300      	movs	r3, #0
 8007456:	3401      	adds	r4, #1
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	4619      	mov	r1, r3
 800745c:	f04f 0c0a 	mov.w	ip, #10
 8007460:	4620      	mov	r0, r4
 8007462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007466:	3a30      	subs	r2, #48	; 0x30
 8007468:	2a09      	cmp	r2, #9
 800746a:	d903      	bls.n	8007474 <_vfiprintf_r+0x1d0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c6      	beq.n	80073fe <_vfiprintf_r+0x15a>
 8007470:	9105      	str	r1, [sp, #20]
 8007472:	e7c4      	b.n	80073fe <_vfiprintf_r+0x15a>
 8007474:	fb0c 2101 	mla	r1, ip, r1, r2
 8007478:	4604      	mov	r4, r0
 800747a:	2301      	movs	r3, #1
 800747c:	e7f0      	b.n	8007460 <_vfiprintf_r+0x1bc>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <_vfiprintf_r+0x22c>)
 8007486:	a904      	add	r1, sp, #16
 8007488:	4630      	mov	r0, r6
 800748a:	f3af 8000 	nop.w
 800748e:	4607      	mov	r7, r0
 8007490:	1c78      	adds	r0, r7, #1
 8007492:	d1d6      	bne.n	8007442 <_vfiprintf_r+0x19e>
 8007494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007496:	07d9      	lsls	r1, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_vfiprintf_r+0x202>
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	059a      	lsls	r2, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_vfiprintf_r+0x202>
 80074a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a2:	f7ff fc75 	bl	8006d90 <__retarget_lock_release_recursive>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	065b      	lsls	r3, r3, #25
 80074aa:	f53f af1d 	bmi.w	80072e8 <_vfiprintf_r+0x44>
 80074ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b0:	e71c      	b.n	80072ec <_vfiprintf_r+0x48>
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	462a      	mov	r2, r5
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <_vfiprintf_r+0x22c>)
 80074ba:	a904      	add	r1, sp, #16
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 f879 	bl	80075b4 <_printf_i>
 80074c2:	e7e4      	b.n	800748e <_vfiprintf_r+0x1ea>
 80074c4:	08007d18 	.word	0x08007d18
 80074c8:	08007d22 	.word	0x08007d22
 80074cc:	00000000 	.word	0x00000000
 80074d0:	0800727f 	.word	0x0800727f
 80074d4:	08007d1e 	.word	0x08007d1e

080074d8 <_printf_common>:
 80074d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	4616      	mov	r6, r2
 80074de:	4699      	mov	r9, r3
 80074e0:	688a      	ldr	r2, [r1, #8]
 80074e2:	690b      	ldr	r3, [r1, #16]
 80074e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074e8:	4293      	cmp	r3, r2
 80074ea:	bfb8      	it	lt
 80074ec:	4613      	movlt	r3, r2
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074f4:	4607      	mov	r7, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	b10a      	cbz	r2, 80074fe <_printf_common+0x26>
 80074fa:	3301      	adds	r3, #1
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	0699      	lsls	r1, r3, #26
 8007502:	bf42      	ittt	mi
 8007504:	6833      	ldrmi	r3, [r6, #0]
 8007506:	3302      	addmi	r3, #2
 8007508:	6033      	strmi	r3, [r6, #0]
 800750a:	6825      	ldr	r5, [r4, #0]
 800750c:	f015 0506 	ands.w	r5, r5, #6
 8007510:	d106      	bne.n	8007520 <_printf_common+0x48>
 8007512:	f104 0a19 	add.w	sl, r4, #25
 8007516:	68e3      	ldr	r3, [r4, #12]
 8007518:	6832      	ldr	r2, [r6, #0]
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	42ab      	cmp	r3, r5
 800751e:	dc26      	bgt.n	800756e <_printf_common+0x96>
 8007520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007524:	1e13      	subs	r3, r2, #0
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	bf18      	it	ne
 800752a:	2301      	movne	r3, #1
 800752c:	0692      	lsls	r2, r2, #26
 800752e:	d42b      	bmi.n	8007588 <_printf_common+0xb0>
 8007530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007534:	4649      	mov	r1, r9
 8007536:	4638      	mov	r0, r7
 8007538:	47c0      	blx	r8
 800753a:	3001      	adds	r0, #1
 800753c:	d01e      	beq.n	800757c <_printf_common+0xa4>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	f003 0306 	and.w	r3, r3, #6
 8007546:	2b04      	cmp	r3, #4
 8007548:	bf02      	ittt	eq
 800754a:	68e5      	ldreq	r5, [r4, #12]
 800754c:	6833      	ldreq	r3, [r6, #0]
 800754e:	1aed      	subeq	r5, r5, r3
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	bf0c      	ite	eq
 8007554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007558:	2500      	movne	r5, #0
 800755a:	4293      	cmp	r3, r2
 800755c:	bfc4      	itt	gt
 800755e:	1a9b      	subgt	r3, r3, r2
 8007560:	18ed      	addgt	r5, r5, r3
 8007562:	2600      	movs	r6, #0
 8007564:	341a      	adds	r4, #26
 8007566:	42b5      	cmp	r5, r6
 8007568:	d11a      	bne.n	80075a0 <_printf_common+0xc8>
 800756a:	2000      	movs	r0, #0
 800756c:	e008      	b.n	8007580 <_printf_common+0xa8>
 800756e:	2301      	movs	r3, #1
 8007570:	4652      	mov	r2, sl
 8007572:	4649      	mov	r1, r9
 8007574:	4638      	mov	r0, r7
 8007576:	47c0      	blx	r8
 8007578:	3001      	adds	r0, #1
 800757a:	d103      	bne.n	8007584 <_printf_common+0xac>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	3501      	adds	r5, #1
 8007586:	e7c6      	b.n	8007516 <_printf_common+0x3e>
 8007588:	18e1      	adds	r1, r4, r3
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	2030      	movs	r0, #48	; 0x30
 800758e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007592:	4422      	add	r2, r4
 8007594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800759c:	3302      	adds	r3, #2
 800759e:	e7c7      	b.n	8007530 <_printf_common+0x58>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4622      	mov	r2, r4
 80075a4:	4649      	mov	r1, r9
 80075a6:	4638      	mov	r0, r7
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0e6      	beq.n	800757c <_printf_common+0xa4>
 80075ae:	3601      	adds	r6, #1
 80075b0:	e7d9      	b.n	8007566 <_printf_common+0x8e>
	...

080075b4 <_printf_i>:
 80075b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	7e0f      	ldrb	r7, [r1, #24]
 80075ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075bc:	2f78      	cmp	r7, #120	; 0x78
 80075be:	4691      	mov	r9, r2
 80075c0:	4680      	mov	r8, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	469a      	mov	sl, r3
 80075c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ca:	d807      	bhi.n	80075dc <_printf_i+0x28>
 80075cc:	2f62      	cmp	r7, #98	; 0x62
 80075ce:	d80a      	bhi.n	80075e6 <_printf_i+0x32>
 80075d0:	2f00      	cmp	r7, #0
 80075d2:	f000 80d4 	beq.w	800777e <_printf_i+0x1ca>
 80075d6:	2f58      	cmp	r7, #88	; 0x58
 80075d8:	f000 80c0 	beq.w	800775c <_printf_i+0x1a8>
 80075dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075e4:	e03a      	b.n	800765c <_printf_i+0xa8>
 80075e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ea:	2b15      	cmp	r3, #21
 80075ec:	d8f6      	bhi.n	80075dc <_printf_i+0x28>
 80075ee:	a101      	add	r1, pc, #4	; (adr r1, 80075f4 <_printf_i+0x40>)
 80075f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075f4:	0800764d 	.word	0x0800764d
 80075f8:	08007661 	.word	0x08007661
 80075fc:	080075dd 	.word	0x080075dd
 8007600:	080075dd 	.word	0x080075dd
 8007604:	080075dd 	.word	0x080075dd
 8007608:	080075dd 	.word	0x080075dd
 800760c:	08007661 	.word	0x08007661
 8007610:	080075dd 	.word	0x080075dd
 8007614:	080075dd 	.word	0x080075dd
 8007618:	080075dd 	.word	0x080075dd
 800761c:	080075dd 	.word	0x080075dd
 8007620:	08007765 	.word	0x08007765
 8007624:	0800768d 	.word	0x0800768d
 8007628:	0800771f 	.word	0x0800771f
 800762c:	080075dd 	.word	0x080075dd
 8007630:	080075dd 	.word	0x080075dd
 8007634:	08007787 	.word	0x08007787
 8007638:	080075dd 	.word	0x080075dd
 800763c:	0800768d 	.word	0x0800768d
 8007640:	080075dd 	.word	0x080075dd
 8007644:	080075dd 	.word	0x080075dd
 8007648:	08007727 	.word	0x08007727
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	602a      	str	r2, [r5, #0]
 8007654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800765c:	2301      	movs	r3, #1
 800765e:	e09f      	b.n	80077a0 <_printf_i+0x1ec>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	0607      	lsls	r7, r0, #24
 8007666:	f103 0104 	add.w	r1, r3, #4
 800766a:	6029      	str	r1, [r5, #0]
 800766c:	d501      	bpl.n	8007672 <_printf_i+0xbe>
 800766e:	681e      	ldr	r6, [r3, #0]
 8007670:	e003      	b.n	800767a <_printf_i+0xc6>
 8007672:	0646      	lsls	r6, r0, #25
 8007674:	d5fb      	bpl.n	800766e <_printf_i+0xba>
 8007676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800767a:	2e00      	cmp	r6, #0
 800767c:	da03      	bge.n	8007686 <_printf_i+0xd2>
 800767e:	232d      	movs	r3, #45	; 0x2d
 8007680:	4276      	negs	r6, r6
 8007682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007686:	485a      	ldr	r0, [pc, #360]	; (80077f0 <_printf_i+0x23c>)
 8007688:	230a      	movs	r3, #10
 800768a:	e012      	b.n	80076b2 <_printf_i+0xfe>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	1d19      	adds	r1, r3, #4
 8007692:	6029      	str	r1, [r5, #0]
 8007694:	0605      	lsls	r5, r0, #24
 8007696:	d501      	bpl.n	800769c <_printf_i+0xe8>
 8007698:	681e      	ldr	r6, [r3, #0]
 800769a:	e002      	b.n	80076a2 <_printf_i+0xee>
 800769c:	0641      	lsls	r1, r0, #25
 800769e:	d5fb      	bpl.n	8007698 <_printf_i+0xe4>
 80076a0:	881e      	ldrh	r6, [r3, #0]
 80076a2:	4853      	ldr	r0, [pc, #332]	; (80077f0 <_printf_i+0x23c>)
 80076a4:	2f6f      	cmp	r7, #111	; 0x6f
 80076a6:	bf0c      	ite	eq
 80076a8:	2308      	moveq	r3, #8
 80076aa:	230a      	movne	r3, #10
 80076ac:	2100      	movs	r1, #0
 80076ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076b2:	6865      	ldr	r5, [r4, #4]
 80076b4:	60a5      	str	r5, [r4, #8]
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	bfa2      	ittt	ge
 80076ba:	6821      	ldrge	r1, [r4, #0]
 80076bc:	f021 0104 	bicge.w	r1, r1, #4
 80076c0:	6021      	strge	r1, [r4, #0]
 80076c2:	b90e      	cbnz	r6, 80076c8 <_printf_i+0x114>
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	d04b      	beq.n	8007760 <_printf_i+0x1ac>
 80076c8:	4615      	mov	r5, r2
 80076ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ce:	fb03 6711 	mls	r7, r3, r1, r6
 80076d2:	5dc7      	ldrb	r7, [r0, r7]
 80076d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076d8:	4637      	mov	r7, r6
 80076da:	42bb      	cmp	r3, r7
 80076dc:	460e      	mov	r6, r1
 80076de:	d9f4      	bls.n	80076ca <_printf_i+0x116>
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d10b      	bne.n	80076fc <_printf_i+0x148>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	07de      	lsls	r6, r3, #31
 80076e8:	d508      	bpl.n	80076fc <_printf_i+0x148>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	6861      	ldr	r1, [r4, #4]
 80076ee:	4299      	cmp	r1, r3
 80076f0:	bfde      	ittt	le
 80076f2:	2330      	movle	r3, #48	; 0x30
 80076f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076fc:	1b52      	subs	r2, r2, r5
 80076fe:	6122      	str	r2, [r4, #16]
 8007700:	f8cd a000 	str.w	sl, [sp]
 8007704:	464b      	mov	r3, r9
 8007706:	aa03      	add	r2, sp, #12
 8007708:	4621      	mov	r1, r4
 800770a:	4640      	mov	r0, r8
 800770c:	f7ff fee4 	bl	80074d8 <_printf_common>
 8007710:	3001      	adds	r0, #1
 8007712:	d14a      	bne.n	80077aa <_printf_i+0x1f6>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b004      	add	sp, #16
 800771a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	f043 0320 	orr.w	r3, r3, #32
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	4833      	ldr	r0, [pc, #204]	; (80077f4 <_printf_i+0x240>)
 8007728:	2778      	movs	r7, #120	; 0x78
 800772a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	6829      	ldr	r1, [r5, #0]
 8007732:	061f      	lsls	r7, r3, #24
 8007734:	f851 6b04 	ldr.w	r6, [r1], #4
 8007738:	d402      	bmi.n	8007740 <_printf_i+0x18c>
 800773a:	065f      	lsls	r7, r3, #25
 800773c:	bf48      	it	mi
 800773e:	b2b6      	uxthmi	r6, r6
 8007740:	07df      	lsls	r7, r3, #31
 8007742:	bf48      	it	mi
 8007744:	f043 0320 	orrmi.w	r3, r3, #32
 8007748:	6029      	str	r1, [r5, #0]
 800774a:	bf48      	it	mi
 800774c:	6023      	strmi	r3, [r4, #0]
 800774e:	b91e      	cbnz	r6, 8007758 <_printf_i+0x1a4>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	f023 0320 	bic.w	r3, r3, #32
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	2310      	movs	r3, #16
 800775a:	e7a7      	b.n	80076ac <_printf_i+0xf8>
 800775c:	4824      	ldr	r0, [pc, #144]	; (80077f0 <_printf_i+0x23c>)
 800775e:	e7e4      	b.n	800772a <_printf_i+0x176>
 8007760:	4615      	mov	r5, r2
 8007762:	e7bd      	b.n	80076e0 <_printf_i+0x12c>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	6826      	ldr	r6, [r4, #0]
 8007768:	6961      	ldr	r1, [r4, #20]
 800776a:	1d18      	adds	r0, r3, #4
 800776c:	6028      	str	r0, [r5, #0]
 800776e:	0635      	lsls	r5, r6, #24
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	d501      	bpl.n	8007778 <_printf_i+0x1c4>
 8007774:	6019      	str	r1, [r3, #0]
 8007776:	e002      	b.n	800777e <_printf_i+0x1ca>
 8007778:	0670      	lsls	r0, r6, #25
 800777a:	d5fb      	bpl.n	8007774 <_printf_i+0x1c0>
 800777c:	8019      	strh	r1, [r3, #0]
 800777e:	2300      	movs	r3, #0
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	4615      	mov	r5, r2
 8007784:	e7bc      	b.n	8007700 <_printf_i+0x14c>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	1d1a      	adds	r2, r3, #4
 800778a:	602a      	str	r2, [r5, #0]
 800778c:	681d      	ldr	r5, [r3, #0]
 800778e:	6862      	ldr	r2, [r4, #4]
 8007790:	2100      	movs	r1, #0
 8007792:	4628      	mov	r0, r5
 8007794:	f7f8 fd2c 	bl	80001f0 <memchr>
 8007798:	b108      	cbz	r0, 800779e <_printf_i+0x1ea>
 800779a:	1b40      	subs	r0, r0, r5
 800779c:	6060      	str	r0, [r4, #4]
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	2300      	movs	r3, #0
 80077a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a8:	e7aa      	b.n	8007700 <_printf_i+0x14c>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	462a      	mov	r2, r5
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d0ad      	beq.n	8007714 <_printf_i+0x160>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	079b      	lsls	r3, r3, #30
 80077bc:	d413      	bmi.n	80077e6 <_printf_i+0x232>
 80077be:	68e0      	ldr	r0, [r4, #12]
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	4298      	cmp	r0, r3
 80077c4:	bfb8      	it	lt
 80077c6:	4618      	movlt	r0, r3
 80077c8:	e7a6      	b.n	8007718 <_printf_i+0x164>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4632      	mov	r2, r6
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	47d0      	blx	sl
 80077d4:	3001      	adds	r0, #1
 80077d6:	d09d      	beq.n	8007714 <_printf_i+0x160>
 80077d8:	3501      	adds	r5, #1
 80077da:	68e3      	ldr	r3, [r4, #12]
 80077dc:	9903      	ldr	r1, [sp, #12]
 80077de:	1a5b      	subs	r3, r3, r1
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	dcf2      	bgt.n	80077ca <_printf_i+0x216>
 80077e4:	e7eb      	b.n	80077be <_printf_i+0x20a>
 80077e6:	2500      	movs	r5, #0
 80077e8:	f104 0619 	add.w	r6, r4, #25
 80077ec:	e7f5      	b.n	80077da <_printf_i+0x226>
 80077ee:	bf00      	nop
 80077f0:	08007d29 	.word	0x08007d29
 80077f4:	08007d3a 	.word	0x08007d3a

080077f8 <__sflush_r>:
 80077f8:	898a      	ldrh	r2, [r1, #12]
 80077fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	4605      	mov	r5, r0
 8007800:	0710      	lsls	r0, r2, #28
 8007802:	460c      	mov	r4, r1
 8007804:	d458      	bmi.n	80078b8 <__sflush_r+0xc0>
 8007806:	684b      	ldr	r3, [r1, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc05      	bgt.n	8007818 <__sflush_r+0x20>
 800780c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	dc02      	bgt.n	8007818 <__sflush_r+0x20>
 8007812:	2000      	movs	r0, #0
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800781a:	2e00      	cmp	r6, #0
 800781c:	d0f9      	beq.n	8007812 <__sflush_r+0x1a>
 800781e:	2300      	movs	r3, #0
 8007820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007824:	682f      	ldr	r7, [r5, #0]
 8007826:	6a21      	ldr	r1, [r4, #32]
 8007828:	602b      	str	r3, [r5, #0]
 800782a:	d032      	beq.n	8007892 <__sflush_r+0x9a>
 800782c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	075a      	lsls	r2, r3, #29
 8007832:	d505      	bpl.n	8007840 <__sflush_r+0x48>
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	1ac0      	subs	r0, r0, r3
 8007838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783a:	b10b      	cbz	r3, 8007840 <__sflush_r+0x48>
 800783c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800783e:	1ac0      	subs	r0, r0, r3
 8007840:	2300      	movs	r3, #0
 8007842:	4602      	mov	r2, r0
 8007844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007846:	6a21      	ldr	r1, [r4, #32]
 8007848:	4628      	mov	r0, r5
 800784a:	47b0      	blx	r6
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	d106      	bne.n	8007860 <__sflush_r+0x68>
 8007852:	6829      	ldr	r1, [r5, #0]
 8007854:	291d      	cmp	r1, #29
 8007856:	d82b      	bhi.n	80078b0 <__sflush_r+0xb8>
 8007858:	4a29      	ldr	r2, [pc, #164]	; (8007900 <__sflush_r+0x108>)
 800785a:	410a      	asrs	r2, r1
 800785c:	07d6      	lsls	r6, r2, #31
 800785e:	d427      	bmi.n	80078b0 <__sflush_r+0xb8>
 8007860:	2200      	movs	r2, #0
 8007862:	6062      	str	r2, [r4, #4]
 8007864:	04d9      	lsls	r1, r3, #19
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	d504      	bpl.n	8007876 <__sflush_r+0x7e>
 800786c:	1c42      	adds	r2, r0, #1
 800786e:	d101      	bne.n	8007874 <__sflush_r+0x7c>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b903      	cbnz	r3, 8007876 <__sflush_r+0x7e>
 8007874:	6560      	str	r0, [r4, #84]	; 0x54
 8007876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007878:	602f      	str	r7, [r5, #0]
 800787a:	2900      	cmp	r1, #0
 800787c:	d0c9      	beq.n	8007812 <__sflush_r+0x1a>
 800787e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007882:	4299      	cmp	r1, r3
 8007884:	d002      	beq.n	800788c <__sflush_r+0x94>
 8007886:	4628      	mov	r0, r5
 8007888:	f7ff fa92 	bl	8006db0 <_free_r>
 800788c:	2000      	movs	r0, #0
 800788e:	6360      	str	r0, [r4, #52]	; 0x34
 8007890:	e7c0      	b.n	8007814 <__sflush_r+0x1c>
 8007892:	2301      	movs	r3, #1
 8007894:	4628      	mov	r0, r5
 8007896:	47b0      	blx	r6
 8007898:	1c41      	adds	r1, r0, #1
 800789a:	d1c8      	bne.n	800782e <__sflush_r+0x36>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0c5      	beq.n	800782e <__sflush_r+0x36>
 80078a2:	2b1d      	cmp	r3, #29
 80078a4:	d001      	beq.n	80078aa <__sflush_r+0xb2>
 80078a6:	2b16      	cmp	r3, #22
 80078a8:	d101      	bne.n	80078ae <__sflush_r+0xb6>
 80078aa:	602f      	str	r7, [r5, #0]
 80078ac:	e7b1      	b.n	8007812 <__sflush_r+0x1a>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	e7ad      	b.n	8007814 <__sflush_r+0x1c>
 80078b8:	690f      	ldr	r7, [r1, #16]
 80078ba:	2f00      	cmp	r7, #0
 80078bc:	d0a9      	beq.n	8007812 <__sflush_r+0x1a>
 80078be:	0793      	lsls	r3, r2, #30
 80078c0:	680e      	ldr	r6, [r1, #0]
 80078c2:	bf08      	it	eq
 80078c4:	694b      	ldreq	r3, [r1, #20]
 80078c6:	600f      	str	r7, [r1, #0]
 80078c8:	bf18      	it	ne
 80078ca:	2300      	movne	r3, #0
 80078cc:	eba6 0807 	sub.w	r8, r6, r7
 80078d0:	608b      	str	r3, [r1, #8]
 80078d2:	f1b8 0f00 	cmp.w	r8, #0
 80078d6:	dd9c      	ble.n	8007812 <__sflush_r+0x1a>
 80078d8:	6a21      	ldr	r1, [r4, #32]
 80078da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078dc:	4643      	mov	r3, r8
 80078de:	463a      	mov	r2, r7
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b0      	blx	r6
 80078e4:	2800      	cmp	r0, #0
 80078e6:	dc06      	bgt.n	80078f6 <__sflush_r+0xfe>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e78e      	b.n	8007814 <__sflush_r+0x1c>
 80078f6:	4407      	add	r7, r0
 80078f8:	eba8 0800 	sub.w	r8, r8, r0
 80078fc:	e7e9      	b.n	80078d2 <__sflush_r+0xda>
 80078fe:	bf00      	nop
 8007900:	dfbffffe 	.word	0xdfbffffe

08007904 <_fflush_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	690b      	ldr	r3, [r1, #16]
 8007908:	4605      	mov	r5, r0
 800790a:	460c      	mov	r4, r1
 800790c:	b913      	cbnz	r3, 8007914 <_fflush_r+0x10>
 800790e:	2500      	movs	r5, #0
 8007910:	4628      	mov	r0, r5
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	b118      	cbz	r0, 800791e <_fflush_r+0x1a>
 8007916:	6a03      	ldr	r3, [r0, #32]
 8007918:	b90b      	cbnz	r3, 800791e <_fflush_r+0x1a>
 800791a:	f7ff f823 	bl	8006964 <__sinit>
 800791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f3      	beq.n	800790e <_fflush_r+0xa>
 8007926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007928:	07d0      	lsls	r0, r2, #31
 800792a:	d404      	bmi.n	8007936 <_fflush_r+0x32>
 800792c:	0599      	lsls	r1, r3, #22
 800792e:	d402      	bmi.n	8007936 <_fflush_r+0x32>
 8007930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007932:	f7ff fa2c 	bl	8006d8e <__retarget_lock_acquire_recursive>
 8007936:	4628      	mov	r0, r5
 8007938:	4621      	mov	r1, r4
 800793a:	f7ff ff5d 	bl	80077f8 <__sflush_r>
 800793e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007940:	07da      	lsls	r2, r3, #31
 8007942:	4605      	mov	r5, r0
 8007944:	d4e4      	bmi.n	8007910 <_fflush_r+0xc>
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	059b      	lsls	r3, r3, #22
 800794a:	d4e1      	bmi.n	8007910 <_fflush_r+0xc>
 800794c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794e:	f7ff fa1f 	bl	8006d90 <__retarget_lock_release_recursive>
 8007952:	e7dd      	b.n	8007910 <_fflush_r+0xc>

08007954 <__swhatbuf_r>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	460c      	mov	r4, r1
 8007958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795c:	2900      	cmp	r1, #0
 800795e:	b096      	sub	sp, #88	; 0x58
 8007960:	4615      	mov	r5, r2
 8007962:	461e      	mov	r6, r3
 8007964:	da0d      	bge.n	8007982 <__swhatbuf_r+0x2e>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f013 0f80 	tst.w	r3, #128	; 0x80
 800796c:	f04f 0100 	mov.w	r1, #0
 8007970:	bf0c      	ite	eq
 8007972:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007976:	2340      	movne	r3, #64	; 0x40
 8007978:	2000      	movs	r0, #0
 800797a:	6031      	str	r1, [r6, #0]
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	b016      	add	sp, #88	; 0x58
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	466a      	mov	r2, sp
 8007984:	f000 f862 	bl	8007a4c <_fstat_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	dbec      	blt.n	8007966 <__swhatbuf_r+0x12>
 800798c:	9901      	ldr	r1, [sp, #4]
 800798e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007992:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007996:	4259      	negs	r1, r3
 8007998:	4159      	adcs	r1, r3
 800799a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799e:	e7eb      	b.n	8007978 <__swhatbuf_r+0x24>

080079a0 <__smakebuf_r>:
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079a4:	079d      	lsls	r5, r3, #30
 80079a6:	4606      	mov	r6, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	d507      	bpl.n	80079bc <__smakebuf_r+0x1c>
 80079ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	2301      	movs	r3, #1
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	b002      	add	sp, #8
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	ab01      	add	r3, sp, #4
 80079be:	466a      	mov	r2, sp
 80079c0:	f7ff ffc8 	bl	8007954 <__swhatbuf_r>
 80079c4:	9900      	ldr	r1, [sp, #0]
 80079c6:	4605      	mov	r5, r0
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff fa5d 	bl	8006e88 <_malloc_r>
 80079ce:	b948      	cbnz	r0, 80079e4 <__smakebuf_r+0x44>
 80079d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d4:	059a      	lsls	r2, r3, #22
 80079d6:	d4ef      	bmi.n	80079b8 <__smakebuf_r+0x18>
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	f043 0302 	orr.w	r3, r3, #2
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	e7e3      	b.n	80079ac <__smakebuf_r+0xc>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	6020      	str	r0, [r4, #0]
 80079e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	6163      	str	r3, [r4, #20]
 80079f2:	9b01      	ldr	r3, [sp, #4]
 80079f4:	6120      	str	r0, [r4, #16]
 80079f6:	b15b      	cbz	r3, 8007a10 <__smakebuf_r+0x70>
 80079f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f837 	bl	8007a70 <_isatty_r>
 8007a02:	b128      	cbz	r0, 8007a10 <__smakebuf_r+0x70>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	431d      	orrs	r5, r3
 8007a14:	81a5      	strh	r5, [r4, #12]
 8007a16:	e7cf      	b.n	80079b8 <__smakebuf_r+0x18>

08007a18 <memmove>:
 8007a18:	4288      	cmp	r0, r1
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	eb01 0402 	add.w	r4, r1, r2
 8007a20:	d902      	bls.n	8007a28 <memmove+0x10>
 8007a22:	4284      	cmp	r4, r0
 8007a24:	4623      	mov	r3, r4
 8007a26:	d807      	bhi.n	8007a38 <memmove+0x20>
 8007a28:	1e43      	subs	r3, r0, #1
 8007a2a:	42a1      	cmp	r1, r4
 8007a2c:	d008      	beq.n	8007a40 <memmove+0x28>
 8007a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a36:	e7f8      	b.n	8007a2a <memmove+0x12>
 8007a38:	4402      	add	r2, r0
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	428a      	cmp	r2, r1
 8007a3e:	d100      	bne.n	8007a42 <memmove+0x2a>
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a4a:	e7f7      	b.n	8007a3c <memmove+0x24>

08007a4c <_fstat_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_fstat_r+0x20>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f7f9 fb7b 	bl	8001154 <_fstat>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d102      	bne.n	8007a68 <_fstat_r+0x1c>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b103      	cbz	r3, 8007a68 <_fstat_r+0x1c>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200049d0 	.word	0x200049d0

08007a70 <_isatty_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d06      	ldr	r5, [pc, #24]	; (8007a8c <_isatty_r+0x1c>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7f9 fb7a 	bl	8001174 <_isatty>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_isatty_r+0x1a>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_isatty_r+0x1a>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	200049d0 	.word	0x200049d0

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_sbrk_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7f9 fb82 	bl	80011a4 <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	200049d0 	.word	0x200049d0

08007ab0 <_realloc_r>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4614      	mov	r4, r2
 8007ab8:	460e      	mov	r6, r1
 8007aba:	b921      	cbnz	r1, 8007ac6 <_realloc_r+0x16>
 8007abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	f7ff b9e1 	b.w	8006e88 <_malloc_r>
 8007ac6:	b92a      	cbnz	r2, 8007ad4 <_realloc_r+0x24>
 8007ac8:	f7ff f972 	bl	8006db0 <_free_r>
 8007acc:	4625      	mov	r5, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad4:	f000 f81b 	bl	8007b0e <_malloc_usable_size_r>
 8007ad8:	4284      	cmp	r4, r0
 8007ada:	4607      	mov	r7, r0
 8007adc:	d802      	bhi.n	8007ae4 <_realloc_r+0x34>
 8007ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ae2:	d812      	bhi.n	8007b0a <_realloc_r+0x5a>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f7ff f9ce 	bl	8006e88 <_malloc_r>
 8007aec:	4605      	mov	r5, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d0ed      	beq.n	8007ace <_realloc_r+0x1e>
 8007af2:	42bc      	cmp	r4, r7
 8007af4:	4622      	mov	r2, r4
 8007af6:	4631      	mov	r1, r6
 8007af8:	bf28      	it	cs
 8007afa:	463a      	movcs	r2, r7
 8007afc:	f7ff f949 	bl	8006d92 <memcpy>
 8007b00:	4631      	mov	r1, r6
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7ff f954 	bl	8006db0 <_free_r>
 8007b08:	e7e1      	b.n	8007ace <_realloc_r+0x1e>
 8007b0a:	4635      	mov	r5, r6
 8007b0c:	e7df      	b.n	8007ace <_realloc_r+0x1e>

08007b0e <_malloc_usable_size_r>:
 8007b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b12:	1f18      	subs	r0, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfbc      	itt	lt
 8007b18:	580b      	ldrlt	r3, [r1, r0]
 8007b1a:	18c0      	addlt	r0, r0, r3
 8007b1c:	4770      	bx	lr
	...

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
