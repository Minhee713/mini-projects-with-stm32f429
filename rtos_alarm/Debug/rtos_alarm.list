
rtos_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080060f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000048f4  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004960  20004960  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001698c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003296  00000000  00000000  00036a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013c8  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f54  00000000  00000000  0003b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026d28  00000000  00000000  0003c024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017944  00000000  00000000  00062d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6fde  00000000  00000000  0007a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005acc  00000000  00000000  00161670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0016713c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006000 	.word	0x08006000

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006000 	.word	0x08006000

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088
 80005bc:	200000dc 	.word	0x200000dc

080005c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0a      	cmp	r3, #10
 80005cc:	d106      	bne.n	80005dc <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4907      	ldr	r1, [pc, #28]	; (80005f4 <__io_putchar+0x34>)
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <__io_putchar+0x38>)
 80005d8:	f002 fc0f 	bl	8002dfa <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <__io_putchar+0x38>)
 80005e6:	f002 fc08 	bl	8002dfa <HAL_UART_Transmit>
 return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08006018 	.word	0x08006018
 80005f8:	20000558 	.word	0x20000558

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fd71 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f82b 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f985 	bl	8000918 <MX_GPIO_Init>
  MX_ETH_Init();
 800060e:	f000 f89d 	bl	800074c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000612:	f000 f929 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000616:	f000 f951 	bl	80008bc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800061a:	f000 f8e5 	bl	80007e8 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800061e:	f000 f889 	bl	8000734 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Test: Main Start\n");
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x58>)
 8000624:	f004 fe82 	bl	800532c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <main+0x5c>)
 800062a:	1d3c      	adds	r4, r7, #4
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fa71 	bl	8003b26 <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <main+0x60>)
 8000648:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  USER_threads();
 800064a:	f000 fcdd 	bl	8001008 <USER_threads>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800064e:	f003 fa63 	bl	8003b18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x56>
 8000654:	0800601c 	.word	0x0800601c
 8000658:	0800603c 	.word	0x0800603c
 800065c:	20000aa8 	.word	0x20000aa8

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 ff3c 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006dc:	2307      	movs	r3, #7
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fea3 	bl	8002430 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f9c8 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f904 	bl	8002920 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f9b1 	bl	8000a84 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f000 fe44 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f000 fe5d 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ETH_Init+0x84>)
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <MX_ETH_Init+0x88>)
 8000754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_ETH_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_ETH_Init+0x8c>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_ETH_Init+0x8c>)
 8000764:	22e1      	movs	r2, #225	; 0xe1
 8000766:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_ETH_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_ETH_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_ETH_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_ETH_Init+0x84>)
 800077c:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_ETH_Init+0x8c>)
 800077e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_ETH_Init+0x84>)
 8000782:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000786:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_ETH_Init+0x84>)
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <MX_ETH_Init+0x90>)
 800078c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_ETH_Init+0x84>)
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_ETH_Init+0x94>)
 8000792:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_ETH_Init+0x84>)
 8000796:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800079a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_ETH_Init+0x84>)
 800079e:	f000 fe4b 	bl	8001438 <HAL_ETH_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a8:	f000 f96c 	bl	8000a84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007ac:	2238      	movs	r2, #56	; 0x38
 80007ae:	2100      	movs	r1, #0
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_ETH_Init+0x98>)
 80007b2:	f004 fe9b 	bl	80054ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_ETH_Init+0x98>)
 80007b8:	2221      	movs	r2, #33	; 0x21
 80007ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_ETH_Init+0x98>)
 80007be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_ETH_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000454 	.word	0x20000454
 80007d4:	40028000 	.word	0x40028000
 80007d8:	20000aac 	.word	0x20000aac
 80007dc:	200003b4 	.word	0x200003b4
 80007e0:	20000314 	.word	0x20000314
 80007e4:	200002dc 	.word	0x200002dc

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C1_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C1_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C1_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_I2C1_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C1_Init+0x74>)
 8000806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_I2C1_Init+0x74>)
 8000826:	f001 fb27 	bl	8001e78 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f928 	bl	8000a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C1_Init+0x74>)
 8000838:	f001 fc62 	bl	8002100 <HAL_I2CEx_ConfigAnalogFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000842:	f000 f91f 	bl	8000a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_I2C1_Init+0x74>)
 800084a:	f001 fc95 	bl	8002178 <HAL_I2CEx_ConfigDigitalFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f916 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000504 	.word	0x20000504
 8000860:	40005400 	.word	0x40005400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART3_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f002 fa5e 	bl	8002d60 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f8eb 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000558 	.word	0x20000558
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2202      	movs	r2, #2
 80008de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	f001 fc79 	bl	80021f6 <HAL_PCD_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f8bb 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000059c 	.word	0x2000059c

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x150>)
 80009de:	f001 f9ff 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x154>)
 80009e8:	f001 f9fa 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <MX_GPIO_Init+0x158>)
 8000a04:	f001 f840 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000a22:	f001 f831 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a3e:	f001 f823 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a56:	f001 f817 	bl	8001a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40020800 	.word	0x40020800

08000a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f003 f89e 	bl	8003bbe <osDelay>
 8000a82:	e7fb      	b.n	8000a7c <StartDefaultTask+0x8>

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x54>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fc78 	bl	80013ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a55      	ldr	r2, [pc, #340]	; (8000c5c <HAL_ETH_MspInit+0x174>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f040 80a4 	bne.w	8000c54 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a52      	ldr	r2, [pc, #328]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <HAL_ETH_MspInit+0x17c>)
 8000bec:	f000 ff4c 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf0:	2386      	movs	r3, #134	; 0x86
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <HAL_ETH_MspInit+0x180>)
 8000c0c:	f000 ff3c 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <HAL_ETH_MspInit+0x184>)
 8000c2e:	f000 ff2b 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <HAL_ETH_MspInit+0x188>)
 8000c50:	f000 ff1a 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40028000 	.word	0x40028000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800

08000c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_I2C_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12c      	bne.n	8000cf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_I2C_MspInit+0x8c>)
 8000cd0:	f000 feda 	bl	8001a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12c      	bne.n	8000d80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d70:	2307      	movs	r3, #7
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_MspInit+0x8c>)
 8000d7c:	f000 fe84 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db4:	d13f      	bne.n	8000e36 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de4:	230a      	movs	r3, #10
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <HAL_PCD_MspInit+0xb0>)
 8000df0:	f000 fe4a 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480e      	ldr	r0, [pc, #56]	; (8000e44 <HAL_PCD_MspInit+0xb0>)
 8000e0a:	f000 fe3d 	bl	8001a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6353      	str	r3, [r2, #52]	; 0x34
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f988 	bl	800118c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e7c:	f003 fcb4 	bl	80047e8 <xTaskGetSchedulerState>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d001      	beq.n	8000e8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e86:	f003 feef 	bl	8004c68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e96:	f000 ffd7 	bl	8001e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e00a      	b.n	8000ec6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb0:	f3af 8000 	nop.w
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	60ba      	str	r2, [r7, #8]
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf0      	blt.n	8000eb0 <_read+0x12>
  }

  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e009      	b.n	8000efe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb64 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf1      	blt.n	8000eea <_write+0x12>
  }
  return len;
 8000f06:	687b      	ldr	r3, [r7, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_close>:

int _close(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f38:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_isatty>:

int _isatty(int file)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f004 faee 	bl	8005588 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20030000 	.word	0x20030000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	20000ab4 	.word	0x20000ab4
 8000fe0:	20004960 	.word	0x20004960

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <USER_threads>:



/*Task functions*/
void USER_threads(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8
	printf("User threads start!!\n");
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <USER_threads+0x28>)
 8001010:	f004 f98c 	bl	800532c <puts>
	xTaskCreate((TaskFunction_t)TaskMain, "TaskMain", 256, NULL, TASK_MAIN_PRIO, &xHandleMain);
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <USER_threads+0x2c>)
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	2314      	movs	r3, #20
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001022:	4905      	ldr	r1, [pc, #20]	; (8001038 <USER_threads+0x30>)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <USER_threads+0x34>)
 8001026:	f002 feef 	bl	8003e08 <xTaskCreate>
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08006058 	.word	0x08006058
 8001034:	20000ab8 	.word	0x20000ab8
 8001038:	08006070 	.word	0x08006070
 800103c:	08001041 	.word	0x08001041

08001040 <TaskMain>:

void TaskMain(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	const char* taskMainName = "TaskMain";
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <TaskMain+0x14>)
 8001048:	607b      	str	r3, [r7, #4]
	for (;;) {
		printf("%s is running\r\n", taskMainName);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TaskMain+0x18>)
 800104e:	f004 f907 	bl	8005260 <iprintf>
 8001052:	e7fa      	b.n	800104a <TaskMain+0xa>
 8001054:	08006070 	.word	0x08006070
 8001058:	0800607c 	.word	0x0800607c

0800105c <HAL_GPIO_EXTI_Callback>:



}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_13) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800106c:	d109      	bne.n	8001082 <HAL_GPIO_EXTI_Callback+0x26>
			HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <HAL_GPIO_EXTI_Callback+0x30>)
 8001074:	f000 fecd 	bl	8001e12 <HAL_GPIO_TogglePin>
			vTaskSuspend(xHandleMain);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_GPIO_EXTI_Callback+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 f82d 	bl	80040dc <vTaskSuspend>
					btn_cnt = 0;
					current_state.mode = MUSIC_SELECT;
				}
			}*/
		}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400
 8001090:	20000ab8 	.word	0x20000ab8

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010be:	f7ff ff91 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f004 fa67 	bl	8005594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fa99 	bl	80005fc <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010d8:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 80010dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010e0:	20004960 	.word	0x20004960

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f94f 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fcb8 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f967 	bl	800141e <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f92f 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000abc 	.word	0x20000abc

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000abc 	.word	0x20000abc

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff29 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff3e 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff31 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06c      	b.n	8001524 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2223      	movs	r2, #35	; 0x23
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fb43 	bl	8000ae8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_ETH_Init+0xf4>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_ETH_Init+0xf4>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_ETH_Init+0xf4>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_ETH_Init+0xf8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <HAL_ETH_Init+0xf8>)
 8001484:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001488:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_ETH_Init+0xf8>)
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <HAL_ETH_Init+0xf8>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_ETH_Init+0xf8>)
 800149a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fe7e 	bl	80011b4 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ba:	e011      	b.n	80014e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014bc:	f7ff fe7a 	bl	80011b4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ca:	d909      	bls.n	80014e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	22e0      	movs	r2, #224	; 0xe0
 80014d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e021      	b.n	8001524 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e4      	bne.n	80014bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f958 	bl	80017a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f9ff 	bl	80018fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa55 	bl	80019ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	461a      	mov	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f9bd 	bl	800188c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2210      	movs	r2, #16
 800151e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800

08001534 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4b51      	ldr	r3, [pc, #324]	; (8001690 <ETH_SetMACConfig+0x15c>)
 800154a:	4013      	ands	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	7c1b      	ldrb	r3, [r3, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <ETH_SetMACConfig+0x28>
 8001556:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800155a:	e000      	b.n	800155e <ETH_SetMACConfig+0x2a>
 800155c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	7c5b      	ldrb	r3, [r3, #17]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <ETH_SetMACConfig+0x38>
 8001566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156a:	e000      	b.n	800156e <ETH_SetMACConfig+0x3a>
 800156c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800156e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	7fdb      	ldrb	r3, [r3, #31]
 800157a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800157c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001582:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	7f92      	ldrb	r2, [r2, #30]
 8001588:	2a00      	cmp	r2, #0
 800158a:	d102      	bne.n	8001592 <ETH_SetMACConfig+0x5e>
 800158c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001590:	e000      	b.n	8001594 <ETH_SetMACConfig+0x60>
 8001592:	2200      	movs	r2, #0
                        macconf->Speed |
 8001594:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7f1b      	ldrb	r3, [r3, #28]
 800159a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800159c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d102      	bne.n	80015bc <ETH_SetMACConfig+0x88>
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	e000      	b.n	80015be <ETH_SetMACConfig+0x8a>
 80015bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	7bdb      	ldrb	r3, [r3, #15]
 80015c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fdec 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	f64f 7341 	movw	r3, #65345	; 0xff41
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001612:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800161a:	2a00      	cmp	r2, #0
 800161c:	d101      	bne.n	8001622 <ETH_SetMACConfig+0xee>
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	e000      	b.n	8001624 <ETH_SetMACConfig+0xf0>
 8001622:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001624:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800162a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001632:	2a01      	cmp	r2, #1
 8001634:	d101      	bne.n	800163a <ETH_SetMACConfig+0x106>
 8001636:	2208      	movs	r2, #8
 8001638:	e000      	b.n	800163c <ETH_SetMACConfig+0x108>
 800163a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800163c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001644:	2a01      	cmp	r2, #1
 8001646:	d101      	bne.n	800164c <ETH_SetMACConfig+0x118>
 8001648:	2204      	movs	r2, #4
 800164a:	e000      	b.n	800164e <ETH_SetMACConfig+0x11a>
 800164c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800164e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001656:	2a01      	cmp	r2, #1
 8001658:	d101      	bne.n	800165e <ETH_SetMACConfig+0x12a>
 800165a:	2202      	movs	r2, #2
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0x12c>
 800165e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001660:	4313      	orrs	r3, r2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fda7 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	ff20810f 	.word	0xff20810f

08001694 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <ETH_SetDMAConfig+0x110>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <ETH_SetDMAConfig+0x2c>
 80016ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016be:	e000      	b.n	80016c2 <ETH_SetDMAConfig+0x2e>
 80016c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7b5b      	ldrb	r3, [r3, #13]
 80016c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	7f52      	ldrb	r2, [r2, #29]
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d102      	bne.n	80016d8 <ETH_SetDMAConfig+0x44>
 80016d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d6:	e000      	b.n	80016da <ETH_SetDMAConfig+0x46>
 80016d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7b9b      	ldrb	r3, [r3, #14]
 80016e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	7f1b      	ldrb	r3, [r3, #28]
 80016ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7f9b      	ldrb	r3, [r3, #30]
 80016f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001706:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001708:	4313      	orrs	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	461a      	mov	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fd4e 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	791b      	ldrb	r3, [r3, #4]
 8001742:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001748:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800174e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001754:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800175e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001766:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800176c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fd1f 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	f8de3f23 	.word	0xf8de3f23

080017a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0a6      	sub	sp, #152	; 0x98
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e4:	2300      	movs	r3, #0
 80017e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800180a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800181c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe86 	bl	8001534 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001828:	2301      	movs	r3, #1
 800182a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800182c:	2301      	movs	r3, #1
 800182e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001836:	2301      	movs	r3, #1
 8001838:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001854:	2301      	movs	r3, #1
 8001856:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800185e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001862:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001868:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff08 	bl	8001694 <ETH_SetDMAConfig>
}
 8001884:	bf00      	nop
 8001886:	3798      	adds	r7, #152	; 0x98
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3305      	adds	r3, #5
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	3204      	adds	r2, #4
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <ETH_MACAddressConfig+0x68>)
 80018ae:	4413      	add	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3302      	adds	r3, #2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	4313      	orrs	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <ETH_MACAddressConfig+0x6c>)
 80018de:	4413      	add	r3, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40028040 	.word	0x40028040
 80018f8:	40028044 	.word	0x40028044

080018fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e03e      	b.n	8001988 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68d9      	ldr	r1, [r3, #12]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	3206      	adds	r2, #6
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d80c      	bhi.n	800196c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	e004      	b.n	8001976 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d9bd      	bls.n	800190a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e046      	b.n	8001a4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6919      	ldr	r1, [r3, #16]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	3212      	adds	r2, #18
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d80c      	bhi.n	8001a3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6919      	ldr	r1, [r3, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	e004      	b.n	8001a44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d9b5      	bls.n	80019bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	60da      	str	r2, [r3, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e177      	b.n	8001d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8166 	bne.w	8001d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80c0 	beq.w	8001d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d037      	beq.n	8001cc6 <HAL_GPIO_Init+0x23e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_GPIO_Init+0x23a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x236>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x232>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x22e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x22a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	e012      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	e010      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae84 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40022400 	.word	0x40022400
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f8f8 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e12b      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fee8 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001edc:	f000 ff18 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8001ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_I2C_Init+0x274>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d807      	bhi.n	8001efc <HAL_I2C_Init+0x84>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <HAL_I2C_Init+0x278>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e006      	b.n	8001f0a <HAL_I2C_Init+0x92>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_I2C_Init+0x27c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bf94      	ite	ls
 8001f04:	2301      	movls	r3, #1
 8001f06:	2300      	movhi	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0e7      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a78      	ldr	r2, [pc, #480]	; (80020f8 <HAL_I2C_Init+0x280>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9b      	lsrs	r3, r3, #18
 8001f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d802      	bhi.n	8001f4c <HAL_I2C_Init+0xd4>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	e009      	b.n	8001f60 <HAL_I2C_Init+0xe8>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_I2C_Init+0x284>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	3301      	adds	r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	495c      	ldr	r1, [pc, #368]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d819      	bhi.n	8001fb4 <HAL_I2C_Init+0x13c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e59      	subs	r1, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f94:	400b      	ands	r3, r1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_I2C_Init+0x138>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e59      	subs	r1, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	e051      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e04f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_I2C_Init+0x168>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e012      	b.n	8002006 <HAL_I2C_Init+0x18e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	0099      	lsls	r1, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Init+0x196>
 800200a:	2301      	movs	r3, #1
 800200c:	e022      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10e      	bne.n	8002034 <HAL_I2C_Init+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e58      	subs	r0, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	440b      	add	r3, r1
 8002024:	fbb0 f3f3 	udiv	r3, r0, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	0099      	lsls	r1, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6809      	ldr	r1, [r1, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6911      	ldr	r1, [r2, #16]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68d2      	ldr	r2, [r2, #12]
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	430b      	orrs	r3, r1
 8002096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	001e847f 	.word	0x001e847f
 80020f4:	003d08ff 	.word	0x003d08ff
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	10624dd3 	.word	0x10624dd3

08002100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	d129      	bne.n	800216a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2224      	movs	r2, #36	; 0x24
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0210 	bic.w	r2, r2, #16
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	d12a      	bne.n	80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f023 030f 	bic.w	r3, r3, #15
 80021b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	89fa      	ldrh	r2, [r7, #14]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f8:	b08f      	sub	sp, #60	; 0x3c
 80021fa:	af0a      	add	r7, sp, #40	; 0x28
 80021fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e10f      	b.n	8002428 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fdb6 	bl	8000d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f001 f9ad 	bl	80035a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	687e      	ldr	r6, [r7, #4]
 8002254:	466d      	mov	r5, sp
 8002256:	f106 0410 	add.w	r4, r6, #16
 800225a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002266:	e885 0003 	stmia.w	r5, {r0, r1}
 800226a:	1d33      	adds	r3, r6, #4
 800226c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f001 f938 	bl	80034e4 <USB_CoreInit>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0d0      	b.n	8002428 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f001 f99b 	bl	80035c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e04a      	b.n	800232e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	333d      	adds	r3, #61	; 0x3d
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333c      	adds	r3, #60	; 0x3c
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	b298      	uxth	r0, r3
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	3344      	adds	r3, #68	; 0x44
 80022d4:	4602      	mov	r2, r0
 80022d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3340      	adds	r3, #64	; 0x40
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3348      	adds	r3, #72	; 0x48
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	334c      	adds	r3, #76	; 0x4c
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3354      	adds	r3, #84	; 0x54
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	3301      	adds	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3af      	bcc.n	8002298 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e044      	b.n	80023c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	3301      	adds	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3b5      	bcc.n	800233e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	687e      	ldr	r6, [r7, #4]
 80023da:	466d      	mov	r5, sp
 80023dc:	f106 0410 	add.w	r4, r6, #16
 80023e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f0:	1d33      	adds	r3, r6, #4
 80023f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f001 f933 	bl	8003660 <USB_DevInit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e00d      	b.n	8002428 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fafe 	bl	8003a22 <USB_DevDisconnect>

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e267      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b85      	ldr	r3, [pc, #532]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b7e      	ldr	r3, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e242      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6f      	ldr	r2, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6c      	ldr	r2, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b69      	ldr	r3, [pc, #420]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a68      	ldr	r2, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe64 	bl	80011b4 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fe60 	bl	80011b4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e207      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fe50 	bl	80011b4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fe4c 	bl	80011b4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1f3      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b44      	ldr	r3, [pc, #272]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c7      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4937      	ldr	r1, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_OscConfig+0x244>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fe05 	bl	80011b4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe01 	bl	80011b4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a8      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4925      	ldr	r1, [pc, #148]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_OscConfig+0x244>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fde4 	bl	80011b4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fde0 	bl	80011b4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e187      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d036      	beq.n	8002688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_RCC_OscConfig+0x248>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fdc4 	bl	80011b4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fdc0 	bl	80011b4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e167      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x240>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x248>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fdad 	bl	80011b4 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00e      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fda9 	bl	80011b4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e150      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	42470000 	.word	0x42470000
 8002678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ea      	bne.n	800265e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8097 	beq.w	80027c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b81      	ldr	r3, [pc, #516]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b7a      	ldr	r3, [pc, #488]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b77      	ldr	r3, [pc, #476]	; (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b74      	ldr	r3, [pc, #464]	; (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a73      	ldr	r2, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fd69 	bl	80011b4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fd65 	bl	80011b4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e10c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x2ea>
 800270c:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x30c>
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b5c      	ldr	r3, [pc, #368]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a5b      	ldr	r2, [pc, #364]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800273c:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	4b55      	ldr	r3, [pc, #340]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a54      	ldr	r2, [pc, #336]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fd2a 	bl	80011b4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fd26 	bl	80011b4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0cb      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ee      	beq.n	8002764 <HAL_RCC_OscConfig+0x334>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fd14 	bl	80011b4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fd10 	bl	80011b4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0b5      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a1 	beq.w	8002910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ce:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d05c      	beq.n	8002894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d141      	bne.n	8002866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fce4 	bl	80011b4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fce0 	bl	80011b4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e087      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	491b      	ldr	r1, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x478>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fcb9 	bl	80011b4 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fcb5 	bl	80011b4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x416>
 8002864:	e054      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fca2 	bl	80011b4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fc9e 	bl	80011b4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e038      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x4ec>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d028      	beq.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d121      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11a      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fbd0 	bl	80011b4 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fbcc 	bl	80011b4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fb30 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	0800609c 	.word	0x0800609c
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af0:	b094      	sub	sp, #80	; 0x50
 8002af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b04:	4b79      	ldr	r3, [pc, #484]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	f200 80e1 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1e:	e0db      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b24:	e0db      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	6139      	str	r1, [r7, #16]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb18 0303 	adds.w	r3, r8, r3
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	eb49 0303 	adc.w	r3, r9, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bde:	4629      	mov	r1, r5
 8002be0:	024b      	lsls	r3, r1, #9
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be8:	4621      	mov	r1, r4
 8002bea:	024a      	lsls	r2, r1, #9
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfc:	f7fd fb48 	bl	8000290 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c08:	e058      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	4611      	mov	r1, r2
 8002c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0159      	lsls	r1, r3, #5
 8002c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c36:	0150      	lsls	r0, r2, #5
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c60:	eb63 050b 	sbc.w	r5, r3, fp
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	464b      	mov	r3, r9
 8002c80:	eb45 0303 	adc.w	r3, r5, r3
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	028a      	lsls	r2, r1, #10
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb0:	f7fd faee 	bl	8000290 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3750      	adds	r7, #80	; 0x50
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080060ac 	.word	0x080060ac

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	080060ac 	.word	0x080060ac

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e03f      	b.n	8002df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd ffbc 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f929 	bl	8002ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b08a      	sub	sp, #40	; 0x28
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d17c      	bne.n	8002f14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_UART_Transmit+0x2c>
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e075      	b.n	8002f16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Transmit+0x3e>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e06e      	b.n	8002f16 <HAL_UART_Transmit+0x11c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2221      	movs	r2, #33	; 0x21
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f9b1 	bl	80011b4 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d108      	bne.n	8002e7c <HAL_UART_Transmit+0x82>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d104      	bne.n	8002e7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e003      	b.n	8002e84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e8c:	e02a      	b.n	8002ee4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f840 	bl	8002f1e <UART_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e036      	b.n	8002f16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e007      	b.n	8002ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1cf      	bne.n	8002e8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2140      	movs	r1, #64	; 0x40
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f810 	bl	8002f1e <UART_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e006      	b.n	8002f16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b090      	sub	sp, #64	; 0x40
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2e:	e050      	b.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d04c      	beq.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	f7fe f939 	bl	80011b4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d241      	bcs.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	613b      	str	r3, [r7, #16]
   return(result);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa2:	623a      	str	r2, [r7, #32]
 8002fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	69f9      	ldr	r1, [r7, #28]
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e5      	bne.n	8002f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e00f      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d09f      	beq.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3740      	adds	r7, #64	; 0x40
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003000:	b0c0      	sub	sp, #256	; 0x100
 8003002:	af00      	add	r7, sp, #0
 8003004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	68d9      	ldr	r1, [r3, #12]
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	ea40 0301 	orr.w	r3, r0, r1
 8003024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	431a      	orrs	r2, r3
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003054:	f021 010c 	bic.w	r1, r1, #12
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003062:	430b      	orrs	r3, r1
 8003064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	6999      	ldr	r1, [r3, #24]
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	ea40 0301 	orr.w	r3, r0, r1
 8003082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8f      	ldr	r3, [pc, #572]	; (80032c8 <UART_SetConfig+0x2cc>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d005      	beq.n	800309c <UART_SetConfig+0xa0>
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b8d      	ldr	r3, [pc, #564]	; (80032cc <UART_SetConfig+0x2d0>)
 8003098:	429a      	cmp	r2, r3
 800309a:	d104      	bne.n	80030a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800309c:	f7ff fe4c 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 80030a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030a4:	e003      	b.n	80030ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a6:	f7ff fe33 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80030aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	f040 810c 	bne.w	80032d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ce:	4622      	mov	r2, r4
 80030d0:	462b      	mov	r3, r5
 80030d2:	1891      	adds	r1, r2, r2
 80030d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030d6:	415b      	adcs	r3, r3
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030de:	4621      	mov	r1, r4
 80030e0:	eb12 0801 	adds.w	r8, r2, r1
 80030e4:	4629      	mov	r1, r5
 80030e6:	eb43 0901 	adc.w	r9, r3, r1
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fe:	4690      	mov	r8, r2
 8003100:	4699      	mov	r9, r3
 8003102:	4623      	mov	r3, r4
 8003104:	eb18 0303 	adds.w	r3, r8, r3
 8003108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800310c:	462b      	mov	r3, r5
 800310e:	eb49 0303 	adc.w	r3, r9, r3
 8003112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800312a:	460b      	mov	r3, r1
 800312c:	18db      	adds	r3, r3, r3
 800312e:	653b      	str	r3, [r7, #80]	; 0x50
 8003130:	4613      	mov	r3, r2
 8003132:	eb42 0303 	adc.w	r3, r2, r3
 8003136:	657b      	str	r3, [r7, #84]	; 0x54
 8003138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800313c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003140:	f7fd f8a6 	bl	8000290 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <UART_SetConfig+0x2d4>)
 800314a:	fba3 2302 	umull	r2, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	011c      	lsls	r4, r3, #4
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800315c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	1891      	adds	r1, r2, r2
 800316a:	64b9      	str	r1, [r7, #72]	; 0x48
 800316c:	415b      	adcs	r3, r3
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003174:	4641      	mov	r1, r8
 8003176:	eb12 0a01 	adds.w	sl, r2, r1
 800317a:	4649      	mov	r1, r9
 800317c:	eb43 0b01 	adc.w	fp, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800318c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003194:	4692      	mov	sl, r2
 8003196:	469b      	mov	fp, r3
 8003198:	4643      	mov	r3, r8
 800319a:	eb1a 0303 	adds.w	r3, sl, r3
 800319e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a2:	464b      	mov	r3, r9
 80031a4:	eb4b 0303 	adc.w	r3, fp, r3
 80031a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031c0:	460b      	mov	r3, r1
 80031c2:	18db      	adds	r3, r3, r3
 80031c4:	643b      	str	r3, [r7, #64]	; 0x40
 80031c6:	4613      	mov	r3, r2
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
 80031ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031d6:	f7fd f85b 	bl	8000290 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <UART_SetConfig+0x2d4>)
 80031e2:	fba3 2301 	umull	r2, r3, r3, r1
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2264      	movs	r2, #100	; 0x64
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	1acb      	subs	r3, r1, r3
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <UART_SetConfig+0x2d4>)
 80031f8:	fba3 2302 	umull	r2, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003204:	441c      	add	r4, r3
 8003206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	1891      	adds	r1, r2, r2
 800321e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003220:	415b      	adcs	r3, r3
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003228:	4641      	mov	r1, r8
 800322a:	1851      	adds	r1, r2, r1
 800322c:	6339      	str	r1, [r7, #48]	; 0x30
 800322e:	4649      	mov	r1, r9
 8003230:	414b      	adcs	r3, r1
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003240:	4659      	mov	r1, fp
 8003242:	00cb      	lsls	r3, r1, #3
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324a:	4651      	mov	r1, sl
 800324c:	00ca      	lsls	r2, r1, #3
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	4603      	mov	r3, r0
 8003254:	4642      	mov	r2, r8
 8003256:	189b      	adds	r3, r3, r2
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	464b      	mov	r3, r9
 800325e:	460a      	mov	r2, r1
 8003260:	eb42 0303 	adc.w	r3, r2, r3
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800327c:	460b      	mov	r3, r1
 800327e:	18db      	adds	r3, r3, r3
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
 8003282:	4613      	mov	r3, r2
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003292:	f7fc fffd 	bl	8000290 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <UART_SetConfig+0x2d4>)
 800329c:	fba3 1302 	umull	r1, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2164      	movs	r1, #100	; 0x64
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <UART_SetConfig+0x2d4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 0207 	and.w	r2, r3, #7
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4422      	add	r2, r4
 80032c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c4:	e106      	b.n	80034d4 <UART_SetConfig+0x4d8>
 80032c6:	bf00      	nop
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40011400 	.word	0x40011400
 80032d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d8:	2200      	movs	r2, #0
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032e6:	4642      	mov	r2, r8
 80032e8:	464b      	mov	r3, r9
 80032ea:	1891      	adds	r1, r2, r2
 80032ec:	6239      	str	r1, [r7, #32]
 80032ee:	415b      	adcs	r3, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f6:	4641      	mov	r1, r8
 80032f8:	1854      	adds	r4, r2, r1
 80032fa:	4649      	mov	r1, r9
 80032fc:	eb43 0501 	adc.w	r5, r3, r1
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	00eb      	lsls	r3, r5, #3
 800330a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330e:	00e2      	lsls	r2, r4, #3
 8003310:	4614      	mov	r4, r2
 8003312:	461d      	mov	r5, r3
 8003314:	4643      	mov	r3, r8
 8003316:	18e3      	adds	r3, r4, r3
 8003318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800331c:	464b      	mov	r3, r9
 800331e:	eb45 0303 	adc.w	r3, r5, r3
 8003322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003342:	4629      	mov	r1, r5
 8003344:	008b      	lsls	r3, r1, #2
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334c:	4621      	mov	r1, r4
 800334e:	008a      	lsls	r2, r1, #2
 8003350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003354:	f7fc ff9c 	bl	8000290 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <UART_SetConfig+0x4e4>)
 800335e:	fba3 2302 	umull	r2, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	011c      	lsls	r4, r3, #4
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	1891      	adds	r1, r2, r2
 800337e:	61b9      	str	r1, [r7, #24]
 8003380:	415b      	adcs	r3, r3
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003388:	4641      	mov	r1, r8
 800338a:	1851      	adds	r1, r2, r1
 800338c:	6139      	str	r1, [r7, #16]
 800338e:	4649      	mov	r1, r9
 8003390:	414b      	adcs	r3, r1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a0:	4659      	mov	r1, fp
 80033a2:	00cb      	lsls	r3, r1, #3
 80033a4:	4651      	mov	r1, sl
 80033a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033aa:	4651      	mov	r1, sl
 80033ac:	00ca      	lsls	r2, r1, #3
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	4642      	mov	r2, r8
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033bc:	464b      	mov	r3, r9
 80033be:	460a      	mov	r2, r1
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033e0:	4649      	mov	r1, r9
 80033e2:	008b      	lsls	r3, r1, #2
 80033e4:	4641      	mov	r1, r8
 80033e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ea:	4641      	mov	r1, r8
 80033ec:	008a      	lsls	r2, r1, #2
 80033ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033f2:	f7fc ff4d 	bl	8000290 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <UART_SetConfig+0x4e4>)
 80033fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2264      	movs	r2, #100	; 0x64
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	4a33      	ldr	r2, [pc, #204]	; (80034e0 <UART_SetConfig+0x4e4>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341c:	441c      	add	r4, r3
 800341e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003422:	2200      	movs	r2, #0
 8003424:	673b      	str	r3, [r7, #112]	; 0x70
 8003426:	677a      	str	r2, [r7, #116]	; 0x74
 8003428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	415b      	adcs	r3, r3
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	66bb      	str	r3, [r7, #104]	; 0x68
 800346e:	464b      	mov	r3, r9
 8003470:	460a      	mov	r2, r1
 8003472:	eb42 0303 	adc.w	r3, r2, r3
 8003476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	663b      	str	r3, [r7, #96]	; 0x60
 8003482:	667a      	str	r2, [r7, #100]	; 0x64
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003490:	4649      	mov	r1, r9
 8003492:	008b      	lsls	r3, r1, #2
 8003494:	4641      	mov	r1, r8
 8003496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800349a:	4641      	mov	r1, r8
 800349c:	008a      	lsls	r2, r1, #2
 800349e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034a2:	f7fc fef5 	bl	8000290 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <UART_SetConfig+0x4e4>)
 80034ac:	fba3 1302 	umull	r1, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <UART_SetConfig+0x4e4>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4422      	add	r2, r4
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e0:	51eb851f 	.word	0x51eb851f

080034e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e4:	b084      	sub	sp, #16
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	f107 001c 	add.w	r0, r7, #28
 80034f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d122      	bne.n	8003542 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 faa2 	bl	8003a80 <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e01a      	b.n	8003578 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa96 	bl	8003a80 <USB_CoreReset>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
 800356a:	e005      	b.n	8003578 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10b      	bne.n	8003596 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f043 0206 	orr.w	r2, r3, #6
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a2:	b004      	add	sp, #16
 80035a4:	4770      	bx	lr

080035a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d115      	bne.n	8003616 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7fd fde8 	bl	80011cc <HAL_Delay>
      ms++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3301      	adds	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa2e 	bl	8003a64 <USB_GetMode>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d01e      	beq.n	800364c <USB_SetCurrentMode+0x84>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b31      	cmp	r3, #49	; 0x31
 8003612:	d9f0      	bls.n	80035f6 <USB_SetCurrentMode+0x2e>
 8003614:	e01a      	b.n	800364c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d115      	bne.n	8003648 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003628:	2001      	movs	r0, #1
 800362a:	f7fd fdcf 	bl	80011cc <HAL_Delay>
      ms++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3301      	adds	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fa15 	bl	8003a64 <USB_GetMode>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <USB_SetCurrentMode+0x84>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b31      	cmp	r3, #49	; 0x31
 8003644:	d9f0      	bls.n	8003628 <USB_SetCurrentMode+0x60>
 8003646:	e001      	b.n	800364c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e005      	b.n	8003658 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b32      	cmp	r3, #50	; 0x32
 8003650:	d101      	bne.n	8003656 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e009      	b.n	8003694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	2200      	movs	r2, #0
 800368c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3301      	adds	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b0e      	cmp	r3, #14
 8003698:	d9f2      	bls.n	8003680 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11c      	bne.n	80036da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
 80036d8:	e00b      	b.n	80036f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	4619      	mov	r1, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	461a      	mov	r2, r3
 800370e:	680b      	ldr	r3, [r1, #0]
 8003710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10c      	bne.n	8003732 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800371e:	2100      	movs	r1, #0
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f965 	bl	80039f0 <USB_SetDevSpeed>
 8003726:	e008      	b.n	800373a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003728:	2101      	movs	r1, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f960 	bl	80039f0 <USB_SetDevSpeed>
 8003730:	e003      	b.n	800373a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003732:	2103      	movs	r1, #3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f95b 	bl	80039f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800373a:	2110      	movs	r1, #16
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8f3 	bl	8003928 <USB_FlushTxFifo>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f91f 	bl	8003990 <USB_FlushRxFifo>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	461a      	mov	r2, r3
 8003764:	2300      	movs	r3, #0
 8003766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e043      	b.n	800380e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800379c:	d118      	bne.n	80037d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e013      	b.n	80037e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e008      	b.n	80037e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	2300      	movs	r3, #0
 80037e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3301      	adds	r3, #1
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3b7      	bcc.n	8003786 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e043      	b.n	80038a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003832:	d118      	bne.n	8003866 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003846:	461a      	mov	r2, r3
 8003848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e013      	b.n	8003878 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e008      	b.n	8003878 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	2300      	movs	r3, #0
 8003876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800389c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3301      	adds	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3b7      	bcc.n	800381c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <USB_DevInit+0x2c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f043 0208 	orr.w	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003920:	b004      	add	sp, #16
 8003922:	4770      	bx	lr
 8003924:	803c3800 	.word	0x803c3800

08003928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <USB_FlushTxFifo+0x64>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e01b      	b.n	8003980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	daf2      	bge.n	8003936 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	019b      	lsls	r3, r3, #6
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <USB_FlushTxFifo+0x64>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e006      	b.n	8003980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d0f0      	beq.n	8003960 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	00030d40 	.word	0x00030d40

08003990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <USB_FlushRxFifo+0x5c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e018      	b.n	80039e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	daf2      	bge.n	800399c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2210      	movs	r2, #16
 80039be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <USB_FlushRxFifo+0x5c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d0f0      	beq.n	80039c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	00030d40 	.word	0x00030d40

080039f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a3c:	f023 0303 	bic.w	r3, r3, #3
 8003a40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0301 	and.w	r3, r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <USB_CoreReset+0x64>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e01b      	b.n	8003ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	daf2      	bge.n	8003a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <USB_CoreReset+0x64>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e006      	b.n	8003ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d0f0      	beq.n	8003ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	00030d40 	.word	0x00030d40

08003ae8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afa:	2b84      	cmp	r3, #132	; 0x84
 8003afc:	d005      	beq.n	8003b0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003afe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	3303      	adds	r3, #3
 8003b08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b1c:	f000 fb70 	bl	8004200 <vTaskStartScheduler>
  
  return osOK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b28:	b089      	sub	sp, #36	; 0x24
 8003b2a:	af04      	add	r7, sp, #16
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <osThreadCreate+0x54>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01c      	beq.n	8003b7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685c      	ldr	r4, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691e      	ldr	r6, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ffc8 	bl	8003ae8 <makeFreeRtosPriority>
 8003b58:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b62:	9202      	str	r2, [sp, #8]
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	9100      	str	r1, [sp, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f8ed 	bl	8003d4e <xTaskCreateStatic>
 8003b74:	4603      	mov	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e01c      	b.n	8003bb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685c      	ldr	r4, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b86:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ffaa 	bl	8003ae8 <makeFreeRtosPriority>
 8003b94:	4602      	mov	r2, r0
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	9200      	str	r2, [sp, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 f92f 	bl	8003e08 <xTaskCreate>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d001      	beq.n	8003bb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <osDelay+0x16>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	e000      	b.n	8003bd6 <osDelay+0x18>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa4c 	bl	8004074 <vTaskDelay>
  
  return osOK;
 8003bdc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f103 0208 	add.w	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f103 0208 	add.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f103 0208 	add.w	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e00c      	b.n	8003cc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3308      	adds	r3, #8
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e002      	b.n	8003cb6 <vListInsert+0x2e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d2f6      	bcs.n	8003cb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6852      	ldr	r2, [r2, #4]
 8003d1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d103      	bne.n	8003d2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08e      	sub	sp, #56	; 0x38
 8003d52:	af04      	add	r7, sp, #16
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	61fb      	str	r3, [r7, #28]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d94:	2354      	movs	r3, #84	; 0x54
 8003d96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b54      	cmp	r3, #84	; 0x54
 8003d9c:	d00a      	beq.n	8003db4 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	61bb      	str	r3, [r7, #24]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003db4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01e      	beq.n	8003dfa <xTaskCreateStatic+0xac>
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01b      	beq.n	8003dfa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f850 	bl	8003e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df4:	f000 f8d4 	bl	8003fa0 <prvAddNewTaskToReadyList>
 8003df8:	e001      	b.n	8003dfe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dfe:	697b      	ldr	r3, [r7, #20]
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 ff73 	bl	8004d08 <pvPortMalloc>
 8003e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e2a:	2054      	movs	r0, #84	; 0x54
 8003e2c:	f000 ff6c 	bl	8004d08 <pvPortMalloc>
 8003e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3e:	e005      	b.n	8003e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f001 f82d 	bl	8004ea0 <vPortFree>
 8003e46:	e001      	b.n	8003e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	9302      	str	r3, [sp, #8]
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f80e 	bl	8003e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e76:	69f8      	ldr	r0, [r7, #28]
 8003e78:	f000 f892 	bl	8003fa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e002      	b.n	8003e88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e88:	69bb      	ldr	r3, [r7, #24]
	}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b088      	sub	sp, #32
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	617b      	str	r3, [r7, #20]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01f      	beq.n	8003f20 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e012      	b.n	8003f0c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	7819      	ldrb	r1, [r3, #0]
 8003eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3334      	adds	r3, #52	; 0x34
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d9e9      	bls.n	8003ee6 <prvInitialiseNewTask+0x54>
 8003f12:	e000      	b.n	8003f16 <prvInitialiseNewTask+0x84>
			{
				break;
 8003f14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f1e:	e003      	b.n	8003f28 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d901      	bls.n	8003f32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f2e:	2306      	movs	r3, #6
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fe6c 	bl	8003c26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	3318      	adds	r3, #24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fe67 	bl	8003c26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	f1c3 0207 	rsb	r2, r3, #7
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2200      	movs	r2, #0
 8003f72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f000 fcb5 	bl	80048f0 <pxPortInitialiseStack>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f98:	bf00      	nop
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fa8:	f000 fdcc 	bl	8004b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <prvAddNewTaskToReadyList+0xb8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a29      	ldr	r2, [pc, #164]	; (8004058 <prvAddNewTaskToReadyList+0xb8>)
 8003fb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <prvAddNewTaskToReadyList+0xbc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fbe:	4a27      	ldr	r2, [pc, #156]	; (800405c <prvAddNewTaskToReadyList+0xbc>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <prvAddNewTaskToReadyList+0xb8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d110      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fcc:	f000 fb4e 	bl	800466c <prvInitialiseTaskLists>
 8003fd0:	e00d      	b.n	8003fee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <prvAddNewTaskToReadyList+0xc0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <prvAddNewTaskToReadyList+0xbc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d802      	bhi.n	8003fee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <prvAddNewTaskToReadyList+0xbc>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <prvAddNewTaskToReadyList+0xc4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <prvAddNewTaskToReadyList+0xc4>)
 8003ff6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a15      	ldr	r2, [pc, #84]	; (800406c <prvAddNewTaskToReadyList+0xcc>)
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7ff fe0d 	bl	8003c40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004026:	f000 fdbd 	bl	8004ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <prvAddNewTaskToReadyList+0xc0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <prvAddNewTaskToReadyList+0xbc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	429a      	cmp	r2, r3
 800403e:	d207      	bcs.n	8004050 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <prvAddNewTaskToReadyList+0xd0>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000bc0 	.word	0x20000bc0
 800405c:	20000ac0 	.word	0x20000ac0
 8004060:	20000bcc 	.word	0x20000bcc
 8004064:	20000bdc 	.word	0x20000bdc
 8004068:	20000bc8 	.word	0x20000bc8
 800406c:	20000ac4 	.word	0x20000ac4
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <vTaskDelay+0x60>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <vTaskDelay+0x30>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60bb      	str	r3, [r7, #8]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040a4:	f000 f90c 	bl	80042c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040a8:	2100      	movs	r1, #0
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fbba 	bl	8004824 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040b0:	f000 f914 	bl	80042dc <xTaskResumeAll>
 80040b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <vTaskDelay+0x64>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000be8 	.word	0x20000be8
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80040e4:	f000 fd2e 	bl	8004b44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <vTaskSuspend+0x18>
 80040ee:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <vTaskSuspend+0x104>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e000      	b.n	80040f6 <vTaskSuspend+0x1a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fdfc 	bl	8003cfa <uxListRemove>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d115      	bne.n	8004134 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4935      	ldr	r1, [pc, #212]	; (80041e4 <vTaskSuspend+0x108>)
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <vTaskSuspend+0x58>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43da      	mvns	r2, r3
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <vTaskSuspend+0x10c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4013      	ands	r3, r2
 8004130:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <vTaskSuspend+0x10c>)
 8004132:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3318      	adds	r3, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fdda 	bl	8003cfa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4827      	ldr	r0, [pc, #156]	; (80041ec <vTaskSuspend+0x110>)
 800414e:	f7ff fd77 	bl	8003c40 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d103      	bne.n	8004166 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004166:	f000 fd1d 	bl	8004ba4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <vTaskSuspend+0x114>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004172:	f000 fce7 	bl	8004b44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004176:	f000 fb17 	bl	80047a8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800417a:	f000 fd13 	bl	8004ba4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <vTaskSuspend+0x104>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d127      	bne.n	80041d8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <vTaskSuspend+0x114>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <vTaskSuspend+0x118>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <vTaskSuspend+0xd2>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60bb      	str	r3, [r7, #8]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <vTaskSuspend+0x11c>)
 80041b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041be:	e00b      	b.n	80041d8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <vTaskSuspend+0x110>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <vTaskSuspend+0x120>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d103      	bne.n	80041d4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <vTaskSuspend+0x104>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	}
 80041d2:	e001      	b.n	80041d8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80041d4:	f000 f9d6 	bl	8004584 <vTaskSwitchContext>
	}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000ac0 	.word	0x20000ac0
 80041e4:	20000ac4 	.word	0x20000ac4
 80041e8:	20000bc8 	.word	0x20000bc8
 80041ec:	20000bac 	.word	0x20000bac
 80041f0:	20000bcc 	.word	0x20000bcc
 80041f4:	20000be8 	.word	0x20000be8
 80041f8:	e000ed04 	.word	0xe000ed04
 80041fc:	20000bc0 	.word	0x20000bc0

08004200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800420e:	463a      	mov	r2, r7
 8004210:	1d39      	adds	r1, r7, #4
 8004212:	f107 0308 	add.w	r3, r7, #8
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc f9b8 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	9202      	str	r2, [sp, #8]
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	460a      	mov	r2, r1
 800422e:	491e      	ldr	r1, [pc, #120]	; (80042a8 <vTaskStartScheduler+0xa8>)
 8004230:	481e      	ldr	r0, [pc, #120]	; (80042ac <vTaskStartScheduler+0xac>)
 8004232:	f7ff fd8c 	bl	8003d4e <xTaskCreateStatic>
 8004236:	4603      	mov	r3, r0
 8004238:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <vTaskStartScheduler+0xb0>)
 800423a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800423c:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <vTaskStartScheduler+0xb0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e001      	b.n	800424e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d116      	bne.n	8004282 <vTaskStartScheduler+0x82>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	613b      	str	r3, [r7, #16]
}
 8004266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <vTaskStartScheduler+0xb4>)
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <vTaskStartScheduler+0xb8>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <vTaskStartScheduler+0xbc>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800427c:	f000 fbc0 	bl	8004a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004280:	e00e      	b.n	80042a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d10a      	bne.n	80042a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60fb      	str	r3, [r7, #12]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <vTaskStartScheduler+0x9e>
}
 80042a0:	bf00      	nop
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	08006094 	.word	0x08006094
 80042ac:	0800463d 	.word	0x0800463d
 80042b0:	20000be4 	.word	0x20000be4
 80042b4:	20000be0 	.word	0x20000be0
 80042b8:	20000bcc 	.word	0x20000bcc
 80042bc:	20000bc4 	.word	0x20000bc4

080042c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <vTaskSuspendAll+0x18>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <vTaskSuspendAll+0x18>)
 80042cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	20000be8 	.word	0x20000be8

080042dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042ea:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <xTaskResumeAll+0x114>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xTaskResumeAll+0x2c>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	603b      	str	r3, [r7, #0]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004308:	f000 fc1c 	bl	8004b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <xTaskResumeAll+0x114>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3b01      	subs	r3, #1
 8004312:	4a37      	ldr	r2, [pc, #220]	; (80043f0 <xTaskResumeAll+0x114>)
 8004314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <xTaskResumeAll+0x114>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d161      	bne.n	80043e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <xTaskResumeAll+0x118>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d05d      	beq.n	80043e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004326:	e02e      	b.n	8004386 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <xTaskResumeAll+0x11c>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3318      	adds	r3, #24
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fce0 	bl	8003cfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fcdb 	bl	8003cfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <xTaskResumeAll+0x120>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4313      	orrs	r3, r2
 8004352:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <xTaskResumeAll+0x120>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a27      	ldr	r2, [pc, #156]	; (8004400 <xTaskResumeAll+0x124>)
 8004364:	441a      	add	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7ff fc67 	bl	8003c40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <xTaskResumeAll+0x128>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <xTaskResumeAll+0x12c>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xTaskResumeAll+0x11c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1cc      	bne.n	8004328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004394:	f000 fa08 	bl	80047a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <xTaskResumeAll+0x130>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d010      	beq.n	80043c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043a4:	f000 f836 	bl	8004414 <xTaskIncrementTick>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <xTaskResumeAll+0x12c>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f1      	bne.n	80043a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <xTaskResumeAll+0x130>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <xTaskResumeAll+0x12c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <xTaskResumeAll+0x134>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043e2:	f000 fbdf 	bl	8004ba4 <vPortExitCritical>

	return xAlreadyYielded;
 80043e6:	68bb      	ldr	r3, [r7, #8]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000be8 	.word	0x20000be8
 80043f4:	20000bc0 	.word	0x20000bc0
 80043f8:	20000b80 	.word	0x20000b80
 80043fc:	20000bc8 	.word	0x20000bc8
 8004400:	20000ac4 	.word	0x20000ac4
 8004404:	20000ac0 	.word	0x20000ac0
 8004408:	20000bd4 	.word	0x20000bd4
 800440c:	20000bd0 	.word	0x20000bd0
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441e:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <xTaskIncrementTick+0x144>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 808e 	bne.w	8004544 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <xTaskIncrementTick+0x148>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004430:	4a4a      	ldr	r2, [pc, #296]	; (800455c <xTaskIncrementTick+0x148>)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d120      	bne.n	800447e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800443c:	4b48      	ldr	r3, [pc, #288]	; (8004560 <xTaskIncrementTick+0x14c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <xTaskIncrementTick+0x48>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	603b      	str	r3, [r7, #0]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xTaskIncrementTick+0x46>
 800445c:	4b40      	ldr	r3, [pc, #256]	; (8004560 <xTaskIncrementTick+0x14c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <xTaskIncrementTick+0x150>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3e      	ldr	r2, [pc, #248]	; (8004560 <xTaskIncrementTick+0x14c>)
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <xTaskIncrementTick+0x150>)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <xTaskIncrementTick+0x154>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <xTaskIncrementTick+0x154>)
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	f000 f995 	bl	80047a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <xTaskIncrementTick+0x158>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d348      	bcc.n	800451a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <xTaskIncrementTick+0x14c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004492:	4b36      	ldr	r3, [pc, #216]	; (800456c <xTaskIncrementTick+0x158>)
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	601a      	str	r2, [r3, #0]
					break;
 800449a:	e03e      	b.n	800451a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449c:	4b30      	ldr	r3, [pc, #192]	; (8004560 <xTaskIncrementTick+0x14c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d203      	bcs.n	80044bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044b4:	4a2d      	ldr	r2, [pc, #180]	; (800456c <xTaskIncrementTick+0x158>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044ba:	e02e      	b.n	800451a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fc1a 	bl	8003cfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3318      	adds	r3, #24
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fc11 	bl	8003cfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	2201      	movs	r2, #1
 80044de:	409a      	lsls	r2, r3
 80044e0:	4b23      	ldr	r3, [pc, #140]	; (8004570 <xTaskIncrementTick+0x15c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	4a22      	ldr	r2, [pc, #136]	; (8004570 <xTaskIncrementTick+0x15c>)
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <xTaskIncrementTick+0x160>)
 80044f8:	441a      	add	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f7ff fb9d 	bl	8003c40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <xTaskIncrementTick+0x164>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d3b9      	bcc.n	8004488 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004518:	e7b6      	b.n	8004488 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <xTaskIncrementTick+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4914      	ldr	r1, [pc, #80]	; (8004574 <xTaskIncrementTick+0x160>)
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d901      	bls.n	8004536 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004536:	4b11      	ldr	r3, [pc, #68]	; (800457c <xTaskIncrementTick+0x168>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e004      	b.n	800454e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <xTaskIncrementTick+0x16c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <xTaskIncrementTick+0x16c>)
 800454c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800454e:	697b      	ldr	r3, [r7, #20]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000be8 	.word	0x20000be8
 800455c:	20000bc4 	.word	0x20000bc4
 8004560:	20000b78 	.word	0x20000b78
 8004564:	20000b7c 	.word	0x20000b7c
 8004568:	20000bd8 	.word	0x20000bd8
 800456c:	20000be0 	.word	0x20000be0
 8004570:	20000bc8 	.word	0x20000bc8
 8004574:	20000ac4 	.word	0x20000ac4
 8004578:	20000ac0 	.word	0x20000ac0
 800457c:	20000bd4 	.word	0x20000bd4
 8004580:	20000bd0 	.word	0x20000bd0

08004584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <vTaskSwitchContext+0xa4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <vTaskSwitchContext+0xa8>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004598:	e03f      	b.n	800461a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <vTaskSwitchContext+0xa8>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <vTaskSwitchContext+0xac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f1c3 031f 	rsb	r3, r3, #31
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	491f      	ldr	r1, [pc, #124]	; (8004634 <vTaskSwitchContext+0xb0>)
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	607b      	str	r3, [r7, #4]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vTaskSwitchContext+0x5a>
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <vTaskSwitchContext+0xb0>)
 80045ec:	4413      	add	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	3308      	adds	r3, #8
 8004602:	429a      	cmp	r2, r3
 8004604:	d104      	bne.n	8004610 <vTaskSwitchContext+0x8c>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <vTaskSwitchContext+0xb4>)
 8004618:	6013      	str	r3, [r2, #0]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000be8 	.word	0x20000be8
 800462c:	20000bd4 	.word	0x20000bd4
 8004630:	20000bc8 	.word	0x20000bc8
 8004634:	20000ac4 	.word	0x20000ac4
 8004638:	20000ac0 	.word	0x20000ac0

0800463c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004644:	f000 f852 	bl	80046ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <prvIdleTask+0x28>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d9f9      	bls.n	8004644 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <prvIdleTask+0x2c>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004660:	e7f0      	b.n	8004644 <prvIdleTask+0x8>
 8004662:	bf00      	nop
 8004664:	20000ac4 	.word	0x20000ac4
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	e00c      	b.n	8004692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <prvInitialiseTaskLists+0x60>)
 8004684:	4413      	add	r3, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff faad 	bl	8003be6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3301      	adds	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d9ef      	bls.n	8004678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004698:	480d      	ldr	r0, [pc, #52]	; (80046d0 <prvInitialiseTaskLists+0x64>)
 800469a:	f7ff faa4 	bl	8003be6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800469e:	480d      	ldr	r0, [pc, #52]	; (80046d4 <prvInitialiseTaskLists+0x68>)
 80046a0:	f7ff faa1 	bl	8003be6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <prvInitialiseTaskLists+0x6c>)
 80046a6:	f7ff fa9e 	bl	8003be6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046aa:	480c      	ldr	r0, [pc, #48]	; (80046dc <prvInitialiseTaskLists+0x70>)
 80046ac:	f7ff fa9b 	bl	8003be6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046b0:	480b      	ldr	r0, [pc, #44]	; (80046e0 <prvInitialiseTaskLists+0x74>)
 80046b2:	f7ff fa98 	bl	8003be6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <prvInitialiseTaskLists+0x78>)
 80046b8:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <prvInitialiseTaskLists+0x64>)
 80046ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <prvInitialiseTaskLists+0x7c>)
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <prvInitialiseTaskLists+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000ac4 	.word	0x20000ac4
 80046d0:	20000b50 	.word	0x20000b50
 80046d4:	20000b64 	.word	0x20000b64
 80046d8:	20000b80 	.word	0x20000b80
 80046dc:	20000b94 	.word	0x20000b94
 80046e0:	20000bac 	.word	0x20000bac
 80046e4:	20000b78 	.word	0x20000b78
 80046e8:	20000b7c 	.word	0x20000b7c

080046ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046f2:	e019      	b.n	8004728 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046f4:	f000 fa26 	bl	8004b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <prvCheckTasksWaitingTermination+0x50>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff faf8 	bl	8003cfa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <prvCheckTasksWaitingTermination+0x54>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <prvCheckTasksWaitingTermination+0x54>)
 8004712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <prvCheckTasksWaitingTermination+0x58>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3b01      	subs	r3, #1
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <prvCheckTasksWaitingTermination+0x58>)
 800471c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800471e:	f000 fa41 	bl	8004ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f810 	bl	8004748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvCheckTasksWaitingTermination+0x58>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e1      	bne.n	80046f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000b94 	.word	0x20000b94
 8004740:	20000bc0 	.word	0x20000bc0
 8004744:	20000ba8 	.word	0x20000ba8

08004748 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fb9e 	bl	8004ea0 <vPortFree>
				vPortFree( pxTCB );
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb9b 	bl	8004ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800476a:	e018      	b.n	800479e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004772:	2b01      	cmp	r3, #1
 8004774:	d103      	bne.n	800477e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fb92 	bl	8004ea0 <vPortFree>
	}
 800477c:	e00f      	b.n	800479e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004784:	2b02      	cmp	r3, #2
 8004786:	d00a      	beq.n	800479e <prvDeleteTCB+0x56>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <prvDeleteTCB+0x54>
	}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <prvResetNextTaskUnblockTime+0x38>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <prvResetNextTaskUnblockTime+0x3c>)
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047c0:	e008      	b.n	80047d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <prvResetNextTaskUnblockTime+0x38>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <prvResetNextTaskUnblockTime+0x3c>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000b78 	.word	0x20000b78
 80047e4:	20000be0 	.word	0x20000be0

080047e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <xTaskGetSchedulerState+0x34>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047f6:	2301      	movs	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	e008      	b.n	800480e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <xTaskGetSchedulerState+0x38>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004804:	2302      	movs	r3, #2
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e001      	b.n	800480e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800480e:	687b      	ldr	r3, [r7, #4]
	}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000bcc 	.word	0x20000bcc
 8004820:	20000be8 	.word	0x20000be8

08004824 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fa5d 	bl	8003cfa <uxListRemove>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2201      	movs	r2, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	4b21      	ldr	r3, [pc, #132]	; (80048dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4013      	ands	r3, r2
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800485c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d10a      	bne.n	800487c <prvAddCurrentTaskToDelayedList+0x58>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	481a      	ldr	r0, [pc, #104]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004876:	f7ff f9e3 	bl	8003c40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800487a:	e026      	b.n	80048ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d209      	bcs.n	80048a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7ff f9f1 	bl	8003c88 <vListInsert>
}
 80048a6:	e010      	b.n	80048ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7ff f9e7 	bl	8003c88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d202      	bcs.n	80048ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048c4:	4a09      	ldr	r2, [pc, #36]	; (80048ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6013      	str	r3, [r2, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000bc4 	.word	0x20000bc4
 80048d8:	20000ac0 	.word	0x20000ac0
 80048dc:	20000bc8 	.word	0x20000bc8
 80048e0:	20000bac 	.word	0x20000bac
 80048e4:	20000b7c 	.word	0x20000b7c
 80048e8:	20000b78 	.word	0x20000b78
 80048ec:	20000be0 	.word	0x20000be0

080048f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b04      	subs	r3, #4
 8004900:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b04      	subs	r3, #4
 800490e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004920:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <pxPortInitialiseStack+0x64>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3b14      	subs	r3, #20
 800492a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3b04      	subs	r3, #4
 8004936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f06f 0202 	mvn.w	r2, #2
 800493e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b20      	subs	r3, #32
 8004944:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	08004959 	.word	0x08004959

08004958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <prvTaskExitError+0x54>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d00a      	beq.n	8004982 <prvTaskExitError+0x2a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <prvTaskExitError+0x28>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
}
 8004994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004996:	bf00      	nop
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0fc      	beq.n	8004998 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <pxCurrentTCBConst2>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ba:	f380 8809 	msr	PSP, r0
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	4770      	bx	lr
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst2>:
 80049d0:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049d8:	4808      	ldr	r0, [pc, #32]	; (80049fc <prvPortStartFirstTask+0x24>)
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	f380 8808 	msr	MSP, r0
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8814 	msr	CONTROL, r0
 80049ea:	b662      	cpsie	i
 80049ec:	b661      	cpsie	f
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	df00      	svc	0
 80049f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049fa:	bf00      	nop
 80049fc:	e000ed08 	.word	0xe000ed08

08004a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <xPortStartScheduler+0x120>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a46      	ldr	r2, [pc, #280]	; (8004b24 <xPortStartScheduler+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10a      	bne.n	8004a26 <xPortStartScheduler+0x26>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <xPortStartScheduler+0x120>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3f      	ldr	r2, [pc, #252]	; (8004b28 <xPortStartScheduler+0x128>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10a      	bne.n	8004a46 <xPortStartScheduler+0x46>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <xPortStartScheduler+0x12c>)
 8004a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <xPortStartScheduler+0x130>)
 8004a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <xPortStartScheduler+0x134>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a74:	e009      	b.n	8004a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <xPortStartScheduler+0x134>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <xPortStartScheduler+0x134>)
 8004a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d0ef      	beq.n	8004a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a96:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <xPortStartScheduler+0x134>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1c3 0307 	rsb	r3, r3, #7
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d00a      	beq.n	8004ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <xPortStartScheduler+0x134>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <xPortStartScheduler+0x134>)
 8004ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <xPortStartScheduler+0x134>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aca:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <xPortStartScheduler+0x134>)
 8004acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <xPortStartScheduler+0x138>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <xPortStartScheduler+0x138>)
 8004adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <xPortStartScheduler+0x138>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <xPortStartScheduler+0x138>)
 8004ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004aee:	f000 f8dd 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <xPortStartScheduler+0x13c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004af8:	f000 f8fc 	bl	8004cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <xPortStartScheduler+0x140>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <xPortStartScheduler+0x140>)
 8004b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b08:	f7ff ff66 	bl	80049d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b0c:	f7ff fd3a 	bl	8004584 <vTaskSwitchContext>
	prvTaskExitError();
 8004b10:	f7ff ff22 	bl	8004958 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00
 8004b24:	410fc271 	.word	0x410fc271
 8004b28:	410fc270 	.word	0x410fc270
 8004b2c:	e000e400 	.word	0xe000e400
 8004b30:	20000bec 	.word	0x20000bec
 8004b34:	20000bf0 	.word	0x20000bf0
 8004b38:	e000ed20 	.word	0xe000ed20
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	e000ef34 	.word	0xe000ef34

08004b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	607b      	str	r3, [r7, #4]
}
 8004b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10f      	bne.n	8004b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <vPortEnterCritical+0x5c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	603b      	str	r3, [r7, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vPortEnterCritical+0x4a>
	}
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <vPortExitCritical+0x24>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	607b      	str	r3, [r7, #4]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <vPortExitCritical+0x42>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
	...

08004c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c00:	f3ef 8009 	mrs	r0, PSP
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <pxCurrentTCBConst>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f01e 0f10 	tst.w	lr, #16
 8004c10:	bf08      	it	eq
 8004c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c24:	f380 8811 	msr	BASEPRI, r0
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f7ff fca8 	bl	8004584 <vTaskSwitchContext>
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	bc09      	pop	{r0, r3}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	f01e 0f10 	tst.w	lr, #16
 8004c4a:	bf08      	it	eq
 8004c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c50:	f380 8809 	msr	PSP, r0
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst>:
 8004c60:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7ff fbc7 	bl	8004414 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <xPortSysTickHandler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <vPortSetupTimerInterrupt+0x44>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010
 8004ce4:	e000e018 	.word	0xe000e018
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	10624dd3 	.word	0x10624dd3
 8004cf0:	e000e014 	.word	0xe000e014

08004cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d04 <vPortEnableVFP+0x10>
 8004cf8:	6801      	ldr	r1, [r0, #0]
 8004cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cfe:	6001      	str	r1, [r0, #0]
 8004d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d02:	bf00      	nop
 8004d04:	e000ed88 	.word	0xe000ed88

08004d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d14:	f7ff fad4 	bl	80042c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d18:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <pvPortMalloc+0x180>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d20:	f000 f920 	bl	8004f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <pvPortMalloc+0x184>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8093 	bne.w	8004e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01d      	beq.n	8004d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d38:	2208      	movs	r2, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f023 0307 	bic.w	r3, r3, #7
 8004d50:	3308      	adds	r3, #8
 8004d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <pvPortMalloc+0x6c>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	617b      	str	r3, [r7, #20]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06e      	beq.n	8004e58 <pvPortMalloc+0x150>
 8004d7a:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <pvPortMalloc+0x188>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d869      	bhi.n	8004e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <pvPortMalloc+0x18c>)
 8004d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d88:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <pvPortMalloc+0x18c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d8e:	e004      	b.n	8004d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d903      	bls.n	8004dac <pvPortMalloc+0xa4>
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f1      	bne.n	8004d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dac:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <pvPortMalloc+0x180>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d050      	beq.n	8004e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d91f      	bls.n	8004e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <pvPortMalloc+0xf8>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	613b      	str	r3, [r7, #16]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f000 f908 	bl	8005028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <pvPortMalloc+0x188>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <pvPortMalloc+0x188>)
 8004e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <pvPortMalloc+0x188>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <pvPortMalloc+0x190>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <pvPortMalloc+0x188>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <pvPortMalloc+0x190>)
 8004e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <pvPortMalloc+0x184>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <pvPortMalloc+0x194>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <pvPortMalloc+0x194>)
 8004e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e58:	f7ff fa40 	bl	80042dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <pvPortMalloc+0x174>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <pvPortMalloc+0x172>
	return pvReturn;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200047fc 	.word	0x200047fc
 8004e8c:	20004810 	.word	0x20004810
 8004e90:	20004800 	.word	0x20004800
 8004e94:	200047f4 	.word	0x200047f4
 8004e98:	20004804 	.word	0x20004804
 8004e9c:	20004808 	.word	0x20004808

08004ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04d      	beq.n	8004f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <vPortFree+0xb8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <vPortFree+0x44>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60fb      	str	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <vPortFree+0x62>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	60bb      	str	r3, [r7, #8]
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <vPortFree+0xb8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01e      	beq.n	8004f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11a      	bne.n	8004f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <vPortFree+0xb8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	401a      	ands	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f28:	f7ff f9ca 	bl	80042c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <vPortFree+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <vPortFree+0xbc>)
 8004f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f000 f874 	bl	8005028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <vPortFree+0xc0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a06      	ldr	r2, [pc, #24]	; (8004f60 <vPortFree+0xc0>)
 8004f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f4a:	f7ff f9c7 	bl	80042dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004810 	.word	0x20004810
 8004f5c:	20004800 	.word	0x20004800
 8004f60:	2000480c 	.word	0x2000480c

08004f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <prvHeapInit+0xac>)
 8004f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <prvHeapInit+0xac>)
 8004f94:	4413      	add	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <prvHeapInit+0xb0>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <prvHeapInit+0xb0>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <prvHeapInit+0xb4>)
 8004fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvHeapInit+0xb4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvHeapInit+0xb4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvHeapInit+0xb4>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <prvHeapInit+0xb8>)
 8004ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <prvHeapInit+0xbc>)
 8004ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <prvHeapInit+0xc0>)
 8004ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000bf4 	.word	0x20000bf4
 8005014:	200047f4 	.word	0x200047f4
 8005018:	200047fc 	.word	0x200047fc
 800501c:	20004804 	.word	0x20004804
 8005020:	20004800 	.word	0x20004800
 8005024:	20004810 	.word	0x20004810

08005028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <prvInsertBlockIntoFreeList+0xac>)
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e002      	b.n	800503c <prvInsertBlockIntoFreeList+0x14>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d8f7      	bhi.n	8005036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d108      	bne.n	800506a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	441a      	add	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	441a      	add	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d118      	bne.n	80050b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d00d      	beq.n	80050a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	441a      	add	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e008      	b.n	80050b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <prvInsertBlockIntoFreeList+0xb0>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e003      	b.n	80050b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d002      	beq.n	80050c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200047f4 	.word	0x200047f4
 80050d8:	200047fc 	.word	0x200047fc

080050dc <std>:
 80050dc:	2300      	movs	r3, #0
 80050de:	b510      	push	{r4, lr}
 80050e0:	4604      	mov	r4, r0
 80050e2:	e9c0 3300 	strd	r3, r3, [r0]
 80050e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ea:	6083      	str	r3, [r0, #8]
 80050ec:	8181      	strh	r1, [r0, #12]
 80050ee:	6643      	str	r3, [r0, #100]	; 0x64
 80050f0:	81c2      	strh	r2, [r0, #14]
 80050f2:	6183      	str	r3, [r0, #24]
 80050f4:	4619      	mov	r1, r3
 80050f6:	2208      	movs	r2, #8
 80050f8:	305c      	adds	r0, #92	; 0x5c
 80050fa:	f000 f9f7 	bl	80054ec <memset>
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <std+0x58>)
 8005100:	6263      	str	r3, [r4, #36]	; 0x24
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <std+0x5c>)
 8005104:	62a3      	str	r3, [r4, #40]	; 0x28
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <std+0x60>)
 8005108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <std+0x64>)
 800510c:	6323      	str	r3, [r4, #48]	; 0x30
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <std+0x68>)
 8005110:	6224      	str	r4, [r4, #32]
 8005112:	429c      	cmp	r4, r3
 8005114:	d006      	beq.n	8005124 <std+0x48>
 8005116:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800511a:	4294      	cmp	r4, r2
 800511c:	d002      	beq.n	8005124 <std+0x48>
 800511e:	33d0      	adds	r3, #208	; 0xd0
 8005120:	429c      	cmp	r4, r3
 8005122:	d105      	bne.n	8005130 <std+0x54>
 8005124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512c:	f000 ba56 	b.w	80055dc <__retarget_lock_init_recursive>
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	0800533d 	.word	0x0800533d
 8005138:	0800535f 	.word	0x0800535f
 800513c:	08005397 	.word	0x08005397
 8005140:	080053bb 	.word	0x080053bb
 8005144:	20004814 	.word	0x20004814

08005148 <stdio_exit_handler>:
 8005148:	4a02      	ldr	r2, [pc, #8]	; (8005154 <stdio_exit_handler+0xc>)
 800514a:	4903      	ldr	r1, [pc, #12]	; (8005158 <stdio_exit_handler+0x10>)
 800514c:	4803      	ldr	r0, [pc, #12]	; (800515c <stdio_exit_handler+0x14>)
 800514e:	f000 b869 	b.w	8005224 <_fwalk_sglue>
 8005152:	bf00      	nop
 8005154:	20000010 	.word	0x20000010
 8005158:	08005e89 	.word	0x08005e89
 800515c:	2000001c 	.word	0x2000001c

08005160 <cleanup_stdio>:
 8005160:	6841      	ldr	r1, [r0, #4]
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <cleanup_stdio+0x34>)
 8005164:	4299      	cmp	r1, r3
 8005166:	b510      	push	{r4, lr}
 8005168:	4604      	mov	r4, r0
 800516a:	d001      	beq.n	8005170 <cleanup_stdio+0x10>
 800516c:	f000 fe8c 	bl	8005e88 <_fflush_r>
 8005170:	68a1      	ldr	r1, [r4, #8]
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <cleanup_stdio+0x38>)
 8005174:	4299      	cmp	r1, r3
 8005176:	d002      	beq.n	800517e <cleanup_stdio+0x1e>
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fe85 	bl	8005e88 <_fflush_r>
 800517e:	68e1      	ldr	r1, [r4, #12]
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <cleanup_stdio+0x3c>)
 8005182:	4299      	cmp	r1, r3
 8005184:	d004      	beq.n	8005190 <cleanup_stdio+0x30>
 8005186:	4620      	mov	r0, r4
 8005188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518c:	f000 be7c 	b.w	8005e88 <_fflush_r>
 8005190:	bd10      	pop	{r4, pc}
 8005192:	bf00      	nop
 8005194:	20004814 	.word	0x20004814
 8005198:	2000487c 	.word	0x2000487c
 800519c:	200048e4 	.word	0x200048e4

080051a0 <global_stdio_init.part.0>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <global_stdio_init.part.0+0x30>)
 80051a4:	4c0b      	ldr	r4, [pc, #44]	; (80051d4 <global_stdio_init.part.0+0x34>)
 80051a6:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <global_stdio_init.part.0+0x38>)
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	4620      	mov	r0, r4
 80051ac:	2200      	movs	r2, #0
 80051ae:	2104      	movs	r1, #4
 80051b0:	f7ff ff94 	bl	80050dc <std>
 80051b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051b8:	2201      	movs	r2, #1
 80051ba:	2109      	movs	r1, #9
 80051bc:	f7ff ff8e 	bl	80050dc <std>
 80051c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051c4:	2202      	movs	r2, #2
 80051c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ca:	2112      	movs	r1, #18
 80051cc:	f7ff bf86 	b.w	80050dc <std>
 80051d0:	2000494c 	.word	0x2000494c
 80051d4:	20004814 	.word	0x20004814
 80051d8:	08005149 	.word	0x08005149

080051dc <__sfp_lock_acquire>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__sfp_lock_acquire+0x8>)
 80051de:	f000 b9fe 	b.w	80055de <__retarget_lock_acquire_recursive>
 80051e2:	bf00      	nop
 80051e4:	20004955 	.word	0x20004955

080051e8 <__sfp_lock_release>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__sfp_lock_release+0x8>)
 80051ea:	f000 b9f9 	b.w	80055e0 <__retarget_lock_release_recursive>
 80051ee:	bf00      	nop
 80051f0:	20004955 	.word	0x20004955

080051f4 <__sinit>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	f7ff fff0 	bl	80051dc <__sfp_lock_acquire>
 80051fc:	6a23      	ldr	r3, [r4, #32]
 80051fe:	b11b      	cbz	r3, 8005208 <__sinit+0x14>
 8005200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005204:	f7ff bff0 	b.w	80051e8 <__sfp_lock_release>
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <__sinit+0x28>)
 800520a:	6223      	str	r3, [r4, #32]
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <__sinit+0x2c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f5      	bne.n	8005200 <__sinit+0xc>
 8005214:	f7ff ffc4 	bl	80051a0 <global_stdio_init.part.0>
 8005218:	e7f2      	b.n	8005200 <__sinit+0xc>
 800521a:	bf00      	nop
 800521c:	08005161 	.word	0x08005161
 8005220:	2000494c 	.word	0x2000494c

08005224 <_fwalk_sglue>:
 8005224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005228:	4607      	mov	r7, r0
 800522a:	4688      	mov	r8, r1
 800522c:	4614      	mov	r4, r2
 800522e:	2600      	movs	r6, #0
 8005230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005234:	f1b9 0901 	subs.w	r9, r9, #1
 8005238:	d505      	bpl.n	8005246 <_fwalk_sglue+0x22>
 800523a:	6824      	ldr	r4, [r4, #0]
 800523c:	2c00      	cmp	r4, #0
 800523e:	d1f7      	bne.n	8005230 <_fwalk_sglue+0xc>
 8005240:	4630      	mov	r0, r6
 8005242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d907      	bls.n	800525c <_fwalk_sglue+0x38>
 800524c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005250:	3301      	adds	r3, #1
 8005252:	d003      	beq.n	800525c <_fwalk_sglue+0x38>
 8005254:	4629      	mov	r1, r5
 8005256:	4638      	mov	r0, r7
 8005258:	47c0      	blx	r8
 800525a:	4306      	orrs	r6, r0
 800525c:	3568      	adds	r5, #104	; 0x68
 800525e:	e7e9      	b.n	8005234 <_fwalk_sglue+0x10>

08005260 <iprintf>:
 8005260:	b40f      	push	{r0, r1, r2, r3}
 8005262:	b507      	push	{r0, r1, r2, lr}
 8005264:	4906      	ldr	r1, [pc, #24]	; (8005280 <iprintf+0x20>)
 8005266:	ab04      	add	r3, sp, #16
 8005268:	6808      	ldr	r0, [r1, #0]
 800526a:	f853 2b04 	ldr.w	r2, [r3], #4
 800526e:	6881      	ldr	r1, [r0, #8]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	f000 fad9 	bl	8005828 <_vfiprintf_r>
 8005276:	b003      	add	sp, #12
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b004      	add	sp, #16
 800527e:	4770      	bx	lr
 8005280:	20000068 	.word	0x20000068

08005284 <_puts_r>:
 8005284:	6a03      	ldr	r3, [r0, #32]
 8005286:	b570      	push	{r4, r5, r6, lr}
 8005288:	6884      	ldr	r4, [r0, #8]
 800528a:	4605      	mov	r5, r0
 800528c:	460e      	mov	r6, r1
 800528e:	b90b      	cbnz	r3, 8005294 <_puts_r+0x10>
 8005290:	f7ff ffb0 	bl	80051f4 <__sinit>
 8005294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_puts_r+0x22>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	0598      	lsls	r0, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_puts_r+0x22>
 80052a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a2:	f000 f99c 	bl	80055de <__retarget_lock_acquire_recursive>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	0719      	lsls	r1, r3, #28
 80052aa:	d513      	bpl.n	80052d4 <_puts_r+0x50>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	b18b      	cbz	r3, 80052d4 <_puts_r+0x50>
 80052b0:	3e01      	subs	r6, #1
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60a3      	str	r3, [r4, #8]
 80052bc:	b9e9      	cbnz	r1, 80052fa <_puts_r+0x76>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da2e      	bge.n	8005320 <_puts_r+0x9c>
 80052c2:	4622      	mov	r2, r4
 80052c4:	210a      	movs	r1, #10
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f87b 	bl	80053c2 <__swbuf_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d007      	beq.n	80052e0 <_puts_r+0x5c>
 80052d0:	250a      	movs	r5, #10
 80052d2:	e007      	b.n	80052e4 <_puts_r+0x60>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f8b0 	bl	800543c <__swsetup_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d0e7      	beq.n	80052b0 <_puts_r+0x2c>
 80052e0:	f04f 35ff 	mov.w	r5, #4294967295
 80052e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052e6:	07da      	lsls	r2, r3, #31
 80052e8:	d405      	bmi.n	80052f6 <_puts_r+0x72>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	059b      	lsls	r3, r3, #22
 80052ee:	d402      	bmi.n	80052f6 <_puts_r+0x72>
 80052f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f2:	f000 f975 	bl	80055e0 <__retarget_lock_release_recursive>
 80052f6:	4628      	mov	r0, r5
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da04      	bge.n	8005308 <_puts_r+0x84>
 80052fe:	69a2      	ldr	r2, [r4, #24]
 8005300:	429a      	cmp	r2, r3
 8005302:	dc06      	bgt.n	8005312 <_puts_r+0x8e>
 8005304:	290a      	cmp	r1, #10
 8005306:	d004      	beq.n	8005312 <_puts_r+0x8e>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	6022      	str	r2, [r4, #0]
 800530e:	7019      	strb	r1, [r3, #0]
 8005310:	e7cf      	b.n	80052b2 <_puts_r+0x2e>
 8005312:	4622      	mov	r2, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f854 	bl	80053c2 <__swbuf_r>
 800531a:	3001      	adds	r0, #1
 800531c:	d1c9      	bne.n	80052b2 <_puts_r+0x2e>
 800531e:	e7df      	b.n	80052e0 <_puts_r+0x5c>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	250a      	movs	r5, #10
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701d      	strb	r5, [r3, #0]
 800532a:	e7db      	b.n	80052e4 <_puts_r+0x60>

0800532c <puts>:
 800532c:	4b02      	ldr	r3, [pc, #8]	; (8005338 <puts+0xc>)
 800532e:	4601      	mov	r1, r0
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	f7ff bfa7 	b.w	8005284 <_puts_r>
 8005336:	bf00      	nop
 8005338:	20000068 	.word	0x20000068

0800533c <__sread>:
 800533c:	b510      	push	{r4, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	f000 f8fc 	bl	8005540 <_read_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	bfab      	itete	ge
 800534c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800534e:	89a3      	ldrhlt	r3, [r4, #12]
 8005350:	181b      	addge	r3, r3, r0
 8005352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005356:	bfac      	ite	ge
 8005358:	6563      	strge	r3, [r4, #84]	; 0x54
 800535a:	81a3      	strhlt	r3, [r4, #12]
 800535c:	bd10      	pop	{r4, pc}

0800535e <__swrite>:
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	461f      	mov	r7, r3
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	4616      	mov	r6, r2
 800536e:	d505      	bpl.n	800537c <__swrite+0x1e>
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	2302      	movs	r3, #2
 8005376:	2200      	movs	r2, #0
 8005378:	f000 f8d0 	bl	800551c <_lseek_r>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	4632      	mov	r2, r6
 800538a:	463b      	mov	r3, r7
 800538c:	4628      	mov	r0, r5
 800538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	f000 b8e7 	b.w	8005564 <_write_r>

08005396 <__sseek>:
 8005396:	b510      	push	{r4, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 f8bd 	bl	800551c <_lseek_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	bf15      	itete	ne
 80053a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80053aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strheq	r3, [r4, #12]
 80053b4:	bf18      	it	ne
 80053b6:	81a3      	strhne	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__sclose>:
 80053ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053be:	f000 b89d 	b.w	80054fc <_close_r>

080053c2 <__swbuf_r>:
 80053c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c4:	460e      	mov	r6, r1
 80053c6:	4614      	mov	r4, r2
 80053c8:	4605      	mov	r5, r0
 80053ca:	b118      	cbz	r0, 80053d4 <__swbuf_r+0x12>
 80053cc:	6a03      	ldr	r3, [r0, #32]
 80053ce:	b90b      	cbnz	r3, 80053d4 <__swbuf_r+0x12>
 80053d0:	f7ff ff10 	bl	80051f4 <__sinit>
 80053d4:	69a3      	ldr	r3, [r4, #24]
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	071a      	lsls	r2, r3, #28
 80053dc:	d525      	bpl.n	800542a <__swbuf_r+0x68>
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	b31b      	cbz	r3, 800542a <__swbuf_r+0x68>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	6922      	ldr	r2, [r4, #16]
 80053e6:	1a98      	subs	r0, r3, r2
 80053e8:	6963      	ldr	r3, [r4, #20]
 80053ea:	b2f6      	uxtb	r6, r6
 80053ec:	4283      	cmp	r3, r0
 80053ee:	4637      	mov	r7, r6
 80053f0:	dc04      	bgt.n	80053fc <__swbuf_r+0x3a>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 fd47 	bl	8005e88 <_fflush_r>
 80053fa:	b9e0      	cbnz	r0, 8005436 <__swbuf_r+0x74>
 80053fc:	68a3      	ldr	r3, [r4, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	701e      	strb	r6, [r3, #0]
 800540a:	6962      	ldr	r2, [r4, #20]
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	429a      	cmp	r2, r3
 8005410:	d004      	beq.n	800541c <__swbuf_r+0x5a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	07db      	lsls	r3, r3, #31
 8005416:	d506      	bpl.n	8005426 <__swbuf_r+0x64>
 8005418:	2e0a      	cmp	r6, #10
 800541a:	d104      	bne.n	8005426 <__swbuf_r+0x64>
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 fd32 	bl	8005e88 <_fflush_r>
 8005424:	b938      	cbnz	r0, 8005436 <__swbuf_r+0x74>
 8005426:	4638      	mov	r0, r7
 8005428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f805 	bl	800543c <__swsetup_r>
 8005432:	2800      	cmp	r0, #0
 8005434:	d0d5      	beq.n	80053e2 <__swbuf_r+0x20>
 8005436:	f04f 37ff 	mov.w	r7, #4294967295
 800543a:	e7f4      	b.n	8005426 <__swbuf_r+0x64>

0800543c <__swsetup_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <__swsetup_r+0xac>)
 8005440:	4605      	mov	r5, r0
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	460c      	mov	r4, r1
 8005446:	b118      	cbz	r0, 8005450 <__swsetup_r+0x14>
 8005448:	6a03      	ldr	r3, [r0, #32]
 800544a:	b90b      	cbnz	r3, 8005450 <__swsetup_r+0x14>
 800544c:	f7ff fed2 	bl	80051f4 <__sinit>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005456:	0718      	lsls	r0, r3, #28
 8005458:	d422      	bmi.n	80054a0 <__swsetup_r+0x64>
 800545a:	06d9      	lsls	r1, r3, #27
 800545c:	d407      	bmi.n	800546e <__swsetup_r+0x32>
 800545e:	2309      	movs	r3, #9
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e034      	b.n	80054d8 <__swsetup_r+0x9c>
 800546e:	0758      	lsls	r0, r3, #29
 8005470:	d512      	bpl.n	8005498 <__swsetup_r+0x5c>
 8005472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005474:	b141      	cbz	r1, 8005488 <__swsetup_r+0x4c>
 8005476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800547a:	4299      	cmp	r1, r3
 800547c:	d002      	beq.n	8005484 <__swsetup_r+0x48>
 800547e:	4628      	mov	r0, r5
 8005480:	f000 f8b0 	bl	80055e4 <_free_r>
 8005484:	2300      	movs	r3, #0
 8005486:	6363      	str	r3, [r4, #52]	; 0x34
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	2300      	movs	r3, #0
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	f043 0308 	orr.w	r3, r3, #8
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	b94b      	cbnz	r3, 80054b8 <__swsetup_r+0x7c>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ae:	d003      	beq.n	80054b8 <__swsetup_r+0x7c>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 fd36 	bl	8005f24 <__smakebuf_r>
 80054b8:	89a0      	ldrh	r0, [r4, #12]
 80054ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054be:	f010 0301 	ands.w	r3, r0, #1
 80054c2:	d00a      	beq.n	80054da <__swsetup_r+0x9e>
 80054c4:	2300      	movs	r3, #0
 80054c6:	60a3      	str	r3, [r4, #8]
 80054c8:	6963      	ldr	r3, [r4, #20]
 80054ca:	425b      	negs	r3, r3
 80054cc:	61a3      	str	r3, [r4, #24]
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	b943      	cbnz	r3, 80054e4 <__swsetup_r+0xa8>
 80054d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054d6:	d1c4      	bne.n	8005462 <__swsetup_r+0x26>
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	0781      	lsls	r1, r0, #30
 80054dc:	bf58      	it	pl
 80054de:	6963      	ldrpl	r3, [r4, #20]
 80054e0:	60a3      	str	r3, [r4, #8]
 80054e2:	e7f4      	b.n	80054ce <__swsetup_r+0x92>
 80054e4:	2000      	movs	r0, #0
 80054e6:	e7f7      	b.n	80054d8 <__swsetup_r+0x9c>
 80054e8:	20000068 	.word	0x20000068

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <_close_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	; (8005518 <_close_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb fd02 	bl	8000f10 <_close>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_close_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_close_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20004950 	.word	0x20004950

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	; (800553c <_lseek_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb fd17 	bl	8000f5e <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20004950 	.word	0x20004950

08005540 <_read_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	; (8005560 <_read_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fca5 	bl	8000e9e <_read>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_read_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_read_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20004950 	.word	0x20004950

08005564 <_write_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d07      	ldr	r5, [pc, #28]	; (8005584 <_write_r+0x20>)
 8005568:	4604      	mov	r4, r0
 800556a:	4608      	mov	r0, r1
 800556c:	4611      	mov	r1, r2
 800556e:	2200      	movs	r2, #0
 8005570:	602a      	str	r2, [r5, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	f7fb fcb0 	bl	8000ed8 <_write>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_write_r+0x1e>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_write_r+0x1e>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20004950 	.word	0x20004950

08005588 <__errno>:
 8005588:	4b01      	ldr	r3, [pc, #4]	; (8005590 <__errno+0x8>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000068 	.word	0x20000068

08005594 <__libc_init_array>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4d0d      	ldr	r5, [pc, #52]	; (80055cc <__libc_init_array+0x38>)
 8005598:	4c0d      	ldr	r4, [pc, #52]	; (80055d0 <__libc_init_array+0x3c>)
 800559a:	1b64      	subs	r4, r4, r5
 800559c:	10a4      	asrs	r4, r4, #2
 800559e:	2600      	movs	r6, #0
 80055a0:	42a6      	cmp	r6, r4
 80055a2:	d109      	bne.n	80055b8 <__libc_init_array+0x24>
 80055a4:	4d0b      	ldr	r5, [pc, #44]	; (80055d4 <__libc_init_array+0x40>)
 80055a6:	4c0c      	ldr	r4, [pc, #48]	; (80055d8 <__libc_init_array+0x44>)
 80055a8:	f000 fd2a 	bl	8006000 <_init>
 80055ac:	1b64      	subs	r4, r4, r5
 80055ae:	10a4      	asrs	r4, r4, #2
 80055b0:	2600      	movs	r6, #0
 80055b2:	42a6      	cmp	r6, r4
 80055b4:	d105      	bne.n	80055c2 <__libc_init_array+0x2e>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055bc:	4798      	blx	r3
 80055be:	3601      	adds	r6, #1
 80055c0:	e7ee      	b.n	80055a0 <__libc_init_array+0xc>
 80055c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c6:	4798      	blx	r3
 80055c8:	3601      	adds	r6, #1
 80055ca:	e7f2      	b.n	80055b2 <__libc_init_array+0x1e>
 80055cc:	080060f0 	.word	0x080060f0
 80055d0:	080060f0 	.word	0x080060f0
 80055d4:	080060f0 	.word	0x080060f0
 80055d8:	080060f4 	.word	0x080060f4

080055dc <__retarget_lock_init_recursive>:
 80055dc:	4770      	bx	lr

080055de <__retarget_lock_acquire_recursive>:
 80055de:	4770      	bx	lr

080055e0 <__retarget_lock_release_recursive>:
 80055e0:	4770      	bx	lr
	...

080055e4 <_free_r>:
 80055e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d044      	beq.n	8005674 <_free_r+0x90>
 80055ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ee:	9001      	str	r0, [sp, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f1a1 0404 	sub.w	r4, r1, #4
 80055f6:	bfb8      	it	lt
 80055f8:	18e4      	addlt	r4, r4, r3
 80055fa:	f000 f8df 	bl	80057bc <__malloc_lock>
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <_free_r+0x94>)
 8005600:	9801      	ldr	r0, [sp, #4]
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	b933      	cbnz	r3, 8005614 <_free_r+0x30>
 8005606:	6063      	str	r3, [r4, #4]
 8005608:	6014      	str	r4, [r2, #0]
 800560a:	b003      	add	sp, #12
 800560c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005610:	f000 b8da 	b.w	80057c8 <__malloc_unlock>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d908      	bls.n	800562a <_free_r+0x46>
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1961      	adds	r1, r4, r5
 800561c:	428b      	cmp	r3, r1
 800561e:	bf01      	itttt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	1949      	addeq	r1, r1, r5
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	e7ed      	b.n	8005606 <_free_r+0x22>
 800562a:	461a      	mov	r2, r3
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b10b      	cbz	r3, 8005634 <_free_r+0x50>
 8005630:	42a3      	cmp	r3, r4
 8005632:	d9fa      	bls.n	800562a <_free_r+0x46>
 8005634:	6811      	ldr	r1, [r2, #0]
 8005636:	1855      	adds	r5, r2, r1
 8005638:	42a5      	cmp	r5, r4
 800563a:	d10b      	bne.n	8005654 <_free_r+0x70>
 800563c:	6824      	ldr	r4, [r4, #0]
 800563e:	4421      	add	r1, r4
 8005640:	1854      	adds	r4, r2, r1
 8005642:	42a3      	cmp	r3, r4
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	d1e0      	bne.n	800560a <_free_r+0x26>
 8005648:	681c      	ldr	r4, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	6053      	str	r3, [r2, #4]
 800564e:	440c      	add	r4, r1
 8005650:	6014      	str	r4, [r2, #0]
 8005652:	e7da      	b.n	800560a <_free_r+0x26>
 8005654:	d902      	bls.n	800565c <_free_r+0x78>
 8005656:	230c      	movs	r3, #12
 8005658:	6003      	str	r3, [r0, #0]
 800565a:	e7d6      	b.n	800560a <_free_r+0x26>
 800565c:	6825      	ldr	r5, [r4, #0]
 800565e:	1961      	adds	r1, r4, r5
 8005660:	428b      	cmp	r3, r1
 8005662:	bf04      	itt	eq
 8005664:	6819      	ldreq	r1, [r3, #0]
 8005666:	685b      	ldreq	r3, [r3, #4]
 8005668:	6063      	str	r3, [r4, #4]
 800566a:	bf04      	itt	eq
 800566c:	1949      	addeq	r1, r1, r5
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	6054      	str	r4, [r2, #4]
 8005672:	e7ca      	b.n	800560a <_free_r+0x26>
 8005674:	b003      	add	sp, #12
 8005676:	bd30      	pop	{r4, r5, pc}
 8005678:	20004958 	.word	0x20004958

0800567c <sbrk_aligned>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4e0e      	ldr	r6, [pc, #56]	; (80056b8 <sbrk_aligned+0x3c>)
 8005680:	460c      	mov	r4, r1
 8005682:	6831      	ldr	r1, [r6, #0]
 8005684:	4605      	mov	r5, r0
 8005686:	b911      	cbnz	r1, 800568e <sbrk_aligned+0x12>
 8005688:	f000 fcaa 	bl	8005fe0 <_sbrk_r>
 800568c:	6030      	str	r0, [r6, #0]
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	f000 fca5 	bl	8005fe0 <_sbrk_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	d00a      	beq.n	80056b0 <sbrk_aligned+0x34>
 800569a:	1cc4      	adds	r4, r0, #3
 800569c:	f024 0403 	bic.w	r4, r4, #3
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d007      	beq.n	80056b4 <sbrk_aligned+0x38>
 80056a4:	1a21      	subs	r1, r4, r0
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 fc9a 	bl	8005fe0 <_sbrk_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d101      	bne.n	80056b4 <sbrk_aligned+0x38>
 80056b0:	f04f 34ff 	mov.w	r4, #4294967295
 80056b4:	4620      	mov	r0, r4
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	2000495c 	.word	0x2000495c

080056bc <_malloc_r>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	1ccd      	adds	r5, r1, #3
 80056c2:	f025 0503 	bic.w	r5, r5, #3
 80056c6:	3508      	adds	r5, #8
 80056c8:	2d0c      	cmp	r5, #12
 80056ca:	bf38      	it	cc
 80056cc:	250c      	movcc	r5, #12
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	4607      	mov	r7, r0
 80056d2:	db01      	blt.n	80056d8 <_malloc_r+0x1c>
 80056d4:	42a9      	cmp	r1, r5
 80056d6:	d905      	bls.n	80056e4 <_malloc_r+0x28>
 80056d8:	230c      	movs	r3, #12
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	2600      	movs	r6, #0
 80056de:	4630      	mov	r0, r6
 80056e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057b8 <_malloc_r+0xfc>
 80056e8:	f000 f868 	bl	80057bc <__malloc_lock>
 80056ec:	f8d8 3000 	ldr.w	r3, [r8]
 80056f0:	461c      	mov	r4, r3
 80056f2:	bb5c      	cbnz	r4, 800574c <_malloc_r+0x90>
 80056f4:	4629      	mov	r1, r5
 80056f6:	4638      	mov	r0, r7
 80056f8:	f7ff ffc0 	bl	800567c <sbrk_aligned>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	4604      	mov	r4, r0
 8005700:	d155      	bne.n	80057ae <_malloc_r+0xf2>
 8005702:	f8d8 4000 	ldr.w	r4, [r8]
 8005706:	4626      	mov	r6, r4
 8005708:	2e00      	cmp	r6, #0
 800570a:	d145      	bne.n	8005798 <_malloc_r+0xdc>
 800570c:	2c00      	cmp	r4, #0
 800570e:	d048      	beq.n	80057a2 <_malloc_r+0xe6>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	4631      	mov	r1, r6
 8005714:	4638      	mov	r0, r7
 8005716:	eb04 0903 	add.w	r9, r4, r3
 800571a:	f000 fc61 	bl	8005fe0 <_sbrk_r>
 800571e:	4581      	cmp	r9, r0
 8005720:	d13f      	bne.n	80057a2 <_malloc_r+0xe6>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	1a6d      	subs	r5, r5, r1
 8005726:	4629      	mov	r1, r5
 8005728:	4638      	mov	r0, r7
 800572a:	f7ff ffa7 	bl	800567c <sbrk_aligned>
 800572e:	3001      	adds	r0, #1
 8005730:	d037      	beq.n	80057a2 <_malloc_r+0xe6>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	442b      	add	r3, r5
 8005736:	6023      	str	r3, [r4, #0]
 8005738:	f8d8 3000 	ldr.w	r3, [r8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d038      	beq.n	80057b2 <_malloc_r+0xf6>
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	42a2      	cmp	r2, r4
 8005744:	d12b      	bne.n	800579e <_malloc_r+0xe2>
 8005746:	2200      	movs	r2, #0
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	e00f      	b.n	800576c <_malloc_r+0xb0>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	1b52      	subs	r2, r2, r5
 8005750:	d41f      	bmi.n	8005792 <_malloc_r+0xd6>
 8005752:	2a0b      	cmp	r2, #11
 8005754:	d917      	bls.n	8005786 <_malloc_r+0xca>
 8005756:	1961      	adds	r1, r4, r5
 8005758:	42a3      	cmp	r3, r4
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	6059      	strne	r1, [r3, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	bf08      	it	eq
 8005764:	f8c8 1000 	streq.w	r1, [r8]
 8005768:	5162      	str	r2, [r4, r5]
 800576a:	604b      	str	r3, [r1, #4]
 800576c:	4638      	mov	r0, r7
 800576e:	f104 060b 	add.w	r6, r4, #11
 8005772:	f000 f829 	bl	80057c8 <__malloc_unlock>
 8005776:	f026 0607 	bic.w	r6, r6, #7
 800577a:	1d23      	adds	r3, r4, #4
 800577c:	1af2      	subs	r2, r6, r3
 800577e:	d0ae      	beq.n	80056de <_malloc_r+0x22>
 8005780:	1b9b      	subs	r3, r3, r6
 8005782:	50a3      	str	r3, [r4, r2]
 8005784:	e7ab      	b.n	80056de <_malloc_r+0x22>
 8005786:	42a3      	cmp	r3, r4
 8005788:	6862      	ldr	r2, [r4, #4]
 800578a:	d1dd      	bne.n	8005748 <_malloc_r+0x8c>
 800578c:	f8c8 2000 	str.w	r2, [r8]
 8005790:	e7ec      	b.n	800576c <_malloc_r+0xb0>
 8005792:	4623      	mov	r3, r4
 8005794:	6864      	ldr	r4, [r4, #4]
 8005796:	e7ac      	b.n	80056f2 <_malloc_r+0x36>
 8005798:	4634      	mov	r4, r6
 800579a:	6876      	ldr	r6, [r6, #4]
 800579c:	e7b4      	b.n	8005708 <_malloc_r+0x4c>
 800579e:	4613      	mov	r3, r2
 80057a0:	e7cc      	b.n	800573c <_malloc_r+0x80>
 80057a2:	230c      	movs	r3, #12
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4638      	mov	r0, r7
 80057a8:	f000 f80e 	bl	80057c8 <__malloc_unlock>
 80057ac:	e797      	b.n	80056de <_malloc_r+0x22>
 80057ae:	6025      	str	r5, [r4, #0]
 80057b0:	e7dc      	b.n	800576c <_malloc_r+0xb0>
 80057b2:	605b      	str	r3, [r3, #4]
 80057b4:	deff      	udf	#255	; 0xff
 80057b6:	bf00      	nop
 80057b8:	20004958 	.word	0x20004958

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bf0e 	b.w	80055de <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	20004954 	.word	0x20004954

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff bf09 	b.w	80055e0 <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	20004954 	.word	0x20004954

080057d4 <__sfputc_r>:
 80057d4:	6893      	ldr	r3, [r2, #8]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	b410      	push	{r4}
 80057dc:	6093      	str	r3, [r2, #8]
 80057de:	da08      	bge.n	80057f2 <__sfputc_r+0x1e>
 80057e0:	6994      	ldr	r4, [r2, #24]
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	db01      	blt.n	80057ea <__sfputc_r+0x16>
 80057e6:	290a      	cmp	r1, #10
 80057e8:	d103      	bne.n	80057f2 <__sfputc_r+0x1e>
 80057ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ee:	f7ff bde8 	b.w	80053c2 <__swbuf_r>
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	1c58      	adds	r0, r3, #1
 80057f6:	6010      	str	r0, [r2, #0]
 80057f8:	7019      	strb	r1, [r3, #0]
 80057fa:	4608      	mov	r0, r1
 80057fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005800:	4770      	bx	lr

08005802 <__sfputs_r>:
 8005802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	4614      	mov	r4, r2
 800580a:	18d5      	adds	r5, r2, r3
 800580c:	42ac      	cmp	r4, r5
 800580e:	d101      	bne.n	8005814 <__sfputs_r+0x12>
 8005810:	2000      	movs	r0, #0
 8005812:	e007      	b.n	8005824 <__sfputs_r+0x22>
 8005814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005818:	463a      	mov	r2, r7
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ffda 	bl	80057d4 <__sfputc_r>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d1f3      	bne.n	800580c <__sfputs_r+0xa>
 8005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005828 <_vfiprintf_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	460d      	mov	r5, r1
 800582e:	b09d      	sub	sp, #116	; 0x74
 8005830:	4614      	mov	r4, r2
 8005832:	4698      	mov	r8, r3
 8005834:	4606      	mov	r6, r0
 8005836:	b118      	cbz	r0, 8005840 <_vfiprintf_r+0x18>
 8005838:	6a03      	ldr	r3, [r0, #32]
 800583a:	b90b      	cbnz	r3, 8005840 <_vfiprintf_r+0x18>
 800583c:	f7ff fcda 	bl	80051f4 <__sinit>
 8005840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005842:	07d9      	lsls	r1, r3, #31
 8005844:	d405      	bmi.n	8005852 <_vfiprintf_r+0x2a>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	059a      	lsls	r2, r3, #22
 800584a:	d402      	bmi.n	8005852 <_vfiprintf_r+0x2a>
 800584c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800584e:	f7ff fec6 	bl	80055de <__retarget_lock_acquire_recursive>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	d501      	bpl.n	800585c <_vfiprintf_r+0x34>
 8005858:	692b      	ldr	r3, [r5, #16]
 800585a:	b99b      	cbnz	r3, 8005884 <_vfiprintf_r+0x5c>
 800585c:	4629      	mov	r1, r5
 800585e:	4630      	mov	r0, r6
 8005860:	f7ff fdec 	bl	800543c <__swsetup_r>
 8005864:	b170      	cbz	r0, 8005884 <_vfiprintf_r+0x5c>
 8005866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005868:	07dc      	lsls	r4, r3, #31
 800586a:	d504      	bpl.n	8005876 <_vfiprintf_r+0x4e>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	b01d      	add	sp, #116	; 0x74
 8005872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	0598      	lsls	r0, r3, #22
 800587a:	d4f7      	bmi.n	800586c <_vfiprintf_r+0x44>
 800587c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587e:	f7ff feaf 	bl	80055e0 <__retarget_lock_release_recursive>
 8005882:	e7f3      	b.n	800586c <_vfiprintf_r+0x44>
 8005884:	2300      	movs	r3, #0
 8005886:	9309      	str	r3, [sp, #36]	; 0x24
 8005888:	2320      	movs	r3, #32
 800588a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800588e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005892:	2330      	movs	r3, #48	; 0x30
 8005894:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a48 <_vfiprintf_r+0x220>
 8005898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800589c:	f04f 0901 	mov.w	r9, #1
 80058a0:	4623      	mov	r3, r4
 80058a2:	469a      	mov	sl, r3
 80058a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a8:	b10a      	cbz	r2, 80058ae <_vfiprintf_r+0x86>
 80058aa:	2a25      	cmp	r2, #37	; 0x25
 80058ac:	d1f9      	bne.n	80058a2 <_vfiprintf_r+0x7a>
 80058ae:	ebba 0b04 	subs.w	fp, sl, r4
 80058b2:	d00b      	beq.n	80058cc <_vfiprintf_r+0xa4>
 80058b4:	465b      	mov	r3, fp
 80058b6:	4622      	mov	r2, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffa1 	bl	8005802 <__sfputs_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	f000 80a9 	beq.w	8005a18 <_vfiprintf_r+0x1f0>
 80058c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c8:	445a      	add	r2, fp
 80058ca:	9209      	str	r2, [sp, #36]	; 0x24
 80058cc:	f89a 3000 	ldrb.w	r3, [sl]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80a1 	beq.w	8005a18 <_vfiprintf_r+0x1f0>
 80058d6:	2300      	movs	r3, #0
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e0:	f10a 0a01 	add.w	sl, sl, #1
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ec:	931a      	str	r3, [sp, #104]	; 0x68
 80058ee:	4654      	mov	r4, sl
 80058f0:	2205      	movs	r2, #5
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4854      	ldr	r0, [pc, #336]	; (8005a48 <_vfiprintf_r+0x220>)
 80058f8:	f7fa fc7a 	bl	80001f0 <memchr>
 80058fc:	9a04      	ldr	r2, [sp, #16]
 80058fe:	b9d8      	cbnz	r0, 8005938 <_vfiprintf_r+0x110>
 8005900:	06d1      	lsls	r1, r2, #27
 8005902:	bf44      	itt	mi
 8005904:	2320      	movmi	r3, #32
 8005906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800590a:	0713      	lsls	r3, r2, #28
 800590c:	bf44      	itt	mi
 800590e:	232b      	movmi	r3, #43	; 0x2b
 8005910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b2a      	cmp	r3, #42	; 0x2a
 800591a:	d015      	beq.n	8005948 <_vfiprintf_r+0x120>
 800591c:	9a07      	ldr	r2, [sp, #28]
 800591e:	4654      	mov	r4, sl
 8005920:	2000      	movs	r0, #0
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	4621      	mov	r1, r4
 8005928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592c:	3b30      	subs	r3, #48	; 0x30
 800592e:	2b09      	cmp	r3, #9
 8005930:	d94d      	bls.n	80059ce <_vfiprintf_r+0x1a6>
 8005932:	b1b0      	cbz	r0, 8005962 <_vfiprintf_r+0x13a>
 8005934:	9207      	str	r2, [sp, #28]
 8005936:	e014      	b.n	8005962 <_vfiprintf_r+0x13a>
 8005938:	eba0 0308 	sub.w	r3, r0, r8
 800593c:	fa09 f303 	lsl.w	r3, r9, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	46a2      	mov	sl, r4
 8005946:	e7d2      	b.n	80058ee <_vfiprintf_r+0xc6>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9103      	str	r1, [sp, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfbb      	ittet	lt
 8005954:	425b      	neglt	r3, r3
 8005956:	f042 0202 	orrlt.w	r2, r2, #2
 800595a:	9307      	strge	r3, [sp, #28]
 800595c:	9307      	strlt	r3, [sp, #28]
 800595e:	bfb8      	it	lt
 8005960:	9204      	strlt	r2, [sp, #16]
 8005962:	7823      	ldrb	r3, [r4, #0]
 8005964:	2b2e      	cmp	r3, #46	; 0x2e
 8005966:	d10c      	bne.n	8005982 <_vfiprintf_r+0x15a>
 8005968:	7863      	ldrb	r3, [r4, #1]
 800596a:	2b2a      	cmp	r3, #42	; 0x2a
 800596c:	d134      	bne.n	80059d8 <_vfiprintf_r+0x1b0>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	9203      	str	r2, [sp, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfb8      	it	lt
 800597a:	f04f 33ff 	movlt.w	r3, #4294967295
 800597e:	3402      	adds	r4, #2
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a58 <_vfiprintf_r+0x230>
 8005986:	7821      	ldrb	r1, [r4, #0]
 8005988:	2203      	movs	r2, #3
 800598a:	4650      	mov	r0, sl
 800598c:	f7fa fc30 	bl	80001f0 <memchr>
 8005990:	b138      	cbz	r0, 80059a2 <_vfiprintf_r+0x17a>
 8005992:	9b04      	ldr	r3, [sp, #16]
 8005994:	eba0 000a 	sub.w	r0, r0, sl
 8005998:	2240      	movs	r2, #64	; 0x40
 800599a:	4082      	lsls	r2, r0
 800599c:	4313      	orrs	r3, r2
 800599e:	3401      	adds	r4, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a6:	4829      	ldr	r0, [pc, #164]	; (8005a4c <_vfiprintf_r+0x224>)
 80059a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ac:	2206      	movs	r2, #6
 80059ae:	f7fa fc1f 	bl	80001f0 <memchr>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d03f      	beq.n	8005a36 <_vfiprintf_r+0x20e>
 80059b6:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <_vfiprintf_r+0x228>)
 80059b8:	bb1b      	cbnz	r3, 8005a02 <_vfiprintf_r+0x1da>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	3307      	adds	r3, #7
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	3308      	adds	r3, #8
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c8:	443b      	add	r3, r7
 80059ca:	9309      	str	r3, [sp, #36]	; 0x24
 80059cc:	e768      	b.n	80058a0 <_vfiprintf_r+0x78>
 80059ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d2:	460c      	mov	r4, r1
 80059d4:	2001      	movs	r0, #1
 80059d6:	e7a6      	b.n	8005926 <_vfiprintf_r+0xfe>
 80059d8:	2300      	movs	r3, #0
 80059da:	3401      	adds	r4, #1
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	4619      	mov	r1, r3
 80059e0:	f04f 0c0a 	mov.w	ip, #10
 80059e4:	4620      	mov	r0, r4
 80059e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ea:	3a30      	subs	r2, #48	; 0x30
 80059ec:	2a09      	cmp	r2, #9
 80059ee:	d903      	bls.n	80059f8 <_vfiprintf_r+0x1d0>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0c6      	beq.n	8005982 <_vfiprintf_r+0x15a>
 80059f4:	9105      	str	r1, [sp, #20]
 80059f6:	e7c4      	b.n	8005982 <_vfiprintf_r+0x15a>
 80059f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059fc:	4604      	mov	r4, r0
 80059fe:	2301      	movs	r3, #1
 8005a00:	e7f0      	b.n	80059e4 <_vfiprintf_r+0x1bc>
 8005a02:	ab03      	add	r3, sp, #12
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	462a      	mov	r2, r5
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <_vfiprintf_r+0x22c>)
 8005a0a:	a904      	add	r1, sp, #16
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f3af 8000 	nop.w
 8005a12:	4607      	mov	r7, r0
 8005a14:	1c78      	adds	r0, r7, #1
 8005a16:	d1d6      	bne.n	80059c6 <_vfiprintf_r+0x19e>
 8005a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_vfiprintf_r+0x202>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	059a      	lsls	r2, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_vfiprintf_r+0x202>
 8005a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a26:	f7ff fddb 	bl	80055e0 <__retarget_lock_release_recursive>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	065b      	lsls	r3, r3, #25
 8005a2e:	f53f af1d 	bmi.w	800586c <_vfiprintf_r+0x44>
 8005a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a34:	e71c      	b.n	8005870 <_vfiprintf_r+0x48>
 8005a36:	ab03      	add	r3, sp, #12
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <_vfiprintf_r+0x22c>)
 8005a3e:	a904      	add	r1, sp, #16
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 f879 	bl	8005b38 <_printf_i>
 8005a46:	e7e4      	b.n	8005a12 <_vfiprintf_r+0x1ea>
 8005a48:	080060b4 	.word	0x080060b4
 8005a4c:	080060be 	.word	0x080060be
 8005a50:	00000000 	.word	0x00000000
 8005a54:	08005803 	.word	0x08005803
 8005a58:	080060ba 	.word	0x080060ba

08005a5c <_printf_common>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	4616      	mov	r6, r2
 8005a62:	4699      	mov	r9, r3
 8005a64:	688a      	ldr	r2, [r1, #8]
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfb8      	it	lt
 8005a70:	4613      	movlt	r3, r2
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a78:	4607      	mov	r7, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	b10a      	cbz	r2, 8005a82 <_printf_common+0x26>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	0699      	lsls	r1, r3, #26
 8005a86:	bf42      	ittt	mi
 8005a88:	6833      	ldrmi	r3, [r6, #0]
 8005a8a:	3302      	addmi	r3, #2
 8005a8c:	6033      	strmi	r3, [r6, #0]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d106      	bne.n	8005aa4 <_printf_common+0x48>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	6832      	ldr	r2, [r6, #0]
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dc26      	bgt.n	8005af2 <_printf_common+0x96>
 8005aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa8:	1e13      	subs	r3, r2, #0
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	bf18      	it	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d42b      	bmi.n	8005b0c <_printf_common+0xb0>
 8005ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab8:	4649      	mov	r1, r9
 8005aba:	4638      	mov	r0, r7
 8005abc:	47c0      	blx	r8
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d01e      	beq.n	8005b00 <_printf_common+0xa4>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	f003 0306 	and.w	r3, r3, #6
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	bf02      	ittt	eq
 8005ace:	68e5      	ldreq	r5, [r4, #12]
 8005ad0:	6833      	ldreq	r3, [r6, #0]
 8005ad2:	1aed      	subeq	r5, r5, r3
 8005ad4:	68a3      	ldr	r3, [r4, #8]
 8005ad6:	bf0c      	ite	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	2500      	movne	r5, #0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bfc4      	itt	gt
 8005ae2:	1a9b      	subgt	r3, r3, r2
 8005ae4:	18ed      	addgt	r5, r5, r3
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	341a      	adds	r4, #26
 8005aea:	42b5      	cmp	r5, r6
 8005aec:	d11a      	bne.n	8005b24 <_printf_common+0xc8>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e008      	b.n	8005b04 <_printf_common+0xa8>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4652      	mov	r2, sl
 8005af6:	4649      	mov	r1, r9
 8005af8:	4638      	mov	r0, r7
 8005afa:	47c0      	blx	r8
 8005afc:	3001      	adds	r0, #1
 8005afe:	d103      	bne.n	8005b08 <_printf_common+0xac>
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	3501      	adds	r5, #1
 8005b0a:	e7c6      	b.n	8005a9a <_printf_common+0x3e>
 8005b0c:	18e1      	adds	r1, r4, r3
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	2030      	movs	r0, #48	; 0x30
 8005b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b16:	4422      	add	r2, r4
 8005b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b20:	3302      	adds	r3, #2
 8005b22:	e7c7      	b.n	8005ab4 <_printf_common+0x58>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4622      	mov	r2, r4
 8005b28:	4649      	mov	r1, r9
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d0e6      	beq.n	8005b00 <_printf_common+0xa4>
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7d9      	b.n	8005aea <_printf_common+0x8e>
	...

08005b38 <_printf_i>:
 8005b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	7e0f      	ldrb	r7, [r1, #24]
 8005b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b40:	2f78      	cmp	r7, #120	; 0x78
 8005b42:	4691      	mov	r9, r2
 8005b44:	4680      	mov	r8, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	469a      	mov	sl, r3
 8005b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b4e:	d807      	bhi.n	8005b60 <_printf_i+0x28>
 8005b50:	2f62      	cmp	r7, #98	; 0x62
 8005b52:	d80a      	bhi.n	8005b6a <_printf_i+0x32>
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	f000 80d4 	beq.w	8005d02 <_printf_i+0x1ca>
 8005b5a:	2f58      	cmp	r7, #88	; 0x58
 8005b5c:	f000 80c0 	beq.w	8005ce0 <_printf_i+0x1a8>
 8005b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b68:	e03a      	b.n	8005be0 <_printf_i+0xa8>
 8005b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6e:	2b15      	cmp	r3, #21
 8005b70:	d8f6      	bhi.n	8005b60 <_printf_i+0x28>
 8005b72:	a101      	add	r1, pc, #4	; (adr r1, 8005b78 <_printf_i+0x40>)
 8005b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005b61 	.word	0x08005b61
 8005b84:	08005b61 	.word	0x08005b61
 8005b88:	08005b61 	.word	0x08005b61
 8005b8c:	08005b61 	.word	0x08005b61
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005b61 	.word	0x08005b61
 8005b98:	08005b61 	.word	0x08005b61
 8005b9c:	08005b61 	.word	0x08005b61
 8005ba0:	08005b61 	.word	0x08005b61
 8005ba4:	08005ce9 	.word	0x08005ce9
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005ca3 	.word	0x08005ca3
 8005bb0:	08005b61 	.word	0x08005b61
 8005bb4:	08005b61 	.word	0x08005b61
 8005bb8:	08005d0b 	.word	0x08005d0b
 8005bbc:	08005b61 	.word	0x08005b61
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	08005b61 	.word	0x08005b61
 8005bc8:	08005b61 	.word	0x08005b61
 8005bcc:	08005cab 	.word	0x08005cab
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be0:	2301      	movs	r3, #1
 8005be2:	e09f      	b.n	8005d24 <_printf_i+0x1ec>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	682b      	ldr	r3, [r5, #0]
 8005be8:	0607      	lsls	r7, r0, #24
 8005bea:	f103 0104 	add.w	r1, r3, #4
 8005bee:	6029      	str	r1, [r5, #0]
 8005bf0:	d501      	bpl.n	8005bf6 <_printf_i+0xbe>
 8005bf2:	681e      	ldr	r6, [r3, #0]
 8005bf4:	e003      	b.n	8005bfe <_printf_i+0xc6>
 8005bf6:	0646      	lsls	r6, r0, #25
 8005bf8:	d5fb      	bpl.n	8005bf2 <_printf_i+0xba>
 8005bfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bfe:	2e00      	cmp	r6, #0
 8005c00:	da03      	bge.n	8005c0a <_printf_i+0xd2>
 8005c02:	232d      	movs	r3, #45	; 0x2d
 8005c04:	4276      	negs	r6, r6
 8005c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0a:	485a      	ldr	r0, [pc, #360]	; (8005d74 <_printf_i+0x23c>)
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	e012      	b.n	8005c36 <_printf_i+0xfe>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6029      	str	r1, [r5, #0]
 8005c18:	0605      	lsls	r5, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xe8>
 8005c1c:	681e      	ldr	r6, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0xee>
 8005c20:	0641      	lsls	r1, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xe4>
 8005c24:	881e      	ldrh	r6, [r3, #0]
 8005c26:	4853      	ldr	r0, [pc, #332]	; (8005d74 <_printf_i+0x23c>)
 8005c28:	2f6f      	cmp	r7, #111	; 0x6f
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2308      	moveq	r3, #8
 8005c2e:	230a      	movne	r3, #10
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c36:	6865      	ldr	r5, [r4, #4]
 8005c38:	60a5      	str	r5, [r4, #8]
 8005c3a:	2d00      	cmp	r5, #0
 8005c3c:	bfa2      	ittt	ge
 8005c3e:	6821      	ldrge	r1, [r4, #0]
 8005c40:	f021 0104 	bicge.w	r1, r1, #4
 8005c44:	6021      	strge	r1, [r4, #0]
 8005c46:	b90e      	cbnz	r6, 8005c4c <_printf_i+0x114>
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d04b      	beq.n	8005ce4 <_printf_i+0x1ac>
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c52:	fb03 6711 	mls	r7, r3, r1, r6
 8005c56:	5dc7      	ldrb	r7, [r0, r7]
 8005c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c5c:	4637      	mov	r7, r6
 8005c5e:	42bb      	cmp	r3, r7
 8005c60:	460e      	mov	r6, r1
 8005c62:	d9f4      	bls.n	8005c4e <_printf_i+0x116>
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d10b      	bne.n	8005c80 <_printf_i+0x148>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	07de      	lsls	r6, r3, #31
 8005c6c:	d508      	bpl.n	8005c80 <_printf_i+0x148>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	6861      	ldr	r1, [r4, #4]
 8005c72:	4299      	cmp	r1, r3
 8005c74:	bfde      	ittt	le
 8005c76:	2330      	movle	r3, #48	; 0x30
 8005c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c80:	1b52      	subs	r2, r2, r5
 8005c82:	6122      	str	r2, [r4, #16]
 8005c84:	f8cd a000 	str.w	sl, [sp]
 8005c88:	464b      	mov	r3, r9
 8005c8a:	aa03      	add	r2, sp, #12
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f7ff fee4 	bl	8005a5c <_printf_common>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d14a      	bne.n	8005d2e <_printf_i+0x1f6>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	b004      	add	sp, #16
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f043 0320 	orr.w	r3, r3, #32
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	4833      	ldr	r0, [pc, #204]	; (8005d78 <_printf_i+0x240>)
 8005cac:	2778      	movs	r7, #120	; 0x78
 8005cae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	6829      	ldr	r1, [r5, #0]
 8005cb6:	061f      	lsls	r7, r3, #24
 8005cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cbc:	d402      	bmi.n	8005cc4 <_printf_i+0x18c>
 8005cbe:	065f      	lsls	r7, r3, #25
 8005cc0:	bf48      	it	mi
 8005cc2:	b2b6      	uxthmi	r6, r6
 8005cc4:	07df      	lsls	r7, r3, #31
 8005cc6:	bf48      	it	mi
 8005cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ccc:	6029      	str	r1, [r5, #0]
 8005cce:	bf48      	it	mi
 8005cd0:	6023      	strmi	r3, [r4, #0]
 8005cd2:	b91e      	cbnz	r6, 8005cdc <_printf_i+0x1a4>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	f023 0320 	bic.w	r3, r3, #32
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	2310      	movs	r3, #16
 8005cde:	e7a7      	b.n	8005c30 <_printf_i+0xf8>
 8005ce0:	4824      	ldr	r0, [pc, #144]	; (8005d74 <_printf_i+0x23c>)
 8005ce2:	e7e4      	b.n	8005cae <_printf_i+0x176>
 8005ce4:	4615      	mov	r5, r2
 8005ce6:	e7bd      	b.n	8005c64 <_printf_i+0x12c>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	6826      	ldr	r6, [r4, #0]
 8005cec:	6961      	ldr	r1, [r4, #20]
 8005cee:	1d18      	adds	r0, r3, #4
 8005cf0:	6028      	str	r0, [r5, #0]
 8005cf2:	0635      	lsls	r5, r6, #24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	d501      	bpl.n	8005cfc <_printf_i+0x1c4>
 8005cf8:	6019      	str	r1, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <_printf_i+0x1ca>
 8005cfc:	0670      	lsls	r0, r6, #25
 8005cfe:	d5fb      	bpl.n	8005cf8 <_printf_i+0x1c0>
 8005d00:	8019      	strh	r1, [r3, #0]
 8005d02:	2300      	movs	r3, #0
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	4615      	mov	r5, r2
 8005d08:	e7bc      	b.n	8005c84 <_printf_i+0x14c>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	1d1a      	adds	r2, r3, #4
 8005d0e:	602a      	str	r2, [r5, #0]
 8005d10:	681d      	ldr	r5, [r3, #0]
 8005d12:	6862      	ldr	r2, [r4, #4]
 8005d14:	2100      	movs	r1, #0
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7fa fa6a 	bl	80001f0 <memchr>
 8005d1c:	b108      	cbz	r0, 8005d22 <_printf_i+0x1ea>
 8005d1e:	1b40      	subs	r0, r0, r5
 8005d20:	6060      	str	r0, [r4, #4]
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	2300      	movs	r3, #0
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	e7aa      	b.n	8005c84 <_printf_i+0x14c>
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	462a      	mov	r2, r5
 8005d32:	4649      	mov	r1, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	47d0      	blx	sl
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d0ad      	beq.n	8005c98 <_printf_i+0x160>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	079b      	lsls	r3, r3, #30
 8005d40:	d413      	bmi.n	8005d6a <_printf_i+0x232>
 8005d42:	68e0      	ldr	r0, [r4, #12]
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	4298      	cmp	r0, r3
 8005d48:	bfb8      	it	lt
 8005d4a:	4618      	movlt	r0, r3
 8005d4c:	e7a6      	b.n	8005c9c <_printf_i+0x164>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4632      	mov	r2, r6
 8005d52:	4649      	mov	r1, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	47d0      	blx	sl
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d09d      	beq.n	8005c98 <_printf_i+0x160>
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	9903      	ldr	r1, [sp, #12]
 8005d62:	1a5b      	subs	r3, r3, r1
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	dcf2      	bgt.n	8005d4e <_printf_i+0x216>
 8005d68:	e7eb      	b.n	8005d42 <_printf_i+0x20a>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	f104 0619 	add.w	r6, r4, #25
 8005d70:	e7f5      	b.n	8005d5e <_printf_i+0x226>
 8005d72:	bf00      	nop
 8005d74:	080060c5 	.word	0x080060c5
 8005d78:	080060d6 	.word	0x080060d6

08005d7c <__sflush_r>:
 8005d7c:	898a      	ldrh	r2, [r1, #12]
 8005d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	0710      	lsls	r0, r2, #28
 8005d86:	460c      	mov	r4, r1
 8005d88:	d458      	bmi.n	8005e3c <__sflush_r+0xc0>
 8005d8a:	684b      	ldr	r3, [r1, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc05      	bgt.n	8005d9c <__sflush_r+0x20>
 8005d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dc02      	bgt.n	8005d9c <__sflush_r+0x20>
 8005d96:	2000      	movs	r0, #0
 8005d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d9e:	2e00      	cmp	r6, #0
 8005da0:	d0f9      	beq.n	8005d96 <__sflush_r+0x1a>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005da8:	682f      	ldr	r7, [r5, #0]
 8005daa:	6a21      	ldr	r1, [r4, #32]
 8005dac:	602b      	str	r3, [r5, #0]
 8005dae:	d032      	beq.n	8005e16 <__sflush_r+0x9a>
 8005db0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	075a      	lsls	r2, r3, #29
 8005db6:	d505      	bpl.n	8005dc4 <__sflush_r+0x48>
 8005db8:	6863      	ldr	r3, [r4, #4]
 8005dba:	1ac0      	subs	r0, r0, r3
 8005dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dbe:	b10b      	cbz	r3, 8005dc4 <__sflush_r+0x48>
 8005dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dc2:	1ac0      	subs	r0, r0, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dca:	6a21      	ldr	r1, [r4, #32]
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b0      	blx	r6
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	d106      	bne.n	8005de4 <__sflush_r+0x68>
 8005dd6:	6829      	ldr	r1, [r5, #0]
 8005dd8:	291d      	cmp	r1, #29
 8005dda:	d82b      	bhi.n	8005e34 <__sflush_r+0xb8>
 8005ddc:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <__sflush_r+0x108>)
 8005dde:	410a      	asrs	r2, r1
 8005de0:	07d6      	lsls	r6, r2, #31
 8005de2:	d427      	bmi.n	8005e34 <__sflush_r+0xb8>
 8005de4:	2200      	movs	r2, #0
 8005de6:	6062      	str	r2, [r4, #4]
 8005de8:	04d9      	lsls	r1, r3, #19
 8005dea:	6922      	ldr	r2, [r4, #16]
 8005dec:	6022      	str	r2, [r4, #0]
 8005dee:	d504      	bpl.n	8005dfa <__sflush_r+0x7e>
 8005df0:	1c42      	adds	r2, r0, #1
 8005df2:	d101      	bne.n	8005df8 <__sflush_r+0x7c>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b903      	cbnz	r3, 8005dfa <__sflush_r+0x7e>
 8005df8:	6560      	str	r0, [r4, #84]	; 0x54
 8005dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfc:	602f      	str	r7, [r5, #0]
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	d0c9      	beq.n	8005d96 <__sflush_r+0x1a>
 8005e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e06:	4299      	cmp	r1, r3
 8005e08:	d002      	beq.n	8005e10 <__sflush_r+0x94>
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7ff fbea 	bl	80055e4 <_free_r>
 8005e10:	2000      	movs	r0, #0
 8005e12:	6360      	str	r0, [r4, #52]	; 0x34
 8005e14:	e7c0      	b.n	8005d98 <__sflush_r+0x1c>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b0      	blx	r6
 8005e1c:	1c41      	adds	r1, r0, #1
 8005e1e:	d1c8      	bne.n	8005db2 <__sflush_r+0x36>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0c5      	beq.n	8005db2 <__sflush_r+0x36>
 8005e26:	2b1d      	cmp	r3, #29
 8005e28:	d001      	beq.n	8005e2e <__sflush_r+0xb2>
 8005e2a:	2b16      	cmp	r3, #22
 8005e2c:	d101      	bne.n	8005e32 <__sflush_r+0xb6>
 8005e2e:	602f      	str	r7, [r5, #0]
 8005e30:	e7b1      	b.n	8005d96 <__sflush_r+0x1a>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	e7ad      	b.n	8005d98 <__sflush_r+0x1c>
 8005e3c:	690f      	ldr	r7, [r1, #16]
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	d0a9      	beq.n	8005d96 <__sflush_r+0x1a>
 8005e42:	0793      	lsls	r3, r2, #30
 8005e44:	680e      	ldr	r6, [r1, #0]
 8005e46:	bf08      	it	eq
 8005e48:	694b      	ldreq	r3, [r1, #20]
 8005e4a:	600f      	str	r7, [r1, #0]
 8005e4c:	bf18      	it	ne
 8005e4e:	2300      	movne	r3, #0
 8005e50:	eba6 0807 	sub.w	r8, r6, r7
 8005e54:	608b      	str	r3, [r1, #8]
 8005e56:	f1b8 0f00 	cmp.w	r8, #0
 8005e5a:	dd9c      	ble.n	8005d96 <__sflush_r+0x1a>
 8005e5c:	6a21      	ldr	r1, [r4, #32]
 8005e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e60:	4643      	mov	r3, r8
 8005e62:	463a      	mov	r2, r7
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b0      	blx	r6
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dc06      	bgt.n	8005e7a <__sflush_r+0xfe>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e78e      	b.n	8005d98 <__sflush_r+0x1c>
 8005e7a:	4407      	add	r7, r0
 8005e7c:	eba8 0800 	sub.w	r8, r8, r0
 8005e80:	e7e9      	b.n	8005e56 <__sflush_r+0xda>
 8005e82:	bf00      	nop
 8005e84:	dfbffffe 	.word	0xdfbffffe

08005e88 <_fflush_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	690b      	ldr	r3, [r1, #16]
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	b913      	cbnz	r3, 8005e98 <_fflush_r+0x10>
 8005e92:	2500      	movs	r5, #0
 8005e94:	4628      	mov	r0, r5
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	b118      	cbz	r0, 8005ea2 <_fflush_r+0x1a>
 8005e9a:	6a03      	ldr	r3, [r0, #32]
 8005e9c:	b90b      	cbnz	r3, 8005ea2 <_fflush_r+0x1a>
 8005e9e:	f7ff f9a9 	bl	80051f4 <__sinit>
 8005ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f3      	beq.n	8005e92 <_fflush_r+0xa>
 8005eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eac:	07d0      	lsls	r0, r2, #31
 8005eae:	d404      	bmi.n	8005eba <_fflush_r+0x32>
 8005eb0:	0599      	lsls	r1, r3, #22
 8005eb2:	d402      	bmi.n	8005eba <_fflush_r+0x32>
 8005eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb6:	f7ff fb92 	bl	80055de <__retarget_lock_acquire_recursive>
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	f7ff ff5d 	bl	8005d7c <__sflush_r>
 8005ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec4:	07da      	lsls	r2, r3, #31
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	d4e4      	bmi.n	8005e94 <_fflush_r+0xc>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	059b      	lsls	r3, r3, #22
 8005ece:	d4e1      	bmi.n	8005e94 <_fflush_r+0xc>
 8005ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed2:	f7ff fb85 	bl	80055e0 <__retarget_lock_release_recursive>
 8005ed6:	e7dd      	b.n	8005e94 <_fflush_r+0xc>

08005ed8 <__swhatbuf_r>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	460c      	mov	r4, r1
 8005edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	b096      	sub	sp, #88	; 0x58
 8005ee4:	4615      	mov	r5, r2
 8005ee6:	461e      	mov	r6, r3
 8005ee8:	da0d      	bge.n	8005f06 <__swhatbuf_r+0x2e>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	bf0c      	ite	eq
 8005ef6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005efa:	2340      	movne	r3, #64	; 0x40
 8005efc:	2000      	movs	r0, #0
 8005efe:	6031      	str	r1, [r6, #0]
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	b016      	add	sp, #88	; 0x58
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	466a      	mov	r2, sp
 8005f08:	f000 f848 	bl	8005f9c <_fstat_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	dbec      	blt.n	8005eea <__swhatbuf_r+0x12>
 8005f10:	9901      	ldr	r1, [sp, #4]
 8005f12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f1a:	4259      	negs	r1, r3
 8005f1c:	4159      	adcs	r1, r3
 8005f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f22:	e7eb      	b.n	8005efc <__swhatbuf_r+0x24>

08005f24 <__smakebuf_r>:
 8005f24:	898b      	ldrh	r3, [r1, #12]
 8005f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f28:	079d      	lsls	r5, r3, #30
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	d507      	bpl.n	8005f40 <__smakebuf_r+0x1c>
 8005f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	2301      	movs	r3, #1
 8005f3a:	6163      	str	r3, [r4, #20]
 8005f3c:	b002      	add	sp, #8
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	ab01      	add	r3, sp, #4
 8005f42:	466a      	mov	r2, sp
 8005f44:	f7ff ffc8 	bl	8005ed8 <__swhatbuf_r>
 8005f48:	9900      	ldr	r1, [sp, #0]
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7ff fbb5 	bl	80056bc <_malloc_r>
 8005f52:	b948      	cbnz	r0, 8005f68 <__smakebuf_r+0x44>
 8005f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d4ef      	bmi.n	8005f3c <__smakebuf_r+0x18>
 8005f5c:	f023 0303 	bic.w	r3, r3, #3
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	e7e3      	b.n	8005f30 <__smakebuf_r+0xc>
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	6020      	str	r0, [r4, #0]
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	6163      	str	r3, [r4, #20]
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	6120      	str	r0, [r4, #16]
 8005f7a:	b15b      	cbz	r3, 8005f94 <__smakebuf_r+0x70>
 8005f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 f81d 	bl	8005fc0 <_isatty_r>
 8005f86:	b128      	cbz	r0, 8005f94 <__smakebuf_r+0x70>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	431d      	orrs	r5, r3
 8005f98:	81a5      	strh	r5, [r4, #12]
 8005f9a:	e7cf      	b.n	8005f3c <__smakebuf_r+0x18>

08005f9c <_fstat_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	; (8005fbc <_fstat_r+0x20>)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	f7fa ffbd 	bl	8000f28 <_fstat>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d102      	bne.n	8005fb8 <_fstat_r+0x1c>
 8005fb2:	682b      	ldr	r3, [r5, #0]
 8005fb4:	b103      	cbz	r3, 8005fb8 <_fstat_r+0x1c>
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
 8005fba:	bf00      	nop
 8005fbc:	20004950 	.word	0x20004950

08005fc0 <_isatty_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_isatty_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fa ffbc 	bl	8000f48 <_isatty>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_isatty_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_isatty_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	20004950 	.word	0x20004950

08005fe0 <_sbrk_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	; (8005ffc <_sbrk_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fa ffc4 	bl	8000f78 <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_sbrk_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_sbrk_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	20004950 	.word	0x20004950

08006000 <_init>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr

0800600c <_fini>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr
