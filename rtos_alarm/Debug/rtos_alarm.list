
rtos_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007254  08007254  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004910  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000497c  2000497c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017607  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003570  00000000  00000000  000376e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fa0  00000000  00000000  0003c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002780a  00000000  00000000  0003d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000183f4  00000000  00000000  00064832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7172  00000000  00000000  0007cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dec  00000000  00000000  00163d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00169b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007088 	.word	0x08007088

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007088 	.word	0x08007088

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000dc 	.word	0x200000dc

080005d0 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b098      	sub	sp, #96	; 0x60
 80005d4:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <I2C_Scan+0xc0>)
 80005d8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e6:	6020      	str	r0, [r4, #0]
 80005e8:	3404      	adds	r4, #4
 80005ea:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdfd 	bl	80001f0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <I2C_Scan+0xc4>)
 8000604:	f003 fa3f 	bl	8003a86 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800060e:	e02f      	b.n	8000670 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000610:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b299      	uxth	r1, r3
 8000618:	230a      	movs	r3, #10
 800061a:	2201      	movs	r2, #1
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <I2C_Scan+0xc8>)
 800061e:	f002 f87d 	bl	800271c <HAL_I2C_IsDeviceReady>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8000628:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800062c:	2b00      	cmp	r3, #0
 800062e:	d113      	bne.n	8000658 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000630:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000634:	1d38      	adds	r0, r7, #4
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <I2C_Scan+0xcc>)
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	f005 fcd7 	bl	8005fec <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdd5 	bl	80001f0 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	1d39      	adds	r1, r7, #4
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <I2C_Scan+0xc4>)
 8000652:	f003 fa18 	bl	8003a86 <HAL_UART_Transmit>
 8000656:	e006      	b.n	8000666 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	2201      	movs	r2, #1
 800065e:	4910      	ldr	r1, [pc, #64]	; (80006a0 <I2C_Scan+0xd0>)
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <I2C_Scan+0xc4>)
 8000662:	f003 fa10 	bl	8003a86 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000666:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800066a:	3301      	adds	r3, #1
 800066c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000670:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000674:	2b7f      	cmp	r3, #127	; 0x7f
 8000676:	d9cb      	bls.n	8000610 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	2202      	movs	r2, #2
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <I2C_Scan+0xd4>)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <I2C_Scan+0xc4>)
 8000682:	f003 fa00 	bl	8003a86 <HAL_UART_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3760      	adds	r7, #96	; 0x60
 800068a:	46bd      	mov	sp, r7
 800068c:	bdb0      	pop	{r4, r5, r7, pc}
 800068e:	bf00      	nop
 8000690:	080070b0 	.word	0x080070b0
 8000694:	20000558 	.word	0x20000558
 8000698:	20000504 	.word	0x20000504
 800069c:	080070a0 	.word	0x080070a0
 80006a0:	080070a8 	.word	0x080070a8
 80006a4:	080070ac 	.word	0x080070ac

080006a8 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	460b      	mov	r3, r1
 80006b4:	71bb      	strb	r3, [r7, #6]
 80006b6:	4613      	mov	r3, r2
 80006b8:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	b299      	uxth	r1, r3
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2201      	movs	r2, #1
 80006c4:	4822      	ldr	r0, [pc, #136]	; (8000750 <LCD_SendInternal+0xa8>)
 80006c6:	f002 f829 	bl	800271c <HAL_I2C_IsDeviceReady>
 80006ca:	4603      	mov	r3, r0
 80006cc:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d000      	beq.n	80006d6 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006d4:	e7f1      	b.n	80006ba <LCD_SendInternal+0x12>
            break;
 80006d6:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006e6:	7bba      	ldrb	r2, [r7, #14]
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f043 030c 	orr.w	r3, r3, #12
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006f6:	7bba      	ldrb	r2, [r7, #14]
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	b2db      	uxtb	r3, r3
 8000704:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000706:	7b7a      	ldrb	r2, [r7, #13]
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	4313      	orrs	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f043 030c 	orr.w	r3, r3, #12
 8000712:	b2db      	uxtb	r3, r3
 8000714:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000716:	7b7a      	ldrb	r2, [r7, #13]
 8000718:	797b      	ldrb	r3, [r7, #5]
 800071a:	4313      	orrs	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	b2db      	uxtb	r3, r3
 8000724:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	b299      	uxth	r1, r3
 800072a:	f107 0208 	add.w	r2, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2304      	movs	r3, #4
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <LCD_SendInternal+0xa8>)
 8000738:	f001 fef2 	bl	8002520 <HAL_I2C_Master_Transmit>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 ff3b 	bl	80015bc <HAL_Delay>
    return res;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000504 	.word	0x20000504

08000754 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000764:	79b9      	ldrb	r1, [r7, #6]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2200      	movs	r2, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff9c 	bl	80006a8 <LCD_SendInternal>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000788:	79b9      	ldrb	r1, [r7, #6]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2201      	movs	r2, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff8a 	bl	80006a8 <LCD_SendInternal>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2130      	movs	r1, #48	; 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffd2 	bl	8000754 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffcd 	bl	8000754 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	210c      	movs	r1, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffc8 	bl	8000754 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffc3 	bl	8000754 <LCD_SendCommand>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007e2:	e009      	b.n	80007f8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffc3 	bl	8000778 <LCD_SendData>
        str++;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f1      	bne.n	80007e4 <LCD_SendString+0xe>
    }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <lcd_init>:

void lcd_init() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    I2C_Scan();
 8000810:	f7ff fede 	bl	80005d0 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 8000814:	204e      	movs	r0, #78	; 0x4e
 8000816:	f7ff ffc1 	bl	800079c <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	204e      	movs	r0, #78	; 0x4e
 800081e:	f7ff ff99 	bl	8000754 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
 8000822:	4907      	ldr	r1, [pc, #28]	; (8000840 <lcd_init+0x34>)
 8000824:	204e      	movs	r0, #78	; 0x4e
 8000826:	f7ff ffd6 	bl	80007d6 <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 800082a:	21c0      	movs	r1, #192	; 0xc0
 800082c:	204e      	movs	r0, #78	; 0x4e
 800082e:	f7ff ff91 	bl	8000754 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
 8000832:	4904      	ldr	r1, [pc, #16]	; (8000844 <lcd_init+0x38>)
 8000834:	204e      	movs	r0, #78	; 0x4e
 8000836:	f7ff ffce 	bl	80007d6 <LCD_SendString>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	080070c8 	.word	0x080070c8
 8000844:	080070d8 	.word	0x080070d8

08000848 <lcd_test1>:

void lcd_test1() {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    I2C_Scan();
 800084c:	f7ff fec0 	bl	80005d0 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 8000850:	204e      	movs	r0, #78	; 0x4e
 8000852:	f7ff ffa3 	bl	800079c <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	204e      	movs	r0, #78	; 0x4e
 800085a:	f7ff ff7b 	bl	8000754 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "   This is   ");
 800085e:	4907      	ldr	r1, [pc, #28]	; (800087c <lcd_test1+0x34>)
 8000860:	204e      	movs	r0, #78	; 0x4e
 8000862:	f7ff ffb8 	bl	80007d6 <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000866:	21c0      	movs	r1, #192	; 0xc0
 8000868:	204e      	movs	r0, #78	; 0x4e
 800086a:	f7ff ff73 	bl	8000754 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  Task 11111 ");
 800086e:	4904      	ldr	r1, [pc, #16]	; (8000880 <lcd_test1+0x38>)
 8000870:	204e      	movs	r0, #78	; 0x4e
 8000872:	f7ff ffb0 	bl	80007d6 <LCD_SendString>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	080070e8 	.word	0x080070e8
 8000880:	080070f8 	.word	0x080070f8

08000884 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b0a      	cmp	r3, #10
 8000890:	d106      	bne.n	80008a0 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart3, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2201      	movs	r2, #1
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__io_putchar+0x34>)
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <__io_putchar+0x38>)
 800089c:	f003 f8f3 	bl	8003a86 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80008a0:	1d39      	adds	r1, r7, #4
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	2201      	movs	r2, #1
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <__io_putchar+0x38>)
 80008aa:	f003 f8ec 	bl	8003a86 <HAL_UART_Transmit>
 return ch;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08007118 	.word	0x08007118
 80008bc:	20000558 	.word	0x20000558

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fe07 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f82b 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 f985 	bl	8000bdc <MX_GPIO_Init>
  MX_ETH_Init();
 80008d2:	f000 f89d 	bl	8000a10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 f929 	bl	8000b2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008da:	f000 f951 	bl	8000b80 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80008de:	f000 f8e5 	bl	8000aac <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008e2:	f000 f889 	bl	80009f8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Test: Main Start\n");
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <main+0x58>)
 80008e8:	f005 fb78 	bl	8005fdc <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <main+0x5c>)
 80008ee:	1d3c      	adds	r4, r7, #4
 80008f0:	461d      	mov	r5, r3
 80008f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 ff55 	bl	80047b2 <osThreadCreate>
 8000908:	4603      	mov	r3, r0
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <main+0x60>)
 800090c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  USER_threads();
 800090e:	f000 fcdd 	bl	80012cc <USER_threads>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000912:	f003 ff47 	bl	80047a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x56>
 8000918:	0800711c 	.word	0x0800711c
 800091c:	0800713c 	.word	0x0800713c
 8000920:	20000aa8 	.word	0x20000aa8

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f005 fc66 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <SystemClock_Config+0xcc>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <SystemClock_Config+0xd0>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000998:	23a8      	movs	r3, #168	; 0xa8
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fb87 	bl	80030bc <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b4:	f000 f9c8 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2105      	movs	r1, #5
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fde8 	bl	80035ac <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009e2:	f000 f9b1 	bl	8000d48 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f000 feda 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f000 fef3 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a40:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a4a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <MX_ETH_Init+0x90>)
 8000a50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a54:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a62:	f000 fee1 	bl	8001828 <HAL_ETH_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 f96c 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a70:	2238      	movs	r2, #56	; 0x38
 8000a72:	2100      	movs	r1, #0
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a76:	f005 fbc5 	bl	8006204 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a7c:	2221      	movs	r2, #33	; 0x21
 8000a7e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a82:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a86:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000454 	.word	0x20000454
 8000a98:	40028000 	.word	0x40028000
 8000a9c:	20000aac 	.word	0x20000aac
 8000aa0:	200003b4 	.word	0x200003b4
 8000aa4:	20000314 	.word	0x20000314
 8000aa8:	200002dc 	.word	0x200002dc

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aea:	f001 fbd5 	bl	8002298 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 f928 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000afc:	f002 f945 	bl	8002d8a <HAL_I2CEx_ConfigAnalogFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b06:	f000 f91f 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000b0e:	f002 f978 	bl	8002e02 <HAL_I2CEx_ConfigDigitalFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 f916 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000504 	.word	0x20000504
 8000b24:	40005400 	.word	0x40005400
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART3_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f002 ff42 	bl	80039ec <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f8eb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000558 	.word	0x20000558
 8000b7c:	40004800 	.word	0x40004800

08000b80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	f002 f95c 	bl	8002e80 <HAL_PCD_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f8bb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000059c 	.word	0x2000059c

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b49      	ldr	r3, [pc, #292]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ca0:	4822      	ldr	r0, [pc, #136]	; (8000d2c <MX_GPIO_Init+0x150>)
 8000ca2:	f001 faad 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	4821      	ldr	r0, [pc, #132]	; (8000d30 <MX_GPIO_Init+0x154>)
 8000cac:	f001 faa8 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481b      	ldr	r0, [pc, #108]	; (8000d34 <MX_GPIO_Init+0x158>)
 8000cc8:	f001 f8d6 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ccc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_GPIO_Init+0x150>)
 8000ce6:	f001 f8c7 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cea:	2340      	movs	r3, #64	; 0x40
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <MX_GPIO_Init+0x154>)
 8000d02:	f001 f8b9 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_GPIO_Init+0x154>)
 8000d1a:	f001 f8ad 	bl	8001e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40021800 	.word	0x40021800
 8000d34:	40020800 	.word	0x40020800

08000d38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f003 fd82 	bl	800484a <osDelay>
 8000d46:	e7fb      	b.n	8000d40 <StartDefaultTask+0x8>

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_MspInit+0x54>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_MspInit+0x54>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_MspInit+0x54>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_MspInit+0x54>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	210f      	movs	r1, #15
 8000d96:	f06f 0001 	mvn.w	r0, #1
 8000d9a:	f000 fd0e 	bl	80017ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a55      	ldr	r2, [pc, #340]	; (8000f20 <HAL_ETH_MspInit+0x174>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	f040 80a4 	bne.w	8000f18 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b50      	ldr	r3, [pc, #320]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a4b      	ldr	r2, [pc, #300]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_ETH_MspInit+0x178>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e94:	2332      	movs	r3, #50	; 0x32
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <HAL_ETH_MspInit+0x17c>)
 8000eb0:	f000 ffe2 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eb4:	2386      	movs	r3, #134	; 0x86
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <HAL_ETH_MspInit+0x180>)
 8000ed0:	f000 ffd2 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_ETH_MspInit+0x184>)
 8000ef2:	f000 ffc1 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ef6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_ETH_MspInit+0x188>)
 8000f14:	f000 ffb0 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40028000 	.word	0x40028000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40021800 	.word	0x40021800

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_I2C_MspInit+0x84>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12c      	bne.n	8000fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7c:	2312      	movs	r3, #18
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_I2C_MspInit+0x8c>)
 8000f94:	f000 ff70 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020400 	.word	0x40020400

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12c      	bne.n	8001044 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x8c>)
 8001040:	f000 ff1a 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004800 	.word	0x40004800
 8001050:	40023800 	.word	0x40023800
 8001054:	40020c00 	.word	0x40020c00

08001058 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d13f      	bne.n	80010fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_PCD_MspInit+0xac>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a20      	ldr	r2, [pc, #128]	; (8001104 <HAL_PCD_MspInit+0xac>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_PCD_MspInit+0xac>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001096:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a8:	230a      	movs	r3, #10
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010b4:	f000 fee0 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010ce:	f000 fed3 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_PCD_MspInit+0xac>)
 80010d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_PCD_MspInit+0xac>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6353      	str	r3, [r2, #52]	; 0x34
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_PCD_MspInit+0xac>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_PCD_MspInit+0xac>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_PCD_MspInit+0xac>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 fa1e 	bl	800157c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001140:	f004 f9a8 	bl	8005494 <xTaskGetSchedulerState>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800114a:	f004 fbe5 	bl	8005918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001156:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800115a:	f001 f885 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}

08001162 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e00a      	b.n	800118a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001174:	f3af 8000 	nop.w
 8001178:	4601      	mov	r1, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	60ba      	str	r2, [r7, #8]
 8001180:	b2ca      	uxtb	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbf0      	blt.n	8001174 <_read+0x12>
  }

  return len;
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e009      	b.n	80011c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	60ba      	str	r2, [r7, #8]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb64 	bl	8000884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf1      	blt.n	80011ae <_write+0x12>
  }
  return len;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_close>:

int _close(int file)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fc:	605a      	str	r2, [r3, #4]
  return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_isatty>:

int _isatty(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001222:	b480      	push	{r7}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f005 f818 	bl	80062a0 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20030000 	.word	0x20030000
 800129c:	00000400 	.word	0x00000400
 80012a0:	20000ab4 	.word	0x20000ab4
 80012a4:	20004980 	.word	0x20004980

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <USER_threads>:
void selecClockMode(void);


/*Task functions*/
void USER_threads(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	printf("User threads start!!\n");
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <USER_threads+0x28>)
 80012d4:	f004 fe82 	bl	8005fdc <puts>
	/*lcd_init();
	vTaskDelay(pdMS_TO_TICKS(2000)); // why this doesnt work?*/
	xTaskCreate((TaskFunction_t)TaskMain, "TaskMain", 256, NULL, TASK_MAIN_PRIO, &xHandleMain);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <USER_threads+0x2c>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	2314      	movs	r3, #20
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e6:	4905      	ldr	r1, [pc, #20]	; (80012fc <USER_threads+0x30>)
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <USER_threads+0x34>)
 80012ea:	f003 fbd3 	bl	8004a94 <xTaskCreate>
	//xTaskCreate((TaskFunction_t)Task1, "Task1", 256, NULL, TASK_1_PRIO, &xHandle1);

}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08007158 	.word	0x08007158
 80012f8:	20000ad0 	.word	0x20000ad0
 80012fc:	08007170 	.word	0x08007170
 8001300:	08001305 	.word	0x08001305

08001304 <TaskMain>:

void TaskMain(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
	const char* taskMainName = "TaskMain";
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <TaskMain+0x40>)
 800130c:	607b      	str	r3, [r7, #4]

	lcd_init();
 800130e:	f7ff fa7d 	bl	800080c <lcd_init>
	vTaskDelay(pdMS_TO_TICKS(2000));
 8001312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001316:	f003 fcf3 	bl	8004d00 <vTaskDelay>

	xTaskCreate((TaskFunction_t)Task1, "Task1", 256, NULL, TASK_1_PRIO, &xHandle1);
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <TaskMain+0x44>)
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	230a      	movs	r3, #10
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001328:	4908      	ldr	r1, [pc, #32]	; (800134c <TaskMain+0x48>)
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <TaskMain+0x4c>)
 800132c:	f003 fbb2 	bl	8004a94 <xTaskCreate>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	vTaskSuspend(xHandleMain);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <TaskMain+0x50>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fd17 	bl	8004d68 <vTaskSuspend>
	//vTaskResume(xHandleMain);

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	08007170 	.word	0x08007170
 8001348:	20000ad4 	.word	0x20000ad4
 800134c:	0800717c 	.word	0x0800717c
 8001350:	08001359 	.word	0x08001359
 8001354:	20000ad0 	.word	0x20000ad0

08001358 <Task1>:

void Task1(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	const char* task1 = "Task1";
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <Task1+0x20>)
 8001360:	607b      	str	r3, [r7, #4]

	lcd_test1();
 8001362:	f7ff fa71 	bl	8000848 <lcd_test1>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f003 fcc9 	bl	8004d00 <vTaskDelay>





}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800717c 	.word	0x0800717c

0800137c <HAL_GPIO_EXTI_Callback>:
			default:
				break;
			}
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_13) {
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800138c:	d162      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0xd8>
			HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001392:	4832      	ldr	r0, [pc, #200]	; (800145c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001394:	f000 ff4d 	bl	8002232 <HAL_GPIO_TogglePin>

			current_time = xTaskGetTickCount();
 8001398:	f003 fe82 	bl	80050a0 <xTaskGetTickCount>
 800139c:	4603      	mov	r3, r0
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013a0:	6013      	str	r3, [r2, #0]
			interval = current_time - last_time;
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 80013ae:	6013      	str	r3, [r2, #0]
			last_time = current_time;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013b6:	6013      	str	r3, [r2, #0]

			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 80013b8:	2108      	movs	r1, #8
 80013ba:	482c      	ldr	r0, [pc, #176]	; (800146c <HAL_GPIO_EXTI_Callback+0xf0>)
 80013bc:	f000 ff08 	bl	80021d0 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d146      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0xd8>
				if (interval < 130) {
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b81      	cmp	r3, #129	; 0x81
 80013cc:	d805      	bhi.n	80013da <HAL_GPIO_EXTI_Callback+0x5e>
					btn_cnt += 3;
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3303      	adds	r3, #3
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02a      	b.n	8001430 <HAL_GPIO_EXTI_Callback+0xb4>
				} else if (interval >= 130 && interval < 200) {
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b81      	cmp	r3, #129	; 0x81
 80013e0:	d910      	bls.n	8001404 <HAL_GPIO_EXTI_Callback+0x88>
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2bc7      	cmp	r3, #199	; 0xc7
 80013e8:	d80c      	bhi.n	8001404 <HAL_GPIO_EXTI_Callback+0x88>
					printf("One click!!  interval = %u\r\n",
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4820      	ldr	r0, [pc, #128]	; (8001474 <HAL_GPIO_EXTI_Callback+0xf8>)
 80013f2:	f004 fd8d 	bl	8005f10 <iprintf>
							(unsigned int) interval);
					btn_cnt = 0;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
					current_state.mode = TIME_SETTING;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_GPIO_EXTI_Callback+0xfc>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e015      	b.n	8001430 <HAL_GPIO_EXTI_Callback+0xb4>
				} else if (interval >= 300 && interval <= 1000) {
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800140c:	d310      	bcc.n	8001430 <HAL_GPIO_EXTI_Callback+0xb4>
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001416:	d80b      	bhi.n	8001430 <HAL_GPIO_EXTI_Callback+0xb4>
					printf("Long click!!  interval = %u\r\n",
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4817      	ldr	r0, [pc, #92]	; (800147c <HAL_GPIO_EXTI_Callback+0x100>)
 8001420:	f004 fd76 	bl	8005f10 <iprintf>
							(unsigned int) interval);
					btn_cnt = 0;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
					current_state.mode = ALARM_TIME_SETTING;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_GPIO_EXTI_Callback+0xfc>)
 800142c:	2202      	movs	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]
				}
				if (btn_cnt >= 5) {
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	dd0d      	ble.n	8001454 <HAL_GPIO_EXTI_Callback+0xd8>
					printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_GPIO_EXTI_Callback+0xec>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <HAL_GPIO_EXTI_Callback+0x104>)
 8001444:	f004 fd64 	bl	8005f10 <iprintf>
							(unsigned int) interval, btn_cnt);
					btn_cnt = 0;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_GPIO_EXTI_Callback+0xf4>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
					current_state.mode = MUSIC_SELECT;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001450:	2203      	movs	r2, #3
 8001452:	701a      	strb	r2, [r3, #0]
				}
			}
		}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020400 	.word	0x40020400
 8001460:	20000ac0 	.word	0x20000ac0
 8001464:	20000ac4 	.word	0x20000ac4
 8001468:	20000ac8 	.word	0x20000ac8
 800146c:	40021400 	.word	0x40021400
 8001470:	20000acc 	.word	0x20000acc
 8001474:	08007184 	.word	0x08007184
 8001478:	20000ab8 	.word	0x20000ab8
 800147c:	080071a4 	.word	0x080071a4
 8001480:	080071c4 	.word	0x080071c4

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a0:	4c0b      	ldr	r4, [pc, #44]	; (80014d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ae:	f7ff fefb 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 fefb 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fa03 	bl	80008c0 <main>
  bx  lr    
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014c8:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 80014cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014d0:	2000497c 	.word	0x2000497c

080014d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_Init+0x40>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_Init+0x40>)
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x40>)
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f94f 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fc22 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f967 	bl	800180e <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f92f 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	20000008 	.word	0x20000008
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000ad8 	.word	0x20000ad8

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000ad8 	.word	0x20000ad8

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06c      	b.n	8001914 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001840:	2b00      	cmp	r3, #0
 8001842:	d106      	bne.n	8001852 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2223      	movs	r2, #35	; 0x23
 8001848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff faad 	bl	8000dac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_ETH_Init+0xf4>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_ETH_Init+0xf4>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_ETH_Init+0xf4>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_ETH_Init+0xf8>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <HAL_ETH_Init+0xf8>)
 8001874:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001878:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_ETH_Init+0xf8>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4927      	ldr	r1, [pc, #156]	; (8001920 <HAL_ETH_Init+0xf8>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_ETH_Init+0xf8>)
 800188a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff fe7e 	bl	80015a4 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018aa:	e011      	b.n	80018d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018ac:	f7ff fe7a 	bl	80015a4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018ba:	d909      	bls.n	80018d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	22e0      	movs	r2, #224	; 0xe0
 80018c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e021      	b.n	8001914 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e4      	bne.n	80018ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f958 	bl	8001b98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f9ff 	bl	8001cec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa55 	bl	8001d9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f9bd 	bl	8001c7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2210      	movs	r2, #16
 800190e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800

08001924 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <ETH_SetMACConfig+0x15c>)
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	7c1b      	ldrb	r3, [r3, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <ETH_SetMACConfig+0x28>
 8001946:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800194a:	e000      	b.n	800194e <ETH_SetMACConfig+0x2a>
 800194c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	7c5b      	ldrb	r3, [r3, #17]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <ETH_SetMACConfig+0x38>
 8001956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800195a:	e000      	b.n	800195e <ETH_SetMACConfig+0x3a>
 800195c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800195e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001964:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7fdb      	ldrb	r3, [r3, #31]
 800196a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800196c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	7f92      	ldrb	r2, [r2, #30]
 8001978:	2a00      	cmp	r2, #0
 800197a:	d102      	bne.n	8001982 <ETH_SetMACConfig+0x5e>
 800197c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001980:	e000      	b.n	8001984 <ETH_SetMACConfig+0x60>
 8001982:	2200      	movs	r2, #0
                        macconf->Speed |
 8001984:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	7f1b      	ldrb	r3, [r3, #28]
 800198a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800198c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001992:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800199a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d102      	bne.n	80019ac <ETH_SetMACConfig+0x88>
 80019a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019aa:	e000      	b.n	80019ae <ETH_SetMACConfig+0x8a>
 80019ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	7bdb      	ldrb	r3, [r3, #15]
 80019b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019c6:	4313      	orrs	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fdec 	bl	80015bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d101      	bne.n	8001a12 <ETH_SetMACConfig+0xee>
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	e000      	b.n	8001a14 <ETH_SetMACConfig+0xf0>
 8001a12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a22:	2a01      	cmp	r2, #1
 8001a24:	d101      	bne.n	8001a2a <ETH_SetMACConfig+0x106>
 8001a26:	2208      	movs	r2, #8
 8001a28:	e000      	b.n	8001a2c <ETH_SetMACConfig+0x108>
 8001a2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a34:	2a01      	cmp	r2, #1
 8001a36:	d101      	bne.n	8001a3c <ETH_SetMACConfig+0x118>
 8001a38:	2204      	movs	r2, #4
 8001a3a:	e000      	b.n	8001a3e <ETH_SetMACConfig+0x11a>
 8001a3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a46:	2a01      	cmp	r2, #1
 8001a48:	d101      	bne.n	8001a4e <ETH_SetMACConfig+0x12a>
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	e000      	b.n	8001a50 <ETH_SetMACConfig+0x12c>
 8001a4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff fda7 	bl	80015bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	ff20810f 	.word	0xff20810f

08001a84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <ETH_SetDMAConfig+0x110>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <ETH_SetDMAConfig+0x2c>
 8001aaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aae:	e000      	b.n	8001ab2 <ETH_SetDMAConfig+0x2e>
 8001ab0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7b5b      	ldrb	r3, [r3, #13]
 8001ab6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ab8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	7f52      	ldrb	r2, [r2, #29]
 8001abe:	2a00      	cmp	r2, #0
 8001ac0:	d102      	bne.n	8001ac8 <ETH_SetDMAConfig+0x44>
 8001ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac6:	e000      	b.n	8001aca <ETH_SetDMAConfig+0x46>
 8001ac8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7b9b      	ldrb	r3, [r3, #14]
 8001ad0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ad2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ad8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7f1b      	ldrb	r3, [r3, #28]
 8001ade:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ae0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7f9b      	ldrb	r3, [r3, #30]
 8001ae6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ae8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001aee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fd4e 	bl	80015bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	791b      	ldrb	r3, [r3, #4]
 8001b32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fd1f 	bl	80015bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f8de3f23 	.word	0xf8de3f23

08001b98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a6      	sub	sp, #152	; 0x98
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe86 	bl	8001924 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff08 	bl	8001a84 <ETH_SetDMAConfig>
}
 8001c74:	bf00      	nop
 8001c76:	3798      	adds	r7, #152	; 0x98
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3305      	adds	r3, #5
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	3204      	adds	r2, #4
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <ETH_MACAddressConfig+0x68>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3303      	adds	r3, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	061a      	lsls	r2, r3, #24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <ETH_MACAddressConfig+0x6c>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40028040 	.word	0x40028040
 8001ce8:	40028044 	.word	0x40028044

08001cec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e03e      	b.n	8001d78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68d9      	ldr	r1, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	3206      	adds	r2, #6
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d80c      	bhi.n	8001d5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	461a      	mov	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e004      	b.n	8001d66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d9bd      	bls.n	8001cfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	611a      	str	r2, [r3, #16]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e046      	b.n	8001e3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6919      	ldr	r1, [r3, #16]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001de8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001df0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	3212      	adds	r2, #18
 8001e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d80c      	bhi.n	8001e2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6919      	ldr	r1, [r3, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	e004      	b.n	8001e34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d9b5      	bls.n	8001dac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e177      	b.n	8002184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8166 	bne.w	800217e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80c0 	beq.w	800217e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_GPIO_Init+0x324>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_GPIO_Init+0x324>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_GPIO_Init+0x324>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <HAL_GPIO_Init+0x328>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x32c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d037      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_GPIO_Init+0x330>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_GPIO_Init+0x23a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a56      	ldr	r2, [pc, #344]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <HAL_GPIO_Init+0x236>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <HAL_GPIO_Init+0x338>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d025      	beq.n	80020aa <HAL_GPIO_Init+0x232>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a54      	ldr	r2, [pc, #336]	; (80021b4 <HAL_GPIO_Init+0x33c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <HAL_GPIO_Init+0x340>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x344>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_GPIO_Init+0x348>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_GPIO_Init+0x34c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x21a>
 800208e:	2309      	movs	r3, #9
 8002090:	e012      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002092:	230a      	movs	r3, #10
 8002094:	e010      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002096:	2308      	movs	r3, #8
 8002098:	e00e      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209a:	2307      	movs	r3, #7
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b6:	2300      	movs	r3, #0
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c8:	4935      	ldr	r1, [pc, #212]	; (80021a0 <HAL_GPIO_Init+0x328>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_GPIO_Init+0x354>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_GPIO_Init+0x354>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_GPIO_Init+0x354>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <HAL_GPIO_Init+0x354>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_GPIO_Init+0x354>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_GPIO_Init+0x354>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_GPIO_Init+0x354>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_GPIO_Init+0x354>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	f67f ae84 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40021400 	.word	0x40021400
 80021bc:	40021800 	.word	0x40021800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40022400 	.word	0x40022400
 80021cc:	40013c00 	.word	0x40013c00

080021d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e001      	b.n	80021f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43d9      	mvns	r1, r3
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	400b      	ands	r3, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f878 	bl	800137c <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e12b      	b.n	8002502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe3a 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022fc:	f001 fb4e 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a81      	ldr	r2, [pc, #516]	; (800250c <HAL_I2C_Init+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d807      	bhi.n	800231c <HAL_I2C_Init+0x84>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a80      	ldr	r2, [pc, #512]	; (8002510 <HAL_I2C_Init+0x278>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e006      	b.n	800232a <HAL_I2C_Init+0x92>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a7d      	ldr	r2, [pc, #500]	; (8002514 <HAL_I2C_Init+0x27c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e7      	b.n	8002502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a78      	ldr	r2, [pc, #480]	; (8002518 <HAL_I2C_Init+0x280>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a6a      	ldr	r2, [pc, #424]	; (800250c <HAL_I2C_Init+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d802      	bhi.n	800236c <HAL_I2C_Init+0xd4>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	e009      	b.n	8002380 <HAL_I2C_Init+0xe8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_I2C_Init+0x284>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	3301      	adds	r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	495c      	ldr	r1, [pc, #368]	; (800250c <HAL_I2C_Init+0x274>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d819      	bhi.n	80023d4 <HAL_I2C_Init+0x13c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e59      	subs	r1, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_I2C_Init+0x138>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e59      	subs	r1, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	e051      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x168>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x18e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x196>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1bc>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
 8002530:	4613      	mov	r3, r2
 8002532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff f836 	bl	80015a4 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	f040 80e0 	bne.w	8002708 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2319      	movs	r3, #25
 800254e:	2201      	movs	r2, #1
 8002550:	4970      	ldr	r1, [pc, #448]	; (8002714 <HAL_I2C_Master_Transmit+0x1f4>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa92 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
 8002560:	e0d3      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x50>
 800256c:	2302      	movs	r3, #2
 800256e:	e0cc      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d007      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2221      	movs	r2, #33	; 0x21
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2210      	movs	r2, #16
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_I2C_Master_Transmit+0x1f8>)
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9ca 	bl	8002978 <I2C_MasterRequestWrite>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08d      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002604:	e066      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb0c 	bl	8002c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_I2C_Master_Transmit+0x188>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6a39      	ldr	r1, [r7, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fafc 	bl	8002caa <I2C_WaitOnBTFFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e01a      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d194      	bne.n	8002606 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000

0800271c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	460b      	mov	r3, r1
 800272a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7fe ff3a 	bl	80015a4 <HAL_GetTick>
 8002730:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	f040 8111 	bne.w	8002966 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2319      	movs	r3, #25
 800274a:	2201      	movs	r2, #1
 800274c:	4988      	ldr	r1, [pc, #544]	; (8002970 <HAL_I2C_IsDeviceReady+0x254>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f994 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	e104      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x50>
 8002768:	2302      	movs	r3, #2
 800276a:	e0fd      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d007      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2224      	movs	r2, #36	; 0x24
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a70      	ldr	r2, [pc, #448]	; (8002974 <HAL_I2C_IsDeviceReady+0x258>)
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f952 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d103      	bne.n	80027f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b6      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002808:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe fecb 	bl	80015a4 <HAL_GetTick>
 800280e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800283e:	e025      	b.n	800288c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe feb0 	bl	80015a4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <HAL_I2C_IsDeviceReady+0x13a>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	22a0      	movs	r2, #160	; 0xa0
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2ba0      	cmp	r3, #160	; 0xa0
 8002896:	d005      	beq.n	80028a4 <HAL_I2C_IsDeviceReady+0x188>
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_I2C_IsDeviceReady+0x188>
 800289e:	7dbb      	ldrb	r3, [r7, #22]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0cd      	beq.n	8002840 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d129      	bne.n	800290e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	4921      	ldr	r1, [pc, #132]	; (8002970 <HAL_I2C_IsDeviceReady+0x254>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8c6 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e036      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e02c      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002926:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2319      	movs	r3, #25
 800292e:	2201      	movs	r2, #1
 8002930:	490f      	ldr	r1, [pc, #60]	; (8002970 <HAL_I2C_IsDeviceReady+0x254>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8a2 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e012      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	3301      	adds	r3, #1
 8002946:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	f4ff af32 	bcc.w	80027b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00100002 	.word	0x00100002
 8002974:	ffff0000 	.word	0xffff0000

08002978 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	460b      	mov	r3, r1
 8002986:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d006      	beq.n	80029a2 <I2C_MasterRequestWrite+0x2a>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d003      	beq.n	80029a2 <I2C_MasterRequestWrite+0x2a>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029a0:	d108      	bne.n	80029b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e00b      	b.n	80029cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2b12      	cmp	r3, #18
 80029ba:	d107      	bne.n	80029cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f84f 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f2:	d103      	bne.n	80029fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e035      	b.n	8002a6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a08:	d108      	bne.n	8002a1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	e01b      	b.n	8002a54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	11db      	asrs	r3, r3, #7
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 0306 	and.w	r3, r3, #6
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f063 030f 	orn	r3, r3, #15
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <I2C_MasterRequestWrite+0xfc>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f875 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e010      	b.n	8002a6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <I2C_MasterRequestWrite+0x100>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f865 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010008 	.word	0x00010008
 8002a78:	00010002 	.word	0x00010002

08002a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8c:	e025      	b.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d021      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fd85 	bl	80015a4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e023      	b.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10d      	bne.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	e00c      	b.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d0b6      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b38:	e051      	b.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d123      	bne.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e046      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d021      	beq.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fd03 	bl	80015a4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e020      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e00b      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d18d      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c34:	e02d      	b.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f878 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e02d      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fca9 	bl	80015a4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d1ca      	bne.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb6:	e02d      	b.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f837 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02d      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d021      	beq.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fc68 	bl	80015a4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d1ca      	bne.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d11b      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d129      	bne.n	8002df4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0210 	bic.w	r2, r2, #16
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d12a      	bne.n	8002e72 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	f023 030f 	bic.w	r3, r3, #15
 8002e42:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	89fa      	ldrh	r2, [r7, #14]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	b08f      	sub	sp, #60	; 0x3c
 8002e84:	af0a      	add	r7, sp, #40	; 0x28
 8002e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e10f      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe f8d3 	bl	8001058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f9ae 	bl	8004232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	687e      	ldr	r6, [r7, #4]
 8002ede:	466d      	mov	r5, sp
 8002ee0:	f106 0410 	add.w	r4, r6, #16
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ef4:	1d33      	adds	r3, r6, #4
 8002ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f001 f939 	bl	8004170 <USB_CoreInit>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0d0      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 f99c 	bl	8004254 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e04a      	b.n	8002fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	333d      	adds	r3, #61	; 0x3d
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	333c      	adds	r3, #60	; 0x3c
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3344      	adds	r3, #68	; 0x44
 8002f5e:	4602      	mov	r2, r0
 8002f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3340      	adds	r3, #64	; 0x40
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3348      	adds	r3, #72	; 0x48
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334c      	adds	r3, #76	; 0x4c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3354      	adds	r3, #84	; 0x54
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3af      	bcc.n	8002f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e044      	b.n	8003052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3b5      	bcc.n	8002fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	687e      	ldr	r6, [r7, #4]
 8003064:	466d      	mov	r5, sp
 8003066:	f106 0410 	add.w	r4, r6, #16
 800306a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003076:	e885 0003 	stmia.w	r5, {r0, r1}
 800307a:	1d33      	adds	r3, r6, #4
 800307c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307e:	6838      	ldr	r0, [r7, #0]
 8003080:	f001 f934 	bl	80042ec <USB_DevInit>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00d      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 faff 	bl	80046ae <USB_DevDisconnect>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e267      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d075      	beq.n	80031c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d00c      	beq.n	8003100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b85      	ldr	r3, [pc, #532]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d112      	bne.n	8003118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b82      	ldr	r3, [pc, #520]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x108>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e242      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x74>
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x98>
 800313a:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6f      	ldr	r2, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6c      	ldr	r2, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003154:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a68      	ldr	r2, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fa16 	bl	80015a4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe fa12 	bl	80015a4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e207      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xc0>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fa02 	bl	80015a4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe f9fe 	bl	80015a4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e1f3      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0xe8>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d11c      	bne.n	8003224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_RCC_OscConfig+0x152>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e1c7      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	e03a      	b.n	800329a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_OscConfig+0x244>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe f9b7 	bl	80015a4 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323a:	f7fe f9b3 	bl	80015a4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1a8      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4925      	ldr	r1, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x244>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f996 	bl	80015a4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f992 	bl	80015a4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e187      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d036      	beq.n	8003314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x248>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe f976 	bl	80015a4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032bc:	f7fe f972 	bl	80015a4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e167      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x200>
 80032da:	e01b      	b.n	8003314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x248>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7fe f95f 	bl	80015a4 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	e00e      	b.n	8003308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ea:	f7fe f95b 	bl	80015a4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d907      	bls.n	8003308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e150      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
 8003304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ea      	bne.n	80032ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8097 	beq.w	8003450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	4b7d      	ldr	r3, [pc, #500]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a7c      	ldr	r2, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b77      	ldr	r3, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d118      	bne.n	8003390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b74      	ldr	r3, [pc, #464]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a73      	ldr	r2, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fe f91b 	bl	80015a4 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fe f917 	bl	80015a4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e10c      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2ea>
 8003398:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	e01c      	b.n	80033e0 <HAL_RCC_OscConfig+0x324>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x30c>
 80033ae:	4b5f      	ldr	r3, [pc, #380]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5e      	ldr	r2, [pc, #376]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0x324>
 80033c8:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a54      	ldr	r2, [pc, #336]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe f8dc 	bl	80015a4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe f8d8 	bl	80015a4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0cb      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	4b49      	ldr	r3, [pc, #292]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ee      	beq.n	80033f0 <HAL_RCC_OscConfig+0x334>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe f8c6 	bl	80015a4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fe f8c2 	bl	80015a4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0b5      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ee      	bne.n	800341c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	4a38      	ldr	r2, [pc, #224]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a1 	beq.w	800359c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d05c      	beq.n	8003520 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d141      	bne.n	80034f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b31      	ldr	r3, [pc, #196]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe f896 	bl	80015a4 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f892 	bl	80015a4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e087      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe f86b 	bl	80015a4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe f867 	bl	80015a4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e05c      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x416>
 80034f0:	e054      	b.n	800359c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f854 	bl	80015a4 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe f850 	bl	80015a4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e045      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x444>
 800351e:	e03d      	b.n	800359c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e038      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
 8003534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4ec>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d028      	beq.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d121      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0cc      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b68      	ldr	r3, [pc, #416]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d90c      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b8      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a58      	ldr	r2, [pc, #352]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800360a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a52      	ldr	r2, [pc, #328]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	494d      	ldr	r1, [pc, #308]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d044      	beq.n	80036cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d119      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d003      	beq.n	800366a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003666:	2b03      	cmp	r3, #3
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e067      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4934      	ldr	r1, [pc, #208]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800369c:	f7fd ff82 	bl	80015a4 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fd ff7e 	bl	80015a4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e04f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d20c      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e032      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4916      	ldr	r1, [pc, #88]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	490e      	ldr	r1, [pc, #56]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003732:	f000 f821 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003736:	4602      	mov	r2, r0
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	5ccb      	ldrb	r3, [r1, r3]
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fee2 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00
 8003768:	40023800 	.word	0x40023800
 800376c:	08007200 	.word	0x08007200
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b094      	sub	sp, #80	; 0x50
 800377e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	647b      	str	r3, [r7, #68]	; 0x44
 8003784:	2300      	movs	r3, #0
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	2300      	movs	r3, #0
 800378a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003790:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d00d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x40>
 800379c:	2b08      	cmp	r3, #8
 800379e:	f200 80e1 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037aa:	e0db      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b73      	ldr	r3, [pc, #460]	; (800397c <HAL_RCC_GetSysClockFreq+0x204>)
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037b0:	e0db      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCC_GetSysClockFreq+0x208>)
 80037b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037b6:	e0d8      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c2:	4b6d      	ldr	r3, [pc, #436]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 80037e2:	2300      	movs	r3, #0
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037ea:	4622      	mov	r2, r4
 80037ec:	462b      	mov	r3, r5
 80037ee:	f04f 0000 	mov.w	r0, #0
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	0159      	lsls	r1, r3, #5
 80037f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fc:	0150      	lsls	r0, r2, #5
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4621      	mov	r1, r4
 8003804:	1a51      	subs	r1, r2, r1
 8003806:	6139      	str	r1, [r7, #16]
 8003808:	4629      	mov	r1, r5
 800380a:	eb63 0301 	sbc.w	r3, r3, r1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800381c:	4659      	mov	r1, fp
 800381e:	018b      	lsls	r3, r1, #6
 8003820:	4651      	mov	r1, sl
 8003822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003826:	4651      	mov	r1, sl
 8003828:	018a      	lsls	r2, r1, #6
 800382a:	4651      	mov	r1, sl
 800382c:	ebb2 0801 	subs.w	r8, r2, r1
 8003830:	4659      	mov	r1, fp
 8003832:	eb63 0901 	sbc.w	r9, r3, r1
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800384a:	4690      	mov	r8, r2
 800384c:	4699      	mov	r9, r3
 800384e:	4623      	mov	r3, r4
 8003850:	eb18 0303 	adds.w	r3, r8, r3
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	462b      	mov	r3, r5
 8003858:	eb49 0303 	adc.w	r3, r9, r3
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800386a:	4629      	mov	r1, r5
 800386c:	024b      	lsls	r3, r1, #9
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003874:	4621      	mov	r1, r4
 8003876:	024a      	lsls	r2, r1, #9
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	2200      	movs	r2, #0
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
 8003882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003888:	f7fc fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003894:	e058      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	2200      	movs	r2, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	4611      	mov	r1, r2
 80038a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	0159      	lsls	r1, r3, #5
 80038be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c2:	0150      	lsls	r0, r2, #5
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4641      	mov	r1, r8
 80038ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ce:	4649      	mov	r1, r9
 80038d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e8:	ebb2 040a 	subs.w	r4, r2, sl
 80038ec:	eb63 050b 	sbc.w	r5, r3, fp
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	00eb      	lsls	r3, r5, #3
 80038fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fe:	00e2      	lsls	r2, r4, #3
 8003900:	4614      	mov	r4, r2
 8003902:	461d      	mov	r5, r3
 8003904:	4643      	mov	r3, r8
 8003906:	18e3      	adds	r3, r4, r3
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	464b      	mov	r3, r9
 800390c:	eb45 0303 	adc.w	r3, r5, r3
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391e:	4629      	mov	r1, r5
 8003920:	028b      	lsls	r3, r1, #10
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003928:	4621      	mov	r1, r4
 800392a:	028a      	lsls	r2, r1, #10
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003932:	2200      	movs	r2, #0
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	61fa      	str	r2, [r7, #28]
 8003938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800393c:	f7fc fcb0 	bl	80002a0 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_GetSysClockFreq+0x200>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800395a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetSysClockFreq+0x204>)
 8003966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800396c:	4618      	mov	r0, r3
 800396e:	3750      	adds	r7, #80	; 0x50
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08007210 	.word	0x08007210

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08007210 	.word	0x08007210

080039ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e03f      	b.n	8003a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fad8 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f929 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d17c      	bne.n	8003ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit+0x2c>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e075      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Transmit+0x3e>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e06e      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	; 0x21
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fd fd63 	bl	80015a4 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b18:	e02a      	b.n	8003b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f840 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e036      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cf      	bne.n	8003b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f810 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b090      	sub	sp, #64	; 0x40
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	e050      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d04c      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	f7fd fceb 	bl	80015a4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d241      	bcs.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2e:	623a      	str	r2, [r7, #32]
 8003c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69f9      	ldr	r1, [r7, #28]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d09f      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3740      	adds	r7, #64	; 0x40
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b0c0      	sub	sp, #256	; 0x100
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	ea40 0301 	orr.w	r3, r0, r1
 8003cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ce0:	f021 010c 	bic.w	r1, r1, #12
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	6999      	ldr	r1, [r3, #24]
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	ea40 0301 	orr.w	r3, r0, r1
 8003d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0xa0>
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <UART_SetConfig+0x2d0>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d104      	bne.n	8003d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7ff fe4c 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d30:	e003      	b.n	8003d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7ff fe33 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8003d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	f040 810c 	bne.w	8003f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d62:	415b      	adcs	r3, r3
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	eb12 0801 	adds.w	r8, r2, r1
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb43 0901 	adc.w	r9, r3, r1
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	eb18 0303 	adds.w	r3, r8, r3
 8003d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d98:	462b      	mov	r3, r5
 8003d9a:	eb49 0303 	adc.w	r3, r9, r3
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003db6:	460b      	mov	r3, r1
 8003db8:	18db      	adds	r3, r3, r3
 8003dba:	653b      	str	r3, [r7, #80]	; 0x50
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dcc:	f7fc fa68 	bl	80002a0 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e00:	4641      	mov	r1, r8
 8003e02:	eb12 0a01 	adds.w	sl, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0b01 	adc.w	fp, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e20:	4692      	mov	sl, r2
 8003e22:	469b      	mov	fp, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	eb1a 0303 	adds.w	r3, sl, r3
 8003e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	eb4b 0303 	adc.w	r3, fp, r3
 8003e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	18db      	adds	r3, r3, r3
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
 8003e52:	4613      	mov	r3, r2
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e62:	f7fc fa1d 	bl	80002a0 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2264      	movs	r2, #100	; 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e82:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e84:	fba3 2302 	umull	r2, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e90:	441c      	add	r4, r3
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eac:	415b      	adcs	r3, r3
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f1e:	f7fc f9bf 	bl	80002a0 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4422      	add	r2, r4
 8003f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f50:	e106      	b.n	8004160 <UART_SetConfig+0x4d8>
 8003f52:	bf00      	nop
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	6239      	str	r1, [r7, #32]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f82:	4641      	mov	r1, r8
 8003f84:	1854      	adds	r4, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0501 	adc.w	r5, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fa8:	464b      	mov	r3, r9
 8003faa:	eb45 0303 	adc.w	r3, r5, r3
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fce:	4629      	mov	r1, r5
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4621      	mov	r1, r4
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fe0:	f7fc f95e 	bl	80002a0 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b60      	ldr	r3, [pc, #384]	; (800416c <UART_SetConfig+0x4e4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	61b9      	str	r1, [r7, #24]
 800400c:	415b      	adcs	r3, r3
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	4641      	mov	r1, r8
 8004016:	1851      	adds	r1, r2, r1
 8004018:	6139      	str	r1, [r7, #16]
 800401a:	4649      	mov	r1, r9
 800401c:	414b      	adcs	r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4651      	mov	r1, sl
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4642      	mov	r2, r8
 8004042:	189b      	adds	r3, r3, r2
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004048:	464b      	mov	r3, r9
 800404a:	460a      	mov	r2, r1
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
 800405e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800407e:	f7fc f90f 	bl	80002a0 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <UART_SetConfig+0x4e4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a33      	ldr	r2, [pc, #204]	; (800416c <UART_SetConfig+0x4e4>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a8:	441c      	add	r4, r3
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	673b      	str	r3, [r7, #112]	; 0x70
 80040b2:	677a      	str	r2, [r7, #116]	; 0x74
 80040b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040fa:	464b      	mov	r3, r9
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	667a      	str	r2, [r7, #100]	; 0x64
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800412e:	f7fc f8b7 	bl	80002a0 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <UART_SetConfig+0x4e4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <UART_SetConfig+0x4e4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4422      	add	r2, r4
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 001c 	add.w	r0, r7, #28
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b01      	cmp	r3, #1
 8004186:	d122      	bne.n	80041ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800419c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 faa2 	bl	800470c <USB_CoreReset>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e01a      	b.n	8004204 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa96 	bl	800470c <USB_CoreReset>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
 80041f6:	e005      	b.n	8004204 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10b      	bne.n	8004222 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f043 0206 	orr.w	r2, r3, #6
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800422e:	b004      	add	sp, #16
 8004230:	4770      	bx	lr

08004232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d115      	bne.n	80042a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004282:	2001      	movs	r0, #1
 8004284:	f7fd f99a 	bl	80015bc <HAL_Delay>
      ms++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3301      	adds	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa2e 	bl	80046f0 <USB_GetMode>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d01e      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b31      	cmp	r3, #49	; 0x31
 800429e:	d9f0      	bls.n	8004282 <USB_SetCurrentMode+0x2e>
 80042a0:	e01a      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fd f981 	bl	80015bc <HAL_Delay>
      ms++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa15 	bl	80046f0 <USB_GetMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b31      	cmp	r3, #49	; 0x31
 80042d0:	d9f0      	bls.n	80042b4 <USB_SetCurrentMode+0x60>
 80042d2:	e001      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e005      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b32      	cmp	r3, #50	; 0x32
 80042dc:	d101      	bne.n	80042e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e009      	b.n	8004320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3340      	adds	r3, #64	; 0x40
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0e      	cmp	r3, #14
 8004324:	d9f2      	bls.n	800430c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11c      	bne.n	8004366 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	e00b      	b.n	800437e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	4619      	mov	r1, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	461a      	mov	r2, r3
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043aa:	2100      	movs	r1, #0
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f965 	bl	800467c <USB_SetDevSpeed>
 80043b2:	e008      	b.n	80043c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043b4:	2101      	movs	r1, #1
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f960 	bl	800467c <USB_SetDevSpeed>
 80043bc:	e003      	b.n	80043c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043be:	2103      	movs	r1, #3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f95b 	bl	800467c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043c6:	2110      	movs	r1, #16
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8f3 	bl	80045b4 <USB_FlushTxFifo>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f91f 	bl	800461c <USB_FlushRxFifo>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e043      	b.n	800449a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004428:	d118      	bne.n	800445c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	461a      	mov	r2, r3
 800443e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e013      	b.n	800446e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	461a      	mov	r2, r3
 8004454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e008      	b.n	800446e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	461a      	mov	r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	461a      	mov	r2, r3
 800448e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004492:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3301      	adds	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3b7      	bcc.n	8004412 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e043      	b.n	8004530 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044be:	d118      	bne.n	80044f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e013      	b.n	8004504 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	461a      	mov	r2, r3
 80044ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e008      	b.n	8004504 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3301      	adds	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d3b7      	bcc.n	80044a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004558:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f043 0210 	orr.w	r2, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <USB_DevInit+0x2c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f043 0208 	orr.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ac:	b004      	add	sp, #16
 80045ae:	4770      	bx	lr
 80045b0:	803c3800 	.word	0x803c3800

080045b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <USB_FlushTxFifo+0x64>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e01b      	b.n	800460c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	daf2      	bge.n	80045c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	019b      	lsls	r3, r3, #6
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <USB_FlushTxFifo+0x64>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d0f0      	beq.n	80045ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	00030d40 	.word	0x00030d40

0800461c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3301      	adds	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a11      	ldr	r2, [pc, #68]	; (8004678 <USB_FlushRxFifo+0x5c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e018      	b.n	800466c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	daf2      	bge.n	8004628 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2210      	movs	r2, #16
 800464a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <USB_FlushRxFifo+0x5c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e006      	b.n	800466c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d0f0      	beq.n	800464c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	00030d40 	.word	0x00030d40

0800467c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0301 	and.w	r3, r3, #1
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <USB_CoreReset+0x64>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e01b      	b.n	8004762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	daf2      	bge.n	8004718 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <USB_CoreReset+0x64>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d0f0      	beq.n	8004742 <USB_CoreReset+0x36>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	00030d40 	.word	0x00030d40

08004774 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004786:	2b84      	cmp	r3, #132	; 0x84
 8004788:	d005      	beq.n	8004796 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800478a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	3303      	adds	r3, #3
 8004794:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047a8:	f000 fb70 	bl	8004e8c <vTaskStartScheduler>
  
  return osOK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b4:	b089      	sub	sp, #36	; 0x24
 80047b6:	af04      	add	r7, sp, #16
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <osThreadCreate+0x54>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685c      	ldr	r4, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691e      	ldr	r6, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ffc8 	bl	8004774 <makeFreeRtosPriority>
 80047e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ee:	9202      	str	r2, [sp, #8]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	9100      	str	r1, [sp, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4632      	mov	r2, r6
 80047f8:	4629      	mov	r1, r5
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f8ed 	bl	80049da <xTaskCreateStatic>
 8004800:	4603      	mov	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e01c      	b.n	8004840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685c      	ldr	r4, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004812:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ffaa 	bl	8004774 <makeFreeRtosPriority>
 8004820:	4602      	mov	r2, r0
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	9200      	str	r2, [sp, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	4632      	mov	r2, r6
 800482e:	4629      	mov	r1, r5
 8004830:	4620      	mov	r0, r4
 8004832:	f000 f92f 	bl	8004a94 <xTaskCreate>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004840:	68fb      	ldr	r3, [r7, #12]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800484a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <osDelay+0x16>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	e000      	b.n	8004862 <osDelay+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa4c 	bl	8004d00 <vTaskDelay>
  
  return osOK;
 8004868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f103 0208 	add.w	r2, r3, #8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f103 0208 	add.w	r2, r3, #8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 0208 	add.w	r2, r3, #8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d103      	bne.n	8004934 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e00c      	b.n	800494e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3308      	adds	r3, #8
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e002      	b.n	8004942 <vListInsert+0x2e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d2f6      	bcs.n	800493c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6892      	ldr	r2, [r2, #8]
 800499c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6852      	ldr	r2, [r2, #4]
 80049a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d103      	bne.n	80049ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1e5a      	subs	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08e      	sub	sp, #56	; 0x38
 80049de:	af04      	add	r7, sp, #16
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61fb      	str	r3, [r7, #28]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a20:	2354      	movs	r3, #84	; 0x54
 8004a22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b54      	cmp	r3, #84	; 0x54
 8004a28:	d00a      	beq.n	8004a40 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61bb      	str	r3, [r7, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01e      	beq.n	8004a86 <xTaskCreateStatic+0xac>
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01b      	beq.n	8004a86 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a60:	2300      	movs	r3, #0
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	9302      	str	r3, [sp, #8]
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f850 	bl	8004b1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a80:	f000 f8d4 	bl	8004c2c <prvAddNewTaskToReadyList>
 8004a84:	e001      	b.n	8004a8a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a8a:	697b      	ldr	r3, [r7, #20]
	}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3728      	adds	r7, #40	; 0x28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ff85 	bl	80059b8 <pvPortMalloc>
 8004aae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ab6:	2054      	movs	r0, #84	; 0x54
 8004ab8:	f000 ff7e 	bl	80059b8 <pvPortMalloc>
 8004abc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aca:	e005      	b.n	8004ad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f001 f83f 	bl	8005b50 <vPortFree>
 8004ad2:	e001      	b.n	8004ad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d017      	beq.n	8004b0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f80e 	bl	8004b1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b02:	69f8      	ldr	r0, [r7, #28]
 8004b04:	f000 f892 	bl	8004c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e002      	b.n	8004b14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b14:	69bb      	ldr	r3, [r7, #24]
	}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b088      	sub	sp, #32
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b36:	3b01      	subs	r3, #1
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f023 0307 	bic.w	r3, r3, #7
 8004b44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	617b      	str	r3, [r7, #20]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01f      	beq.n	8004bac <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e012      	b.n	8004b98 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	7819      	ldrb	r1, [r3, #0]
 8004b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3334      	adds	r3, #52	; 0x34
 8004b82:	460a      	mov	r2, r1
 8004b84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d9e9      	bls.n	8004b72 <prvInitialiseNewTask+0x54>
 8004b9e:	e000      	b.n	8004ba2 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ba0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004baa:	e003      	b.n	8004bb4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d901      	bls.n	8004bbe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bba:	2306      	movs	r3, #6
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2200      	movs	r2, #0
 8004bce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fe6c 	bl	80048b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	3318      	adds	r3, #24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fe67 	bl	80048b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	f1c3 0207 	rsb	r2, r3, #7
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	69b8      	ldr	r0, [r7, #24]
 8004c0e:	f000 fcc5 	bl	800559c <pxPortInitialiseStack>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c24:	bf00      	nop
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c34:	f000 fdde 	bl	80057f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c38:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <prvAddNewTaskToReadyList+0xb8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <prvAddNewTaskToReadyList+0xb8>)
 8004c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <prvAddNewTaskToReadyList+0xbc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c4a:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <prvAddNewTaskToReadyList+0xbc>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c50:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <prvAddNewTaskToReadyList+0xb8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d110      	bne.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c58:	f000 fb5e 	bl	8005318 <prvInitialiseTaskLists>
 8004c5c:	e00d      	b.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <prvAddNewTaskToReadyList+0xc0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <prvAddNewTaskToReadyList+0xbc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d802      	bhi.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c74:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <prvAddNewTaskToReadyList+0xbc>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <prvAddNewTaskToReadyList+0xc4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <prvAddNewTaskToReadyList+0xc4>)
 8004c82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	2201      	movs	r2, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <prvAddNewTaskToReadyList+0xcc>)
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7ff fe0d 	bl	80048cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cb2:	f000 fdcf 	bl	8005854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <prvAddNewTaskToReadyList+0xc0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvAddNewTaskToReadyList+0xbc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d207      	bcs.n	8004cdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvAddNewTaskToReadyList+0xd0>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000bdc 	.word	0x20000bdc
 8004ce8:	20000adc 	.word	0x20000adc
 8004cec:	20000be8 	.word	0x20000be8
 8004cf0:	20000bf8 	.word	0x20000bf8
 8004cf4:	20000be4 	.word	0x20000be4
 8004cf8:	20000ae0 	.word	0x20000ae0
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <vTaskDelay+0x60>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <vTaskDelay+0x30>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d30:	f000 f90c 	bl	8004f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d34:	2100      	movs	r1, #0
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fbca 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d3c:	f000 f914 	bl	8004f68 <xTaskResumeAll>
 8004d40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <vTaskDelay+0x64>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000c04 	.word	0x20000c04
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004d70:	f000 fd40 	bl	80057f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <vTaskSuspend+0x18>
 8004d7a:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <vTaskSuspend+0x104>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <vTaskSuspend+0x1a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fdfc 	bl	8004986 <uxListRemove>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d115      	bne.n	8004dc0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4935      	ldr	r1, [pc, #212]	; (8004e70 <vTaskSuspend+0x108>)
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <vTaskSuspend+0x58>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	2201      	movs	r2, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43da      	mvns	r2, r3
 8004db6:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <vTaskSuspend+0x10c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <vTaskSuspend+0x10c>)
 8004dbe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fdda 	bl	8004986 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4827      	ldr	r0, [pc, #156]	; (8004e78 <vTaskSuspend+0x110>)
 8004dda:	f7ff fd77 	bl	80048cc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d103      	bne.n	8004df2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004df2:	f000 fd2f 	bl	8005854 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <vTaskSuspend+0x114>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004dfe:	f000 fcf9 	bl	80057f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004e02:	f000 fb27 	bl	8005454 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004e06:	f000 fd25 	bl	8005854 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <vTaskSuspend+0x104>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d127      	bne.n	8004e64 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <vTaskSuspend+0x114>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <vTaskSuspend+0x118>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <vTaskSuspend+0xd2>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60bb      	str	r3, [r7, #8]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <vTaskSuspend+0x11c>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e4a:	e00b      	b.n	8004e64 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <vTaskSuspend+0x110>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <vTaskSuspend+0x120>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d103      	bne.n	8004e60 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <vTaskSuspend+0x104>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
	}
 8004e5e:	e001      	b.n	8004e64 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004e60:	f000 f9e6 	bl	8005230 <vTaskSwitchContext>
	}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000adc 	.word	0x20000adc
 8004e70:	20000ae0 	.word	0x20000ae0
 8004e74:	20000be4 	.word	0x20000be4
 8004e78:	20000bc8 	.word	0x20000bc8
 8004e7c:	20000be8 	.word	0x20000be8
 8004e80:	20000c04 	.word	0x20000c04
 8004e84:	e000ed04 	.word	0xe000ed04
 8004e88:	20000bdc 	.word	0x20000bdc

08004e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	1d39      	adds	r1, r7, #4
 8004e9e:	f107 0308 	add.w	r3, r7, #8
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb7a 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	9202      	str	r2, [sp, #8]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	460a      	mov	r2, r1
 8004eba:	491e      	ldr	r1, [pc, #120]	; (8004f34 <vTaskStartScheduler+0xa8>)
 8004ebc:	481e      	ldr	r0, [pc, #120]	; (8004f38 <vTaskStartScheduler+0xac>)
 8004ebe:	f7ff fd8c 	bl	80049da <xTaskCreateStatic>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <vTaskStartScheduler+0xb0>)
 8004ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <vTaskStartScheduler+0xb0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e001      	b.n	8004eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d116      	bne.n	8004f0e <vTaskStartScheduler+0x82>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	613b      	str	r3, [r7, #16]
}
 8004ef2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <vTaskStartScheduler+0xb4>)
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <vTaskStartScheduler+0xb8>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <vTaskStartScheduler+0xbc>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f08:	f000 fbd2 	bl	80056b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f0c:	e00e      	b.n	8004f2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d10a      	bne.n	8004f2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60fb      	str	r3, [r7, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <vTaskStartScheduler+0x9e>
}
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	080071f8 	.word	0x080071f8
 8004f38:	080052e9 	.word	0x080052e9
 8004f3c:	20000c00 	.word	0x20000c00
 8004f40:	20000bfc 	.word	0x20000bfc
 8004f44:	20000be8 	.word	0x20000be8
 8004f48:	20000be0 	.word	0x20000be0

08004f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <vTaskSuspendAll+0x18>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <vTaskSuspendAll+0x18>)
 8004f58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000c04 	.word	0x20000c04

08004f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f76:	4b41      	ldr	r3, [pc, #260]	; (800507c <xTaskResumeAll+0x114>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	603b      	str	r3, [r7, #0]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f94:	f000 fc2e 	bl	80057f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f98:	4b38      	ldr	r3, [pc, #224]	; (800507c <xTaskResumeAll+0x114>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a37      	ldr	r2, [pc, #220]	; (800507c <xTaskResumeAll+0x114>)
 8004fa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <xTaskResumeAll+0x114>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d161      	bne.n	800506e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004faa:	4b35      	ldr	r3, [pc, #212]	; (8005080 <xTaskResumeAll+0x118>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d05d      	beq.n	800506e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb2:	e02e      	b.n	8005012 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	4b33      	ldr	r3, [pc, #204]	; (8005084 <xTaskResumeAll+0x11c>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fce0 	bl	8004986 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fcdb 	bl	8004986 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <xTaskResumeAll+0x120>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <xTaskResumeAll+0x120>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4a27      	ldr	r2, [pc, #156]	; (800508c <xTaskResumeAll+0x124>)
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7ff fc67 	bl	80048cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005002:	4b23      	ldr	r3, [pc, #140]	; (8005090 <xTaskResumeAll+0x128>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <xTaskResumeAll+0x12c>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xTaskResumeAll+0x11c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1cc      	bne.n	8004fb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005020:	f000 fa18 	bl	8005454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005024:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <xTaskResumeAll+0x130>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d010      	beq.n	8005052 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005030:	f000 f846 	bl	80050c0 <xTaskIncrementTick>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <xTaskResumeAll+0x12c>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800504c:	4b12      	ldr	r3, [pc, #72]	; (8005098 <xTaskResumeAll+0x130>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <xTaskResumeAll+0x12c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800505a:	2301      	movs	r3, #1
 800505c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <xTaskResumeAll+0x134>)
 8005060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506e:	f000 fbf1 	bl	8005854 <vPortExitCritical>

	return xAlreadyYielded;
 8005072:	68bb      	ldr	r3, [r7, #8]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000c04 	.word	0x20000c04
 8005080:	20000bdc 	.word	0x20000bdc
 8005084:	20000b9c 	.word	0x20000b9c
 8005088:	20000be4 	.word	0x20000be4
 800508c:	20000ae0 	.word	0x20000ae0
 8005090:	20000adc 	.word	0x20000adc
 8005094:	20000bf0 	.word	0x20000bf0
 8005098:	20000bec 	.word	0x20000bec
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <xTaskGetTickCount+0x1c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050ac:	687b      	ldr	r3, [r7, #4]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000be0 	.word	0x20000be0

080050c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ca:	4b4e      	ldr	r3, [pc, #312]	; (8005204 <xTaskIncrementTick+0x144>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 808e 	bne.w	80051f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050d4:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <xTaskIncrementTick+0x148>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050dc:	4a4a      	ldr	r2, [pc, #296]	; (8005208 <xTaskIncrementTick+0x148>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d120      	bne.n	800512a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050e8:	4b48      	ldr	r3, [pc, #288]	; (800520c <xTaskIncrementTick+0x14c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <xTaskIncrementTick+0x48>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	603b      	str	r3, [r7, #0]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xTaskIncrementTick+0x46>
 8005108:	4b40      	ldr	r3, [pc, #256]	; (800520c <xTaskIncrementTick+0x14c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b40      	ldr	r3, [pc, #256]	; (8005210 <xTaskIncrementTick+0x150>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3e      	ldr	r2, [pc, #248]	; (800520c <xTaskIncrementTick+0x14c>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <xTaskIncrementTick+0x150>)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b3d      	ldr	r3, [pc, #244]	; (8005214 <xTaskIncrementTick+0x154>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <xTaskIncrementTick+0x154>)
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	f000 f995 	bl	8005454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <xTaskIncrementTick+0x158>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	d348      	bcc.n	80051c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005134:	4b35      	ldr	r3, [pc, #212]	; (800520c <xTaskIncrementTick+0x14c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <xTaskIncrementTick+0x158>)
 8005140:	f04f 32ff 	mov.w	r2, #4294967295
 8005144:	601a      	str	r2, [r3, #0]
					break;
 8005146:	e03e      	b.n	80051c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005148:	4b30      	ldr	r3, [pc, #192]	; (800520c <xTaskIncrementTick+0x14c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	d203      	bcs.n	8005168 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005160:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <xTaskIncrementTick+0x158>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005166:	e02e      	b.n	80051c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	3304      	adds	r3, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fc0a 	bl	8004986 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3318      	adds	r3, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fc01 	bl	8004986 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	4b23      	ldr	r3, [pc, #140]	; (800521c <xTaskIncrementTick+0x15c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	4a22      	ldr	r2, [pc, #136]	; (800521c <xTaskIncrementTick+0x15c>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <xTaskIncrementTick+0x160>)
 80051a4:	441a      	add	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7ff fb8d 	bl	80048cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <xTaskIncrementTick+0x164>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3b9      	bcc.n	8005134 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c4:	e7b6      	b.n	8005134 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <xTaskIncrementTick+0x164>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	4914      	ldr	r1, [pc, #80]	; (8005220 <xTaskIncrementTick+0x160>)
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d901      	bls.n	80051e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <xTaskIncrementTick+0x168>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e004      	b.n	80051fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <xTaskIncrementTick+0x16c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4a0d      	ldr	r2, [pc, #52]	; (800522c <xTaskIncrementTick+0x16c>)
 80051f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051fa:	697b      	ldr	r3, [r7, #20]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000c04 	.word	0x20000c04
 8005208:	20000be0 	.word	0x20000be0
 800520c:	20000b94 	.word	0x20000b94
 8005210:	20000b98 	.word	0x20000b98
 8005214:	20000bf4 	.word	0x20000bf4
 8005218:	20000bfc 	.word	0x20000bfc
 800521c:	20000be4 	.word	0x20000be4
 8005220:	20000ae0 	.word	0x20000ae0
 8005224:	20000adc 	.word	0x20000adc
 8005228:	20000bf0 	.word	0x20000bf0
 800522c:	20000bec 	.word	0x20000bec

08005230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <vTaskSwitchContext+0xa4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800523e:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <vTaskSwitchContext+0xa8>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005244:	e03f      	b.n	80052c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <vTaskSwitchContext+0xa8>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524c:	4b23      	ldr	r3, [pc, #140]	; (80052dc <vTaskSwitchContext+0xac>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	fab3 f383 	clz	r3, r3
 8005258:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	f1c3 031f 	rsb	r3, r3, #31
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	491f      	ldr	r1, [pc, #124]	; (80052e0 <vTaskSwitchContext+0xb0>)
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	607b      	str	r3, [r7, #4]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <vTaskSwitchContext+0x5a>
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <vTaskSwitchContext+0xb0>)
 8005298:	4413      	add	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3308      	adds	r3, #8
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d104      	bne.n	80052bc <vTaskSwitchContext+0x8c>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <vTaskSwitchContext+0xb4>)
 80052c4:	6013      	str	r3, [r2, #0]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000c04 	.word	0x20000c04
 80052d8:	20000bf0 	.word	0x20000bf0
 80052dc:	20000be4 	.word	0x20000be4
 80052e0:	20000ae0 	.word	0x20000ae0
 80052e4:	20000adc 	.word	0x20000adc

080052e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052f0:	f000 f852 	bl	8005398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <prvIdleTask+0x28>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d9f9      	bls.n	80052f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <prvIdleTask+0x2c>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800530c:	e7f0      	b.n	80052f0 <prvIdleTask+0x8>
 800530e:	bf00      	nop
 8005310:	20000ae0 	.word	0x20000ae0
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e00c      	b.n	800533e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <prvInitialiseTaskLists+0x60>)
 8005330:	4413      	add	r3, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fa9d 	bl	8004872 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d9ef      	bls.n	8005324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005344:	480d      	ldr	r0, [pc, #52]	; (800537c <prvInitialiseTaskLists+0x64>)
 8005346:	f7ff fa94 	bl	8004872 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800534a:	480d      	ldr	r0, [pc, #52]	; (8005380 <prvInitialiseTaskLists+0x68>)
 800534c:	f7ff fa91 	bl	8004872 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <prvInitialiseTaskLists+0x6c>)
 8005352:	f7ff fa8e 	bl	8004872 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005356:	480c      	ldr	r0, [pc, #48]	; (8005388 <prvInitialiseTaskLists+0x70>)
 8005358:	f7ff fa8b 	bl	8004872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800535c:	480b      	ldr	r0, [pc, #44]	; (800538c <prvInitialiseTaskLists+0x74>)
 800535e:	f7ff fa88 	bl	8004872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <prvInitialiseTaskLists+0x78>)
 8005364:	4a05      	ldr	r2, [pc, #20]	; (800537c <prvInitialiseTaskLists+0x64>)
 8005366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvInitialiseTaskLists+0x7c>)
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <prvInitialiseTaskLists+0x68>)
 800536c:	601a      	str	r2, [r3, #0]
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000ae0 	.word	0x20000ae0
 800537c:	20000b6c 	.word	0x20000b6c
 8005380:	20000b80 	.word	0x20000b80
 8005384:	20000b9c 	.word	0x20000b9c
 8005388:	20000bb0 	.word	0x20000bb0
 800538c:	20000bc8 	.word	0x20000bc8
 8005390:	20000b94 	.word	0x20000b94
 8005394:	20000b98 	.word	0x20000b98

08005398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800539e:	e019      	b.n	80053d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053a0:	f000 fa28 	bl	80057f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <prvCheckTasksWaitingTermination+0x50>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fae8 	bl	8004986 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <prvCheckTasksWaitingTermination+0x54>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <prvCheckTasksWaitingTermination+0x54>)
 80053be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <prvCheckTasksWaitingTermination+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <prvCheckTasksWaitingTermination+0x58>)
 80053c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ca:	f000 fa43 	bl	8005854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f810 	bl	80053f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <prvCheckTasksWaitingTermination+0x58>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e1      	bne.n	80053a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000bb0 	.word	0x20000bb0
 80053ec:	20000bdc 	.word	0x20000bdc
 80053f0:	20000bc4 	.word	0x20000bc4

080053f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005402:	2b00      	cmp	r3, #0
 8005404:	d108      	bne.n	8005418 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fba0 	bl	8005b50 <vPortFree>
				vPortFree( pxTCB );
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fb9d 	bl	8005b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005416:	e018      	b.n	800544a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800541e:	2b01      	cmp	r3, #1
 8005420:	d103      	bne.n	800542a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb94 	bl	8005b50 <vPortFree>
	}
 8005428:	e00f      	b.n	800544a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005430:	2b02      	cmp	r3, #2
 8005432:	d00a      	beq.n	800544a <prvDeleteTCB+0x56>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <prvDeleteTCB+0x54>
	}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <prvResetNextTaskUnblockTime+0x38>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <prvResetNextTaskUnblockTime+0x3c>)
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800546c:	e008      	b.n	8005480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <prvResetNextTaskUnblockTime+0x38>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <prvResetNextTaskUnblockTime+0x3c>)
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000b94 	.word	0x20000b94
 8005490:	20000bfc 	.word	0x20000bfc

08005494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <xTaskGetSchedulerState+0x34>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054a2:	2301      	movs	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e008      	b.n	80054ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <xTaskGetSchedulerState+0x38>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054b0:	2302      	movs	r3, #2
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	e001      	b.n	80054ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ba:	687b      	ldr	r3, [r7, #4]
	}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20000be8 	.word	0x20000be8
 80054cc:	20000c04 	.word	0x20000c04

080054d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054da:	4b29      	ldr	r3, [pc, #164]	; (8005580 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fa4d 	bl	8004986 <uxListRemove>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054f2:	4b24      	ldr	r3, [pc, #144]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	2201      	movs	r2, #1
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43da      	mvns	r2, r3
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4013      	ands	r3, r2
 8005506:	4a20      	ldr	r2, [pc, #128]	; (8005588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005508:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d10a      	bne.n	8005528 <prvAddCurrentTaskToDelayedList+0x58>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3304      	adds	r3, #4
 800551e:	4619      	mov	r1, r3
 8005520:	481a      	ldr	r0, [pc, #104]	; (800558c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005522:	f7ff f9d3 	bl	80048cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005526:	e026      	b.n	8005576 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	429a      	cmp	r2, r3
 800553e:	d209      	bcs.n	8005554 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7ff f9e1 	bl	8004914 <vListInsert>
}
 8005552:	e010      	b.n	8005576 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7ff f9d7 	bl	8004914 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	d202      	bcs.n	8005576 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005570:	4a09      	ldr	r2, [pc, #36]	; (8005598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6013      	str	r3, [r2, #0]
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000be0 	.word	0x20000be0
 8005584:	20000adc 	.word	0x20000adc
 8005588:	20000be4 	.word	0x20000be4
 800558c:	20000bc8 	.word	0x20000bc8
 8005590:	20000b98 	.word	0x20000b98
 8005594:	20000b94 	.word	0x20000b94
 8005598:	20000bfc 	.word	0x20000bfc

0800559c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b04      	subs	r3, #4
 80055ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b04      	subs	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3b04      	subs	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055cc:	4a0c      	ldr	r2, [pc, #48]	; (8005600 <pxPortInitialiseStack+0x64>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b14      	subs	r3, #20
 80055d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b04      	subs	r3, #4
 80055e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f06f 0202 	mvn.w	r2, #2
 80055ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b20      	subs	r3, #32
 80055f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055f2:	68fb      	ldr	r3, [r7, #12]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	08005605 	.word	0x08005605

08005604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <prvTaskExitError+0x54>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d00a      	beq.n	800562e <prvTaskExitError+0x2a>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	60fb      	str	r3, [r7, #12]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <prvTaskExitError+0x28>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60bb      	str	r3, [r7, #8]
}
 8005640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005642:	bf00      	nop
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0fc      	beq.n	8005644 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	2000000c 	.word	0x2000000c
 800565c:	00000000 	.word	0x00000000

08005660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <pxCurrentTCBConst2>)
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	f380 8809 	msr	PSP, r0
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	4770      	bx	lr
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst2>:
 8005680:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005688:	4808      	ldr	r0, [pc, #32]	; (80056ac <prvPortStartFirstTask+0x24>)
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	f380 8808 	msr	MSP, r0
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8814 	msr	CONTROL, r0
 800569a:	b662      	cpsie	i
 800569c:	b661      	cpsie	f
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	df00      	svc	0
 80056a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056aa:	bf00      	nop
 80056ac:	e000ed08 	.word	0xe000ed08

080056b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056b6:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <xPortStartScheduler+0x120>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a46      	ldr	r2, [pc, #280]	; (80057d4 <xPortStartScheduler+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10a      	bne.n	80056d6 <xPortStartScheduler+0x26>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056d6:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <xPortStartScheduler+0x120>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3f      	ldr	r2, [pc, #252]	; (80057d8 <xPortStartScheduler+0x128>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10a      	bne.n	80056f6 <xPortStartScheduler+0x46>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056f6:	4b39      	ldr	r3, [pc, #228]	; (80057dc <xPortStartScheduler+0x12c>)
 80056f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <xPortStartScheduler+0x130>)
 800571c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800571e:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <xPortStartScheduler+0x134>)
 8005720:	2207      	movs	r2, #7
 8005722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005724:	e009      	b.n	800573a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005726:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <xPortStartScheduler+0x134>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3b01      	subs	r3, #1
 800572c:	4a2d      	ldr	r2, [pc, #180]	; (80057e4 <xPortStartScheduler+0x134>)
 800572e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d0ef      	beq.n	8005726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005746:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <xPortStartScheduler+0x134>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1c3 0307 	rsb	r3, r3, #7
 800574e:	2b04      	cmp	r3, #4
 8005750:	d00a      	beq.n	8005768 <xPortStartScheduler+0xb8>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60bb      	str	r3, [r7, #8]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <xPortStartScheduler+0x134>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <xPortStartScheduler+0x134>)
 8005770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <xPortStartScheduler+0x134>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800577a:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <xPortStartScheduler+0x134>)
 800577c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005786:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <xPortStartScheduler+0x138>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <xPortStartScheduler+0x138>)
 800578c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <xPortStartScheduler+0x138>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <xPortStartScheduler+0x138>)
 8005798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800579c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800579e:	f000 f8dd 	bl	800595c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <xPortStartScheduler+0x13c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057a8:	f000 f8fc 	bl	80059a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057ac:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <xPortStartScheduler+0x140>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <xPortStartScheduler+0x140>)
 80057b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057b8:	f7ff ff66 	bl	8005688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057bc:	f7ff fd38 	bl	8005230 <vTaskSwitchContext>
	prvTaskExitError();
 80057c0:	f7ff ff20 	bl	8005604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00
 80057d4:	410fc271 	.word	0x410fc271
 80057d8:	410fc270 	.word	0x410fc270
 80057dc:	e000e400 	.word	0xe000e400
 80057e0:	20000c08 	.word	0x20000c08
 80057e4:	20000c0c 	.word	0x20000c0c
 80057e8:	e000ed20 	.word	0xe000ed20
 80057ec:	2000000c 	.word	0x2000000c
 80057f0:	e000ef34 	.word	0xe000ef34

080057f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <vPortEnterCritical+0x58>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <vPortEnterCritical+0x58>)
 8005816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <vPortEnterCritical+0x58>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10f      	bne.n	8005840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <vPortEnterCritical+0x5c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <vPortEnterCritical+0x4c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <vPortEnterCritical+0x4a>
	}
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	2000000c 	.word	0x2000000c
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <vPortExitCritical+0x50>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <vPortExitCritical+0x24>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	607b      	str	r3, [r7, #4]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <vPortExitCritical+0x50>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <vPortExitCritical+0x50>)
 8005880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <vPortExitCritical+0x50>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <vPortExitCritical+0x42>
 800588a:	2300      	movs	r3, #0
 800588c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
	...

080058b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058b0:	f3ef 8009 	mrs	r0, PSP
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <pxCurrentTCBConst>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f01e 0f10 	tst.w	lr, #16
 80058c0:	bf08      	it	eq
 80058c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058d4:	f380 8811 	msr	BASEPRI, r0
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f7ff fca6 	bl	8005230 <vTaskSwitchContext>
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f380 8811 	msr	BASEPRI, r0
 80058ec:	bc09      	pop	{r0, r3}
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f6:	f01e 0f10 	tst.w	lr, #16
 80058fa:	bf08      	it	eq
 80058fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005900:	f380 8809 	msr	PSP, r0
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w

08005910 <pxCurrentTCBConst>:
 8005910:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop

08005918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005932:	f7ff fbc5 	bl	80050c0 <xTaskIncrementTick>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <xPortSysTickHandler+0x40>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	2300      	movs	r3, #0
 8005946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f383 8811 	msr	BASEPRI, r3
}
 800594e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <vPortSetupTimerInterrupt+0x38>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <vPortSetupTimerInterrupt+0x3c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <vPortSetupTimerInterrupt+0x40>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <vPortSetupTimerInterrupt+0x44>)
 800597a:	3b01      	subs	r3, #1
 800597c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005980:	2207      	movs	r2, #7
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e010 	.word	0xe000e010
 8005994:	e000e018 	.word	0xe000e018
 8005998:	20000000 	.word	0x20000000
 800599c:	10624dd3 	.word	0x10624dd3
 80059a0:	e000e014 	.word	0xe000e014

080059a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059b4 <vPortEnableVFP+0x10>
 80059a8:	6801      	ldr	r1, [r0, #0]
 80059aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ae:	6001      	str	r1, [r0, #0]
 80059b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059b2:	bf00      	nop
 80059b4:	e000ed88 	.word	0xe000ed88

080059b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059c4:	f7ff fac2 	bl	8004f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059c8:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <pvPortMalloc+0x180>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059d0:	f000 f920 	bl	8005c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059d4:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <pvPortMalloc+0x184>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 8093 	bne.w	8005b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01d      	beq.n	8005a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059e8:	2208      	movs	r2, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d014      	beq.n	8005a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f023 0307 	bic.w	r3, r3, #7
 8005a00:	3308      	adds	r3, #8
 8005a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <pvPortMalloc+0x6c>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	617b      	str	r3, [r7, #20]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d06e      	beq.n	8005b08 <pvPortMalloc+0x150>
 8005a2a:	4b45      	ldr	r3, [pc, #276]	; (8005b40 <pvPortMalloc+0x188>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d869      	bhi.n	8005b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <pvPortMalloc+0x18c>)
 8005a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <pvPortMalloc+0x18c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a3e:	e004      	b.n	8005a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d903      	bls.n	8005a5c <pvPortMalloc+0xa4>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f1      	bne.n	8005a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <pvPortMalloc+0x180>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d050      	beq.n	8005b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d91f      	bls.n	8005ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	613b      	str	r3, [r7, #16]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ac2:	69b8      	ldr	r0, [r7, #24]
 8005ac4:	f000 f908 	bl	8005cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <pvPortMalloc+0x188>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <pvPortMalloc+0x188>)
 8005ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <pvPortMalloc+0x188>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <pvPortMalloc+0x190>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d203      	bcs.n	8005aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <pvPortMalloc+0x188>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <pvPortMalloc+0x190>)
 8005ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <pvPortMalloc+0x184>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005afe:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <pvPortMalloc+0x194>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <pvPortMalloc+0x194>)
 8005b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b08:	f7ff fa2e 	bl	8004f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <pvPortMalloc+0x174>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	60fb      	str	r3, [r7, #12]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <pvPortMalloc+0x172>
	return pvReturn;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20004818 	.word	0x20004818
 8005b3c:	2000482c 	.word	0x2000482c
 8005b40:	2000481c 	.word	0x2000481c
 8005b44:	20004810 	.word	0x20004810
 8005b48:	20004820 	.word	0x20004820
 8005b4c:	20004824 	.word	0x20004824

08005b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04d      	beq.n	8005bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b62:	2308      	movs	r3, #8
 8005b64:	425b      	negs	r3, r3
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <vPortFree+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <vPortFree+0x44>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <vPortFree+0x62>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60bb      	str	r3, [r7, #8]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <vPortFree+0xb8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11a      	bne.n	8005bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <vPortFree+0xb8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bd8:	f7ff f9b8 	bl	8004f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <vPortFree+0xbc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <vPortFree+0xbc>)
 8005be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f000 f874 	bl	8005cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <vPortFree+0xc0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <vPortFree+0xc0>)
 8005bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bfa:	f7ff f9b5 	bl	8004f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	2000482c 	.word	0x2000482c
 8005c0c:	2000481c 	.word	0x2000481c
 8005c10:	20004828 	.word	0x20004828

08005c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <prvHeapInit+0xac>)
 8005c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3307      	adds	r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <prvHeapInit+0xac>)
 8005c44:	4413      	add	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c60:	2208      	movs	r2, #8
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <prvHeapInit+0xb8>)
 8005ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <prvHeapInit+0xbc>)
 8005caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <prvHeapInit+0xc0>)
 8005cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000c10 	.word	0x20000c10
 8005cc4:	20004810 	.word	0x20004810
 8005cc8:	20004818 	.word	0x20004818
 8005ccc:	20004820 	.word	0x20004820
 8005cd0:	2000481c 	.word	0x2000481c
 8005cd4:	2000482c 	.word	0x2000482c

08005cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ce0:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <prvInsertBlockIntoFreeList+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <prvInsertBlockIntoFreeList+0x14>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d8f7      	bhi.n	8005ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d108      	bne.n	8005d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d118      	bne.n	8005d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d00d      	beq.n	8005d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	441a      	add	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e008      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e003      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d002      	beq.n	8005d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20004810 	.word	0x20004810
 8005d88:	20004818 	.word	0x20004818

08005d8c <std>:
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
 8005d92:	e9c0 3300 	strd	r3, r3, [r0]
 8005d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d9a:	6083      	str	r3, [r0, #8]
 8005d9c:	8181      	strh	r1, [r0, #12]
 8005d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8005da0:	81c2      	strh	r2, [r0, #14]
 8005da2:	6183      	str	r3, [r0, #24]
 8005da4:	4619      	mov	r1, r3
 8005da6:	2208      	movs	r2, #8
 8005da8:	305c      	adds	r0, #92	; 0x5c
 8005daa:	f000 fa2b 	bl	8006204 <memset>
 8005dae:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <std+0x58>)
 8005db0:	6263      	str	r3, [r4, #36]	; 0x24
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <std+0x5c>)
 8005db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <std+0x60>)
 8005db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <std+0x64>)
 8005dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <std+0x68>)
 8005dc0:	6224      	str	r4, [r4, #32]
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	d006      	beq.n	8005dd4 <std+0x48>
 8005dc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dca:	4294      	cmp	r4, r2
 8005dcc:	d002      	beq.n	8005dd4 <std+0x48>
 8005dce:	33d0      	adds	r3, #208	; 0xd0
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d105      	bne.n	8005de0 <std+0x54>
 8005dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ddc:	f000 ba8a 	b.w	80062f4 <__retarget_lock_init_recursive>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	bf00      	nop
 8005de4:	08006055 	.word	0x08006055
 8005de8:	08006077 	.word	0x08006077
 8005dec:	080060af 	.word	0x080060af
 8005df0:	080060d3 	.word	0x080060d3
 8005df4:	20004830 	.word	0x20004830

08005df8 <stdio_exit_handler>:
 8005df8:	4a02      	ldr	r2, [pc, #8]	; (8005e04 <stdio_exit_handler+0xc>)
 8005dfa:	4903      	ldr	r1, [pc, #12]	; (8005e08 <stdio_exit_handler+0x10>)
 8005dfc:	4803      	ldr	r0, [pc, #12]	; (8005e0c <stdio_exit_handler+0x14>)
 8005dfe:	f000 b869 	b.w	8005ed4 <_fwalk_sglue>
 8005e02:	bf00      	nop
 8005e04:	20000010 	.word	0x20000010
 8005e08:	08006e6d 	.word	0x08006e6d
 8005e0c:	2000001c 	.word	0x2000001c

08005e10 <cleanup_stdio>:
 8005e10:	6841      	ldr	r1, [r0, #4]
 8005e12:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <cleanup_stdio+0x34>)
 8005e14:	4299      	cmp	r1, r3
 8005e16:	b510      	push	{r4, lr}
 8005e18:	4604      	mov	r4, r0
 8005e1a:	d001      	beq.n	8005e20 <cleanup_stdio+0x10>
 8005e1c:	f001 f826 	bl	8006e6c <_fflush_r>
 8005e20:	68a1      	ldr	r1, [r4, #8]
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <cleanup_stdio+0x38>)
 8005e24:	4299      	cmp	r1, r3
 8005e26:	d002      	beq.n	8005e2e <cleanup_stdio+0x1e>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f001 f81f 	bl	8006e6c <_fflush_r>
 8005e2e:	68e1      	ldr	r1, [r4, #12]
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <cleanup_stdio+0x3c>)
 8005e32:	4299      	cmp	r1, r3
 8005e34:	d004      	beq.n	8005e40 <cleanup_stdio+0x30>
 8005e36:	4620      	mov	r0, r4
 8005e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e3c:	f001 b816 	b.w	8006e6c <_fflush_r>
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	bf00      	nop
 8005e44:	20004830 	.word	0x20004830
 8005e48:	20004898 	.word	0x20004898
 8005e4c:	20004900 	.word	0x20004900

08005e50 <global_stdio_init.part.0>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <global_stdio_init.part.0+0x30>)
 8005e54:	4c0b      	ldr	r4, [pc, #44]	; (8005e84 <global_stdio_init.part.0+0x34>)
 8005e56:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <global_stdio_init.part.0+0x38>)
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2104      	movs	r1, #4
 8005e60:	f7ff ff94 	bl	8005d8c <std>
 8005e64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2109      	movs	r1, #9
 8005e6c:	f7ff ff8e 	bl	8005d8c <std>
 8005e70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e74:	2202      	movs	r2, #2
 8005e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7a:	2112      	movs	r1, #18
 8005e7c:	f7ff bf86 	b.w	8005d8c <std>
 8005e80:	20004968 	.word	0x20004968
 8005e84:	20004830 	.word	0x20004830
 8005e88:	08005df9 	.word	0x08005df9

08005e8c <__sfp_lock_acquire>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	; (8005e94 <__sfp_lock_acquire+0x8>)
 8005e8e:	f000 ba32 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 8005e92:	bf00      	nop
 8005e94:	20004971 	.word	0x20004971

08005e98 <__sfp_lock_release>:
 8005e98:	4801      	ldr	r0, [pc, #4]	; (8005ea0 <__sfp_lock_release+0x8>)
 8005e9a:	f000 ba2d 	b.w	80062f8 <__retarget_lock_release_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	20004971 	.word	0x20004971

08005ea4 <__sinit>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	f7ff fff0 	bl	8005e8c <__sfp_lock_acquire>
 8005eac:	6a23      	ldr	r3, [r4, #32]
 8005eae:	b11b      	cbz	r3, 8005eb8 <__sinit+0x14>
 8005eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb4:	f7ff bff0 	b.w	8005e98 <__sfp_lock_release>
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <__sinit+0x28>)
 8005eba:	6223      	str	r3, [r4, #32]
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <__sinit+0x2c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f5      	bne.n	8005eb0 <__sinit+0xc>
 8005ec4:	f7ff ffc4 	bl	8005e50 <global_stdio_init.part.0>
 8005ec8:	e7f2      	b.n	8005eb0 <__sinit+0xc>
 8005eca:	bf00      	nop
 8005ecc:	08005e11 	.word	0x08005e11
 8005ed0:	20004968 	.word	0x20004968

08005ed4 <_fwalk_sglue>:
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	4607      	mov	r7, r0
 8005eda:	4688      	mov	r8, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee8:	d505      	bpl.n	8005ef6 <_fwalk_sglue+0x22>
 8005eea:	6824      	ldr	r4, [r4, #0]
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	d1f7      	bne.n	8005ee0 <_fwalk_sglue+0xc>
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d907      	bls.n	8005f0c <_fwalk_sglue+0x38>
 8005efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f00:	3301      	adds	r3, #1
 8005f02:	d003      	beq.n	8005f0c <_fwalk_sglue+0x38>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c0      	blx	r8
 8005f0a:	4306      	orrs	r6, r0
 8005f0c:	3568      	adds	r5, #104	; 0x68
 8005f0e:	e7e9      	b.n	8005ee4 <_fwalk_sglue+0x10>

08005f10 <iprintf>:
 8005f10:	b40f      	push	{r0, r1, r2, r3}
 8005f12:	b507      	push	{r0, r1, r2, lr}
 8005f14:	4906      	ldr	r1, [pc, #24]	; (8005f30 <iprintf+0x20>)
 8005f16:	ab04      	add	r3, sp, #16
 8005f18:	6808      	ldr	r0, [r1, #0]
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	6881      	ldr	r1, [r0, #8]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	f000 fc73 	bl	800680c <_vfiprintf_r>
 8005f26:	b003      	add	sp, #12
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr
 8005f30:	20000068 	.word	0x20000068

08005f34 <_puts_r>:
 8005f34:	6a03      	ldr	r3, [r0, #32]
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	6884      	ldr	r4, [r0, #8]
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	460e      	mov	r6, r1
 8005f3e:	b90b      	cbnz	r3, 8005f44 <_puts_r+0x10>
 8005f40:	f7ff ffb0 	bl	8005ea4 <__sinit>
 8005f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f46:	07db      	lsls	r3, r3, #31
 8005f48:	d405      	bmi.n	8005f56 <_puts_r+0x22>
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	0598      	lsls	r0, r3, #22
 8005f4e:	d402      	bmi.n	8005f56 <_puts_r+0x22>
 8005f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f52:	f000 f9d0 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	0719      	lsls	r1, r3, #28
 8005f5a:	d513      	bpl.n	8005f84 <_puts_r+0x50>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	b18b      	cbz	r3, 8005f84 <_puts_r+0x50>
 8005f60:	3e01      	subs	r6, #1
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	60a3      	str	r3, [r4, #8]
 8005f6c:	b9e9      	cbnz	r1, 8005faa <_puts_r+0x76>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da2e      	bge.n	8005fd0 <_puts_r+0x9c>
 8005f72:	4622      	mov	r2, r4
 8005f74:	210a      	movs	r1, #10
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f8af 	bl	80060da <__swbuf_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d007      	beq.n	8005f90 <_puts_r+0x5c>
 8005f80:	250a      	movs	r5, #10
 8005f82:	e007      	b.n	8005f94 <_puts_r+0x60>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 f8e4 	bl	8006154 <__swsetup_r>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d0e7      	beq.n	8005f60 <_puts_r+0x2c>
 8005f90:	f04f 35ff 	mov.w	r5, #4294967295
 8005f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f96:	07da      	lsls	r2, r3, #31
 8005f98:	d405      	bmi.n	8005fa6 <_puts_r+0x72>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	059b      	lsls	r3, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_puts_r+0x72>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa2:	f000 f9a9 	bl	80062f8 <__retarget_lock_release_recursive>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da04      	bge.n	8005fb8 <_puts_r+0x84>
 8005fae:	69a2      	ldr	r2, [r4, #24]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	dc06      	bgt.n	8005fc2 <_puts_r+0x8e>
 8005fb4:	290a      	cmp	r1, #10
 8005fb6:	d004      	beq.n	8005fc2 <_puts_r+0x8e>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	7019      	strb	r1, [r3, #0]
 8005fc0:	e7cf      	b.n	8005f62 <_puts_r+0x2e>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f888 	bl	80060da <__swbuf_r>
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d1c9      	bne.n	8005f62 <_puts_r+0x2e>
 8005fce:	e7df      	b.n	8005f90 <_puts_r+0x5c>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	250a      	movs	r5, #10
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	6022      	str	r2, [r4, #0]
 8005fd8:	701d      	strb	r5, [r3, #0]
 8005fda:	e7db      	b.n	8005f94 <_puts_r+0x60>

08005fdc <puts>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <puts+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f7ff bfa7 	b.w	8005f34 <_puts_r>
 8005fe6:	bf00      	nop
 8005fe8:	20000068 	.word	0x20000068

08005fec <sniprintf>:
 8005fec:	b40c      	push	{r2, r3}
 8005fee:	b530      	push	{r4, r5, lr}
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <sniprintf+0x64>)
 8005ff2:	1e0c      	subs	r4, r1, #0
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	b09d      	sub	sp, #116	; 0x74
 8005ff8:	da08      	bge.n	800600c <sniprintf+0x20>
 8005ffa:	238b      	movs	r3, #139	; 0x8b
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	b01d      	add	sp, #116	; 0x74
 8006004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006008:	b002      	add	sp, #8
 800600a:	4770      	bx	lr
 800600c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006014:	bf14      	ite	ne
 8006016:	f104 33ff 	addne.w	r3, r4, #4294967295
 800601a:	4623      	moveq	r3, r4
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006024:	9002      	str	r0, [sp, #8]
 8006026:	9006      	str	r0, [sp, #24]
 8006028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800602c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800602e:	ab21      	add	r3, sp, #132	; 0x84
 8006030:	a902      	add	r1, sp, #8
 8006032:	4628      	mov	r0, r5
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f000 fac1 	bl	80065bc <_svfiprintf_r>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	bfbc      	itt	lt
 800603e:	238b      	movlt	r3, #139	; 0x8b
 8006040:	602b      	strlt	r3, [r5, #0]
 8006042:	2c00      	cmp	r4, #0
 8006044:	d0dd      	beq.n	8006002 <sniprintf+0x16>
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e7d9      	b.n	8006002 <sniprintf+0x16>
 800604e:	bf00      	nop
 8006050:	20000068 	.word	0x20000068

08006054 <__sread>:
 8006054:	b510      	push	{r4, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	f000 f8fc 	bl	8006258 <_read_r>
 8006060:	2800      	cmp	r0, #0
 8006062:	bfab      	itete	ge
 8006064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006066:	89a3      	ldrhlt	r3, [r4, #12]
 8006068:	181b      	addge	r3, r3, r0
 800606a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800606e:	bfac      	ite	ge
 8006070:	6563      	strge	r3, [r4, #84]	; 0x54
 8006072:	81a3      	strhlt	r3, [r4, #12]
 8006074:	bd10      	pop	{r4, pc}

08006076 <__swrite>:
 8006076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607a:	461f      	mov	r7, r3
 800607c:	898b      	ldrh	r3, [r1, #12]
 800607e:	05db      	lsls	r3, r3, #23
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4616      	mov	r6, r2
 8006086:	d505      	bpl.n	8006094 <__swrite+0x1e>
 8006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608c:	2302      	movs	r3, #2
 800608e:	2200      	movs	r2, #0
 8006090:	f000 f8d0 	bl	8006234 <_lseek_r>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	4632      	mov	r2, r6
 80060a2:	463b      	mov	r3, r7
 80060a4:	4628      	mov	r0, r5
 80060a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	f000 b8e7 	b.w	800627c <_write_r>

080060ae <__sseek>:
 80060ae:	b510      	push	{r4, lr}
 80060b0:	460c      	mov	r4, r1
 80060b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b6:	f000 f8bd 	bl	8006234 <_lseek_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	bf15      	itete	ne
 80060c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ca:	81a3      	strheq	r3, [r4, #12]
 80060cc:	bf18      	it	ne
 80060ce:	81a3      	strhne	r3, [r4, #12]
 80060d0:	bd10      	pop	{r4, pc}

080060d2 <__sclose>:
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 b89d 	b.w	8006214 <_close_r>

080060da <__swbuf_r>:
 80060da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060dc:	460e      	mov	r6, r1
 80060de:	4614      	mov	r4, r2
 80060e0:	4605      	mov	r5, r0
 80060e2:	b118      	cbz	r0, 80060ec <__swbuf_r+0x12>
 80060e4:	6a03      	ldr	r3, [r0, #32]
 80060e6:	b90b      	cbnz	r3, 80060ec <__swbuf_r+0x12>
 80060e8:	f7ff fedc 	bl	8005ea4 <__sinit>
 80060ec:	69a3      	ldr	r3, [r4, #24]
 80060ee:	60a3      	str	r3, [r4, #8]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	071a      	lsls	r2, r3, #28
 80060f4:	d525      	bpl.n	8006142 <__swbuf_r+0x68>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	b31b      	cbz	r3, 8006142 <__swbuf_r+0x68>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	1a98      	subs	r0, r3, r2
 8006100:	6963      	ldr	r3, [r4, #20]
 8006102:	b2f6      	uxtb	r6, r6
 8006104:	4283      	cmp	r3, r0
 8006106:	4637      	mov	r7, r6
 8006108:	dc04      	bgt.n	8006114 <__swbuf_r+0x3a>
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	f000 fead 	bl	8006e6c <_fflush_r>
 8006112:	b9e0      	cbnz	r0, 800614e <__swbuf_r+0x74>
 8006114:	68a3      	ldr	r3, [r4, #8]
 8006116:	3b01      	subs	r3, #1
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	6022      	str	r2, [r4, #0]
 8006120:	701e      	strb	r6, [r3, #0]
 8006122:	6962      	ldr	r2, [r4, #20]
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	d004      	beq.n	8006134 <__swbuf_r+0x5a>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	d506      	bpl.n	800613e <__swbuf_r+0x64>
 8006130:	2e0a      	cmp	r6, #10
 8006132:	d104      	bne.n	800613e <__swbuf_r+0x64>
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	f000 fe98 	bl	8006e6c <_fflush_r>
 800613c:	b938      	cbnz	r0, 800614e <__swbuf_r+0x74>
 800613e:	4638      	mov	r0, r7
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f805 	bl	8006154 <__swsetup_r>
 800614a:	2800      	cmp	r0, #0
 800614c:	d0d5      	beq.n	80060fa <__swbuf_r+0x20>
 800614e:	f04f 37ff 	mov.w	r7, #4294967295
 8006152:	e7f4      	b.n	800613e <__swbuf_r+0x64>

08006154 <__swsetup_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <__swsetup_r+0xac>)
 8006158:	4605      	mov	r5, r0
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	460c      	mov	r4, r1
 800615e:	b118      	cbz	r0, 8006168 <__swsetup_r+0x14>
 8006160:	6a03      	ldr	r3, [r0, #32]
 8006162:	b90b      	cbnz	r3, 8006168 <__swsetup_r+0x14>
 8006164:	f7ff fe9e 	bl	8005ea4 <__sinit>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800616e:	0718      	lsls	r0, r3, #28
 8006170:	d422      	bmi.n	80061b8 <__swsetup_r+0x64>
 8006172:	06d9      	lsls	r1, r3, #27
 8006174:	d407      	bmi.n	8006186 <__swsetup_r+0x32>
 8006176:	2309      	movs	r3, #9
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e034      	b.n	80061f0 <__swsetup_r+0x9c>
 8006186:	0758      	lsls	r0, r3, #29
 8006188:	d512      	bpl.n	80061b0 <__swsetup_r+0x5c>
 800618a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800618c:	b141      	cbz	r1, 80061a0 <__swsetup_r+0x4c>
 800618e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006192:	4299      	cmp	r1, r3
 8006194:	d002      	beq.n	800619c <__swsetup_r+0x48>
 8006196:	4628      	mov	r0, r5
 8006198:	f000 f8be 	bl	8006318 <_free_r>
 800619c:	2300      	movs	r3, #0
 800619e:	6363      	str	r3, [r4, #52]	; 0x34
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	2300      	movs	r3, #0
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	b94b      	cbnz	r3, 80061d0 <__swsetup_r+0x7c>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c6:	d003      	beq.n	80061d0 <__swsetup_r+0x7c>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fe9c 	bl	8006f08 <__smakebuf_r>
 80061d0:	89a0      	ldrh	r0, [r4, #12]
 80061d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061d6:	f010 0301 	ands.w	r3, r0, #1
 80061da:	d00a      	beq.n	80061f2 <__swsetup_r+0x9e>
 80061dc:	2300      	movs	r3, #0
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	6963      	ldr	r3, [r4, #20]
 80061e2:	425b      	negs	r3, r3
 80061e4:	61a3      	str	r3, [r4, #24]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	b943      	cbnz	r3, 80061fc <__swsetup_r+0xa8>
 80061ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061ee:	d1c4      	bne.n	800617a <__swsetup_r+0x26>
 80061f0:	bd38      	pop	{r3, r4, r5, pc}
 80061f2:	0781      	lsls	r1, r0, #30
 80061f4:	bf58      	it	pl
 80061f6:	6963      	ldrpl	r3, [r4, #20]
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	e7f4      	b.n	80061e6 <__swsetup_r+0x92>
 80061fc:	2000      	movs	r0, #0
 80061fe:	e7f7      	b.n	80061f0 <__swsetup_r+0x9c>
 8006200:	20000068 	.word	0x20000068

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <_close_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d06      	ldr	r5, [pc, #24]	; (8006230 <_close_r+0x1c>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fa ffd8 	bl	80011d4 <_close>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_close_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_close_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	2000496c 	.word	0x2000496c

08006234 <_lseek_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d07      	ldr	r5, [pc, #28]	; (8006254 <_lseek_r+0x20>)
 8006238:	4604      	mov	r4, r0
 800623a:	4608      	mov	r0, r1
 800623c:	4611      	mov	r1, r2
 800623e:	2200      	movs	r2, #0
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f7fa ffed 	bl	8001222 <_lseek>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_lseek_r+0x1e>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_lseek_r+0x1e>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	2000496c 	.word	0x2000496c

08006258 <_read_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d07      	ldr	r5, [pc, #28]	; (8006278 <_read_r+0x20>)
 800625c:	4604      	mov	r4, r0
 800625e:	4608      	mov	r0, r1
 8006260:	4611      	mov	r1, r2
 8006262:	2200      	movs	r2, #0
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fa ff7b 	bl	8001162 <_read>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_read_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_read_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	2000496c 	.word	0x2000496c

0800627c <_write_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d07      	ldr	r5, [pc, #28]	; (800629c <_write_r+0x20>)
 8006280:	4604      	mov	r4, r0
 8006282:	4608      	mov	r0, r1
 8006284:	4611      	mov	r1, r2
 8006286:	2200      	movs	r2, #0
 8006288:	602a      	str	r2, [r5, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	f7fa ff86 	bl	800119c <_write>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_write_r+0x1e>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_write_r+0x1e>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	2000496c 	.word	0x2000496c

080062a0 <__errno>:
 80062a0:	4b01      	ldr	r3, [pc, #4]	; (80062a8 <__errno+0x8>)
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000068 	.word	0x20000068

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	; (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	; (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	; (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	; (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 fee2 	bl	8007088 <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	08007254 	.word	0x08007254
 80062e8:	08007254 	.word	0x08007254
 80062ec:	08007254 	.word	0x08007254
 80062f0:	08007258 	.word	0x08007258

080062f4 <__retarget_lock_init_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__retarget_lock_acquire_recursive>:
 80062f6:	4770      	bx	lr

080062f8 <__retarget_lock_release_recursive>:
 80062f8:	4770      	bx	lr

080062fa <memcpy>:
 80062fa:	440a      	add	r2, r1
 80062fc:	4291      	cmp	r1, r2
 80062fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006302:	d100      	bne.n	8006306 <memcpy+0xc>
 8006304:	4770      	bx	lr
 8006306:	b510      	push	{r4, lr}
 8006308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006310:	4291      	cmp	r1, r2
 8006312:	d1f9      	bne.n	8006308 <memcpy+0xe>
 8006314:	bd10      	pop	{r4, pc}
	...

08006318 <_free_r>:
 8006318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631a:	2900      	cmp	r1, #0
 800631c:	d044      	beq.n	80063a8 <_free_r+0x90>
 800631e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006322:	9001      	str	r0, [sp, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f1a1 0404 	sub.w	r4, r1, #4
 800632a:	bfb8      	it	lt
 800632c:	18e4      	addlt	r4, r4, r3
 800632e:	f000 f8df 	bl	80064f0 <__malloc_lock>
 8006332:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <_free_r+0x94>)
 8006334:	9801      	ldr	r0, [sp, #4]
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	b933      	cbnz	r3, 8006348 <_free_r+0x30>
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	6014      	str	r4, [r2, #0]
 800633e:	b003      	add	sp, #12
 8006340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006344:	f000 b8da 	b.w	80064fc <__malloc_unlock>
 8006348:	42a3      	cmp	r3, r4
 800634a:	d908      	bls.n	800635e <_free_r+0x46>
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	1961      	adds	r1, r4, r5
 8006350:	428b      	cmp	r3, r1
 8006352:	bf01      	itttt	eq
 8006354:	6819      	ldreq	r1, [r3, #0]
 8006356:	685b      	ldreq	r3, [r3, #4]
 8006358:	1949      	addeq	r1, r1, r5
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	e7ed      	b.n	800633a <_free_r+0x22>
 800635e:	461a      	mov	r2, r3
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b10b      	cbz	r3, 8006368 <_free_r+0x50>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d9fa      	bls.n	800635e <_free_r+0x46>
 8006368:	6811      	ldr	r1, [r2, #0]
 800636a:	1855      	adds	r5, r2, r1
 800636c:	42a5      	cmp	r5, r4
 800636e:	d10b      	bne.n	8006388 <_free_r+0x70>
 8006370:	6824      	ldr	r4, [r4, #0]
 8006372:	4421      	add	r1, r4
 8006374:	1854      	adds	r4, r2, r1
 8006376:	42a3      	cmp	r3, r4
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	d1e0      	bne.n	800633e <_free_r+0x26>
 800637c:	681c      	ldr	r4, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	6053      	str	r3, [r2, #4]
 8006382:	440c      	add	r4, r1
 8006384:	6014      	str	r4, [r2, #0]
 8006386:	e7da      	b.n	800633e <_free_r+0x26>
 8006388:	d902      	bls.n	8006390 <_free_r+0x78>
 800638a:	230c      	movs	r3, #12
 800638c:	6003      	str	r3, [r0, #0]
 800638e:	e7d6      	b.n	800633e <_free_r+0x26>
 8006390:	6825      	ldr	r5, [r4, #0]
 8006392:	1961      	adds	r1, r4, r5
 8006394:	428b      	cmp	r3, r1
 8006396:	bf04      	itt	eq
 8006398:	6819      	ldreq	r1, [r3, #0]
 800639a:	685b      	ldreq	r3, [r3, #4]
 800639c:	6063      	str	r3, [r4, #4]
 800639e:	bf04      	itt	eq
 80063a0:	1949      	addeq	r1, r1, r5
 80063a2:	6021      	streq	r1, [r4, #0]
 80063a4:	6054      	str	r4, [r2, #4]
 80063a6:	e7ca      	b.n	800633e <_free_r+0x26>
 80063a8:	b003      	add	sp, #12
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	20004974 	.word	0x20004974

080063b0 <sbrk_aligned>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4e0e      	ldr	r6, [pc, #56]	; (80063ec <sbrk_aligned+0x3c>)
 80063b4:	460c      	mov	r4, r1
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	4605      	mov	r5, r0
 80063ba:	b911      	cbnz	r1, 80063c2 <sbrk_aligned+0x12>
 80063bc:	f000 fe1c 	bl	8006ff8 <_sbrk_r>
 80063c0:	6030      	str	r0, [r6, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 fe17 	bl	8006ff8 <_sbrk_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d00a      	beq.n	80063e4 <sbrk_aligned+0x34>
 80063ce:	1cc4      	adds	r4, r0, #3
 80063d0:	f024 0403 	bic.w	r4, r4, #3
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d007      	beq.n	80063e8 <sbrk_aligned+0x38>
 80063d8:	1a21      	subs	r1, r4, r0
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 fe0c 	bl	8006ff8 <_sbrk_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	d101      	bne.n	80063e8 <sbrk_aligned+0x38>
 80063e4:	f04f 34ff 	mov.w	r4, #4294967295
 80063e8:	4620      	mov	r0, r4
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	20004978 	.word	0x20004978

080063f0 <_malloc_r>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	1ccd      	adds	r5, r1, #3
 80063f6:	f025 0503 	bic.w	r5, r5, #3
 80063fa:	3508      	adds	r5, #8
 80063fc:	2d0c      	cmp	r5, #12
 80063fe:	bf38      	it	cc
 8006400:	250c      	movcc	r5, #12
 8006402:	2d00      	cmp	r5, #0
 8006404:	4607      	mov	r7, r0
 8006406:	db01      	blt.n	800640c <_malloc_r+0x1c>
 8006408:	42a9      	cmp	r1, r5
 800640a:	d905      	bls.n	8006418 <_malloc_r+0x28>
 800640c:	230c      	movs	r3, #12
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	2600      	movs	r6, #0
 8006412:	4630      	mov	r0, r6
 8006414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006418:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064ec <_malloc_r+0xfc>
 800641c:	f000 f868 	bl	80064f0 <__malloc_lock>
 8006420:	f8d8 3000 	ldr.w	r3, [r8]
 8006424:	461c      	mov	r4, r3
 8006426:	bb5c      	cbnz	r4, 8006480 <_malloc_r+0x90>
 8006428:	4629      	mov	r1, r5
 800642a:	4638      	mov	r0, r7
 800642c:	f7ff ffc0 	bl	80063b0 <sbrk_aligned>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	4604      	mov	r4, r0
 8006434:	d155      	bne.n	80064e2 <_malloc_r+0xf2>
 8006436:	f8d8 4000 	ldr.w	r4, [r8]
 800643a:	4626      	mov	r6, r4
 800643c:	2e00      	cmp	r6, #0
 800643e:	d145      	bne.n	80064cc <_malloc_r+0xdc>
 8006440:	2c00      	cmp	r4, #0
 8006442:	d048      	beq.n	80064d6 <_malloc_r+0xe6>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	4631      	mov	r1, r6
 8006448:	4638      	mov	r0, r7
 800644a:	eb04 0903 	add.w	r9, r4, r3
 800644e:	f000 fdd3 	bl	8006ff8 <_sbrk_r>
 8006452:	4581      	cmp	r9, r0
 8006454:	d13f      	bne.n	80064d6 <_malloc_r+0xe6>
 8006456:	6821      	ldr	r1, [r4, #0]
 8006458:	1a6d      	subs	r5, r5, r1
 800645a:	4629      	mov	r1, r5
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff ffa7 	bl	80063b0 <sbrk_aligned>
 8006462:	3001      	adds	r0, #1
 8006464:	d037      	beq.n	80064d6 <_malloc_r+0xe6>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	442b      	add	r3, r5
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	f8d8 3000 	ldr.w	r3, [r8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d038      	beq.n	80064e6 <_malloc_r+0xf6>
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	42a2      	cmp	r2, r4
 8006478:	d12b      	bne.n	80064d2 <_malloc_r+0xe2>
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	e00f      	b.n	80064a0 <_malloc_r+0xb0>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	1b52      	subs	r2, r2, r5
 8006484:	d41f      	bmi.n	80064c6 <_malloc_r+0xd6>
 8006486:	2a0b      	cmp	r2, #11
 8006488:	d917      	bls.n	80064ba <_malloc_r+0xca>
 800648a:	1961      	adds	r1, r4, r5
 800648c:	42a3      	cmp	r3, r4
 800648e:	6025      	str	r5, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	6059      	strne	r1, [r3, #4]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	bf08      	it	eq
 8006498:	f8c8 1000 	streq.w	r1, [r8]
 800649c:	5162      	str	r2, [r4, r5]
 800649e:	604b      	str	r3, [r1, #4]
 80064a0:	4638      	mov	r0, r7
 80064a2:	f104 060b 	add.w	r6, r4, #11
 80064a6:	f000 f829 	bl	80064fc <__malloc_unlock>
 80064aa:	f026 0607 	bic.w	r6, r6, #7
 80064ae:	1d23      	adds	r3, r4, #4
 80064b0:	1af2      	subs	r2, r6, r3
 80064b2:	d0ae      	beq.n	8006412 <_malloc_r+0x22>
 80064b4:	1b9b      	subs	r3, r3, r6
 80064b6:	50a3      	str	r3, [r4, r2]
 80064b8:	e7ab      	b.n	8006412 <_malloc_r+0x22>
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	d1dd      	bne.n	800647c <_malloc_r+0x8c>
 80064c0:	f8c8 2000 	str.w	r2, [r8]
 80064c4:	e7ec      	b.n	80064a0 <_malloc_r+0xb0>
 80064c6:	4623      	mov	r3, r4
 80064c8:	6864      	ldr	r4, [r4, #4]
 80064ca:	e7ac      	b.n	8006426 <_malloc_r+0x36>
 80064cc:	4634      	mov	r4, r6
 80064ce:	6876      	ldr	r6, [r6, #4]
 80064d0:	e7b4      	b.n	800643c <_malloc_r+0x4c>
 80064d2:	4613      	mov	r3, r2
 80064d4:	e7cc      	b.n	8006470 <_malloc_r+0x80>
 80064d6:	230c      	movs	r3, #12
 80064d8:	603b      	str	r3, [r7, #0]
 80064da:	4638      	mov	r0, r7
 80064dc:	f000 f80e 	bl	80064fc <__malloc_unlock>
 80064e0:	e797      	b.n	8006412 <_malloc_r+0x22>
 80064e2:	6025      	str	r5, [r4, #0]
 80064e4:	e7dc      	b.n	80064a0 <_malloc_r+0xb0>
 80064e6:	605b      	str	r3, [r3, #4]
 80064e8:	deff      	udf	#255	; 0xff
 80064ea:	bf00      	nop
 80064ec:	20004974 	.word	0x20004974

080064f0 <__malloc_lock>:
 80064f0:	4801      	ldr	r0, [pc, #4]	; (80064f8 <__malloc_lock+0x8>)
 80064f2:	f7ff bf00 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 80064f6:	bf00      	nop
 80064f8:	20004970 	.word	0x20004970

080064fc <__malloc_unlock>:
 80064fc:	4801      	ldr	r0, [pc, #4]	; (8006504 <__malloc_unlock+0x8>)
 80064fe:	f7ff befb 	b.w	80062f8 <__retarget_lock_release_recursive>
 8006502:	bf00      	nop
 8006504:	20004970 	.word	0x20004970

08006508 <__ssputs_r>:
 8006508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	688e      	ldr	r6, [r1, #8]
 800650e:	461f      	mov	r7, r3
 8006510:	42be      	cmp	r6, r7
 8006512:	680b      	ldr	r3, [r1, #0]
 8006514:	4682      	mov	sl, r0
 8006516:	460c      	mov	r4, r1
 8006518:	4690      	mov	r8, r2
 800651a:	d82c      	bhi.n	8006576 <__ssputs_r+0x6e>
 800651c:	898a      	ldrh	r2, [r1, #12]
 800651e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006522:	d026      	beq.n	8006572 <__ssputs_r+0x6a>
 8006524:	6965      	ldr	r5, [r4, #20]
 8006526:	6909      	ldr	r1, [r1, #16]
 8006528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800652c:	eba3 0901 	sub.w	r9, r3, r1
 8006530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006534:	1c7b      	adds	r3, r7, #1
 8006536:	444b      	add	r3, r9
 8006538:	106d      	asrs	r5, r5, #1
 800653a:	429d      	cmp	r5, r3
 800653c:	bf38      	it	cc
 800653e:	461d      	movcc	r5, r3
 8006540:	0553      	lsls	r3, r2, #21
 8006542:	d527      	bpl.n	8006594 <__ssputs_r+0x8c>
 8006544:	4629      	mov	r1, r5
 8006546:	f7ff ff53 	bl	80063f0 <_malloc_r>
 800654a:	4606      	mov	r6, r0
 800654c:	b360      	cbz	r0, 80065a8 <__ssputs_r+0xa0>
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	464a      	mov	r2, r9
 8006552:	f7ff fed2 	bl	80062fa <memcpy>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	6126      	str	r6, [r4, #16]
 8006564:	6165      	str	r5, [r4, #20]
 8006566:	444e      	add	r6, r9
 8006568:	eba5 0509 	sub.w	r5, r5, r9
 800656c:	6026      	str	r6, [r4, #0]
 800656e:	60a5      	str	r5, [r4, #8]
 8006570:	463e      	mov	r6, r7
 8006572:	42be      	cmp	r6, r7
 8006574:	d900      	bls.n	8006578 <__ssputs_r+0x70>
 8006576:	463e      	mov	r6, r7
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	4632      	mov	r2, r6
 800657c:	4641      	mov	r1, r8
 800657e:	f000 fcff 	bl	8006f80 <memmove>
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	1b9b      	subs	r3, r3, r6
 8006586:	60a3      	str	r3, [r4, #8]
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	4433      	add	r3, r6
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	2000      	movs	r0, #0
 8006590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006594:	462a      	mov	r2, r5
 8006596:	f000 fd3f 	bl	8007018 <_realloc_r>
 800659a:	4606      	mov	r6, r0
 800659c:	2800      	cmp	r0, #0
 800659e:	d1e0      	bne.n	8006562 <__ssputs_r+0x5a>
 80065a0:	6921      	ldr	r1, [r4, #16]
 80065a2:	4650      	mov	r0, sl
 80065a4:	f7ff feb8 	bl	8006318 <_free_r>
 80065a8:	230c      	movs	r3, #12
 80065aa:	f8ca 3000 	str.w	r3, [sl]
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	e7e9      	b.n	8006590 <__ssputs_r+0x88>

080065bc <_svfiprintf_r>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4698      	mov	r8, r3
 80065c2:	898b      	ldrh	r3, [r1, #12]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	b09d      	sub	sp, #116	; 0x74
 80065c8:	4607      	mov	r7, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	d50e      	bpl.n	80065ee <_svfiprintf_r+0x32>
 80065d0:	690b      	ldr	r3, [r1, #16]
 80065d2:	b963      	cbnz	r3, 80065ee <_svfiprintf_r+0x32>
 80065d4:	2140      	movs	r1, #64	; 0x40
 80065d6:	f7ff ff0b 	bl	80063f0 <_malloc_r>
 80065da:	6028      	str	r0, [r5, #0]
 80065dc:	6128      	str	r0, [r5, #16]
 80065de:	b920      	cbnz	r0, 80065ea <_svfiprintf_r+0x2e>
 80065e0:	230c      	movs	r3, #12
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	e0d0      	b.n	800678c <_svfiprintf_r+0x1d0>
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	616b      	str	r3, [r5, #20]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
 80065f2:	2320      	movs	r3, #32
 80065f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065fc:	2330      	movs	r3, #48	; 0x30
 80065fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067a4 <_svfiprintf_r+0x1e8>
 8006602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006606:	f04f 0901 	mov.w	r9, #1
 800660a:	4623      	mov	r3, r4
 800660c:	469a      	mov	sl, r3
 800660e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006612:	b10a      	cbz	r2, 8006618 <_svfiprintf_r+0x5c>
 8006614:	2a25      	cmp	r2, #37	; 0x25
 8006616:	d1f9      	bne.n	800660c <_svfiprintf_r+0x50>
 8006618:	ebba 0b04 	subs.w	fp, sl, r4
 800661c:	d00b      	beq.n	8006636 <_svfiprintf_r+0x7a>
 800661e:	465b      	mov	r3, fp
 8006620:	4622      	mov	r2, r4
 8006622:	4629      	mov	r1, r5
 8006624:	4638      	mov	r0, r7
 8006626:	f7ff ff6f 	bl	8006508 <__ssputs_r>
 800662a:	3001      	adds	r0, #1
 800662c:	f000 80a9 	beq.w	8006782 <_svfiprintf_r+0x1c6>
 8006630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006632:	445a      	add	r2, fp
 8006634:	9209      	str	r2, [sp, #36]	; 0x24
 8006636:	f89a 3000 	ldrb.w	r3, [sl]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80a1 	beq.w	8006782 <_svfiprintf_r+0x1c6>
 8006640:	2300      	movs	r3, #0
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800664a:	f10a 0a01 	add.w	sl, sl, #1
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	9307      	str	r3, [sp, #28]
 8006652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006656:	931a      	str	r3, [sp, #104]	; 0x68
 8006658:	4654      	mov	r4, sl
 800665a:	2205      	movs	r2, #5
 800665c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006660:	4850      	ldr	r0, [pc, #320]	; (80067a4 <_svfiprintf_r+0x1e8>)
 8006662:	f7f9 fdcd 	bl	8000200 <memchr>
 8006666:	9a04      	ldr	r2, [sp, #16]
 8006668:	b9d8      	cbnz	r0, 80066a2 <_svfiprintf_r+0xe6>
 800666a:	06d0      	lsls	r0, r2, #27
 800666c:	bf44      	itt	mi
 800666e:	2320      	movmi	r3, #32
 8006670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006674:	0711      	lsls	r1, r2, #28
 8006676:	bf44      	itt	mi
 8006678:	232b      	movmi	r3, #43	; 0x2b
 800667a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800667e:	f89a 3000 	ldrb.w	r3, [sl]
 8006682:	2b2a      	cmp	r3, #42	; 0x2a
 8006684:	d015      	beq.n	80066b2 <_svfiprintf_r+0xf6>
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	4654      	mov	r4, sl
 800668a:	2000      	movs	r0, #0
 800668c:	f04f 0c0a 	mov.w	ip, #10
 8006690:	4621      	mov	r1, r4
 8006692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006696:	3b30      	subs	r3, #48	; 0x30
 8006698:	2b09      	cmp	r3, #9
 800669a:	d94d      	bls.n	8006738 <_svfiprintf_r+0x17c>
 800669c:	b1b0      	cbz	r0, 80066cc <_svfiprintf_r+0x110>
 800669e:	9207      	str	r2, [sp, #28]
 80066a0:	e014      	b.n	80066cc <_svfiprintf_r+0x110>
 80066a2:	eba0 0308 	sub.w	r3, r0, r8
 80066a6:	fa09 f303 	lsl.w	r3, r9, r3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	46a2      	mov	sl, r4
 80066b0:	e7d2      	b.n	8006658 <_svfiprintf_r+0x9c>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	9103      	str	r1, [sp, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfbb      	ittet	lt
 80066be:	425b      	neglt	r3, r3
 80066c0:	f042 0202 	orrlt.w	r2, r2, #2
 80066c4:	9307      	strge	r3, [sp, #28]
 80066c6:	9307      	strlt	r3, [sp, #28]
 80066c8:	bfb8      	it	lt
 80066ca:	9204      	strlt	r2, [sp, #16]
 80066cc:	7823      	ldrb	r3, [r4, #0]
 80066ce:	2b2e      	cmp	r3, #46	; 0x2e
 80066d0:	d10c      	bne.n	80066ec <_svfiprintf_r+0x130>
 80066d2:	7863      	ldrb	r3, [r4, #1]
 80066d4:	2b2a      	cmp	r3, #42	; 0x2a
 80066d6:	d134      	bne.n	8006742 <_svfiprintf_r+0x186>
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9203      	str	r2, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfb8      	it	lt
 80066e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066e8:	3402      	adds	r4, #2
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80067b4 <_svfiprintf_r+0x1f8>
 80066f0:	7821      	ldrb	r1, [r4, #0]
 80066f2:	2203      	movs	r2, #3
 80066f4:	4650      	mov	r0, sl
 80066f6:	f7f9 fd83 	bl	8000200 <memchr>
 80066fa:	b138      	cbz	r0, 800670c <_svfiprintf_r+0x150>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	eba0 000a 	sub.w	r0, r0, sl
 8006702:	2240      	movs	r2, #64	; 0x40
 8006704:	4082      	lsls	r2, r0
 8006706:	4313      	orrs	r3, r2
 8006708:	3401      	adds	r4, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006710:	4825      	ldr	r0, [pc, #148]	; (80067a8 <_svfiprintf_r+0x1ec>)
 8006712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006716:	2206      	movs	r2, #6
 8006718:	f7f9 fd72 	bl	8000200 <memchr>
 800671c:	2800      	cmp	r0, #0
 800671e:	d038      	beq.n	8006792 <_svfiprintf_r+0x1d6>
 8006720:	4b22      	ldr	r3, [pc, #136]	; (80067ac <_svfiprintf_r+0x1f0>)
 8006722:	bb1b      	cbnz	r3, 800676c <_svfiprintf_r+0x1b0>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	3307      	adds	r3, #7
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	3308      	adds	r3, #8
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006732:	4433      	add	r3, r6
 8006734:	9309      	str	r3, [sp, #36]	; 0x24
 8006736:	e768      	b.n	800660a <_svfiprintf_r+0x4e>
 8006738:	fb0c 3202 	mla	r2, ip, r2, r3
 800673c:	460c      	mov	r4, r1
 800673e:	2001      	movs	r0, #1
 8006740:	e7a6      	b.n	8006690 <_svfiprintf_r+0xd4>
 8006742:	2300      	movs	r3, #0
 8006744:	3401      	adds	r4, #1
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4619      	mov	r1, r3
 800674a:	f04f 0c0a 	mov.w	ip, #10
 800674e:	4620      	mov	r0, r4
 8006750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006754:	3a30      	subs	r2, #48	; 0x30
 8006756:	2a09      	cmp	r2, #9
 8006758:	d903      	bls.n	8006762 <_svfiprintf_r+0x1a6>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0c6      	beq.n	80066ec <_svfiprintf_r+0x130>
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	e7c4      	b.n	80066ec <_svfiprintf_r+0x130>
 8006762:	fb0c 2101 	mla	r1, ip, r1, r2
 8006766:	4604      	mov	r4, r0
 8006768:	2301      	movs	r3, #1
 800676a:	e7f0      	b.n	800674e <_svfiprintf_r+0x192>
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <_svfiprintf_r+0x1f4>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4638      	mov	r0, r7
 8006778:	f3af 8000 	nop.w
 800677c:	1c42      	adds	r2, r0, #1
 800677e:	4606      	mov	r6, r0
 8006780:	d1d6      	bne.n	8006730 <_svfiprintf_r+0x174>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	065b      	lsls	r3, r3, #25
 8006786:	f53f af2d 	bmi.w	80065e4 <_svfiprintf_r+0x28>
 800678a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800678c:	b01d      	add	sp, #116	; 0x74
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <_svfiprintf_r+0x1f4>)
 800679a:	a904      	add	r1, sp, #16
 800679c:	4638      	mov	r0, r7
 800679e:	f000 f9bd 	bl	8006b1c <_printf_i>
 80067a2:	e7eb      	b.n	800677c <_svfiprintf_r+0x1c0>
 80067a4:	08007218 	.word	0x08007218
 80067a8:	08007222 	.word	0x08007222
 80067ac:	00000000 	.word	0x00000000
 80067b0:	08006509 	.word	0x08006509
 80067b4:	0800721e 	.word	0x0800721e

080067b8 <__sfputc_r>:
 80067b8:	6893      	ldr	r3, [r2, #8]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	b410      	push	{r4}
 80067c0:	6093      	str	r3, [r2, #8]
 80067c2:	da08      	bge.n	80067d6 <__sfputc_r+0x1e>
 80067c4:	6994      	ldr	r4, [r2, #24]
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	db01      	blt.n	80067ce <__sfputc_r+0x16>
 80067ca:	290a      	cmp	r1, #10
 80067cc:	d103      	bne.n	80067d6 <__sfputc_r+0x1e>
 80067ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d2:	f7ff bc82 	b.w	80060da <__swbuf_r>
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	1c58      	adds	r0, r3, #1
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	7019      	strb	r1, [r3, #0]
 80067de:	4608      	mov	r0, r1
 80067e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <__sfputs_r>:
 80067e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	18d5      	adds	r5, r2, r3
 80067f0:	42ac      	cmp	r4, r5
 80067f2:	d101      	bne.n	80067f8 <__sfputs_r+0x12>
 80067f4:	2000      	movs	r0, #0
 80067f6:	e007      	b.n	8006808 <__sfputs_r+0x22>
 80067f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fc:	463a      	mov	r2, r7
 80067fe:	4630      	mov	r0, r6
 8006800:	f7ff ffda 	bl	80067b8 <__sfputc_r>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d1f3      	bne.n	80067f0 <__sfputs_r+0xa>
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800680c <_vfiprintf_r>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	460d      	mov	r5, r1
 8006812:	b09d      	sub	sp, #116	; 0x74
 8006814:	4614      	mov	r4, r2
 8006816:	4698      	mov	r8, r3
 8006818:	4606      	mov	r6, r0
 800681a:	b118      	cbz	r0, 8006824 <_vfiprintf_r+0x18>
 800681c:	6a03      	ldr	r3, [r0, #32]
 800681e:	b90b      	cbnz	r3, 8006824 <_vfiprintf_r+0x18>
 8006820:	f7ff fb40 	bl	8005ea4 <__sinit>
 8006824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d405      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d402      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 8006830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006832:	f7ff fd60 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	071b      	lsls	r3, r3, #28
 800683a:	d501      	bpl.n	8006840 <_vfiprintf_r+0x34>
 800683c:	692b      	ldr	r3, [r5, #16]
 800683e:	b99b      	cbnz	r3, 8006868 <_vfiprintf_r+0x5c>
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fc86 	bl	8006154 <__swsetup_r>
 8006848:	b170      	cbz	r0, 8006868 <_vfiprintf_r+0x5c>
 800684a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800684c:	07dc      	lsls	r4, r3, #31
 800684e:	d504      	bpl.n	800685a <_vfiprintf_r+0x4e>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	b01d      	add	sp, #116	; 0x74
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	0598      	lsls	r0, r3, #22
 800685e:	d4f7      	bmi.n	8006850 <_vfiprintf_r+0x44>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f7ff fd49 	bl	80062f8 <__retarget_lock_release_recursive>
 8006866:	e7f3      	b.n	8006850 <_vfiprintf_r+0x44>
 8006868:	2300      	movs	r3, #0
 800686a:	9309      	str	r3, [sp, #36]	; 0x24
 800686c:	2320      	movs	r3, #32
 800686e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006872:	f8cd 800c 	str.w	r8, [sp, #12]
 8006876:	2330      	movs	r3, #48	; 0x30
 8006878:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a2c <_vfiprintf_r+0x220>
 800687c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006880:	f04f 0901 	mov.w	r9, #1
 8006884:	4623      	mov	r3, r4
 8006886:	469a      	mov	sl, r3
 8006888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688c:	b10a      	cbz	r2, 8006892 <_vfiprintf_r+0x86>
 800688e:	2a25      	cmp	r2, #37	; 0x25
 8006890:	d1f9      	bne.n	8006886 <_vfiprintf_r+0x7a>
 8006892:	ebba 0b04 	subs.w	fp, sl, r4
 8006896:	d00b      	beq.n	80068b0 <_vfiprintf_r+0xa4>
 8006898:	465b      	mov	r3, fp
 800689a:	4622      	mov	r2, r4
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff ffa1 	bl	80067e6 <__sfputs_r>
 80068a4:	3001      	adds	r0, #1
 80068a6:	f000 80a9 	beq.w	80069fc <_vfiprintf_r+0x1f0>
 80068aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ac:	445a      	add	r2, fp
 80068ae:	9209      	str	r2, [sp, #36]	; 0x24
 80068b0:	f89a 3000 	ldrb.w	r3, [sl]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a1 	beq.w	80069fc <_vfiprintf_r+0x1f0>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c4:	f10a 0a01 	add.w	sl, sl, #1
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d0:	931a      	str	r3, [sp, #104]	; 0x68
 80068d2:	4654      	mov	r4, sl
 80068d4:	2205      	movs	r2, #5
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	4854      	ldr	r0, [pc, #336]	; (8006a2c <_vfiprintf_r+0x220>)
 80068dc:	f7f9 fc90 	bl	8000200 <memchr>
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	b9d8      	cbnz	r0, 800691c <_vfiprintf_r+0x110>
 80068e4:	06d1      	lsls	r1, r2, #27
 80068e6:	bf44      	itt	mi
 80068e8:	2320      	movmi	r3, #32
 80068ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ee:	0713      	lsls	r3, r2, #28
 80068f0:	bf44      	itt	mi
 80068f2:	232b      	movmi	r3, #43	; 0x2b
 80068f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b2a      	cmp	r3, #42	; 0x2a
 80068fe:	d015      	beq.n	800692c <_vfiprintf_r+0x120>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	4654      	mov	r4, sl
 8006904:	2000      	movs	r0, #0
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	4621      	mov	r1, r4
 800690c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006910:	3b30      	subs	r3, #48	; 0x30
 8006912:	2b09      	cmp	r3, #9
 8006914:	d94d      	bls.n	80069b2 <_vfiprintf_r+0x1a6>
 8006916:	b1b0      	cbz	r0, 8006946 <_vfiprintf_r+0x13a>
 8006918:	9207      	str	r2, [sp, #28]
 800691a:	e014      	b.n	8006946 <_vfiprintf_r+0x13a>
 800691c:	eba0 0308 	sub.w	r3, r0, r8
 8006920:	fa09 f303 	lsl.w	r3, r9, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	46a2      	mov	sl, r4
 800692a:	e7d2      	b.n	80068d2 <_vfiprintf_r+0xc6>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	1d19      	adds	r1, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	9103      	str	r1, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfbb      	ittet	lt
 8006938:	425b      	neglt	r3, r3
 800693a:	f042 0202 	orrlt.w	r2, r2, #2
 800693e:	9307      	strge	r3, [sp, #28]
 8006940:	9307      	strlt	r3, [sp, #28]
 8006942:	bfb8      	it	lt
 8006944:	9204      	strlt	r2, [sp, #16]
 8006946:	7823      	ldrb	r3, [r4, #0]
 8006948:	2b2e      	cmp	r3, #46	; 0x2e
 800694a:	d10c      	bne.n	8006966 <_vfiprintf_r+0x15a>
 800694c:	7863      	ldrb	r3, [r4, #1]
 800694e:	2b2a      	cmp	r3, #42	; 0x2a
 8006950:	d134      	bne.n	80069bc <_vfiprintf_r+0x1b0>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	9203      	str	r2, [sp, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfb8      	it	lt
 800695e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006962:	3402      	adds	r4, #2
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a3c <_vfiprintf_r+0x230>
 800696a:	7821      	ldrb	r1, [r4, #0]
 800696c:	2203      	movs	r2, #3
 800696e:	4650      	mov	r0, sl
 8006970:	f7f9 fc46 	bl	8000200 <memchr>
 8006974:	b138      	cbz	r0, 8006986 <_vfiprintf_r+0x17a>
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	eba0 000a 	sub.w	r0, r0, sl
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	4082      	lsls	r2, r0
 8006980:	4313      	orrs	r3, r2
 8006982:	3401      	adds	r4, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698a:	4829      	ldr	r0, [pc, #164]	; (8006a30 <_vfiprintf_r+0x224>)
 800698c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006990:	2206      	movs	r2, #6
 8006992:	f7f9 fc35 	bl	8000200 <memchr>
 8006996:	2800      	cmp	r0, #0
 8006998:	d03f      	beq.n	8006a1a <_vfiprintf_r+0x20e>
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <_vfiprintf_r+0x228>)
 800699c:	bb1b      	cbnz	r3, 80069e6 <_vfiprintf_r+0x1da>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	3308      	adds	r3, #8
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ac:	443b      	add	r3, r7
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	e768      	b.n	8006884 <_vfiprintf_r+0x78>
 80069b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b6:	460c      	mov	r4, r1
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7a6      	b.n	800690a <_vfiprintf_r+0xfe>
 80069bc:	2300      	movs	r3, #0
 80069be:	3401      	adds	r4, #1
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ce:	3a30      	subs	r2, #48	; 0x30
 80069d0:	2a09      	cmp	r2, #9
 80069d2:	d903      	bls.n	80069dc <_vfiprintf_r+0x1d0>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0c6      	beq.n	8006966 <_vfiprintf_r+0x15a>
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	e7c4      	b.n	8006966 <_vfiprintf_r+0x15a>
 80069dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e0:	4604      	mov	r4, r0
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f0      	b.n	80069c8 <_vfiprintf_r+0x1bc>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <_vfiprintf_r+0x22c>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4630      	mov	r0, r6
 80069f2:	f3af 8000 	nop.w
 80069f6:	4607      	mov	r7, r0
 80069f8:	1c78      	adds	r0, r7, #1
 80069fa:	d1d6      	bne.n	80069aa <_vfiprintf_r+0x19e>
 80069fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069fe:	07d9      	lsls	r1, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_vfiprintf_r+0x202>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_vfiprintf_r+0x202>
 8006a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0a:	f7ff fc75 	bl	80062f8 <__retarget_lock_release_recursive>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	065b      	lsls	r3, r3, #25
 8006a12:	f53f af1d 	bmi.w	8006850 <_vfiprintf_r+0x44>
 8006a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a18:	e71c      	b.n	8006854 <_vfiprintf_r+0x48>
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <_vfiprintf_r+0x22c>)
 8006a22:	a904      	add	r1, sp, #16
 8006a24:	4630      	mov	r0, r6
 8006a26:	f000 f879 	bl	8006b1c <_printf_i>
 8006a2a:	e7e4      	b.n	80069f6 <_vfiprintf_r+0x1ea>
 8006a2c:	08007218 	.word	0x08007218
 8006a30:	08007222 	.word	0x08007222
 8006a34:	00000000 	.word	0x00000000
 8006a38:	080067e7 	.word	0x080067e7
 8006a3c:	0800721e 	.word	0x0800721e

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4699      	mov	r9, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a8c:	1e13      	subs	r3, r2, #0
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf02      	ittt	eq
 8006ab2:	68e5      	ldreq	r5, [r4, #12]
 8006ab4:	6833      	ldreq	r3, [r6, #0]
 8006ab6:	1aed      	subeq	r5, r5, r3
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4649      	mov	r1, r9
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	; 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c0      	blx	r8
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	7e0f      	ldrb	r7, [r1, #24]
 8006b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b24:	2f78      	cmp	r7, #120	; 0x78
 8006b26:	4691      	mov	r9, r2
 8006b28:	4680      	mov	r8, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	; 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d4 	beq.w	8006ce6 <_printf_i+0x1ca>
 8006b3e:	2f58      	cmp	r7, #88	; 0x58
 8006b40:	f000 80c0 	beq.w	8006cc4 <_printf_i+0x1a8>
 8006b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a101      	add	r1, pc, #4	; (adr r1, 8006b5c <_printf_i+0x40>)
 8006b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006ccd 	.word	0x08006ccd
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006c87 	.word	0x08006c87
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006cef 	.word	0x08006cef
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006c8f 	.word	0x08006c8f
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	602a      	str	r2, [r5, #0]
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e09f      	b.n	8006d08 <_printf_i+0x1ec>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	0607      	lsls	r7, r0, #24
 8006bce:	f103 0104 	add.w	r1, r3, #4
 8006bd2:	6029      	str	r1, [r5, #0]
 8006bd4:	d501      	bpl.n	8006bda <_printf_i+0xbe>
 8006bd6:	681e      	ldr	r6, [r3, #0]
 8006bd8:	e003      	b.n	8006be2 <_printf_i+0xc6>
 8006bda:	0646      	lsls	r6, r0, #25
 8006bdc:	d5fb      	bpl.n	8006bd6 <_printf_i+0xba>
 8006bde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	da03      	bge.n	8006bee <_printf_i+0xd2>
 8006be6:	232d      	movs	r3, #45	; 0x2d
 8006be8:	4276      	negs	r6, r6
 8006bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bee:	485a      	ldr	r0, [pc, #360]	; (8006d58 <_printf_i+0x23c>)
 8006bf0:	230a      	movs	r3, #10
 8006bf2:	e012      	b.n	8006c1a <_printf_i+0xfe>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	6820      	ldr	r0, [r4, #0]
 8006bf8:	1d19      	adds	r1, r3, #4
 8006bfa:	6029      	str	r1, [r5, #0]
 8006bfc:	0605      	lsls	r5, r0, #24
 8006bfe:	d501      	bpl.n	8006c04 <_printf_i+0xe8>
 8006c00:	681e      	ldr	r6, [r3, #0]
 8006c02:	e002      	b.n	8006c0a <_printf_i+0xee>
 8006c04:	0641      	lsls	r1, r0, #25
 8006c06:	d5fb      	bpl.n	8006c00 <_printf_i+0xe4>
 8006c08:	881e      	ldrh	r6, [r3, #0]
 8006c0a:	4853      	ldr	r0, [pc, #332]	; (8006d58 <_printf_i+0x23c>)
 8006c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c0e:	bf0c      	ite	eq
 8006c10:	2308      	moveq	r3, #8
 8006c12:	230a      	movne	r3, #10
 8006c14:	2100      	movs	r1, #0
 8006c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c1a:	6865      	ldr	r5, [r4, #4]
 8006c1c:	60a5      	str	r5, [r4, #8]
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	bfa2      	ittt	ge
 8006c22:	6821      	ldrge	r1, [r4, #0]
 8006c24:	f021 0104 	bicge.w	r1, r1, #4
 8006c28:	6021      	strge	r1, [r4, #0]
 8006c2a:	b90e      	cbnz	r6, 8006c30 <_printf_i+0x114>
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	d04b      	beq.n	8006cc8 <_printf_i+0x1ac>
 8006c30:	4615      	mov	r5, r2
 8006c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c36:	fb03 6711 	mls	r7, r3, r1, r6
 8006c3a:	5dc7      	ldrb	r7, [r0, r7]
 8006c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c40:	4637      	mov	r7, r6
 8006c42:	42bb      	cmp	r3, r7
 8006c44:	460e      	mov	r6, r1
 8006c46:	d9f4      	bls.n	8006c32 <_printf_i+0x116>
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d10b      	bne.n	8006c64 <_printf_i+0x148>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	07de      	lsls	r6, r3, #31
 8006c50:	d508      	bpl.n	8006c64 <_printf_i+0x148>
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	6861      	ldr	r1, [r4, #4]
 8006c56:	4299      	cmp	r1, r3
 8006c58:	bfde      	ittt	le
 8006c5a:	2330      	movle	r3, #48	; 0x30
 8006c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c64:	1b52      	subs	r2, r2, r5
 8006c66:	6122      	str	r2, [r4, #16]
 8006c68:	f8cd a000 	str.w	sl, [sp]
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	aa03      	add	r2, sp, #12
 8006c70:	4621      	mov	r1, r4
 8006c72:	4640      	mov	r0, r8
 8006c74:	f7ff fee4 	bl	8006a40 <_printf_common>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d14a      	bne.n	8006d12 <_printf_i+0x1f6>
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	b004      	add	sp, #16
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f043 0320 	orr.w	r3, r3, #32
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	4833      	ldr	r0, [pc, #204]	; (8006d5c <_printf_i+0x240>)
 8006c90:	2778      	movs	r7, #120	; 0x78
 8006c92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	6829      	ldr	r1, [r5, #0]
 8006c9a:	061f      	lsls	r7, r3, #24
 8006c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ca0:	d402      	bmi.n	8006ca8 <_printf_i+0x18c>
 8006ca2:	065f      	lsls	r7, r3, #25
 8006ca4:	bf48      	it	mi
 8006ca6:	b2b6      	uxthmi	r6, r6
 8006ca8:	07df      	lsls	r7, r3, #31
 8006caa:	bf48      	it	mi
 8006cac:	f043 0320 	orrmi.w	r3, r3, #32
 8006cb0:	6029      	str	r1, [r5, #0]
 8006cb2:	bf48      	it	mi
 8006cb4:	6023      	strmi	r3, [r4, #0]
 8006cb6:	b91e      	cbnz	r6, 8006cc0 <_printf_i+0x1a4>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	e7a7      	b.n	8006c14 <_printf_i+0xf8>
 8006cc4:	4824      	ldr	r0, [pc, #144]	; (8006d58 <_printf_i+0x23c>)
 8006cc6:	e7e4      	b.n	8006c92 <_printf_i+0x176>
 8006cc8:	4615      	mov	r5, r2
 8006cca:	e7bd      	b.n	8006c48 <_printf_i+0x12c>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	6826      	ldr	r6, [r4, #0]
 8006cd0:	6961      	ldr	r1, [r4, #20]
 8006cd2:	1d18      	adds	r0, r3, #4
 8006cd4:	6028      	str	r0, [r5, #0]
 8006cd6:	0635      	lsls	r5, r6, #24
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	d501      	bpl.n	8006ce0 <_printf_i+0x1c4>
 8006cdc:	6019      	str	r1, [r3, #0]
 8006cde:	e002      	b.n	8006ce6 <_printf_i+0x1ca>
 8006ce0:	0670      	lsls	r0, r6, #25
 8006ce2:	d5fb      	bpl.n	8006cdc <_printf_i+0x1c0>
 8006ce4:	8019      	strh	r1, [r3, #0]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	4615      	mov	r5, r2
 8006cec:	e7bc      	b.n	8006c68 <_printf_i+0x14c>
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	602a      	str	r2, [r5, #0]
 8006cf4:	681d      	ldr	r5, [r3, #0]
 8006cf6:	6862      	ldr	r2, [r4, #4]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f7f9 fa80 	bl	8000200 <memchr>
 8006d00:	b108      	cbz	r0, 8006d06 <_printf_i+0x1ea>
 8006d02:	1b40      	subs	r0, r0, r5
 8006d04:	6060      	str	r0, [r4, #4]
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d10:	e7aa      	b.n	8006c68 <_printf_i+0x14c>
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	462a      	mov	r2, r5
 8006d16:	4649      	mov	r1, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	47d0      	blx	sl
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d0ad      	beq.n	8006c7c <_printf_i+0x160>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	079b      	lsls	r3, r3, #30
 8006d24:	d413      	bmi.n	8006d4e <_printf_i+0x232>
 8006d26:	68e0      	ldr	r0, [r4, #12]
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	4298      	cmp	r0, r3
 8006d2c:	bfb8      	it	lt
 8006d2e:	4618      	movlt	r0, r3
 8006d30:	e7a6      	b.n	8006c80 <_printf_i+0x164>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4632      	mov	r2, r6
 8006d36:	4649      	mov	r1, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	47d0      	blx	sl
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d09d      	beq.n	8006c7c <_printf_i+0x160>
 8006d40:	3501      	adds	r5, #1
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	9903      	ldr	r1, [sp, #12]
 8006d46:	1a5b      	subs	r3, r3, r1
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dcf2      	bgt.n	8006d32 <_printf_i+0x216>
 8006d4c:	e7eb      	b.n	8006d26 <_printf_i+0x20a>
 8006d4e:	2500      	movs	r5, #0
 8006d50:	f104 0619 	add.w	r6, r4, #25
 8006d54:	e7f5      	b.n	8006d42 <_printf_i+0x226>
 8006d56:	bf00      	nop
 8006d58:	08007229 	.word	0x08007229
 8006d5c:	0800723a 	.word	0x0800723a

08006d60 <__sflush_r>:
 8006d60:	898a      	ldrh	r2, [r1, #12]
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	4605      	mov	r5, r0
 8006d68:	0710      	lsls	r0, r2, #28
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	d458      	bmi.n	8006e20 <__sflush_r+0xc0>
 8006d6e:	684b      	ldr	r3, [r1, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc05      	bgt.n	8006d80 <__sflush_r+0x20>
 8006d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc02      	bgt.n	8006d80 <__sflush_r+0x20>
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d0f9      	beq.n	8006d7a <__sflush_r+0x1a>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d8c:	682f      	ldr	r7, [r5, #0]
 8006d8e:	6a21      	ldr	r1, [r4, #32]
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	d032      	beq.n	8006dfa <__sflush_r+0x9a>
 8006d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	075a      	lsls	r2, r3, #29
 8006d9a:	d505      	bpl.n	8006da8 <__sflush_r+0x48>
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	1ac0      	subs	r0, r0, r3
 8006da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da2:	b10b      	cbz	r3, 8006da8 <__sflush_r+0x48>
 8006da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da6:	1ac0      	subs	r0, r0, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	4602      	mov	r2, r0
 8006dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dae:	6a21      	ldr	r1, [r4, #32]
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b0      	blx	r6
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	d106      	bne.n	8006dc8 <__sflush_r+0x68>
 8006dba:	6829      	ldr	r1, [r5, #0]
 8006dbc:	291d      	cmp	r1, #29
 8006dbe:	d82b      	bhi.n	8006e18 <__sflush_r+0xb8>
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <__sflush_r+0x108>)
 8006dc2:	410a      	asrs	r2, r1
 8006dc4:	07d6      	lsls	r6, r2, #31
 8006dc6:	d427      	bmi.n	8006e18 <__sflush_r+0xb8>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	6062      	str	r2, [r4, #4]
 8006dcc:	04d9      	lsls	r1, r3, #19
 8006dce:	6922      	ldr	r2, [r4, #16]
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	d504      	bpl.n	8006dde <__sflush_r+0x7e>
 8006dd4:	1c42      	adds	r2, r0, #1
 8006dd6:	d101      	bne.n	8006ddc <__sflush_r+0x7c>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b903      	cbnz	r3, 8006dde <__sflush_r+0x7e>
 8006ddc:	6560      	str	r0, [r4, #84]	; 0x54
 8006dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de0:	602f      	str	r7, [r5, #0]
 8006de2:	2900      	cmp	r1, #0
 8006de4:	d0c9      	beq.n	8006d7a <__sflush_r+0x1a>
 8006de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dea:	4299      	cmp	r1, r3
 8006dec:	d002      	beq.n	8006df4 <__sflush_r+0x94>
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7ff fa92 	bl	8006318 <_free_r>
 8006df4:	2000      	movs	r0, #0
 8006df6:	6360      	str	r0, [r4, #52]	; 0x34
 8006df8:	e7c0      	b.n	8006d7c <__sflush_r+0x1c>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b0      	blx	r6
 8006e00:	1c41      	adds	r1, r0, #1
 8006e02:	d1c8      	bne.n	8006d96 <__sflush_r+0x36>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0c5      	beq.n	8006d96 <__sflush_r+0x36>
 8006e0a:	2b1d      	cmp	r3, #29
 8006e0c:	d001      	beq.n	8006e12 <__sflush_r+0xb2>
 8006e0e:	2b16      	cmp	r3, #22
 8006e10:	d101      	bne.n	8006e16 <__sflush_r+0xb6>
 8006e12:	602f      	str	r7, [r5, #0]
 8006e14:	e7b1      	b.n	8006d7a <__sflush_r+0x1a>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	e7ad      	b.n	8006d7c <__sflush_r+0x1c>
 8006e20:	690f      	ldr	r7, [r1, #16]
 8006e22:	2f00      	cmp	r7, #0
 8006e24:	d0a9      	beq.n	8006d7a <__sflush_r+0x1a>
 8006e26:	0793      	lsls	r3, r2, #30
 8006e28:	680e      	ldr	r6, [r1, #0]
 8006e2a:	bf08      	it	eq
 8006e2c:	694b      	ldreq	r3, [r1, #20]
 8006e2e:	600f      	str	r7, [r1, #0]
 8006e30:	bf18      	it	ne
 8006e32:	2300      	movne	r3, #0
 8006e34:	eba6 0807 	sub.w	r8, r6, r7
 8006e38:	608b      	str	r3, [r1, #8]
 8006e3a:	f1b8 0f00 	cmp.w	r8, #0
 8006e3e:	dd9c      	ble.n	8006d7a <__sflush_r+0x1a>
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e44:	4643      	mov	r3, r8
 8006e46:	463a      	mov	r2, r7
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b0      	blx	r6
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	dc06      	bgt.n	8006e5e <__sflush_r+0xfe>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	e78e      	b.n	8006d7c <__sflush_r+0x1c>
 8006e5e:	4407      	add	r7, r0
 8006e60:	eba8 0800 	sub.w	r8, r8, r0
 8006e64:	e7e9      	b.n	8006e3a <__sflush_r+0xda>
 8006e66:	bf00      	nop
 8006e68:	dfbffffe 	.word	0xdfbffffe

08006e6c <_fflush_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b913      	cbnz	r3, 8006e7c <_fflush_r+0x10>
 8006e76:	2500      	movs	r5, #0
 8006e78:	4628      	mov	r0, r5
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	b118      	cbz	r0, 8006e86 <_fflush_r+0x1a>
 8006e7e:	6a03      	ldr	r3, [r0, #32]
 8006e80:	b90b      	cbnz	r3, 8006e86 <_fflush_r+0x1a>
 8006e82:	f7ff f80f 	bl	8005ea4 <__sinit>
 8006e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f3      	beq.n	8006e76 <_fflush_r+0xa>
 8006e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e90:	07d0      	lsls	r0, r2, #31
 8006e92:	d404      	bmi.n	8006e9e <_fflush_r+0x32>
 8006e94:	0599      	lsls	r1, r3, #22
 8006e96:	d402      	bmi.n	8006e9e <_fflush_r+0x32>
 8006e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9a:	f7ff fa2c 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f7ff ff5d 	bl	8006d60 <__sflush_r>
 8006ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea8:	07da      	lsls	r2, r3, #31
 8006eaa:	4605      	mov	r5, r0
 8006eac:	d4e4      	bmi.n	8006e78 <_fflush_r+0xc>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	059b      	lsls	r3, r3, #22
 8006eb2:	d4e1      	bmi.n	8006e78 <_fflush_r+0xc>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb6:	f7ff fa1f 	bl	80062f8 <__retarget_lock_release_recursive>
 8006eba:	e7dd      	b.n	8006e78 <_fflush_r+0xc>

08006ebc <__swhatbuf_r>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	b096      	sub	sp, #88	; 0x58
 8006ec8:	4615      	mov	r5, r2
 8006eca:	461e      	mov	r6, r3
 8006ecc:	da0d      	bge.n	8006eea <__swhatbuf_r+0x2e>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ed4:	f04f 0100 	mov.w	r1, #0
 8006ed8:	bf0c      	ite	eq
 8006eda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ede:	2340      	movne	r3, #64	; 0x40
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	6031      	str	r1, [r6, #0]
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	b016      	add	sp, #88	; 0x58
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	466a      	mov	r2, sp
 8006eec:	f000 f862 	bl	8006fb4 <_fstat_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dbec      	blt.n	8006ece <__swhatbuf_r+0x12>
 8006ef4:	9901      	ldr	r1, [sp, #4]
 8006ef6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006efa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006efe:	4259      	negs	r1, r3
 8006f00:	4159      	adcs	r1, r3
 8006f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f06:	e7eb      	b.n	8006ee0 <__swhatbuf_r+0x24>

08006f08 <__smakebuf_r>:
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f0c:	079d      	lsls	r5, r3, #30
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	d507      	bpl.n	8006f24 <__smakebuf_r+0x1c>
 8006f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	6163      	str	r3, [r4, #20]
 8006f20:	b002      	add	sp, #8
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	ab01      	add	r3, sp, #4
 8006f26:	466a      	mov	r2, sp
 8006f28:	f7ff ffc8 	bl	8006ebc <__swhatbuf_r>
 8006f2c:	9900      	ldr	r1, [sp, #0]
 8006f2e:	4605      	mov	r5, r0
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7ff fa5d 	bl	80063f0 <_malloc_r>
 8006f36:	b948      	cbnz	r0, 8006f4c <__smakebuf_r+0x44>
 8006f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3c:	059a      	lsls	r2, r3, #22
 8006f3e:	d4ef      	bmi.n	8006f20 <__smakebuf_r+0x18>
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	81a3      	strh	r3, [r4, #12]
 8006f4a:	e7e3      	b.n	8006f14 <__smakebuf_r+0xc>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	6020      	str	r0, [r4, #0]
 8006f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	6163      	str	r3, [r4, #20]
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	6120      	str	r0, [r4, #16]
 8006f5e:	b15b      	cbz	r3, 8006f78 <__smakebuf_r+0x70>
 8006f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f64:	4630      	mov	r0, r6
 8006f66:	f000 f837 	bl	8006fd8 <_isatty_r>
 8006f6a:	b128      	cbz	r0, 8006f78 <__smakebuf_r+0x70>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	431d      	orrs	r5, r3
 8006f7c:	81a5      	strh	r5, [r4, #12]
 8006f7e:	e7cf      	b.n	8006f20 <__smakebuf_r+0x18>

08006f80 <memmove>:
 8006f80:	4288      	cmp	r0, r1
 8006f82:	b510      	push	{r4, lr}
 8006f84:	eb01 0402 	add.w	r4, r1, r2
 8006f88:	d902      	bls.n	8006f90 <memmove+0x10>
 8006f8a:	4284      	cmp	r4, r0
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	d807      	bhi.n	8006fa0 <memmove+0x20>
 8006f90:	1e43      	subs	r3, r0, #1
 8006f92:	42a1      	cmp	r1, r4
 8006f94:	d008      	beq.n	8006fa8 <memmove+0x28>
 8006f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f9e:	e7f8      	b.n	8006f92 <memmove+0x12>
 8006fa0:	4402      	add	r2, r0
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	428a      	cmp	r2, r1
 8006fa6:	d100      	bne.n	8006faa <memmove+0x2a>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fb2:	e7f7      	b.n	8006fa4 <memmove+0x24>

08006fb4 <_fstat_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	; (8006fd4 <_fstat_r+0x20>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	f7fa f913 	bl	80011ec <_fstat>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d102      	bne.n	8006fd0 <_fstat_r+0x1c>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	b103      	cbz	r3, 8006fd0 <_fstat_r+0x1c>
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000496c 	.word	0x2000496c

08006fd8 <_isatty_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_isatty_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa f912 	bl	800120c <_isatty>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_isatty_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_isatty_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	2000496c 	.word	0x2000496c

08006ff8 <_sbrk_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d06      	ldr	r5, [pc, #24]	; (8007014 <_sbrk_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	f7fa f91a 	bl	800123c <_sbrk>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_sbrk_r+0x1a>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_sbrk_r+0x1a>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	2000496c 	.word	0x2000496c

08007018 <_realloc_r>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4680      	mov	r8, r0
 800701e:	4614      	mov	r4, r2
 8007020:	460e      	mov	r6, r1
 8007022:	b921      	cbnz	r1, 800702e <_realloc_r+0x16>
 8007024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	4611      	mov	r1, r2
 800702a:	f7ff b9e1 	b.w	80063f0 <_malloc_r>
 800702e:	b92a      	cbnz	r2, 800703c <_realloc_r+0x24>
 8007030:	f7ff f972 	bl	8006318 <_free_r>
 8007034:	4625      	mov	r5, r4
 8007036:	4628      	mov	r0, r5
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	f000 f81b 	bl	8007076 <_malloc_usable_size_r>
 8007040:	4284      	cmp	r4, r0
 8007042:	4607      	mov	r7, r0
 8007044:	d802      	bhi.n	800704c <_realloc_r+0x34>
 8007046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800704a:	d812      	bhi.n	8007072 <_realloc_r+0x5a>
 800704c:	4621      	mov	r1, r4
 800704e:	4640      	mov	r0, r8
 8007050:	f7ff f9ce 	bl	80063f0 <_malloc_r>
 8007054:	4605      	mov	r5, r0
 8007056:	2800      	cmp	r0, #0
 8007058:	d0ed      	beq.n	8007036 <_realloc_r+0x1e>
 800705a:	42bc      	cmp	r4, r7
 800705c:	4622      	mov	r2, r4
 800705e:	4631      	mov	r1, r6
 8007060:	bf28      	it	cs
 8007062:	463a      	movcs	r2, r7
 8007064:	f7ff f949 	bl	80062fa <memcpy>
 8007068:	4631      	mov	r1, r6
 800706a:	4640      	mov	r0, r8
 800706c:	f7ff f954 	bl	8006318 <_free_r>
 8007070:	e7e1      	b.n	8007036 <_realloc_r+0x1e>
 8007072:	4635      	mov	r5, r6
 8007074:	e7df      	b.n	8007036 <_realloc_r+0x1e>

08007076 <_malloc_usable_size_r>:
 8007076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707a:	1f18      	subs	r0, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfbc      	itt	lt
 8007080:	580b      	ldrlt	r3, [r1, r0]
 8007082:	18c0      	addlt	r0, r0, r3
 8007084:	4770      	bx	lr
	...

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr
