
test_btn_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c0  080045c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c8  080045c8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000900  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000968  20000968  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ea2a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f4d  00000000  00000000  0002eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c00  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000093a  00000000  00000000  00031658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024dd5  00000000  00000000  00031f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d904  00000000  00000000  00056d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbf64  00000000  00000000  0006466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039c8  00000000  00000000  001405d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00143f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080044d8 	.word	0x080044d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080044d8 	.word	0x080044d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f002 f9e9 	bl	800297a <HAL_UART_Transmit>
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200002ac 	.word	0x200002ac

080005b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
unsigned char buf[30];
uint32_t ctime, ltime, interval, readpin; // uint32_t vs usigned int
int button_cnt;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_pin == GPIO_PIN_0) {
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d159      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0xc4>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80005c8:	2101      	movs	r1, #1
 80005ca:	482e      	ldr	r0, [pc, #184]	; (8000684 <HAL_GPIO_EXTI_Callback+0xcc>)
 80005cc:	f001 fb9f 	bl	8001d0e <HAL_GPIO_TogglePin>
		ctime = HAL_GetTick(); // current time
 80005d0:	f000 fd56 	bl	8001080 <HAL_GetTick>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a2c      	ldr	r2, [pc, #176]	; (8000688 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005d8:	6013      	str	r3, [r2, #0]
		interval = ctime - ltime;
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <HAL_GPIO_EXTI_Callback+0xd4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 80005e6:	6013      	str	r3, [r2, #0]
		ltime = ctime;
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <HAL_GPIO_EXTI_Callback+0xd4>)
 80005ee:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == 1) {
 80005f0:	2101      	movs	r1, #1
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <HAL_GPIO_EXTI_Callback+0xdc>)
 80005f4:	f001 fb5a 	bl	8001cac <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d13e      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0xc4>
//			printf("Pullup State rising\r\n");
			if (interval <= 110) {
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b6e      	cmp	r3, #110	; 0x6e
 8000604:	d805      	bhi.n	8000612 <HAL_GPIO_EXTI_Callback+0x5a>
				button_cnt++;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a22      	ldr	r2, [pc, #136]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e027      	b.n	8000662 <HAL_GPIO_EXTI_Callback+0xaa>
			} else if(interval >= 120 && interval < 200) {
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b77      	cmp	r3, #119	; 0x77
 8000618:	d915      	bls.n	8000646 <HAL_GPIO_EXTI_Callback+0x8e>
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2bc7      	cmp	r3, #199	; 0xc7
 8000620:	d811      	bhi.n	8000646 <HAL_GPIO_EXTI_Callback+0x8e>
				//				printf("falling\r\n");
				printf("One click! interval = %u\r\n", (unsigned int)interval);
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <HAL_GPIO_EXTI_Callback+0xe4>)
 800062a:	f003 f8df 	bl	80037ec <iprintf>
				printf("uint32_t size: %d\r\n", sizeof(uint32_t));
 800062e:	2104      	movs	r1, #4
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000632:	f003 f8db 	bl	80037ec <iprintf>
				printf("unsigned int size: %d\r\n", sizeof(unsigned int));
 8000636:	2104      	movs	r1, #4
 8000638:	481a      	ldr	r0, [pc, #104]	; (80006a4 <HAL_GPIO_EXTI_Callback+0xec>)
 800063a:	f003 f8d7 	bl	80037ec <iprintf>
				button_cnt = 0;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	e00d      	b.n	8000662 <HAL_GPIO_EXTI_Callback+0xaa>
			} else if (interval >= 500) {
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800064e:	d308      	bcc.n	8000662 <HAL_GPIO_EXTI_Callback+0xaa>
				//				printf("falling\r\n");
				printf("Long click! interval %u\r\n", (unsigned int)interval);
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000658:	f003 f8c8 	bl	80037ec <iprintf>
				button_cnt = 0;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
			}
			if (button_cnt >= 3) {
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b02      	cmp	r3, #2
 8000668:	dd08      	ble.n	800067c <HAL_GPIO_EXTI_Callback+0xc4>
				printf("Double click!! interval %u\r\n", (unsigned int)interval);
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <HAL_GPIO_EXTI_Callback+0xf4>)
 8000672:	f003 f8bb 	bl	80037ec <iprintf>
				button_cnt = 0;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
//		memset(buf,0,sizeof(buf));
//		sprintf(buf,"ctime=%d\r\n", ctime);
//		HAL_UART_Transmit_IT(&huart3,buf,sizeof(buf));
//		printf("ctime = %d  interval = %d  ltime = %d readpin = %d \r\n", ctime, interval, ltime, readpin);
	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020400 	.word	0x40020400
 8000688:	200007fc 	.word	0x200007fc
 800068c:	20000800 	.word	0x20000800
 8000690:	20000804 	.word	0x20000804
 8000694:	40021800 	.word	0x40021800
 8000698:	20000808 	.word	0x20000808
 800069c:	080044f0 	.word	0x080044f0
 80006a0:	0800450c 	.word	0x0800450c
 80006a4:	08004520 	.word	0x08004520
 80006a8:	08004538 	.word	0x08004538
 80006ac:	08004554 	.word	0x08004554

080006b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b4:	f000 fc7e 	bl	8000fb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b8:	f000 f80c 	bl	80006d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006bc:	f000 f92e 	bl	800091c <MX_GPIO_Init>
	MX_ETH_Init();
 80006c0:	f000 f886 	bl	80007d0 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80006c4:	f000 f8d2 	bl	800086c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f8fa 	bl	80008c0 <MX_USB_OTG_FS_PCD_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80006cc:	f000 f86c 	bl	80007a8 <MX_NVIC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006d0:	e7fe      	b.n	80006d0 <main+0x20>
	...

080006d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f8d7 	bl	8003896 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000748:	23a8      	movs	r3, #168	; 0xa8
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fc29 	bl	8001fb0 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
		Error_Handler();
 8000764:	f000 f994 	bl	8000a90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fe8a 	bl	80024a0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
		Error_Handler();
 8000792:	f000 f97d 	bl	8000a90 <Error_Handler>
	}
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2028      	movs	r0, #40	; 0x28
 80007b2:	f000 fd70 	bl	8001296 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f000 fd89 	bl	80012ce <HAL_NVIC_EnableIRQ>
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2006      	movs	r0, #6
 80007c2:	f000 fd68 	bl	8001296 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f000 fd81 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ETH_Init+0x84>)
 80007d6:	4a20      	ldr	r2, [pc, #128]	; (8000858 <MX_ETH_Init+0x88>)
 80007d8:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_ETH_Init+0x8c>)
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_ETH_Init+0x8c>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_ETH_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_ETH_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ETH_Init+0x84>)
 8000800:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_ETH_Init+0x8c>)
 8000802:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_ETH_Init+0x84>)
 8000806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800080a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_ETH_Init+0x84>)
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <MX_ETH_Init+0x90>)
 8000810:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_ETH_Init+0x84>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_ETH_Init+0x94>)
 8000816:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_ETH_Init+0x84>)
 800081a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800081e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_ETH_Init+0x84>)
 8000822:	f000 fd6f 	bl	8001304 <HAL_ETH_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ETH_Init+0x60>
		Error_Handler();
 800082c:	f000 f930 	bl	8000a90 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000830:	2238      	movs	r2, #56	; 0x38
 8000832:	2100      	movs	r1, #0
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_ETH_Init+0x98>)
 8000836:	f003 f82e 	bl	8003896 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_ETH_Init+0x98>)
 800083c:	2221      	movs	r2, #33	; 0x21
 800083e:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_ETH_Init+0x98>)
 8000842:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000846:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_ETH_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001fc 	.word	0x200001fc
 8000858:	40028000 	.word	0x40028000
 800085c:	2000080c 	.word	0x2000080c
 8000860:	2000015c 	.word	0x2000015c
 8000864:	200000bc 	.word	0x200000bc
 8000868:	20000084 	.word	0x20000084

0800086c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART3_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f002 f81c 	bl	80028e0 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80008ae:	f000 f8ef 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002ac 	.word	0x200002ac
 80008bc:	40004800 	.word	0x40004800

080008c0 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ca:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	f001 fa36 	bl	8001d74 <HAL_PCD_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800090e:	f000 f8bf 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002f0 	.word	0x200002f0

0800091c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <MX_GPIO_Init+0x164>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a4a      	ldr	r2, [pc, #296]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <MX_GPIO_Init+0x164>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x164>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_GPIO_Init+0x164>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a2e      	ldr	r2, [pc, #184]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_GPIO_Init+0x164>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e0:	4828      	ldr	r0, [pc, #160]	; (8000a84 <MX_GPIO_Init+0x168>)
 80009e2:	f001 f97b 	bl	8001cdc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	4827      	ldr	r0, [pc, #156]	; (8000a88 <MX_GPIO_Init+0x16c>)
 80009ec:	f001 f976 	bl	8001cdc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009f6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x170>)
 8000a08:	f000 ffa4 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000a0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <MX_GPIO_Init+0x168>)
 8000a26:	f000 ff95 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pin : test_btn_Pin */
	GPIO_InitStruct.Pin = test_btn_Pin;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a2e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(test_btn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0x16c>)
 8000a40:	f000 ff88 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x16c>)
 8000a5c:	f000 ff7a 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x16c>)
 8000a74:	f000 ff6e 	bl	8001954 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40020800 	.word	0x40020800

08000a90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <HAL_ETH_MspInit+0x174>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80a4 	bne.w	8000c58 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd4:	2332      	movs	r3, #50	; 0x32
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <HAL_ETH_MspInit+0x17c>)
 8000bf0:	f000 feb0 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf4:	2386      	movs	r3, #134	; 0x86
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <HAL_ETH_MspInit+0x180>)
 8000c10:	f000 fea0 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000c32:	f000 fe8f 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c48:	230b      	movs	r3, #11
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000c54:	f000 fe7e 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3738      	adds	r7, #56	; 0x38
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40028000 	.word	0x40028000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40021800 	.word	0x40021800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cf0:	f000 fe30 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40004800 	.word	0x40004800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d28:	d13f      	bne.n	8000daa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d46:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d58:	230a      	movs	r3, #10
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d64:	f000 fdf6 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d7e:	f000 fde9 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_PCD_MspInit+0xac>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f926 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(test_btn_Pin);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 ff95 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e26:	f000 ff8d 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e00a      	b.n	8000e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e40:	f3af 8000 	nop.w
 8000e44:	4601      	mov	r1, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	60ba      	str	r2, [r7, #8]
 8000e4c:	b2ca      	uxtb	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbf0      	blt.n	8000e40 <_read+0x12>
  }

  return len;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e90:	605a      	str	r2, [r3, #4]
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_isatty>:

int _isatty(int file)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea8:	2301      	movs	r3, #1
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f002 fd18 	bl	8003934 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20030000 	.word	0x20030000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000814 	.word	0x20000814
 8000f38:	20000968 	.word	0x20000968

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
 ldr   sp, =_estack       /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8a:	f7ff ffd7 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f002 fcd7 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fb8d 	bl	80006b0 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
 ldr   sp, =_estack       /* set stack pointer */
 8000f98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fa4:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8000fa8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fac:	20000968 	.word	0x20000968

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f94f 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fd58 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f967 	bl	80012ea <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f92f 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000818 	.word	0x20000818

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000818 	.word	0x20000818

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff29 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff3e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff31 	bl	8001144 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06c      	b.n	80013f0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2223      	movs	r2, #35	; 0x23
 8001324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fbdf 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_ETH_Init+0xf4>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <HAL_ETH_Init+0xf4>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_ETH_Init+0xf4>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_ETH_Init+0xf8>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <HAL_ETH_Init+0xf8>)
 8001350:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001354:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_ETH_Init+0xf8>)
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4927      	ldr	r1, [pc, #156]	; (80013fc <HAL_ETH_Init+0xf8>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_ETH_Init+0xf8>)
 8001366:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800137e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff fe7e 	bl	8001080 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001386:	e011      	b.n	80013ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001388:	f7ff fe7a 	bl	8001080 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001396:	d909      	bls.n	80013ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2204      	movs	r2, #4
 800139c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	22e0      	movs	r2, #224	; 0xe0
 80013a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e021      	b.n	80013f0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1e4      	bne.n	8001388 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f958 	bl	8001674 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f9ff 	bl	80017c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa55 	bl	800187a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f9bd 	bl	8001758 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2210      	movs	r2, #16
 80013ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800

08001400 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <ETH_SetMACConfig+0x15c>)
 8001416:	4013      	ands	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7c1b      	ldrb	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <ETH_SetMACConfig+0x28>
 8001422:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001426:	e000      	b.n	800142a <ETH_SetMACConfig+0x2a>
 8001428:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	7c5b      	ldrb	r3, [r3, #17]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetMACConfig+0x38>
 8001432:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001436:	e000      	b.n	800143a <ETH_SetMACConfig+0x3a>
 8001438:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800143a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001440:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7fdb      	ldrb	r3, [r3, #31]
 8001446:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001448:	431a      	orrs	r2, r3
                        macconf->Speed |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800144e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	7f92      	ldrb	r2, [r2, #30]
 8001454:	2a00      	cmp	r2, #0
 8001456:	d102      	bne.n	800145e <ETH_SetMACConfig+0x5e>
 8001458:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145c:	e000      	b.n	8001460 <ETH_SetMACConfig+0x60>
 800145e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7f1b      	ldrb	r3, [r3, #28]
 8001466:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001468:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800146e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800147e:	2a00      	cmp	r2, #0
 8001480:	d102      	bne.n	8001488 <ETH_SetMACConfig+0x88>
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001486:	e000      	b.n	800148a <ETH_SetMACConfig+0x8a>
 8001488:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800148a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	7bdb      	ldrb	r3, [r3, #15]
 8001490:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001492:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001498:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014a2:	4313      	orrs	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fdec 	bl	8001098 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d101      	bne.n	80014ee <ETH_SetMACConfig+0xee>
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	e000      	b.n	80014f0 <ETH_SetMACConfig+0xf0>
 80014ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014fe:	2a01      	cmp	r2, #1
 8001500:	d101      	bne.n	8001506 <ETH_SetMACConfig+0x106>
 8001502:	2208      	movs	r2, #8
 8001504:	e000      	b.n	8001508 <ETH_SetMACConfig+0x108>
 8001506:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001508:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001510:	2a01      	cmp	r2, #1
 8001512:	d101      	bne.n	8001518 <ETH_SetMACConfig+0x118>
 8001514:	2204      	movs	r2, #4
 8001516:	e000      	b.n	800151a <ETH_SetMACConfig+0x11a>
 8001518:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800151a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001522:	2a01      	cmp	r2, #1
 8001524:	d101      	bne.n	800152a <ETH_SetMACConfig+0x12a>
 8001526:	2202      	movs	r2, #2
 8001528:	e000      	b.n	800152c <ETH_SetMACConfig+0x12c>
 800152a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800152c:	4313      	orrs	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fda7 	bl	8001098 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	ff20810f 	.word	0xff20810f

08001560 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ETH_SetDMAConfig+0x110>)
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <ETH_SetDMAConfig+0x2c>
 8001586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800158a:	e000      	b.n	800158e <ETH_SetDMAConfig+0x2e>
 800158c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001594:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	7f52      	ldrb	r2, [r2, #29]
 800159a:	2a00      	cmp	r2, #0
 800159c:	d102      	bne.n	80015a4 <ETH_SetDMAConfig+0x44>
 800159e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015a2:	e000      	b.n	80015a6 <ETH_SetDMAConfig+0x46>
 80015a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	7b9b      	ldrb	r3, [r3, #14]
 80015ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7f1b      	ldrb	r3, [r3, #28]
 80015ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7f9b      	ldrb	r3, [r3, #30]
 80015c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fd4e 	bl	8001098 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001614:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800161a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001620:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001628:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800162a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001632:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001638:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001646:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fd1f 	bl	8001098 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	f8de3f23 	.word	0xf8de3f23

08001674 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a6      	sub	sp, #152	; 0x98
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016b0:	2300      	movs	r3, #0
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe86 	bl	8001400 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001702:	2301      	movs	r3, #1
 8001704:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001720:	2301      	movs	r3, #1
 8001722:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800172a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800172e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff08 	bl	8001560 <ETH_SetDMAConfig>
}
 8001750:	bf00      	nop
 8001752:	3798      	adds	r7, #152	; 0x98
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3305      	adds	r3, #5
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	3204      	adds	r2, #4
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <ETH_MACAddressConfig+0x68>)
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	061a      	lsls	r2, r3, #24
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3302      	adds	r3, #2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	4313      	orrs	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <ETH_MACAddressConfig+0x6c>)
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40028040 	.word	0x40028040
 80017c4:	40028044 	.word	0x40028044

080017c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e03e      	b.n	8001854 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68d9      	ldr	r1, [r3, #12]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	3206      	adds	r2, #6
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d80c      	bhi.n	8001838 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e004      	b.n	8001842 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	461a      	mov	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d9bd      	bls.n	80017d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	611a      	str	r2, [r3, #16]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e046      	b.n	8001916 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6919      	ldr	r1, [r3, #16]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	3212      	adds	r2, #18
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d80c      	bhi.n	8001906 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e004      	b.n	8001910 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d9b5      	bls.n	8001888 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e177      	b.n	8001c60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8166 	bne.w	8001c5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80c0 	beq.w	8001c5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a61      	ldr	r2, [pc, #388]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_GPIO_Init+0x32c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d037      	beq.n	8001b92 <HAL_GPIO_Init+0x23e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_GPIO_Init+0x330>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0x23a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x236>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a55      	ldr	r2, [pc, #340]	; (8001c8c <HAL_GPIO_Init+0x338>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x232>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a54      	ldr	r2, [pc, #336]	; (8001c90 <HAL_GPIO_Init+0x33c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x22e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a53      	ldr	r2, [pc, #332]	; (8001c94 <HAL_GPIO_Init+0x340>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x22a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	; (8001c98 <HAL_GPIO_Init+0x344>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a51      	ldr	r2, [pc, #324]	; (8001c9c <HAL_GPIO_Init+0x348>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	; (8001ca0 <HAL_GPIO_Init+0x34c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4f      	ldr	r2, [pc, #316]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	e012      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e010      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00e      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e00c      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e00a      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f ae84 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40021c00 	.word	0x40021c00
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40022400 	.word	0x40022400
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fc28 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d76:	b08f      	sub	sp, #60	; 0x3c
 8001d78:	af0a      	add	r7, sp, #40	; 0x28
 8001d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e10f      	b.n	8001fa6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7fe ffb1 	bl	8000d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 f9ae 	bl	8003126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	687e      	ldr	r6, [r7, #4]
 8001dd2:	466d      	mov	r5, sp
 8001dd4:	f106 0410 	add.w	r4, r6, #16
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de8:	1d33      	adds	r3, r6, #4
 8001dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	f001 f939 	bl	8003064 <USB_CoreInit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d0      	b.n	8001fa6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f99c 	bl	8003148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e04a      	b.n	8001eac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	333d      	adds	r3, #61	; 0x3d
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	333c      	adds	r3, #60	; 0x3c
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	b298      	uxth	r0, r3
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3344      	adds	r3, #68	; 0x44
 8001e52:	4602      	mov	r2, r0
 8001e54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	3340      	adds	r3, #64	; 0x40
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3348      	adds	r3, #72	; 0x48
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	334c      	adds	r3, #76	; 0x4c
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3354      	adds	r3, #84	; 0x54
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3af      	bcc.n	8001e16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e044      	b.n	8001f46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	3301      	adds	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3b5      	bcc.n	8001ebc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	687e      	ldr	r6, [r7, #4]
 8001f58:	466d      	mov	r5, sp
 8001f5a:	f106 0410 	add.w	r4, r6, #16
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f6e:	1d33      	adds	r3, r6, #4
 8001f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f001 f934 	bl	80031e0 <USB_DevInit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00d      	b.n	8001fa6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 faff 	bl	80035a2 <USB_DevDisconnect>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e267      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d075      	beq.n	80020ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4b82      	ldr	r3, [pc, #520]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff2:	d10b      	bne.n	800200c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05b      	beq.n	80020b8 <HAL_RCC_OscConfig+0x108>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d157      	bne.n	80020b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e242      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x74>
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6f      	ldr	r2, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002048:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a68      	ldr	r2, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a65      	ldr	r2, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f80a 	bl	8001080 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff f806 	bl	8001080 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e207      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0xc0>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fff6 	bl	8001080 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fff2 	bl	8001080 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1f3      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0xe8>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d063      	beq.n	800218e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x152>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1c7      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x244>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe ffab 	bl	8001080 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe ffa7 	bl	8001080 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1a8      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4925      	ldr	r1, [pc, #148]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x244>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe ff8a 	bl	8001080 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe ff86 	bl	8001080 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e187      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d036      	beq.n	8002208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x248>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe ff6a 	bl	8001080 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7fe ff66 	bl	8001080 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e167      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x200>
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x248>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe ff53 	bl	8001080 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe ff4f 	bl	8001080 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d907      	bls.n	80021fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e150      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ea      	bne.n	80021de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8097 	beq.w	8002344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a7c      	ldr	r2, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b77      	ldr	r3, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b74      	ldr	r3, [pc, #464]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a73      	ldr	r2, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe ff0f 	bl	8001080 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe ff0b 	bl	8001080 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e10c      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x2ea>
 800228c:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x324>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x30c>
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x324>
 80022bc:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fed0 	bl	8001080 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fecc 	bl	8001080 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0cb      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ee      	beq.n	80022e4 <HAL_RCC_OscConfig+0x334>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe feba 	bl	8001080 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe feb6 	bl	8001080 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0b5      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a1 	beq.w	8002490 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234e:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d05c      	beq.n	8002414 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d141      	bne.n	80023e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fe8a 	bl	8001080 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fe86 	bl	8001080 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e087      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	491b      	ldr	r1, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fe5f 	bl	8001080 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fe5b 	bl	8001080 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e05c      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x416>
 80023e4:	e054      	b.n	8002490 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fe48 	bl	8001080 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fe44 	bl	8001080 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e045      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x444>
 8002412:	e03d      	b.n	8002490 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e038      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000
 8002428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4ec>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d028      	beq.n	800248c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d121      	bne.n	800248c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d11a      	bne.n	800248c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002464:	4293      	cmp	r3, r2
 8002466:	d111      	bne.n	800248c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0cc      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d90c      	bls.n	80024dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b8      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d044      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d119      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07f      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d003      	beq.n	800255e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	2b03      	cmp	r3, #3
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06f      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e067      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4934      	ldr	r1, [pc, #208]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002590:	f7fe fd76 	bl	8001080 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	e00a      	b.n	80025ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002598:	f7fe fd72 	bl	8001080 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e04f      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 020c 	and.w	r2, r3, #12
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1eb      	bne.n	8002598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d20c      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e032      	b.n	800264e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002626:	f000 f821 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490a      	ldr	r1, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fcd6 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00
 800265c:	40023800 	.word	0x40023800
 8002660:	08004574 	.word	0x08004574
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002670:	b094      	sub	sp, #80	; 0x50
 8002672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800267c:	2300      	movs	r3, #0
 800267e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002684:	4b79      	ldr	r3, [pc, #484]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d00d      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x40>
 8002690:	2b08      	cmp	r3, #8
 8002692:	f200 80e1 	bhi.w	8002858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x34>
 800269a:	2b04      	cmp	r3, #4
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800269e:	e0db      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCC_GetSysClockFreq+0x204>)
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026a4:	e0db      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a6:	4b73      	ldr	r3, [pc, #460]	; (8002874 <HAL_RCC_GetSysClockFreq+0x208>)
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026aa:	e0d8      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d063      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c2:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	2200      	movs	r2, #0
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80026cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
 80026da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026de:	4622      	mov	r2, r4
 80026e0:	462b      	mov	r3, r5
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	0159      	lsls	r1, r3, #5
 80026ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f0:	0150      	lsls	r0, r2, #5
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4621      	mov	r1, r4
 80026f8:	1a51      	subs	r1, r2, r1
 80026fa:	6139      	str	r1, [r7, #16]
 80026fc:	4629      	mov	r1, r5
 80026fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002710:	4659      	mov	r1, fp
 8002712:	018b      	lsls	r3, r1, #6
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800271a:	4651      	mov	r1, sl
 800271c:	018a      	lsls	r2, r1, #6
 800271e:	4651      	mov	r1, sl
 8002720:	ebb2 0801 	subs.w	r8, r2, r1
 8002724:	4659      	mov	r1, fp
 8002726:	eb63 0901 	sbc.w	r9, r3, r1
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273e:	4690      	mov	r8, r2
 8002740:	4699      	mov	r9, r3
 8002742:	4623      	mov	r3, r4
 8002744:	eb18 0303 	adds.w	r3, r8, r3
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	462b      	mov	r3, r5
 800274c:	eb49 0303 	adc.w	r3, r9, r3
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800275e:	4629      	mov	r1, r5
 8002760:	024b      	lsls	r3, r1, #9
 8002762:	4621      	mov	r1, r4
 8002764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002768:	4621      	mov	r1, r4
 800276a:	024a      	lsls	r2, r1, #9
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002772:	2200      	movs	r2, #0
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
 8002776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800277c:	f7fd fd88 	bl	8000290 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002788:	e058      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	2200      	movs	r2, #0
 8002792:	4618      	mov	r0, r3
 8002794:	4611      	mov	r1, r2
 8002796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027a4:	4642      	mov	r2, r8
 80027a6:	464b      	mov	r3, r9
 80027a8:	f04f 0000 	mov.w	r0, #0
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	0159      	lsls	r1, r3, #5
 80027b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b6:	0150      	lsls	r0, r2, #5
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4641      	mov	r1, r8
 80027be:	ebb2 0a01 	subs.w	sl, r2, r1
 80027c2:	4649      	mov	r1, r9
 80027c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027dc:	ebb2 040a 	subs.w	r4, r2, sl
 80027e0:	eb63 050b 	sbc.w	r5, r3, fp
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	00eb      	lsls	r3, r5, #3
 80027ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f2:	00e2      	lsls	r2, r4, #3
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
 80027f8:	4643      	mov	r3, r8
 80027fa:	18e3      	adds	r3, r4, r3
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	464b      	mov	r3, r9
 8002800:	eb45 0303 	adc.w	r3, r5, r3
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002812:	4629      	mov	r1, r5
 8002814:	028b      	lsls	r3, r1, #10
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800281c:	4621      	mov	r1, r4
 800281e:	028a      	lsls	r2, r1, #10
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002826:	2200      	movs	r2, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	61fa      	str	r2, [r7, #28]
 800282c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002830:	f7fd fd2e 	bl	8000290 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_GetSysClockFreq+0x200>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	3301      	adds	r3, #1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800284c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetSysClockFreq+0x204>)
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002860:	4618      	mov	r0, r3
 8002862:	3750      	adds	r7, #80	; 0x50
 8002864:	46bd      	mov	sp, r7
 8002866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	00f42400 	.word	0x00f42400
 8002874:	007a1200 	.word	0x007a1200

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a9b      	lsrs	r3, r3, #10
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08004584 	.word	0x08004584

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028bc:	f7ff ffdc 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0b5b      	lsrs	r3, r3, #13
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08004584 	.word	0x08004584

080028e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e03f      	b.n	8002972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f9b6 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f929 	bl	8002b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08a      	sub	sp, #40	; 0x28
 800297e:	af02      	add	r7, sp, #8
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	d17c      	bne.n	8002a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Transmit+0x2c>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e075      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x3e>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e06e      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2221      	movs	r2, #33	; 0x21
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ce:	f7fe fb57 	bl	8001080 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e8:	d108      	bne.n	80029fc <HAL_UART_Transmit+0x82>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e003      	b.n	8002a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a0c:	e02a      	b.n	8002a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f840 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3302      	adds	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e007      	b.n	8002a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1cf      	bne.n	8002a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f810 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b090      	sub	sp, #64	; 0x40
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e050      	b.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d04c      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002abe:	f7fe fadf 	bl	8001080 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d241      	bcs.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aee:	637a      	str	r2, [r7, #52]	; 0x34
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	613b      	str	r3, [r7, #16]
   return(result);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b22:	623a      	str	r2, [r7, #32]
 8002b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e5      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e00f      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d09f      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3740      	adds	r7, #64	; 0x40
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b80:	b0c0      	sub	sp, #256	; 0x100
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	ea40 0301 	orr.w	r3, r0, r1
 8002ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bd4:	f021 010c 	bic.w	r1, r1, #12
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002be2:	430b      	orrs	r3, r1
 8002be4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	6999      	ldr	r1, [r3, #24]
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	ea40 0301 	orr.w	r3, r0, r1
 8002c02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <UART_SetConfig+0x2cc>)
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d005      	beq.n	8002c1c <UART_SetConfig+0xa0>
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <UART_SetConfig+0x2d0>)
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d104      	bne.n	8002c26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c1c:	f7ff fe4c 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8002c20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c24:	e003      	b.n	8002c2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c26:	f7ff fe33 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8002c2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c38:	f040 810c 	bne.w	8002e54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	1891      	adds	r1, r2, r2
 8002c54:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c56:	415b      	adcs	r3, r3
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c5e:	4621      	mov	r1, r4
 8002c60:	eb12 0801 	adds.w	r8, r2, r1
 8002c64:	4629      	mov	r1, r5
 8002c66:	eb43 0901 	adc.w	r9, r3, r1
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c7e:	4690      	mov	r8, r2
 8002c80:	4699      	mov	r9, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	eb18 0303 	adds.w	r3, r8, r3
 8002c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	eb49 0303 	adc.w	r3, r9, r3
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ca2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002caa:	460b      	mov	r3, r1
 8002cac:	18db      	adds	r3, r3, r3
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	eb42 0303 	adc.w	r3, r2, r3
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cc0:	f7fd fae6 	bl	8000290 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <UART_SetConfig+0x2d4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ce0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cec:	415b      	adcs	r3, r3
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	eb43 0b01 	adc.w	fp, r3, r1
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d14:	4692      	mov	sl, r2
 8002d16:	469b      	mov	fp, r3
 8002d18:	4643      	mov	r3, r8
 8002d1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d22:	464b      	mov	r3, r9
 8002d24:	eb4b 0303 	adc.w	r3, fp, r3
 8002d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d40:	460b      	mov	r3, r1
 8002d42:	18db      	adds	r3, r3, r3
 8002d44:	643b      	str	r3, [r7, #64]	; 0x40
 8002d46:	4613      	mov	r3, r2
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d56:	f7fd fa9b 	bl	8000290 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <UART_SetConfig+0x2d4>)
 8002d62:	fba3 2301 	umull	r2, r3, r3, r1
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2264      	movs	r2, #100	; 0x64
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	1acb      	subs	r3, r1, r3
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <UART_SetConfig+0x2d4>)
 8002d78:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d84:	441c      	add	r4, r3
 8002d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002da0:	415b      	adcs	r3, r3
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002da8:	4641      	mov	r1, r8
 8002daa:	1851      	adds	r1, r2, r1
 8002dac:	6339      	str	r1, [r7, #48]	; 0x30
 8002dae:	4649      	mov	r1, r9
 8002db0:	414b      	adcs	r3, r1
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dca:	4651      	mov	r1, sl
 8002dcc:	00ca      	lsls	r2, r1, #3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ddc:	464b      	mov	r3, r9
 8002dde:	460a      	mov	r2, r1
 8002de0:	eb42 0303 	adc.w	r3, r2, r3
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002df4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002df8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	18db      	adds	r3, r3, r3
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	4613      	mov	r3, r2
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e12:	f7fd fa3d 	bl	8000290 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <UART_SetConfig+0x2d4>)
 8002e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	2164      	movs	r1, #100	; 0x64
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	3332      	adds	r3, #50	; 0x32
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <UART_SetConfig+0x2d4>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	f003 0207 	and.w	r2, r3, #7
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4422      	add	r2, r4
 8002e42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e44:	e106      	b.n	8003054 <UART_SetConfig+0x4d8>
 8002e46:	bf00      	nop
 8002e48:	40011000 	.word	0x40011000
 8002e4c:	40011400 	.word	0x40011400
 8002e50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e66:	4642      	mov	r2, r8
 8002e68:	464b      	mov	r3, r9
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	6239      	str	r1, [r7, #32]
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e76:	4641      	mov	r1, r8
 8002e78:	1854      	adds	r4, r2, r1
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	eb43 0501 	adc.w	r5, r3, r1
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	00eb      	lsls	r3, r5, #3
 8002e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8e:	00e2      	lsls	r2, r4, #3
 8002e90:	4614      	mov	r4, r2
 8002e92:	461d      	mov	r5, r3
 8002e94:	4643      	mov	r3, r8
 8002e96:	18e3      	adds	r3, r4, r3
 8002e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	008b      	lsls	r3, r1, #2
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ecc:	4621      	mov	r1, r4
 8002ece:	008a      	lsls	r2, r1, #2
 8002ed0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ed4:	f7fd f9dc 	bl	8000290 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4b60      	ldr	r3, [pc, #384]	; (8003060 <UART_SetConfig+0x4e4>)
 8002ede:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	011c      	lsls	r4, r3, #4
 8002ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	61b9      	str	r1, [r7, #24]
 8002f00:	415b      	adcs	r3, r3
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f08:	4641      	mov	r1, r8
 8002f0a:	1851      	adds	r1, r2, r1
 8002f0c:	6139      	str	r1, [r7, #16]
 8002f0e:	4649      	mov	r1, r9
 8002f10:	414b      	adcs	r3, r1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f20:	4659      	mov	r1, fp
 8002f22:	00cb      	lsls	r3, r1, #3
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	00ca      	lsls	r2, r1, #3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	4642      	mov	r2, r8
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	460a      	mov	r2, r1
 8002f40:	eb42 0303 	adc.w	r3, r2, r3
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f60:	4649      	mov	r1, r9
 8002f62:	008b      	lsls	r3, r1, #2
 8002f64:	4641      	mov	r1, r8
 8002f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	008a      	lsls	r2, r1, #2
 8002f6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f72:	f7fd f98d 	bl	8000290 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4b38      	ldr	r3, [pc, #224]	; (8003060 <UART_SetConfig+0x4e4>)
 8002f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2264      	movs	r2, #100	; 0x64
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	1acb      	subs	r3, r1, r3
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	3332      	adds	r3, #50	; 0x32
 8002f90:	4a33      	ldr	r2, [pc, #204]	; (8003060 <UART_SetConfig+0x4e4>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	441c      	add	r4, r3
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa6:	677a      	str	r2, [r7, #116]	; 0x74
 8002fa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	1851      	adds	r1, r2, r1
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	414b      	adcs	r3, r1
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fde:	4651      	mov	r1, sl
 8002fe0:	00ca      	lsls	r2, r1, #3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fee:	464b      	mov	r3, r9
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	eb42 0303 	adc.w	r3, r2, r3
 8002ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
 8003002:	667a      	str	r2, [r7, #100]	; 0x64
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003010:	4649      	mov	r1, r9
 8003012:	008b      	lsls	r3, r1, #2
 8003014:	4641      	mov	r1, r8
 8003016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301a:	4641      	mov	r1, r8
 800301c:	008a      	lsls	r2, r1, #2
 800301e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003022:	f7fd f935 	bl	8000290 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <UART_SetConfig+0x4e4>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	3332      	adds	r3, #50	; 0x32
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <UART_SetConfig+0x4e4>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4422      	add	r2, r4
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003060:	51eb851f 	.word	0x51eb851f

08003064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003064:	b084      	sub	sp, #16
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	f107 001c 	add.w	r0, r7, #28
 8003072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2b01      	cmp	r3, #1
 800307a:	d122      	bne.n	80030c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 faa2 	bl	8003600 <USB_CoreReset>
 80030bc:	4603      	mov	r3, r0
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e01a      	b.n	80030f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa96 	bl	8003600 <USB_CoreReset>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ea:	e005      	b.n	80030f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10b      	bne.n	8003116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f043 0206 	orr.w	r2, r3, #6
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003122:	b004      	add	sp, #16
 8003124:	4770      	bx	lr

08003126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d115      	bne.n	8003196 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003176:	2001      	movs	r0, #1
 8003178:	f7fd ff8e 	bl	8001098 <HAL_Delay>
      ms++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa2e 	bl	80035e4 <USB_GetMode>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d01e      	beq.n	80031cc <USB_SetCurrentMode+0x84>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b31      	cmp	r3, #49	; 0x31
 8003192:	d9f0      	bls.n	8003176 <USB_SetCurrentMode+0x2e>
 8003194:	e01a      	b.n	80031cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d115      	bne.n	80031c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7fd ff75 	bl	8001098 <HAL_Delay>
      ms++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa15 	bl	80035e4 <USB_GetMode>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <USB_SetCurrentMode+0x84>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b31      	cmp	r3, #49	; 0x31
 80031c4:	d9f0      	bls.n	80031a8 <USB_SetCurrentMode+0x60>
 80031c6:	e001      	b.n	80031cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e005      	b.n	80031d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b32      	cmp	r3, #50	; 0x32
 80031d0:	d101      	bne.n	80031d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031e0:	b084      	sub	sp, #16
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e009      	b.n	8003214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3340      	adds	r3, #64	; 0x40
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	2200      	movs	r2, #0
 800320c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0e      	cmp	r3, #14
 8003218:	d9f2      	bls.n	8003200 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11c      	bne.n	800325a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
 8003258:	e00b      	b.n	8003272 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	4619      	mov	r1, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	461a      	mov	r2, r3
 800328e:	680b      	ldr	r3, [r1, #0]
 8003290:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800329e:	2100      	movs	r1, #0
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f965 	bl	8003570 <USB_SetDevSpeed>
 80032a6:	e008      	b.n	80032ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032a8:	2101      	movs	r1, #1
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f960 	bl	8003570 <USB_SetDevSpeed>
 80032b0:	e003      	b.n	80032ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032b2:	2103      	movs	r1, #3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f95b 	bl	8003570 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032ba:	2110      	movs	r1, #16
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8f3 	bl	80034a8 <USB_FlushTxFifo>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f91f 	bl	8003510 <USB_FlushRxFifo>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	461a      	mov	r2, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e043      	b.n	800338e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800331c:	d118      	bne.n	8003350 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	461a      	mov	r2, r3
 8003332:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e013      	b.n	8003362 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e008      	b.n	8003362 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	461a      	mov	r2, r3
 800335e:	2300      	movs	r3, #0
 8003360:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	461a      	mov	r2, r3
 8003370:	2300      	movs	r3, #0
 8003372:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	461a      	mov	r2, r3
 8003382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003386:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	3301      	adds	r3, #1
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3b7      	bcc.n	8003306 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e043      	b.n	8003424 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b2:	d118      	bne.n	80033e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	461a      	mov	r2, r3
 80033c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e013      	b.n	80033f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033dc:	461a      	mov	r2, r3
 80033de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e008      	b.n	80033f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	461a      	mov	r2, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800341c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3301      	adds	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3b7      	bcc.n	800339c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800343e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <USB_DevInit+0x2c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f043 0208 	orr.w	r2, r3, #8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800347e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr
 80034a4:	803c3800 	.word	0x803c3800

080034a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <USB_FlushTxFifo+0x64>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e01b      	b.n	8003500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	daf2      	bge.n	80034b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a08      	ldr	r2, [pc, #32]	; (800350c <USB_FlushTxFifo+0x64>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e006      	b.n	8003500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d0f0      	beq.n	80034e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	00030d40 	.word	0x00030d40

08003510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a11      	ldr	r2, [pc, #68]	; (800356c <USB_FlushRxFifo+0x5c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e018      	b.n	8003560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	daf2      	bge.n	800351c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2210      	movs	r2, #16
 800353e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <USB_FlushRxFifo+0x5c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e006      	b.n	8003560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b10      	cmp	r3, #16
 800355c:	d0f0      	beq.n	8003540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	00030d40 	.word	0x00030d40

08003570 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <USB_CoreReset+0x64>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e01b      	b.n	8003656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	daf2      	bge.n	800360c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <USB_CoreReset+0x64>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e006      	b.n	8003656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d0f0      	beq.n	8003636 <USB_CoreReset+0x36>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	00030d40 	.word	0x00030d40

08003668 <std>:
 8003668:	2300      	movs	r3, #0
 800366a:	b510      	push	{r4, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	e9c0 3300 	strd	r3, r3, [r0]
 8003672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003676:	6083      	str	r3, [r0, #8]
 8003678:	8181      	strh	r1, [r0, #12]
 800367a:	6643      	str	r3, [r0, #100]	; 0x64
 800367c:	81c2      	strh	r2, [r0, #14]
 800367e:	6183      	str	r3, [r0, #24]
 8003680:	4619      	mov	r1, r3
 8003682:	2208      	movs	r2, #8
 8003684:	305c      	adds	r0, #92	; 0x5c
 8003686:	f000 f906 	bl	8003896 <memset>
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <std+0x58>)
 800368c:	6263      	str	r3, [r4, #36]	; 0x24
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <std+0x5c>)
 8003690:	62a3      	str	r3, [r4, #40]	; 0x28
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <std+0x60>)
 8003694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <std+0x64>)
 8003698:	6323      	str	r3, [r4, #48]	; 0x30
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <std+0x68>)
 800369c:	6224      	str	r4, [r4, #32]
 800369e:	429c      	cmp	r4, r3
 80036a0:	d006      	beq.n	80036b0 <std+0x48>
 80036a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80036a6:	4294      	cmp	r4, r2
 80036a8:	d002      	beq.n	80036b0 <std+0x48>
 80036aa:	33d0      	adds	r3, #208	; 0xd0
 80036ac:	429c      	cmp	r4, r3
 80036ae:	d105      	bne.n	80036bc <std+0x54>
 80036b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b8:	f000 b966 	b.w	8003988 <__retarget_lock_init_recursive>
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	bf00      	nop
 80036c0:	08003811 	.word	0x08003811
 80036c4:	08003833 	.word	0x08003833
 80036c8:	0800386b 	.word	0x0800386b
 80036cc:	0800388f 	.word	0x0800388f
 80036d0:	2000081c 	.word	0x2000081c

080036d4 <stdio_exit_handler>:
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <stdio_exit_handler+0xc>)
 80036d6:	4903      	ldr	r1, [pc, #12]	; (80036e4 <stdio_exit_handler+0x10>)
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <stdio_exit_handler+0x14>)
 80036da:	f000 b869 	b.w	80037b0 <_fwalk_sglue>
 80036de:	bf00      	nop
 80036e0:	2000000c 	.word	0x2000000c
 80036e4:	08004235 	.word	0x08004235
 80036e8:	20000018 	.word	0x20000018

080036ec <cleanup_stdio>:
 80036ec:	6841      	ldr	r1, [r0, #4]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <cleanup_stdio+0x34>)
 80036f0:	4299      	cmp	r1, r3
 80036f2:	b510      	push	{r4, lr}
 80036f4:	4604      	mov	r4, r0
 80036f6:	d001      	beq.n	80036fc <cleanup_stdio+0x10>
 80036f8:	f000 fd9c 	bl	8004234 <_fflush_r>
 80036fc:	68a1      	ldr	r1, [r4, #8]
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <cleanup_stdio+0x38>)
 8003700:	4299      	cmp	r1, r3
 8003702:	d002      	beq.n	800370a <cleanup_stdio+0x1e>
 8003704:	4620      	mov	r0, r4
 8003706:	f000 fd95 	bl	8004234 <_fflush_r>
 800370a:	68e1      	ldr	r1, [r4, #12]
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <cleanup_stdio+0x3c>)
 800370e:	4299      	cmp	r1, r3
 8003710:	d004      	beq.n	800371c <cleanup_stdio+0x30>
 8003712:	4620      	mov	r0, r4
 8003714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003718:	f000 bd8c 	b.w	8004234 <_fflush_r>
 800371c:	bd10      	pop	{r4, pc}
 800371e:	bf00      	nop
 8003720:	2000081c 	.word	0x2000081c
 8003724:	20000884 	.word	0x20000884
 8003728:	200008ec 	.word	0x200008ec

0800372c <global_stdio_init.part.0>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <global_stdio_init.part.0+0x30>)
 8003730:	4c0b      	ldr	r4, [pc, #44]	; (8003760 <global_stdio_init.part.0+0x34>)
 8003732:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <global_stdio_init.part.0+0x38>)
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	4620      	mov	r0, r4
 8003738:	2200      	movs	r2, #0
 800373a:	2104      	movs	r1, #4
 800373c:	f7ff ff94 	bl	8003668 <std>
 8003740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003744:	2201      	movs	r2, #1
 8003746:	2109      	movs	r1, #9
 8003748:	f7ff ff8e 	bl	8003668 <std>
 800374c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003750:	2202      	movs	r2, #2
 8003752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003756:	2112      	movs	r1, #18
 8003758:	f7ff bf86 	b.w	8003668 <std>
 800375c:	20000954 	.word	0x20000954
 8003760:	2000081c 	.word	0x2000081c
 8003764:	080036d5 	.word	0x080036d5

08003768 <__sfp_lock_acquire>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sfp_lock_acquire+0x8>)
 800376a:	f000 b90e 	b.w	800398a <__retarget_lock_acquire_recursive>
 800376e:	bf00      	nop
 8003770:	2000095d 	.word	0x2000095d

08003774 <__sfp_lock_release>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sfp_lock_release+0x8>)
 8003776:	f000 b909 	b.w	800398c <__retarget_lock_release_recursive>
 800377a:	bf00      	nop
 800377c:	2000095d 	.word	0x2000095d

08003780 <__sinit>:
 8003780:	b510      	push	{r4, lr}
 8003782:	4604      	mov	r4, r0
 8003784:	f7ff fff0 	bl	8003768 <__sfp_lock_acquire>
 8003788:	6a23      	ldr	r3, [r4, #32]
 800378a:	b11b      	cbz	r3, 8003794 <__sinit+0x14>
 800378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003790:	f7ff bff0 	b.w	8003774 <__sfp_lock_release>
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__sinit+0x28>)
 8003796:	6223      	str	r3, [r4, #32]
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__sinit+0x2c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f5      	bne.n	800378c <__sinit+0xc>
 80037a0:	f7ff ffc4 	bl	800372c <global_stdio_init.part.0>
 80037a4:	e7f2      	b.n	800378c <__sinit+0xc>
 80037a6:	bf00      	nop
 80037a8:	080036ed 	.word	0x080036ed
 80037ac:	20000954 	.word	0x20000954

080037b0 <_fwalk_sglue>:
 80037b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b4:	4607      	mov	r7, r0
 80037b6:	4688      	mov	r8, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	2600      	movs	r6, #0
 80037bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037c0:	f1b9 0901 	subs.w	r9, r9, #1
 80037c4:	d505      	bpl.n	80037d2 <_fwalk_sglue+0x22>
 80037c6:	6824      	ldr	r4, [r4, #0]
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	d1f7      	bne.n	80037bc <_fwalk_sglue+0xc>
 80037cc:	4630      	mov	r0, r6
 80037ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d2:	89ab      	ldrh	r3, [r5, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d907      	bls.n	80037e8 <_fwalk_sglue+0x38>
 80037d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037dc:	3301      	adds	r3, #1
 80037de:	d003      	beq.n	80037e8 <_fwalk_sglue+0x38>
 80037e0:	4629      	mov	r1, r5
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c0      	blx	r8
 80037e6:	4306      	orrs	r6, r0
 80037e8:	3568      	adds	r5, #104	; 0x68
 80037ea:	e7e9      	b.n	80037c0 <_fwalk_sglue+0x10>

080037ec <iprintf>:
 80037ec:	b40f      	push	{r0, r1, r2, r3}
 80037ee:	b507      	push	{r0, r1, r2, lr}
 80037f0:	4906      	ldr	r1, [pc, #24]	; (800380c <iprintf+0x20>)
 80037f2:	ab04      	add	r3, sp, #16
 80037f4:	6808      	ldr	r0, [r1, #0]
 80037f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037fa:	6881      	ldr	r1, [r0, #8]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f000 f9e9 	bl	8003bd4 <_vfiprintf_r>
 8003802:	b003      	add	sp, #12
 8003804:	f85d eb04 	ldr.w	lr, [sp], #4
 8003808:	b004      	add	sp, #16
 800380a:	4770      	bx	lr
 800380c:	20000064 	.word	0x20000064

08003810 <__sread>:
 8003810:	b510      	push	{r4, lr}
 8003812:	460c      	mov	r4, r1
 8003814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003818:	f000 f868 	bl	80038ec <_read_r>
 800381c:	2800      	cmp	r0, #0
 800381e:	bfab      	itete	ge
 8003820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003822:	89a3      	ldrhlt	r3, [r4, #12]
 8003824:	181b      	addge	r3, r3, r0
 8003826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800382a:	bfac      	ite	ge
 800382c:	6563      	strge	r3, [r4, #84]	; 0x54
 800382e:	81a3      	strhlt	r3, [r4, #12]
 8003830:	bd10      	pop	{r4, pc}

08003832 <__swrite>:
 8003832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003836:	461f      	mov	r7, r3
 8003838:	898b      	ldrh	r3, [r1, #12]
 800383a:	05db      	lsls	r3, r3, #23
 800383c:	4605      	mov	r5, r0
 800383e:	460c      	mov	r4, r1
 8003840:	4616      	mov	r6, r2
 8003842:	d505      	bpl.n	8003850 <__swrite+0x1e>
 8003844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003848:	2302      	movs	r3, #2
 800384a:	2200      	movs	r2, #0
 800384c:	f000 f83c 	bl	80038c8 <_lseek_r>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	4632      	mov	r2, r6
 800385e:	463b      	mov	r3, r7
 8003860:	4628      	mov	r0, r5
 8003862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003866:	f000 b853 	b.w	8003910 <_write_r>

0800386a <__sseek>:
 800386a:	b510      	push	{r4, lr}
 800386c:	460c      	mov	r4, r1
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 f829 	bl	80038c8 <_lseek_r>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	bf15      	itete	ne
 800387c:	6560      	strne	r0, [r4, #84]	; 0x54
 800387e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003886:	81a3      	strheq	r3, [r4, #12]
 8003888:	bf18      	it	ne
 800388a:	81a3      	strhne	r3, [r4, #12]
 800388c:	bd10      	pop	{r4, pc}

0800388e <__sclose>:
 800388e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003892:	f000 b809 	b.w	80038a8 <_close_r>

08003896 <memset>:
 8003896:	4402      	add	r2, r0
 8003898:	4603      	mov	r3, r0
 800389a:	4293      	cmp	r3, r2
 800389c:	d100      	bne.n	80038a0 <memset+0xa>
 800389e:	4770      	bx	lr
 80038a0:	f803 1b01 	strb.w	r1, [r3], #1
 80038a4:	e7f9      	b.n	800389a <memset+0x4>
	...

080038a8 <_close_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_close_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fd fad8 	bl	8000e68 <_close>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_close_r+0x1a>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_close_r+0x1a>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	20000958 	.word	0x20000958

080038c8 <_lseek_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d07      	ldr	r5, [pc, #28]	; (80038e8 <_lseek_r+0x20>)
 80038cc:	4604      	mov	r4, r0
 80038ce:	4608      	mov	r0, r1
 80038d0:	4611      	mov	r1, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	602a      	str	r2, [r5, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7fd faed 	bl	8000eb6 <_lseek>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_lseek_r+0x1e>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_lseek_r+0x1e>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000958 	.word	0x20000958

080038ec <_read_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d07      	ldr	r5, [pc, #28]	; (800390c <_read_r+0x20>)
 80038f0:	4604      	mov	r4, r0
 80038f2:	4608      	mov	r0, r1
 80038f4:	4611      	mov	r1, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	602a      	str	r2, [r5, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f7fd fa97 	bl	8000e2e <_read>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_read_r+0x1e>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_read_r+0x1e>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	20000958 	.word	0x20000958

08003910 <_write_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d07      	ldr	r5, [pc, #28]	; (8003930 <_write_r+0x20>)
 8003914:	4604      	mov	r4, r0
 8003916:	4608      	mov	r0, r1
 8003918:	4611      	mov	r1, r2
 800391a:	2200      	movs	r2, #0
 800391c:	602a      	str	r2, [r5, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f7fc fe34 	bl	800058c <_write>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d102      	bne.n	800392e <_write_r+0x1e>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	b103      	cbz	r3, 800392e <_write_r+0x1e>
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	20000958 	.word	0x20000958

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000064 	.word	0x20000064

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f000 fdc0 	bl	80044d8 <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080045c8 	.word	0x080045c8
 800397c:	080045c8 	.word	0x080045c8
 8003980:	080045c8 	.word	0x080045c8
 8003984:	080045cc 	.word	0x080045cc

08003988 <__retarget_lock_init_recursive>:
 8003988:	4770      	bx	lr

0800398a <__retarget_lock_acquire_recursive>:
 800398a:	4770      	bx	lr

0800398c <__retarget_lock_release_recursive>:
 800398c:	4770      	bx	lr
	...

08003990 <_free_r>:
 8003990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003992:	2900      	cmp	r1, #0
 8003994:	d044      	beq.n	8003a20 <_free_r+0x90>
 8003996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800399a:	9001      	str	r0, [sp, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f1a1 0404 	sub.w	r4, r1, #4
 80039a2:	bfb8      	it	lt
 80039a4:	18e4      	addlt	r4, r4, r3
 80039a6:	f000 f8df 	bl	8003b68 <__malloc_lock>
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <_free_r+0x94>)
 80039ac:	9801      	ldr	r0, [sp, #4]
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	b933      	cbnz	r3, 80039c0 <_free_r+0x30>
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	b003      	add	sp, #12
 80039b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039bc:	f000 b8da 	b.w	8003b74 <__malloc_unlock>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d908      	bls.n	80039d6 <_free_r+0x46>
 80039c4:	6825      	ldr	r5, [r4, #0]
 80039c6:	1961      	adds	r1, r4, r5
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf01      	itttt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	1949      	addeq	r1, r1, r5
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	e7ed      	b.n	80039b2 <_free_r+0x22>
 80039d6:	461a      	mov	r2, r3
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b10b      	cbz	r3, 80039e0 <_free_r+0x50>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d9fa      	bls.n	80039d6 <_free_r+0x46>
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	1855      	adds	r5, r2, r1
 80039e4:	42a5      	cmp	r5, r4
 80039e6:	d10b      	bne.n	8003a00 <_free_r+0x70>
 80039e8:	6824      	ldr	r4, [r4, #0]
 80039ea:	4421      	add	r1, r4
 80039ec:	1854      	adds	r4, r2, r1
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	d1e0      	bne.n	80039b6 <_free_r+0x26>
 80039f4:	681c      	ldr	r4, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	6053      	str	r3, [r2, #4]
 80039fa:	440c      	add	r4, r1
 80039fc:	6014      	str	r4, [r2, #0]
 80039fe:	e7da      	b.n	80039b6 <_free_r+0x26>
 8003a00:	d902      	bls.n	8003a08 <_free_r+0x78>
 8003a02:	230c      	movs	r3, #12
 8003a04:	6003      	str	r3, [r0, #0]
 8003a06:	e7d6      	b.n	80039b6 <_free_r+0x26>
 8003a08:	6825      	ldr	r5, [r4, #0]
 8003a0a:	1961      	adds	r1, r4, r5
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf04      	itt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	bf04      	itt	eq
 8003a18:	1949      	addeq	r1, r1, r5
 8003a1a:	6021      	streq	r1, [r4, #0]
 8003a1c:	6054      	str	r4, [r2, #4]
 8003a1e:	e7ca      	b.n	80039b6 <_free_r+0x26>
 8003a20:	b003      	add	sp, #12
 8003a22:	bd30      	pop	{r4, r5, pc}
 8003a24:	20000960 	.word	0x20000960

08003a28 <sbrk_aligned>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	4e0e      	ldr	r6, [pc, #56]	; (8003a64 <sbrk_aligned+0x3c>)
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	6831      	ldr	r1, [r6, #0]
 8003a30:	4605      	mov	r5, r0
 8003a32:	b911      	cbnz	r1, 8003a3a <sbrk_aligned+0x12>
 8003a34:	f000 fcbc 	bl	80043b0 <_sbrk_r>
 8003a38:	6030      	str	r0, [r6, #0]
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 fcb7 	bl	80043b0 <_sbrk_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	d00a      	beq.n	8003a5c <sbrk_aligned+0x34>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d007      	beq.n	8003a60 <sbrk_aligned+0x38>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 fcac 	bl	80043b0 <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d101      	bne.n	8003a60 <sbrk_aligned+0x38>
 8003a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003a60:	4620      	mov	r0, r4
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	20000964 	.word	0x20000964

08003a68 <_malloc_r>:
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	1ccd      	adds	r5, r1, #3
 8003a6e:	f025 0503 	bic.w	r5, r5, #3
 8003a72:	3508      	adds	r5, #8
 8003a74:	2d0c      	cmp	r5, #12
 8003a76:	bf38      	it	cc
 8003a78:	250c      	movcc	r5, #12
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	db01      	blt.n	8003a84 <_malloc_r+0x1c>
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d905      	bls.n	8003a90 <_malloc_r+0x28>
 8003a84:	230c      	movs	r3, #12
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	2600      	movs	r6, #0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b64 <_malloc_r+0xfc>
 8003a94:	f000 f868 	bl	8003b68 <__malloc_lock>
 8003a98:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	bb5c      	cbnz	r4, 8003af8 <_malloc_r+0x90>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff ffc0 	bl	8003a28 <sbrk_aligned>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	d155      	bne.n	8003b5a <_malloc_r+0xf2>
 8003aae:	f8d8 4000 	ldr.w	r4, [r8]
 8003ab2:	4626      	mov	r6, r4
 8003ab4:	2e00      	cmp	r6, #0
 8003ab6:	d145      	bne.n	8003b44 <_malloc_r+0xdc>
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d048      	beq.n	8003b4e <_malloc_r+0xe6>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	eb04 0903 	add.w	r9, r4, r3
 8003ac6:	f000 fc73 	bl	80043b0 <_sbrk_r>
 8003aca:	4581      	cmp	r9, r0
 8003acc:	d13f      	bne.n	8003b4e <_malloc_r+0xe6>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	1a6d      	subs	r5, r5, r1
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f7ff ffa7 	bl	8003a28 <sbrk_aligned>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d037      	beq.n	8003b4e <_malloc_r+0xe6>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	442b      	add	r3, r5
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d038      	beq.n	8003b5e <_malloc_r+0xf6>
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	d12b      	bne.n	8003b4a <_malloc_r+0xe2>
 8003af2:	2200      	movs	r2, #0
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e00f      	b.n	8003b18 <_malloc_r+0xb0>
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	1b52      	subs	r2, r2, r5
 8003afc:	d41f      	bmi.n	8003b3e <_malloc_r+0xd6>
 8003afe:	2a0b      	cmp	r2, #11
 8003b00:	d917      	bls.n	8003b32 <_malloc_r+0xca>
 8003b02:	1961      	adds	r1, r4, r5
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	6025      	str	r5, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	6059      	strne	r1, [r3, #4]
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	bf08      	it	eq
 8003b10:	f8c8 1000 	streq.w	r1, [r8]
 8003b14:	5162      	str	r2, [r4, r5]
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f104 060b 	add.w	r6, r4, #11
 8003b1e:	f000 f829 	bl	8003b74 <__malloc_unlock>
 8003b22:	f026 0607 	bic.w	r6, r6, #7
 8003b26:	1d23      	adds	r3, r4, #4
 8003b28:	1af2      	subs	r2, r6, r3
 8003b2a:	d0ae      	beq.n	8003a8a <_malloc_r+0x22>
 8003b2c:	1b9b      	subs	r3, r3, r6
 8003b2e:	50a3      	str	r3, [r4, r2]
 8003b30:	e7ab      	b.n	8003a8a <_malloc_r+0x22>
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	d1dd      	bne.n	8003af4 <_malloc_r+0x8c>
 8003b38:	f8c8 2000 	str.w	r2, [r8]
 8003b3c:	e7ec      	b.n	8003b18 <_malloc_r+0xb0>
 8003b3e:	4623      	mov	r3, r4
 8003b40:	6864      	ldr	r4, [r4, #4]
 8003b42:	e7ac      	b.n	8003a9e <_malloc_r+0x36>
 8003b44:	4634      	mov	r4, r6
 8003b46:	6876      	ldr	r6, [r6, #4]
 8003b48:	e7b4      	b.n	8003ab4 <_malloc_r+0x4c>
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	e7cc      	b.n	8003ae8 <_malloc_r+0x80>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4638      	mov	r0, r7
 8003b54:	f000 f80e 	bl	8003b74 <__malloc_unlock>
 8003b58:	e797      	b.n	8003a8a <_malloc_r+0x22>
 8003b5a:	6025      	str	r5, [r4, #0]
 8003b5c:	e7dc      	b.n	8003b18 <_malloc_r+0xb0>
 8003b5e:	605b      	str	r3, [r3, #4]
 8003b60:	deff      	udf	#255	; 0xff
 8003b62:	bf00      	nop
 8003b64:	20000960 	.word	0x20000960

08003b68 <__malloc_lock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__malloc_lock+0x8>)
 8003b6a:	f7ff bf0e 	b.w	800398a <__retarget_lock_acquire_recursive>
 8003b6e:	bf00      	nop
 8003b70:	2000095c 	.word	0x2000095c

08003b74 <__malloc_unlock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	; (8003b7c <__malloc_unlock+0x8>)
 8003b76:	f7ff bf09 	b.w	800398c <__retarget_lock_release_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	2000095c 	.word	0x2000095c

08003b80 <__sfputc_r>:
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	b410      	push	{r4}
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	da08      	bge.n	8003b9e <__sfputc_r+0x1e>
 8003b8c:	6994      	ldr	r4, [r2, #24]
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	db01      	blt.n	8003b96 <__sfputc_r+0x16>
 8003b92:	290a      	cmp	r1, #10
 8003b94:	d103      	bne.n	8003b9e <__sfputc_r+0x1e>
 8003b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9a:	f000 bb73 	b.w	8004284 <__swbuf_r>
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	1c58      	adds	r0, r3, #1
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	7019      	strb	r1, [r3, #0]
 8003ba6:	4608      	mov	r0, r1
 8003ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <__sfputs_r>:
 8003bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	460f      	mov	r7, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	18d5      	adds	r5, r2, r3
 8003bb8:	42ac      	cmp	r4, r5
 8003bba:	d101      	bne.n	8003bc0 <__sfputs_r+0x12>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	e007      	b.n	8003bd0 <__sfputs_r+0x22>
 8003bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc4:	463a      	mov	r2, r7
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f7ff ffda 	bl	8003b80 <__sfputc_r>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d1f3      	bne.n	8003bb8 <__sfputs_r+0xa>
 8003bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bd4 <_vfiprintf_r>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	460d      	mov	r5, r1
 8003bda:	b09d      	sub	sp, #116	; 0x74
 8003bdc:	4614      	mov	r4, r2
 8003bde:	4698      	mov	r8, r3
 8003be0:	4606      	mov	r6, r0
 8003be2:	b118      	cbz	r0, 8003bec <_vfiprintf_r+0x18>
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b90b      	cbnz	r3, 8003bec <_vfiprintf_r+0x18>
 8003be8:	f7ff fdca 	bl	8003780 <__sinit>
 8003bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bee:	07d9      	lsls	r1, r3, #31
 8003bf0:	d405      	bmi.n	8003bfe <_vfiprintf_r+0x2a>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d402      	bmi.n	8003bfe <_vfiprintf_r+0x2a>
 8003bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bfa:	f7ff fec6 	bl	800398a <__retarget_lock_acquire_recursive>
 8003bfe:	89ab      	ldrh	r3, [r5, #12]
 8003c00:	071b      	lsls	r3, r3, #28
 8003c02:	d501      	bpl.n	8003c08 <_vfiprintf_r+0x34>
 8003c04:	692b      	ldr	r3, [r5, #16]
 8003c06:	b99b      	cbnz	r3, 8003c30 <_vfiprintf_r+0x5c>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 fb78 	bl	8004300 <__swsetup_r>
 8003c10:	b170      	cbz	r0, 8003c30 <_vfiprintf_r+0x5c>
 8003c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c14:	07dc      	lsls	r4, r3, #31
 8003c16:	d504      	bpl.n	8003c22 <_vfiprintf_r+0x4e>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	b01d      	add	sp, #116	; 0x74
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	89ab      	ldrh	r3, [r5, #12]
 8003c24:	0598      	lsls	r0, r3, #22
 8003c26:	d4f7      	bmi.n	8003c18 <_vfiprintf_r+0x44>
 8003c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c2a:	f7ff feaf 	bl	800398c <__retarget_lock_release_recursive>
 8003c2e:	e7f3      	b.n	8003c18 <_vfiprintf_r+0x44>
 8003c30:	2300      	movs	r3, #0
 8003c32:	9309      	str	r3, [sp, #36]	; 0x24
 8003c34:	2320      	movs	r3, #32
 8003c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c3e:	2330      	movs	r3, #48	; 0x30
 8003c40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003df4 <_vfiprintf_r+0x220>
 8003c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c48:	f04f 0901 	mov.w	r9, #1
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	469a      	mov	sl, r3
 8003c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c54:	b10a      	cbz	r2, 8003c5a <_vfiprintf_r+0x86>
 8003c56:	2a25      	cmp	r2, #37	; 0x25
 8003c58:	d1f9      	bne.n	8003c4e <_vfiprintf_r+0x7a>
 8003c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5e:	d00b      	beq.n	8003c78 <_vfiprintf_r+0xa4>
 8003c60:	465b      	mov	r3, fp
 8003c62:	4622      	mov	r2, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff ffa1 	bl	8003bae <__sfputs_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f000 80a9 	beq.w	8003dc4 <_vfiprintf_r+0x1f0>
 8003c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c74:	445a      	add	r2, fp
 8003c76:	9209      	str	r2, [sp, #36]	; 0x24
 8003c78:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a1 	beq.w	8003dc4 <_vfiprintf_r+0x1f0>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c8c:	f10a 0a01 	add.w	sl, sl, #1
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	9307      	str	r3, [sp, #28]
 8003c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c98:	931a      	str	r3, [sp, #104]	; 0x68
 8003c9a:	4654      	mov	r4, sl
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca2:	4854      	ldr	r0, [pc, #336]	; (8003df4 <_vfiprintf_r+0x220>)
 8003ca4:	f7fc faa4 	bl	80001f0 <memchr>
 8003ca8:	9a04      	ldr	r2, [sp, #16]
 8003caa:	b9d8      	cbnz	r0, 8003ce4 <_vfiprintf_r+0x110>
 8003cac:	06d1      	lsls	r1, r2, #27
 8003cae:	bf44      	itt	mi
 8003cb0:	2320      	movmi	r3, #32
 8003cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb6:	0713      	lsls	r3, r2, #28
 8003cb8:	bf44      	itt	mi
 8003cba:	232b      	movmi	r3, #43	; 0x2b
 8003cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc6:	d015      	beq.n	8003cf4 <_vfiprintf_r+0x120>
 8003cc8:	9a07      	ldr	r2, [sp, #28]
 8003cca:	4654      	mov	r4, sl
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f04f 0c0a 	mov.w	ip, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd8:	3b30      	subs	r3, #48	; 0x30
 8003cda:	2b09      	cmp	r3, #9
 8003cdc:	d94d      	bls.n	8003d7a <_vfiprintf_r+0x1a6>
 8003cde:	b1b0      	cbz	r0, 8003d0e <_vfiprintf_r+0x13a>
 8003ce0:	9207      	str	r2, [sp, #28]
 8003ce2:	e014      	b.n	8003d0e <_vfiprintf_r+0x13a>
 8003ce4:	eba0 0308 	sub.w	r3, r0, r8
 8003ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	46a2      	mov	sl, r4
 8003cf2:	e7d2      	b.n	8003c9a <_vfiprintf_r+0xc6>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	1d19      	adds	r1, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	9103      	str	r1, [sp, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bfbb      	ittet	lt
 8003d00:	425b      	neglt	r3, r3
 8003d02:	f042 0202 	orrlt.w	r2, r2, #2
 8003d06:	9307      	strge	r3, [sp, #28]
 8003d08:	9307      	strlt	r3, [sp, #28]
 8003d0a:	bfb8      	it	lt
 8003d0c:	9204      	strlt	r2, [sp, #16]
 8003d0e:	7823      	ldrb	r3, [r4, #0]
 8003d10:	2b2e      	cmp	r3, #46	; 0x2e
 8003d12:	d10c      	bne.n	8003d2e <_vfiprintf_r+0x15a>
 8003d14:	7863      	ldrb	r3, [r4, #1]
 8003d16:	2b2a      	cmp	r3, #42	; 0x2a
 8003d18:	d134      	bne.n	8003d84 <_vfiprintf_r+0x1b0>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	9203      	str	r2, [sp, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d2a:	3402      	adds	r4, #2
 8003d2c:	9305      	str	r3, [sp, #20]
 8003d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003e04 <_vfiprintf_r+0x230>
 8003d32:	7821      	ldrb	r1, [r4, #0]
 8003d34:	2203      	movs	r2, #3
 8003d36:	4650      	mov	r0, sl
 8003d38:	f7fc fa5a 	bl	80001f0 <memchr>
 8003d3c:	b138      	cbz	r0, 8003d4e <_vfiprintf_r+0x17a>
 8003d3e:	9b04      	ldr	r3, [sp, #16]
 8003d40:	eba0 000a 	sub.w	r0, r0, sl
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	4082      	lsls	r2, r0
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	3401      	adds	r4, #1
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d52:	4829      	ldr	r0, [pc, #164]	; (8003df8 <_vfiprintf_r+0x224>)
 8003d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d58:	2206      	movs	r2, #6
 8003d5a:	f7fc fa49 	bl	80001f0 <memchr>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d03f      	beq.n	8003de2 <_vfiprintf_r+0x20e>
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <_vfiprintf_r+0x228>)
 8003d64:	bb1b      	cbnz	r3, 8003dae <_vfiprintf_r+0x1da>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	3307      	adds	r3, #7
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	3308      	adds	r3, #8
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d74:	443b      	add	r3, r7
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	e768      	b.n	8003c4c <_vfiprintf_r+0x78>
 8003d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7e:	460c      	mov	r4, r1
 8003d80:	2001      	movs	r0, #1
 8003d82:	e7a6      	b.n	8003cd2 <_vfiprintf_r+0xfe>
 8003d84:	2300      	movs	r3, #0
 8003d86:	3401      	adds	r4, #1
 8003d88:	9305      	str	r3, [sp, #20]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 0c0a 	mov.w	ip, #10
 8003d90:	4620      	mov	r0, r4
 8003d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d96:	3a30      	subs	r2, #48	; 0x30
 8003d98:	2a09      	cmp	r2, #9
 8003d9a:	d903      	bls.n	8003da4 <_vfiprintf_r+0x1d0>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0c6      	beq.n	8003d2e <_vfiprintf_r+0x15a>
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	e7c4      	b.n	8003d2e <_vfiprintf_r+0x15a>
 8003da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da8:	4604      	mov	r4, r0
 8003daa:	2301      	movs	r3, #1
 8003dac:	e7f0      	b.n	8003d90 <_vfiprintf_r+0x1bc>
 8003dae:	ab03      	add	r3, sp, #12
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	462a      	mov	r2, r5
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <_vfiprintf_r+0x22c>)
 8003db6:	a904      	add	r1, sp, #16
 8003db8:	4630      	mov	r0, r6
 8003dba:	f3af 8000 	nop.w
 8003dbe:	4607      	mov	r7, r0
 8003dc0:	1c78      	adds	r0, r7, #1
 8003dc2:	d1d6      	bne.n	8003d72 <_vfiprintf_r+0x19e>
 8003dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dc6:	07d9      	lsls	r1, r3, #31
 8003dc8:	d405      	bmi.n	8003dd6 <_vfiprintf_r+0x202>
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	059a      	lsls	r2, r3, #22
 8003dce:	d402      	bmi.n	8003dd6 <_vfiprintf_r+0x202>
 8003dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dd2:	f7ff fddb 	bl	800398c <__retarget_lock_release_recursive>
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	065b      	lsls	r3, r3, #25
 8003dda:	f53f af1d 	bmi.w	8003c18 <_vfiprintf_r+0x44>
 8003dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de0:	e71c      	b.n	8003c1c <_vfiprintf_r+0x48>
 8003de2:	ab03      	add	r3, sp, #12
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <_vfiprintf_r+0x22c>)
 8003dea:	a904      	add	r1, sp, #16
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 f879 	bl	8003ee4 <_printf_i>
 8003df2:	e7e4      	b.n	8003dbe <_vfiprintf_r+0x1ea>
 8003df4:	0800458c 	.word	0x0800458c
 8003df8:	08004596 	.word	0x08004596
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003baf 	.word	0x08003baf
 8003e04:	08004592 	.word	0x08004592

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	4699      	mov	r9, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e24:	4607      	mov	r7, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	b10a      	cbz	r2, 8003e2e <_printf_common+0x26>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	6833      	ldrmi	r3, [r6, #0]
 8003e36:	3302      	addmi	r3, #2
 8003e38:	6033      	strmi	r3, [r6, #0]
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	f015 0506 	ands.w	r5, r5, #6
 8003e40:	d106      	bne.n	8003e50 <_printf_common+0x48>
 8003e42:	f104 0a19 	add.w	sl, r4, #25
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	6832      	ldr	r2, [r6, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc26      	bgt.n	8003e9e <_printf_common+0x96>
 8003e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e54:	1e13      	subs	r3, r2, #0
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	bf18      	it	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	0692      	lsls	r2, r2, #26
 8003e5e:	d42b      	bmi.n	8003eb8 <_printf_common+0xb0>
 8003e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e64:	4649      	mov	r1, r9
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d01e      	beq.n	8003eac <_printf_common+0xa4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf02      	ittt	eq
 8003e7a:	68e5      	ldreq	r5, [r4, #12]
 8003e7c:	6833      	ldreq	r3, [r6, #0]
 8003e7e:	1aed      	subeq	r5, r5, r3
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	bf0c      	ite	eq
 8003e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e88:	2500      	movne	r5, #0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfc4      	itt	gt
 8003e8e:	1a9b      	subgt	r3, r3, r2
 8003e90:	18ed      	addgt	r5, r5, r3
 8003e92:	2600      	movs	r6, #0
 8003e94:	341a      	adds	r4, #26
 8003e96:	42b5      	cmp	r5, r6
 8003e98:	d11a      	bne.n	8003ed0 <_printf_common+0xc8>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e008      	b.n	8003eb0 <_printf_common+0xa8>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c0      	blx	r8
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_printf_common+0xac>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7c6      	b.n	8003e46 <_printf_common+0x3e>
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	2030      	movs	r0, #48	; 0x30
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ec2:	4422      	add	r2, r4
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ecc:	3302      	adds	r3, #2
 8003ece:	e7c7      	b.n	8003e60 <_printf_common+0x58>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	47c0      	blx	r8
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0e6      	beq.n	8003eac <_printf_common+0xa4>
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7d9      	b.n	8003e96 <_printf_common+0x8e>
	...

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003eec:	2f78      	cmp	r7, #120	; 0x78
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	; 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d4 	beq.w	80040ae <_printf_i+0x1ca>
 8003f06:	2f58      	cmp	r7, #88	; 0x58
 8003f08:	f000 80c0 	beq.w	800408c <_printf_i+0x1a8>
 8003f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	; (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	08004095 	.word	0x08004095
 8003f54:	08003fbd 	.word	0x08003fbd
 8003f58:	0800404f 	.word	0x0800404f
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040b7 	.word	0x080040b7
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fbd 	.word	0x08003fbd
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004057 	.word	0x08004057
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	602a      	str	r2, [r5, #0]
 8003f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09f      	b.n	80040d0 <_printf_i+0x1ec>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	0607      	lsls	r7, r0, #24
 8003f96:	f103 0104 	add.w	r1, r3, #4
 8003f9a:	6029      	str	r1, [r5, #0]
 8003f9c:	d501      	bpl.n	8003fa2 <_printf_i+0xbe>
 8003f9e:	681e      	ldr	r6, [r3, #0]
 8003fa0:	e003      	b.n	8003faa <_printf_i+0xc6>
 8003fa2:	0646      	lsls	r6, r0, #25
 8003fa4:	d5fb      	bpl.n	8003f9e <_printf_i+0xba>
 8003fa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	da03      	bge.n	8003fb6 <_printf_i+0xd2>
 8003fae:	232d      	movs	r3, #45	; 0x2d
 8003fb0:	4276      	negs	r6, r6
 8003fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb6:	485a      	ldr	r0, [pc, #360]	; (8004120 <_printf_i+0x23c>)
 8003fb8:	230a      	movs	r3, #10
 8003fba:	e012      	b.n	8003fe2 <_printf_i+0xfe>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	1d19      	adds	r1, r3, #4
 8003fc2:	6029      	str	r1, [r5, #0]
 8003fc4:	0605      	lsls	r5, r0, #24
 8003fc6:	d501      	bpl.n	8003fcc <_printf_i+0xe8>
 8003fc8:	681e      	ldr	r6, [r3, #0]
 8003fca:	e002      	b.n	8003fd2 <_printf_i+0xee>
 8003fcc:	0641      	lsls	r1, r0, #25
 8003fce:	d5fb      	bpl.n	8003fc8 <_printf_i+0xe4>
 8003fd0:	881e      	ldrh	r6, [r3, #0]
 8003fd2:	4853      	ldr	r0, [pc, #332]	; (8004120 <_printf_i+0x23c>)
 8003fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2308      	moveq	r3, #8
 8003fda:	230a      	movne	r3, #10
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fe2:	6865      	ldr	r5, [r4, #4]
 8003fe4:	60a5      	str	r5, [r4, #8]
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	bfa2      	ittt	ge
 8003fea:	6821      	ldrge	r1, [r4, #0]
 8003fec:	f021 0104 	bicge.w	r1, r1, #4
 8003ff0:	6021      	strge	r1, [r4, #0]
 8003ff2:	b90e      	cbnz	r6, 8003ff8 <_printf_i+0x114>
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	d04b      	beq.n	8004090 <_printf_i+0x1ac>
 8003ff8:	4615      	mov	r5, r2
 8003ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8004002:	5dc7      	ldrb	r7, [r0, r7]
 8004004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004008:	4637      	mov	r7, r6
 800400a:	42bb      	cmp	r3, r7
 800400c:	460e      	mov	r6, r1
 800400e:	d9f4      	bls.n	8003ffa <_printf_i+0x116>
 8004010:	2b08      	cmp	r3, #8
 8004012:	d10b      	bne.n	800402c <_printf_i+0x148>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	07de      	lsls	r6, r3, #31
 8004018:	d508      	bpl.n	800402c <_printf_i+0x148>
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	6861      	ldr	r1, [r4, #4]
 800401e:	4299      	cmp	r1, r3
 8004020:	bfde      	ittt	le
 8004022:	2330      	movle	r3, #48	; 0x30
 8004024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800402c:	1b52      	subs	r2, r2, r5
 800402e:	6122      	str	r2, [r4, #16]
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	464b      	mov	r3, r9
 8004036:	aa03      	add	r2, sp, #12
 8004038:	4621      	mov	r1, r4
 800403a:	4640      	mov	r0, r8
 800403c:	f7ff fee4 	bl	8003e08 <_printf_common>
 8004040:	3001      	adds	r0, #1
 8004042:	d14a      	bne.n	80040da <_printf_i+0x1f6>
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	b004      	add	sp, #16
 800404a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	4833      	ldr	r0, [pc, #204]	; (8004124 <_printf_i+0x240>)
 8004058:	2778      	movs	r7, #120	; 0x78
 800405a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	6829      	ldr	r1, [r5, #0]
 8004062:	061f      	lsls	r7, r3, #24
 8004064:	f851 6b04 	ldr.w	r6, [r1], #4
 8004068:	d402      	bmi.n	8004070 <_printf_i+0x18c>
 800406a:	065f      	lsls	r7, r3, #25
 800406c:	bf48      	it	mi
 800406e:	b2b6      	uxthmi	r6, r6
 8004070:	07df      	lsls	r7, r3, #31
 8004072:	bf48      	it	mi
 8004074:	f043 0320 	orrmi.w	r3, r3, #32
 8004078:	6029      	str	r1, [r5, #0]
 800407a:	bf48      	it	mi
 800407c:	6023      	strmi	r3, [r4, #0]
 800407e:	b91e      	cbnz	r6, 8004088 <_printf_i+0x1a4>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	2310      	movs	r3, #16
 800408a:	e7a7      	b.n	8003fdc <_printf_i+0xf8>
 800408c:	4824      	ldr	r0, [pc, #144]	; (8004120 <_printf_i+0x23c>)
 800408e:	e7e4      	b.n	800405a <_printf_i+0x176>
 8004090:	4615      	mov	r5, r2
 8004092:	e7bd      	b.n	8004010 <_printf_i+0x12c>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	6826      	ldr	r6, [r4, #0]
 8004098:	6961      	ldr	r1, [r4, #20]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	6028      	str	r0, [r5, #0]
 800409e:	0635      	lsls	r5, r6, #24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	d501      	bpl.n	80040a8 <_printf_i+0x1c4>
 80040a4:	6019      	str	r1, [r3, #0]
 80040a6:	e002      	b.n	80040ae <_printf_i+0x1ca>
 80040a8:	0670      	lsls	r0, r6, #25
 80040aa:	d5fb      	bpl.n	80040a4 <_printf_i+0x1c0>
 80040ac:	8019      	strh	r1, [r3, #0]
 80040ae:	2300      	movs	r3, #0
 80040b0:	6123      	str	r3, [r4, #16]
 80040b2:	4615      	mov	r5, r2
 80040b4:	e7bc      	b.n	8004030 <_printf_i+0x14c>
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	1d1a      	adds	r2, r3, #4
 80040ba:	602a      	str	r2, [r5, #0]
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	2100      	movs	r1, #0
 80040c2:	4628      	mov	r0, r5
 80040c4:	f7fc f894 	bl	80001f0 <memchr>
 80040c8:	b108      	cbz	r0, 80040ce <_printf_i+0x1ea>
 80040ca:	1b40      	subs	r0, r0, r5
 80040cc:	6060      	str	r0, [r4, #4]
 80040ce:	6863      	ldr	r3, [r4, #4]
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	2300      	movs	r3, #0
 80040d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d8:	e7aa      	b.n	8004030 <_printf_i+0x14c>
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	462a      	mov	r2, r5
 80040de:	4649      	mov	r1, r9
 80040e0:	4640      	mov	r0, r8
 80040e2:	47d0      	blx	sl
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0ad      	beq.n	8004044 <_printf_i+0x160>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	079b      	lsls	r3, r3, #30
 80040ec:	d413      	bmi.n	8004116 <_printf_i+0x232>
 80040ee:	68e0      	ldr	r0, [r4, #12]
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	4298      	cmp	r0, r3
 80040f4:	bfb8      	it	lt
 80040f6:	4618      	movlt	r0, r3
 80040f8:	e7a6      	b.n	8004048 <_printf_i+0x164>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4632      	mov	r2, r6
 80040fe:	4649      	mov	r1, r9
 8004100:	4640      	mov	r0, r8
 8004102:	47d0      	blx	sl
 8004104:	3001      	adds	r0, #1
 8004106:	d09d      	beq.n	8004044 <_printf_i+0x160>
 8004108:	3501      	adds	r5, #1
 800410a:	68e3      	ldr	r3, [r4, #12]
 800410c:	9903      	ldr	r1, [sp, #12]
 800410e:	1a5b      	subs	r3, r3, r1
 8004110:	42ab      	cmp	r3, r5
 8004112:	dcf2      	bgt.n	80040fa <_printf_i+0x216>
 8004114:	e7eb      	b.n	80040ee <_printf_i+0x20a>
 8004116:	2500      	movs	r5, #0
 8004118:	f104 0619 	add.w	r6, r4, #25
 800411c:	e7f5      	b.n	800410a <_printf_i+0x226>
 800411e:	bf00      	nop
 8004120:	0800459d 	.word	0x0800459d
 8004124:	080045ae 	.word	0x080045ae

08004128 <__sflush_r>:
 8004128:	898a      	ldrh	r2, [r1, #12]
 800412a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	4605      	mov	r5, r0
 8004130:	0710      	lsls	r0, r2, #28
 8004132:	460c      	mov	r4, r1
 8004134:	d458      	bmi.n	80041e8 <__sflush_r+0xc0>
 8004136:	684b      	ldr	r3, [r1, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc05      	bgt.n	8004148 <__sflush_r+0x20>
 800413c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	dc02      	bgt.n	8004148 <__sflush_r+0x20>
 8004142:	2000      	movs	r0, #0
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800414a:	2e00      	cmp	r6, #0
 800414c:	d0f9      	beq.n	8004142 <__sflush_r+0x1a>
 800414e:	2300      	movs	r3, #0
 8004150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004154:	682f      	ldr	r7, [r5, #0]
 8004156:	6a21      	ldr	r1, [r4, #32]
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	d032      	beq.n	80041c2 <__sflush_r+0x9a>
 800415c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	075a      	lsls	r2, r3, #29
 8004162:	d505      	bpl.n	8004170 <__sflush_r+0x48>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	1ac0      	subs	r0, r0, r3
 8004168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416a:	b10b      	cbz	r3, 8004170 <__sflush_r+0x48>
 800416c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800416e:	1ac0      	subs	r0, r0, r3
 8004170:	2300      	movs	r3, #0
 8004172:	4602      	mov	r2, r0
 8004174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004176:	6a21      	ldr	r1, [r4, #32]
 8004178:	4628      	mov	r0, r5
 800417a:	47b0      	blx	r6
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	d106      	bne.n	8004190 <__sflush_r+0x68>
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	291d      	cmp	r1, #29
 8004186:	d82b      	bhi.n	80041e0 <__sflush_r+0xb8>
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <__sflush_r+0x108>)
 800418a:	410a      	asrs	r2, r1
 800418c:	07d6      	lsls	r6, r2, #31
 800418e:	d427      	bmi.n	80041e0 <__sflush_r+0xb8>
 8004190:	2200      	movs	r2, #0
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	04d9      	lsls	r1, r3, #19
 8004196:	6922      	ldr	r2, [r4, #16]
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	d504      	bpl.n	80041a6 <__sflush_r+0x7e>
 800419c:	1c42      	adds	r2, r0, #1
 800419e:	d101      	bne.n	80041a4 <__sflush_r+0x7c>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b903      	cbnz	r3, 80041a6 <__sflush_r+0x7e>
 80041a4:	6560      	str	r0, [r4, #84]	; 0x54
 80041a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a8:	602f      	str	r7, [r5, #0]
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d0c9      	beq.n	8004142 <__sflush_r+0x1a>
 80041ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d002      	beq.n	80041bc <__sflush_r+0x94>
 80041b6:	4628      	mov	r0, r5
 80041b8:	f7ff fbea 	bl	8003990 <_free_r>
 80041bc:	2000      	movs	r0, #0
 80041be:	6360      	str	r0, [r4, #52]	; 0x34
 80041c0:	e7c0      	b.n	8004144 <__sflush_r+0x1c>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b0      	blx	r6
 80041c8:	1c41      	adds	r1, r0, #1
 80041ca:	d1c8      	bne.n	800415e <__sflush_r+0x36>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c5      	beq.n	800415e <__sflush_r+0x36>
 80041d2:	2b1d      	cmp	r3, #29
 80041d4:	d001      	beq.n	80041da <__sflush_r+0xb2>
 80041d6:	2b16      	cmp	r3, #22
 80041d8:	d101      	bne.n	80041de <__sflush_r+0xb6>
 80041da:	602f      	str	r7, [r5, #0]
 80041dc:	e7b1      	b.n	8004142 <__sflush_r+0x1a>
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	e7ad      	b.n	8004144 <__sflush_r+0x1c>
 80041e8:	690f      	ldr	r7, [r1, #16]
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	d0a9      	beq.n	8004142 <__sflush_r+0x1a>
 80041ee:	0793      	lsls	r3, r2, #30
 80041f0:	680e      	ldr	r6, [r1, #0]
 80041f2:	bf08      	it	eq
 80041f4:	694b      	ldreq	r3, [r1, #20]
 80041f6:	600f      	str	r7, [r1, #0]
 80041f8:	bf18      	it	ne
 80041fa:	2300      	movne	r3, #0
 80041fc:	eba6 0807 	sub.w	r8, r6, r7
 8004200:	608b      	str	r3, [r1, #8]
 8004202:	f1b8 0f00 	cmp.w	r8, #0
 8004206:	dd9c      	ble.n	8004142 <__sflush_r+0x1a>
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800420c:	4643      	mov	r3, r8
 800420e:	463a      	mov	r2, r7
 8004210:	4628      	mov	r0, r5
 8004212:	47b0      	blx	r6
 8004214:	2800      	cmp	r0, #0
 8004216:	dc06      	bgt.n	8004226 <__sflush_r+0xfe>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	e78e      	b.n	8004144 <__sflush_r+0x1c>
 8004226:	4407      	add	r7, r0
 8004228:	eba8 0800 	sub.w	r8, r8, r0
 800422c:	e7e9      	b.n	8004202 <__sflush_r+0xda>
 800422e:	bf00      	nop
 8004230:	dfbffffe 	.word	0xdfbffffe

08004234 <_fflush_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	4605      	mov	r5, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b913      	cbnz	r3, 8004244 <_fflush_r+0x10>
 800423e:	2500      	movs	r5, #0
 8004240:	4628      	mov	r0, r5
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	b118      	cbz	r0, 800424e <_fflush_r+0x1a>
 8004246:	6a03      	ldr	r3, [r0, #32]
 8004248:	b90b      	cbnz	r3, 800424e <_fflush_r+0x1a>
 800424a:	f7ff fa99 	bl	8003780 <__sinit>
 800424e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f3      	beq.n	800423e <_fflush_r+0xa>
 8004256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004258:	07d0      	lsls	r0, r2, #31
 800425a:	d404      	bmi.n	8004266 <_fflush_r+0x32>
 800425c:	0599      	lsls	r1, r3, #22
 800425e:	d402      	bmi.n	8004266 <_fflush_r+0x32>
 8004260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004262:	f7ff fb92 	bl	800398a <__retarget_lock_acquire_recursive>
 8004266:	4628      	mov	r0, r5
 8004268:	4621      	mov	r1, r4
 800426a:	f7ff ff5d 	bl	8004128 <__sflush_r>
 800426e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004270:	07da      	lsls	r2, r3, #31
 8004272:	4605      	mov	r5, r0
 8004274:	d4e4      	bmi.n	8004240 <_fflush_r+0xc>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	059b      	lsls	r3, r3, #22
 800427a:	d4e1      	bmi.n	8004240 <_fflush_r+0xc>
 800427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427e:	f7ff fb85 	bl	800398c <__retarget_lock_release_recursive>
 8004282:	e7dd      	b.n	8004240 <_fflush_r+0xc>

08004284 <__swbuf_r>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	460e      	mov	r6, r1
 8004288:	4614      	mov	r4, r2
 800428a:	4605      	mov	r5, r0
 800428c:	b118      	cbz	r0, 8004296 <__swbuf_r+0x12>
 800428e:	6a03      	ldr	r3, [r0, #32]
 8004290:	b90b      	cbnz	r3, 8004296 <__swbuf_r+0x12>
 8004292:	f7ff fa75 	bl	8003780 <__sinit>
 8004296:	69a3      	ldr	r3, [r4, #24]
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	071a      	lsls	r2, r3, #28
 800429e:	d525      	bpl.n	80042ec <__swbuf_r+0x68>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	b31b      	cbz	r3, 80042ec <__swbuf_r+0x68>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	6922      	ldr	r2, [r4, #16]
 80042a8:	1a98      	subs	r0, r3, r2
 80042aa:	6963      	ldr	r3, [r4, #20]
 80042ac:	b2f6      	uxtb	r6, r6
 80042ae:	4283      	cmp	r3, r0
 80042b0:	4637      	mov	r7, r6
 80042b2:	dc04      	bgt.n	80042be <__swbuf_r+0x3a>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7ff ffbc 	bl	8004234 <_fflush_r>
 80042bc:	b9e0      	cbnz	r0, 80042f8 <__swbuf_r+0x74>
 80042be:	68a3      	ldr	r3, [r4, #8]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	60a3      	str	r3, [r4, #8]
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	6022      	str	r2, [r4, #0]
 80042ca:	701e      	strb	r6, [r3, #0]
 80042cc:	6962      	ldr	r2, [r4, #20]
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d004      	beq.n	80042de <__swbuf_r+0x5a>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	07db      	lsls	r3, r3, #31
 80042d8:	d506      	bpl.n	80042e8 <__swbuf_r+0x64>
 80042da:	2e0a      	cmp	r6, #10
 80042dc:	d104      	bne.n	80042e8 <__swbuf_r+0x64>
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff ffa7 	bl	8004234 <_fflush_r>
 80042e6:	b938      	cbnz	r0, 80042f8 <__swbuf_r+0x74>
 80042e8:	4638      	mov	r0, r7
 80042ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ec:	4621      	mov	r1, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 f806 	bl	8004300 <__swsetup_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d0d5      	beq.n	80042a4 <__swbuf_r+0x20>
 80042f8:	f04f 37ff 	mov.w	r7, #4294967295
 80042fc:	e7f4      	b.n	80042e8 <__swbuf_r+0x64>
	...

08004300 <__swsetup_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <__swsetup_r+0xac>)
 8004304:	4605      	mov	r5, r0
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	460c      	mov	r4, r1
 800430a:	b118      	cbz	r0, 8004314 <__swsetup_r+0x14>
 800430c:	6a03      	ldr	r3, [r0, #32]
 800430e:	b90b      	cbnz	r3, 8004314 <__swsetup_r+0x14>
 8004310:	f7ff fa36 	bl	8003780 <__sinit>
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800431a:	0718      	lsls	r0, r3, #28
 800431c:	d422      	bmi.n	8004364 <__swsetup_r+0x64>
 800431e:	06d9      	lsls	r1, r3, #27
 8004320:	d407      	bmi.n	8004332 <__swsetup_r+0x32>
 8004322:	2309      	movs	r3, #9
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	e034      	b.n	800439c <__swsetup_r+0x9c>
 8004332:	0758      	lsls	r0, r3, #29
 8004334:	d512      	bpl.n	800435c <__swsetup_r+0x5c>
 8004336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004338:	b141      	cbz	r1, 800434c <__swsetup_r+0x4c>
 800433a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433e:	4299      	cmp	r1, r3
 8004340:	d002      	beq.n	8004348 <__swsetup_r+0x48>
 8004342:	4628      	mov	r0, r5
 8004344:	f7ff fb24 	bl	8003990 <_free_r>
 8004348:	2300      	movs	r3, #0
 800434a:	6363      	str	r3, [r4, #52]	; 0x34
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	2300      	movs	r3, #0
 8004356:	6063      	str	r3, [r4, #4]
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	b94b      	cbnz	r3, 800437c <__swsetup_r+0x7c>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d003      	beq.n	800437c <__swsetup_r+0x7c>
 8004374:	4621      	mov	r1, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f850 	bl	800441c <__smakebuf_r>
 800437c:	89a0      	ldrh	r0, [r4, #12]
 800437e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004382:	f010 0301 	ands.w	r3, r0, #1
 8004386:	d00a      	beq.n	800439e <__swsetup_r+0x9e>
 8004388:	2300      	movs	r3, #0
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	6963      	ldr	r3, [r4, #20]
 800438e:	425b      	negs	r3, r3
 8004390:	61a3      	str	r3, [r4, #24]
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	b943      	cbnz	r3, 80043a8 <__swsetup_r+0xa8>
 8004396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800439a:	d1c4      	bne.n	8004326 <__swsetup_r+0x26>
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	0781      	lsls	r1, r0, #30
 80043a0:	bf58      	it	pl
 80043a2:	6963      	ldrpl	r3, [r4, #20]
 80043a4:	60a3      	str	r3, [r4, #8]
 80043a6:	e7f4      	b.n	8004392 <__swsetup_r+0x92>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e7f7      	b.n	800439c <__swsetup_r+0x9c>
 80043ac:	20000064 	.word	0x20000064

080043b0 <_sbrk_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d06      	ldr	r5, [pc, #24]	; (80043cc <_sbrk_r+0x1c>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	f7fc fd88 	bl	8000ed0 <_sbrk>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_sbrk_r+0x1a>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_sbrk_r+0x1a>
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	20000958 	.word	0x20000958

080043d0 <__swhatbuf_r>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	460c      	mov	r4, r1
 80043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d8:	2900      	cmp	r1, #0
 80043da:	b096      	sub	sp, #88	; 0x58
 80043dc:	4615      	mov	r5, r2
 80043de:	461e      	mov	r6, r3
 80043e0:	da0d      	bge.n	80043fe <__swhatbuf_r+0x2e>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	bf0c      	ite	eq
 80043ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80043f2:	2340      	movne	r3, #64	; 0x40
 80043f4:	2000      	movs	r0, #0
 80043f6:	6031      	str	r1, [r6, #0]
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	b016      	add	sp, #88	; 0x58
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
 80043fe:	466a      	mov	r2, sp
 8004400:	f000 f848 	bl	8004494 <_fstat_r>
 8004404:	2800      	cmp	r0, #0
 8004406:	dbec      	blt.n	80043e2 <__swhatbuf_r+0x12>
 8004408:	9901      	ldr	r1, [sp, #4]
 800440a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800440e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004412:	4259      	negs	r1, r3
 8004414:	4159      	adcs	r1, r3
 8004416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441a:	e7eb      	b.n	80043f4 <__swhatbuf_r+0x24>

0800441c <__smakebuf_r>:
 800441c:	898b      	ldrh	r3, [r1, #12]
 800441e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004420:	079d      	lsls	r5, r3, #30
 8004422:	4606      	mov	r6, r0
 8004424:	460c      	mov	r4, r1
 8004426:	d507      	bpl.n	8004438 <__smakebuf_r+0x1c>
 8004428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	6123      	str	r3, [r4, #16]
 8004430:	2301      	movs	r3, #1
 8004432:	6163      	str	r3, [r4, #20]
 8004434:	b002      	add	sp, #8
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	ab01      	add	r3, sp, #4
 800443a:	466a      	mov	r2, sp
 800443c:	f7ff ffc8 	bl	80043d0 <__swhatbuf_r>
 8004440:	9900      	ldr	r1, [sp, #0]
 8004442:	4605      	mov	r5, r0
 8004444:	4630      	mov	r0, r6
 8004446:	f7ff fb0f 	bl	8003a68 <_malloc_r>
 800444a:	b948      	cbnz	r0, 8004460 <__smakebuf_r+0x44>
 800444c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004450:	059a      	lsls	r2, r3, #22
 8004452:	d4ef      	bmi.n	8004434 <__smakebuf_r+0x18>
 8004454:	f023 0303 	bic.w	r3, r3, #3
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	e7e3      	b.n	8004428 <__smakebuf_r+0xc>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	6020      	str	r0, [r4, #0]
 8004464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004468:	81a3      	strh	r3, [r4, #12]
 800446a:	9b00      	ldr	r3, [sp, #0]
 800446c:	6163      	str	r3, [r4, #20]
 800446e:	9b01      	ldr	r3, [sp, #4]
 8004470:	6120      	str	r0, [r4, #16]
 8004472:	b15b      	cbz	r3, 800448c <__smakebuf_r+0x70>
 8004474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004478:	4630      	mov	r0, r6
 800447a:	f000 f81d 	bl	80044b8 <_isatty_r>
 800447e:	b128      	cbz	r0, 800448c <__smakebuf_r+0x70>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	431d      	orrs	r5, r3
 8004490:	81a5      	strh	r5, [r4, #12]
 8004492:	e7cf      	b.n	8004434 <__smakebuf_r+0x18>

08004494 <_fstat_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	; (80044b4 <_fstat_r+0x20>)
 8004498:	2300      	movs	r3, #0
 800449a:	4604      	mov	r4, r0
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	f7fc fced 	bl	8000e80 <_fstat>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	d102      	bne.n	80044b0 <_fstat_r+0x1c>
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	b103      	cbz	r3, 80044b0 <_fstat_r+0x1c>
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	bd38      	pop	{r3, r4, r5, pc}
 80044b2:	bf00      	nop
 80044b4:	20000958 	.word	0x20000958

080044b8 <_isatty_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d06      	ldr	r5, [pc, #24]	; (80044d4 <_isatty_r+0x1c>)
 80044bc:	2300      	movs	r3, #0
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fc fcec 	bl	8000ea0 <_isatty>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_isatty_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_isatty_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	20000958 	.word	0x20000958

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr
