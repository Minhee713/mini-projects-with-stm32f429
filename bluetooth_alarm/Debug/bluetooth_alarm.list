
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008120  08008120  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008128  08008128  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000a48  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab8  20000ab8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016bf0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000305c  00000000  00000000  00036cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001280  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e6a  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002803c  00000000  00000000  0003be1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000176bb  00000000  00000000  00063e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1b16  00000000  00000000  0007b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005818  00000000  00000000  0016d028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00172840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007fa0 	.word	0x08007fa0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007fa0 	.word	0x08007fa0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 f8d9 	bl	8005786 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fa59 	bl	8003aa0 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 fc5b 	bl	8006ec0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 f8b2 	bl	8005786 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 f8aa 	bl	8005786 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 f89a 	bl	8005786 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08007fc8 	.word	0x08007fc8
 8000660:	200003d0 	.word	0x200003d0
 8000664:	2000035c 	.word	0x2000035c
 8000668:	08007fb8 	.word	0x08007fb8
 800066c:	08007fc0 	.word	0x08007fc0
 8000670:	08007fc4 	.word	0x08007fc4

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fa05 	bl	8003aa0 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 f8ce 	bl	80038a4 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 f8f3 	bl	80018f8 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000035c 	.word	0x2000035c

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
HAL_StatusTypeDef update_nvitems(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f004 ffc1 	bl	8005786 <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200003d0 	.word	0x200003d0

08000814 <get_time>:

void get_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <get_time+0x50>)
 8000822:	f004 fd75 	bl	8005310 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <get_time+0x50>)
 8000830:	f004 fe50 	bl	80054d4 <HAL_RTC_GetDate>

//	printf("%s %02d:%02d:%02d\t\r\n", ampm[sTime.TimeFormat>>6],sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf((char*) showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat >> 6],
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	099b      	lsrs	r3, r3, #6
 8000838:	b2db      	uxtb	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <get_time+0x54>)
 8000844:	441a      	add	r2, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000846:	783b      	ldrb	r3, [r7, #0]
	sprintf((char*) showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat >> 6],
 8000848:	4618      	mov	r0, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 800084a:	787b      	ldrb	r3, [r7, #1]
 800084c:	78b9      	ldrb	r1, [r7, #2]
	sprintf((char*) showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat >> 6],
 800084e:	9101      	str	r1, [sp, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4603      	mov	r3, r0
 8000854:	4905      	ldr	r1, [pc, #20]	; (800086c <get_time+0x58>)
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <get_time+0x5c>)
 8000858:	f006 fb66 	bl	8006f28 <siprintf>
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200003b0 	.word	0x200003b0
 8000868:	20000000 	.word	0x20000000
 800086c:	08007fe0 	.word	0x08007fe0
 8000870:	2000092c 	.word	0x2000092c

08000874 <showCurrentTime>:
	}

	HAL_FLASH_Lock();
}

void showCurrentTime() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	204e      	movs	r0, #78	; 0x4e
 800087c:	f7ff ff50 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <showCurrentTime+0x28>)
 8000882:	204e      	movs	r0, #78	; 0x4e
 8000884:	f7ff ff8d 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000888:	21c0      	movs	r1, #192	; 0xc0
 800088a:	204e      	movs	r0, #78	; 0x4e
 800088c:	f7ff ff48 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, showTime);
 8000890:	4903      	ldr	r1, [pc, #12]	; (80008a0 <showCurrentTime+0x2c>)
 8000892:	204e      	movs	r0, #78	; 0x4e
 8000894:	f7ff ff85 	bl	80007a2 <LCD_SendString>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08007ff4 	.word	0x08007ff4
 80008a0:	2000092c 	.word	0x2000092c

080008a4 <timeDisplay>:

void timeDisplay() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

	switch (current_state.mode) {
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <timeDisplay+0x5c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d002      	beq.n	80008b6 <timeDisplay+0x12>
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d011      	beq.n	80008d8 <timeDisplay+0x34>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
		LCD_SendCommand(LCD_ADDR, 0b11000000);
		LCD_SendString(LCD_ADDR, showTime);
		break;
	}
}
 80008b4:	e021      	b.n	80008fa <timeDisplay+0x56>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	204e      	movs	r0, #78	; 0x4e
 80008ba:	f7ff ff31 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting");
 80008be:	4911      	ldr	r1, [pc, #68]	; (8000904 <timeDisplay+0x60>)
 80008c0:	204e      	movs	r0, #78	; 0x4e
 80008c2:	f7ff ff6e 	bl	80007a2 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 80008c6:	21c0      	movs	r1, #192	; 0xc0
 80008c8:	204e      	movs	r0, #78	; 0x4e
 80008ca:	f7ff ff29 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, showTime);
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <timeDisplay+0x64>)
 80008d0:	204e      	movs	r0, #78	; 0x4e
 80008d2:	f7ff ff66 	bl	80007a2 <LCD_SendString>
		break;
 80008d6:	e010      	b.n	80008fa <timeDisplay+0x56>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	204e      	movs	r0, #78	; 0x4e
 80008dc:	f7ff ff20 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <timeDisplay+0x68>)
 80008e2:	204e      	movs	r0, #78	; 0x4e
 80008e4:	f7ff ff5d 	bl	80007a2 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 80008e8:	21c0      	movs	r1, #192	; 0xc0
 80008ea:	204e      	movs	r0, #78	; 0x4e
 80008ec:	f7ff ff18 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, showTime);
 80008f0:	4905      	ldr	r1, [pc, #20]	; (8000908 <timeDisplay+0x64>)
 80008f2:	204e      	movs	r0, #78	; 0x4e
 80008f4:	f7ff ff55 	bl	80007a2 <LCD_SendString>
		break;
 80008f8:	bf00      	nop
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000958 	.word	0x20000958
 8000904:	08008004 	.word	0x08008004
 8000908:	2000092c 	.word	0x2000092c
 800090c:	08008014 	.word	0x08008014

08000910 <musicSelect>:

void musicSelect() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	204e      	movs	r0, #78	; 0x4e
 8000918:	f7ff ff02 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Music Select");
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <musicSelect+0x28>)
 800091e:	204e      	movs	r0, #78	; 0x4e
 8000920:	f7ff ff3f 	bl	80007a2 <LCD_SendString>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000924:	21c0      	movs	r1, #192	; 0xc0
 8000926:	204e      	movs	r0, #78	; 0x4e
 8000928:	f7ff fefa 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "0: Rabbit");
 800092c:	4903      	ldr	r1, [pc, #12]	; (800093c <musicSelect+0x2c>)
 800092e:	204e      	movs	r0, #78	; 0x4e
 8000930:	f7ff ff37 	bl	80007a2 <LCD_SendString>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	08008024 	.word	0x08008024
 800093c:	08008034 	.word	0x08008034

08000940 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000946:	f000 ff65 	bl	8001814 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800094a:	f000 f841 	bl	80009d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800094e:	f000 fa7f 	bl	8000e50 <MX_GPIO_Init>
	MX_DMA_Init();
 8000952:	f000 fa5d 	bl	8000e10 <MX_DMA_Init>
	MX_ETH_Init();
 8000956:	f000 f91b 	bl	8000b90 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800095a:	f000 fa01 	bl	8000d60 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800095e:	f000 fa29 	bl	8000db4 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000962:	f000 f8b5 	bl	8000ad0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000966:	f000 f961 	bl	8000c2c <MX_I2C1_Init>
	MX_RTC_Init();
 800096a:	f000 f99f 	bl	8000cac <MX_RTC_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800096e:	f000 f89b 	bl	8000aa8 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000972:	2202      	movs	r2, #2
 8000974:	4913      	ldr	r1, [pc, #76]	; (80009c4 <main+0x84>)
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <main+0x88>)
 8000978:	f001 f826 	bl	80019c8 <HAL_ADC_Start_DMA>
	init();
 800097c:	f7ff ff2b 	bl	80007d6 <init>

	current_state.mode = NORMAL_STATE;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <main+0x8c>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
//	 HAL_Delay(1000);
		// RTC test
//	  get_time();
//	  HAL_Delay(1000);

		get_time();
 8000986:	f7ff ff45 	bl	8000814 <get_time>

		switch (current_state.mode) {
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <main+0x8c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d8f9      	bhi.n	8000986 <main+0x46>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <main+0x58>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009a9 	.word	0x080009a9
 800099c:	080009af 	.word	0x080009af
 80009a0:	080009b5 	.word	0x080009b5
 80009a4:	080009bb 	.word	0x080009bb
		case NORMAL_STATE:
			showCurrentTime();
 80009a8:	f7ff ff64 	bl	8000874 <showCurrentTime>
			break;
 80009ac:	e009      	b.n	80009c2 <main+0x82>
		case TIME_SETTING:
			timeDisplay();
 80009ae:	f7ff ff79 	bl	80008a4 <timeDisplay>
			break;
 80009b2:	e006      	b.n	80009c2 <main+0x82>
		case ALARM_TIME_SETTING:
			timeDisplay();
 80009b4:	f7ff ff76 	bl	80008a4 <timeDisplay>
			break;
 80009b8:	e003      	b.n	80009c2 <main+0x82>
		case MUSIC_SELECT:
			musicSelect();
 80009ba:	f7ff ffa9 	bl	8000910 <musicSelect>
			break;
 80009be:	bf00      	nop
 80009c0:	e7e1      	b.n	8000986 <main+0x46>
		get_time();
 80009c2:	e7e0      	b.n	8000986 <main+0x46>
 80009c4:	20000920 	.word	0x20000920
 80009c8:	20000204 	.word	0x20000204
 80009cc:	20000958 	.word	0x20000958

080009d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 fb05 	bl	8006fee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <SystemClock_Config+0xd0>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <SystemClock_Config+0xd0>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a48:	23a8      	movs	r3, #168	; 0xa8
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 fcf1 	bl	8004440 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x98>
		Error_Handler();
 8000a64:	f000 fb44 	bl	80010f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a78:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2105      	movs	r1, #5
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 ff52 	bl	8004930 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xc6>
		Error_Handler();
 8000a92:	f000 fb2d 	bl	80010f0 <Error_Handler>
	}
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2027      	movs	r0, #39	; 0x27
 8000ab2:	f001 fc42 	bl	800233a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ab6:	2027      	movs	r0, #39	; 0x27
 8000ab8:	f001 fc5b 	bl	8002372 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2028      	movs	r0, #40	; 0x28
 8000ac2:	f001 fc3a 	bl	800233a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac6:	2028      	movs	r0, #40	; 0x28
 8000ac8:	f001 fc53 	bl	8002372 <HAL_NVIC_EnableIRQ>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000ae4:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <MX_ADC1_Init+0xb8>)
 8000ae6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aee:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <MX_ADC1_Init+0xbc>)
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000b30:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b32:	f000 ff05 	bl	8001940 <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000b3c:	f000 fad8 	bl	80010f0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000b40:	230d      	movs	r3, #13
 8000b42:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b52:	f001 f867 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000b5c:	f000 fac8 	bl	80010f0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000b60:	230a      	movs	r3, #10
 8000b62:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b6e:	f001 f859 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0xac>
		Error_Handler();
 8000b78:	f000 faba 	bl	80010f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000204 	.word	0x20000204
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	0f000001 	.word	0x0f000001

08000b90 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ETH_Init+0x84>)
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_ETH_Init+0x88>)
 8000b98:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000ba8:	22e1      	movs	r2, #225	; 0xe1
 8000baa:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_ETH_Init+0x84>)
 8000bc0:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000bc2:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_ETH_Init+0x84>)
 8000bc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bca:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_ETH_Init+0x84>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <MX_ETH_Init+0x90>)
 8000bd0:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_ETH_Init+0x84>)
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <MX_ETH_Init+0x94>)
 8000bd6:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_ETH_Init+0x84>)
 8000bda:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bde:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_ETH_Init+0x84>)
 8000be2:	f001 ffe3 	bl	8002bac <HAL_ETH_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ETH_Init+0x60>
		Error_Handler();
 8000bec:	f000 fa80 	bl	80010f0 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000bf0:	2238      	movs	r2, #56	; 0x38
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_ETH_Init+0x98>)
 8000bf6:	f006 f9fa 	bl	8006fee <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_ETH_Init+0x98>)
 8000bfc:	2221      	movs	r2, #33	; 0x21
 8000bfe:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_ETH_Init+0x98>)
 8000c02:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c06:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_ETH_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200002ac 	.word	0x200002ac
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	2000095c 	.word	0x2000095c
 8000c20:	20000164 	.word	0x20000164
 8000c24:	200000c4 	.word	0x200000c4
 8000c28:	2000008c 	.word	0x2000008c

08000c2c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_I2C1_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <MX_I2C1_Init+0x7c>)
 8000c3a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c6a:	f002 fcd7 	bl	800361c <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000c74:	f000 fa3c 	bl	80010f0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c7c:	f003 fa47 	bl	800410e <HAL_I2CEx_ConfigAnalogFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000c86:	f000 fa33 	bl	80010f0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_I2C1_Init+0x74>)
 8000c8e:	f003 fa7a 	bl	8004186 <HAL_I2CEx_ConfigDigitalFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x70>
		Error_Handler();
 8000c98:	f000 fa2a 	bl	80010f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000035c 	.word	0x2000035c
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	000186a0 	.word	0x000186a0

08000cac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <MX_RTC_Init+0xb0>)
 8000cc8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_RTC_Init+0xac>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cd2:	227f      	movs	r2, #127	; 0x7f
 8000cd4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_RTC_Init+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000cee:	481a      	ldr	r0, [pc, #104]	; (8000d58 <MX_RTC_Init+0xac>)
 8000cf0:	f004 f9fe 	bl	80050f0 <HAL_RTC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0x52>
		Error_Handler();
 8000cfa:	f000 f9f9 	bl	80010f0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2201      	movs	r2, #1
 8000d16:	4619      	mov	r1, r3
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <MX_RTC_Init+0xac>)
 8000d1a:	f004 fa5f 	bl	80051dc <HAL_RTC_SetTime>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_RTC_Init+0x7c>
		Error_Handler();
 8000d24:	f000 f9e4 	bl	80010f0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 8000d2c:	2311      	movs	r3, #17
 8000d2e:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 8000d30:	2310      	movs	r3, #16
 8000d32:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 8000d34:	2323      	movs	r3, #35	; 0x23
 8000d36:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_RTC_Init+0xac>)
 8000d40:	f004 fb44 	bl	80053cc <HAL_RTC_SetDate>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_RTC_Init+0xa2>
		Error_Handler();
 8000d4a:	f000 f9d1 	bl	80010f0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200003b0 	.word	0x200003b0
 8000d5c:	40002800 	.word	0x40002800

08000d60 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_USART3_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d98:	f004 fca8 	bl	80056ec <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000da2:	f000 f9a5 	bl	80010f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200003d0 	.word	0x200003d0
 8000db0:	40004800 	.word	0x40004800

08000db4 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dbe:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df8:	f003 fa04 	bl	8004204 <HAL_PCD_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000e02:	f000 f975 	bl	80010f0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000414 	.word	0x20000414

08000e10 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2038      	movs	r0, #56	; 0x38
 8000e38:	f001 fa7f 	bl	800233a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e3c:	2038      	movs	r0, #56	; 0x38
 8000e3e:	f001 fa98 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b4f      	ldr	r3, [pc, #316]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a4e      	ldr	r2, [pc, #312]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a39      	ldr	r2, [pc, #228]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_GPIO_Init+0x190>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f30:	482c      	ldr	r0, [pc, #176]	; (8000fe4 <MX_GPIO_Init+0x194>)
 8000f32:	f002 fb27 	bl	8003584 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000f36:	2200      	movs	r2, #0
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <MX_GPIO_Init+0x198>)
 8000f3c:	f002 fb22 	bl	8003584 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4825      	ldr	r0, [pc, #148]	; (8000fec <MX_GPIO_Init+0x19c>)
 8000f58:	f002 f950 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Joy_btn_Pin */
	GPIO_InitStruct.Pin = Joy_btn_Pin;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <MX_GPIO_Init+0x1a0>)
 8000f72:	f002 f943 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000f76:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <MX_GPIO_Init+0x194>)
 8000f90:	f002 f934 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <MX_GPIO_Init+0x198>)
 8000fac:	f002 f926 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <MX_GPIO_Init+0x198>)
 8000fc4:	f002 f91a 	bl	80031fc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2009      	movs	r0, #9
 8000fce:	f001 f9b4 	bl	800233a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fd2:	2009      	movs	r0, #9
 8000fd4:	f001 f9cd 	bl	8002372 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40021400 	.word	0x40021400

08000ff4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d15c      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0xca>
		// joystick sw test OK!
//	  btn_cnt++;
//	  printf("cnt = %d\r\n", btn_cnt);

		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001004:	2101      	movs	r1, #1
 8001006:	4830      	ldr	r0, [pc, #192]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001008:	f002 fad5 	bl	80035b6 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 800100c:	f000 fc68 	bl	80018e0 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001014:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001022:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800102a:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 800102c:	2108      	movs	r1, #8
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001030:	f002 fa90 	bl	8003554 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d141      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0xca>
			if (interval <= 110) {
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b6e      	cmp	r3, #110	; 0x6e
 8001040:	d805      	bhi.n	800104e <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3303      	adds	r3, #3
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e025      	b.n	800109a <HAL_GPIO_EXTI_Callback+0xa6>
			} else if (interval >= 120 && interval < 200) {
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b77      	cmp	r3, #119	; 0x77
 8001054:	d910      	bls.n	8001078 <HAL_GPIO_EXTI_Callback+0x84>
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2bc7      	cmp	r3, #199	; 0xc7
 800105c:	d80c      	bhi.n	8001078 <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <HAL_GPIO_EXTI_Callback+0xec>)
 8001066:	f005 ff19 	bl	8006e9c <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e010      	b.n	800109a <HAL_GPIO_EXTI_Callback+0xa6>
			} else if (interval >= 700) {
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001080:	d30b      	bcc.n	800109a <HAL_GPIO_EXTI_Callback+0xa6>
				printf("Long click!!  interval = %u\r\n",
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 800108a:	f005 ff07 	bl	8006e9c <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
			}
			if (btn_cnt >= 5) {
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	dd0d      	ble.n	80010be <HAL_GPIO_EXTI_Callback+0xca>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <HAL_GPIO_EXTI_Callback+0xf8>)
 80010ae:	f005 fef5 	bl	8006e9c <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_GPIO_EXTI_Callback+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010ba:	2203      	movs	r2, #3
 80010bc:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40020400 	.word	0x40020400
 80010cc:	2000094c 	.word	0x2000094c
 80010d0:	20000950 	.word	0x20000950
 80010d4:	20000954 	.word	0x20000954
 80010d8:	40021400 	.word	0x40021400
 80010dc:	20000928 	.word	0x20000928
 80010e0:	08008040 	.word	0x08008040
 80010e4:	20000958 	.word	0x20000958
 80010e8:	08008060 	.word	0x08008060
 80010ec:	08008080 	.word	0x08008080

080010f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_MspInit+0x4c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <HAL_ADC_MspInit+0xdc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d157      	bne.n	800121e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_ADC_MspInit+0xe0>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <HAL_ADC_MspInit+0xe0>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_ADC_MspInit+0xe0>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_ADC_MspInit+0xe0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_ADC_MspInit+0xe0>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_ADC_MspInit+0xe0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80011a6:	2309      	movs	r3, #9
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	481d      	ldr	r0, [pc, #116]	; (8001230 <HAL_ADC_MspInit+0xe4>)
 80011ba:	f002 f81f 	bl	80031fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_ADC_MspInit+0xec>)
 80011c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 8001204:	f001 f8d0 	bl	80023a8 <HAL_DMA_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800120e:	f7ff ff6f 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_ADC_MspInit+0xe8>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	2000024c 	.word	0x2000024c
 8001238:	40026410 	.word	0x40026410

0800123c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <HAL_ETH_MspInit+0x174>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 80a4 	bne.w	80013a8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 8001286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_ETH_MspInit+0x178>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001324:	2332      	movs	r3, #50	; 0x32
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001334:	230b      	movs	r3, #11
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <HAL_ETH_MspInit+0x17c>)
 8001340:	f001 ff5c 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001344:	2386      	movs	r3, #134	; 0x86
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001354:	230b      	movs	r3, #11
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <HAL_ETH_MspInit+0x180>)
 8001360:	f001 ff4c 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001376:	230b      	movs	r3, #11
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <HAL_ETH_MspInit+0x184>)
 8001382:	f001 ff3b 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001386:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001398:	230b      	movs	r3, #11
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <HAL_ETH_MspInit+0x188>)
 80013a4:	f001 ff2a 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40028000 	.word	0x40028000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40021800 	.word	0x40021800

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_I2C_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12c      	bne.n	8001444 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <HAL_I2C_MspInit+0x8c>)
 8001424:	f001 feea 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0x88>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_I2C_MspInit+0x88>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_I2C_MspInit+0x88>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2230      	movs	r2, #48	; 0x30
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fdc0 	bl	8006fee <memset>
  if(hrtc->Instance==RTC)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_RTC_MspInit+0x4c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d111      	bne.n	800149c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001478:	2320      	movs	r3, #32
 800147a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800147c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fc72 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001492:	f7ff fe2d 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_RTC_MspInit+0x50>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40002800 	.word	0x40002800
 80014a8:	42470e3c 	.word	0x42470e3c

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_UART_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001518:	2307      	movs	r3, #7
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_UART_MspInit+0x8c>)
 8001524:	f001 fe6a 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004800 	.word	0x40004800
 8001534:	40023800 	.word	0x40023800
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155c:	d13f      	bne.n	80015de <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800157a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800158c:	230a      	movs	r3, #10
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <HAL_PCD_MspInit+0xb0>)
 8001598:	f001 fe30 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800159c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <HAL_PCD_MspInit+0xb0>)
 80015b2:	f001 fe23 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	6353      	str	r3, [r2, #52]	; 0x34
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_PCD_MspInit+0xac>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f93c 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8001648:	2008      	movs	r0, #8
 800164a:	f001 ffcf 	bl	80035ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USART3_IRQHandler+0x10>)
 800165a:	f004 f927 	bl	80058ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003d0 	.word	0x200003d0

08001668 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800166c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001670:	f001 ffbc 	bl	80035ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA2_Stream0_IRQHandler+0x10>)
 800167e:	f001 f82b 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000024c 	.word	0x2000024c

0800168c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
  }

  return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	605a      	str	r2, [r3, #4]
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f005 fc94 	bl	800708c <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20030000 	.word	0x20030000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000964 	.word	0x20000964
 8001798:	20000ab8 	.word	0x20000ab8

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ffd7 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f005 fc53 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff f8a5 	bl	8000940 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001804:	08008130 	.word	0x08008130
  ldr r2, =_sbss
 8001808:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800180c:	20000ab8 	.word	0x20000ab8

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 fd71 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fc58 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd89 	bl	800238e <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 fd51 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000010 	.word	0x20000010
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000010 	.word	0x20000010
 80018dc:	20000968 	.word	0x20000968

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000968 	.word	0x20000968

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010

08001940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e033      	b.n	80019be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fbf4 	bl	800114c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001986:	f023 0302 	bic.w	r3, r3, #2
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fa78 	bl	8001e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	e001      	b.n	80019b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1e>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0e9      	b.n	8001bba <HAL_ADC_Start_DMA+0x1f2>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d018      	beq.n	8001a2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_ADC_Start_DMA+0x1fc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6d      	ldr	r2, [pc, #436]	; (8001bc8 <HAL_ADC_Start_DMA+0x200>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9a      	lsrs	r2, r3, #18
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d107      	bne.n	8001a4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	f040 80a1 	bne.w	8001ba0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	d106      	bne.n	8001aac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f023 0206 	bic.w	r2, r3, #6
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aaa:	e002      	b.n	8001ab2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_ADC_Start_DMA+0x204>)
 8001abc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	4a43      	ldr	r2, [pc, #268]	; (8001bd0 <HAL_ADC_Start_DMA+0x208>)
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_ADC_Start_DMA+0x20c>)
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	4a41      	ldr	r2, [pc, #260]	; (8001bd8 <HAL_ADC_Start_DMA+0x210>)
 8001ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ade:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	334c      	adds	r3, #76	; 0x4c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f000 fcf8 	bl	8002504 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d12a      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_ADC_Start_DMA+0x214>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d015      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x18e>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_ADC_Start_DMA+0x218>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_Start_DMA+0x178>
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_ADC_Start_DMA+0x204>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_ADC_Start_DMA+0x21c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d136      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_ADC_Start_DMA+0x204>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d130      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d129      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e020      	b.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_ADC_Start_DMA+0x214>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d114      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f043 0210 	orr.w	r2, r3, #16
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	40012300 	.word	0x40012300
 8001bd0:	08002081 	.word	0x08002081
 8001bd4:	0800213b 	.word	0x0800213b
 8001bd8:	08002157 	.word	0x08002157
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40012100 	.word	0x40012100
 8001be4:	40012200 	.word	0x40012200

08001be8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e113      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x244>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d925      	bls.n	8001c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	3b1e      	subs	r3, #30
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	e022      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4403      	add	r3, r0
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d824      	bhi.n	8001d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b05      	subs	r3, #5
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	e04c      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d824      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b23      	subs	r3, #35	; 0x23
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	; 0x23
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
 8001d84:	e023      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b41      	subs	r3, #65	; 0x41
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	; 0x41
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_ADC_ConfigChannel+0x250>)
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d122      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_ADC_ConfigChannel+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <HAL_ADC_ConfigChannel+0x260>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9a      	lsrs	r2, r3, #18
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40012300 	.word	0x40012300
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	10000012 	.word	0x10000012
 8001e80:	20000008 	.word	0x20000008
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <ADC_Init+0x1f0>)
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <ADC_Init+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00f      	b.n	8001f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0202 	bic.w	r2, r2, #2
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	005a      	lsls	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e007      	b.n	8001ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	3b01      	subs	r3, #1
 8002018:	051a      	lsls	r2, r3, #20
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203e:	025a      	lsls	r2, r3, #9
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	029a      	lsls	r2, r3, #10
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	0f000001 	.word	0x0f000001

08002080 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002096:	2b00      	cmp	r3, #0
 8002098:	d13c      	bne.n	8002114 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12b      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d119      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0220 	bic.w	r2, r2, #32
 80020e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fd6b 	bl	8001be8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002112:	e00e      	b.n	8002132 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fd75 	bl	8001c10 <HAL_ADC_ErrorCallback>
}
 8002126:	e004      	b.n	8002132 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fd57 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff fd4a 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fa94 	bl	80018e0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e099      	b.n	80024f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e00f      	b.n	8002406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fa7b 	bl	80018e0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d908      	bls.n	8002406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e078      	b.n	80024f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e8      	bne.n	80023e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_DMA_Init+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b04      	cmp	r3, #4
 8002498:	d117      	bne.n	80024ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb01 	bl	8002ab4 <DMA_CheckFifoParam>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c6:	2301      	movs	r3, #1
 80024c8:	e016      	b.n	80024f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fab8 	bl	8002a48 <DMA_CalcBaseAndBitshift>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	f010803f 	.word	0xf010803f

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_DMA_Start_IT+0x26>
 8002526:	2302      	movs	r3, #2
 8002528:	e040      	b.n	80025ac <HAL_DMA_Start_IT+0xa8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d12f      	bne.n	800259e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa4a 	bl	80029ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0216 	orr.w	r2, r2, #22
 8002572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c2:	f7ff f98d 	bl	80018e0 <HAL_GetTick>
 80025c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d008      	beq.n	80025e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e052      	b.n	800268c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0216 	bic.w	r2, r2, #22
 80025f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002604:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_DMA_Abort+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002636:	e013      	b.n	8002660 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002638:	f7ff f952 	bl	80018e0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b05      	cmp	r3, #5
 8002644:	d90c      	bls.n	8002660 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2203      	movs	r2, #3
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e015      	b.n	800268c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e4      	bne.n	8002638 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	223f      	movs	r2, #63	; 0x3f
 8002674:	409a      	lsls	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d004      	beq.n	80026b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00c      	b.n	80026cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2205      	movs	r2, #5
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e4:	4b8e      	ldr	r3, [pc, #568]	; (8002920 <HAL_DMA_IRQHandler+0x248>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a8e      	ldr	r2, [pc, #568]	; (8002924 <HAL_DMA_IRQHandler+0x24c>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	2208      	movs	r2, #8
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2208      	movs	r2, #8
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2201      	movs	r2, #1
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2204      	movs	r2, #4
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2204      	movs	r2, #4
 800279e:	409a      	lsls	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2210      	movs	r2, #16
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d043      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03c      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	2210      	movs	r2, #16
 80027d4:	409a      	lsls	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d018      	beq.n	800281a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
 8002806:	e01f      	b.n	8002848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e016      	b.n	8002848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0208 	bic.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2220      	movs	r2, #32
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 808f 	beq.w	8002978 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8087 	beq.w	8002978 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2220      	movs	r2, #32
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b05      	cmp	r3, #5
 8002880:	d136      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0216 	bic.w	r2, r2, #22
 8002890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x1da>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0208 	bic.w	r2, r2, #8
 80028c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	223f      	movs	r2, #63	; 0x3f
 80028c8:	409a      	lsls	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d07e      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
        }
        return;
 80028ee:	e079      	b.n	80029e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	2b00      	cmp	r3, #0
 8002912:	d031      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
 800291c:	e02c      	b.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
 800291e:	bf00      	nop
 8002920:	20000008 	.word	0x20000008
 8002924:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e01e      	b.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0210 	bic.w	r2, r2, #16
 8002956:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d032      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2205      	movs	r2, #5
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d307      	bcc.n	80029c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f2      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x2cc>
 80029be:	e000      	b.n	80029c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029e4:	bf00      	nop
    }
  }
}
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d108      	bne.n	8002a2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a2a:	e007      	b.n	8002a3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3b10      	subs	r3, #16
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <DMA_CalcBaseAndBitshift+0x64>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d909      	bls.n	8002a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	1d1a      	adds	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	659a      	str	r2, [r3, #88]	; 0x58
 8002a88:	e007      	b.n	8002a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	aaaaaaab 	.word	0xaaaaaaab
 8002ab0:	080080e4 	.word	0x080080e4

08002ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11f      	bne.n	8002b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d856      	bhi.n	8002b82 <DMA_CheckFifoParam+0xce>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <DMA_CheckFifoParam+0x28>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002aff 	.word	0x08002aff
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	08002b83 	.word	0x08002b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d046      	beq.n	8002b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afc:	e043      	b.n	8002b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b06:	d140      	bne.n	8002b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e03d      	b.n	8002b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d121      	bne.n	8002b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d837      	bhi.n	8002b8e <DMA_CheckFifoParam+0xda>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <DMA_CheckFifoParam+0x70>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b3b 	.word	0x08002b3b
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002b4d 	.word	0x08002b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e030      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d025      	beq.n	8002b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e022      	b.n	8002b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b54:	d11f      	bne.n	8002b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5a:	e01c      	b.n	8002b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d903      	bls.n	8002b6a <DMA_CheckFifoParam+0xb6>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d003      	beq.n	8002b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b68:	e018      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6e:	e015      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e00b      	b.n	8002b9a <DMA_CheckFifoParam+0xe6>
      break;
 8002b82:	bf00      	nop
 8002b84:	e00a      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e008      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e006      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e004      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e002      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06c      	b.n	8002c98 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2223      	movs	r2, #35	; 0x23
 8002bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe fb33 	bl	800123c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_ETH_Init+0xf4>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <HAL_ETH_Init+0xf4>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_ETH_Init+0xf4>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_ETH_Init+0xf8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <HAL_ETH_Init+0xf8>)
 8002bf8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bfc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_ETH_Init+0xf8>)
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_ETH_Init+0xf8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_ETH_Init+0xf8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c28:	f7fe fe5a 	bl	80018e0 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c2e:	e011      	b.n	8002c54 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c30:	f7fe fe56 	bl	80018e0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c3e:	d909      	bls.n	8002c54 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2204      	movs	r2, #4
 8002c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	22e0      	movs	r2, #224	; 0xe0
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e4      	bne.n	8002c30 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f958 	bl	8002f1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f9ff 	bl	8003070 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa55 	bl	8003122 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9bd 	bl	8003000 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2210      	movs	r2, #16
 8002c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800

08002ca8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <ETH_SetMACConfig+0x15c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	7c1b      	ldrb	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <ETH_SetMACConfig+0x28>
 8002cca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cce:	e000      	b.n	8002cd2 <ETH_SetMACConfig+0x2a>
 8002cd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	7c5b      	ldrb	r3, [r3, #17]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <ETH_SetMACConfig+0x38>
 8002cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cde:	e000      	b.n	8002ce2 <ETH_SetMACConfig+0x3a>
 8002ce0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ce2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	7fdb      	ldrb	r3, [r3, #31]
 8002cee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002cf0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	7f92      	ldrb	r2, [r2, #30]
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	d102      	bne.n	8002d06 <ETH_SetMACConfig+0x5e>
 8002d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d04:	e000      	b.n	8002d08 <ETH_SetMACConfig+0x60>
 8002d06:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	7f1b      	ldrb	r3, [r3, #28]
 8002d0e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d10:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d26:	2a00      	cmp	r2, #0
 8002d28:	d102      	bne.n	8002d30 <ETH_SetMACConfig+0x88>
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	e000      	b.n	8002d32 <ETH_SetMACConfig+0x8a>
 8002d30:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7bdb      	ldrb	r3, [r3, #15]
 8002d38:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d3a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d48:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f7fe fdc8 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d86:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d8e:	2a00      	cmp	r2, #0
 8002d90:	d101      	bne.n	8002d96 <ETH_SetMACConfig+0xee>
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	e000      	b.n	8002d98 <ETH_SetMACConfig+0xf0>
 8002d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d98:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002da6:	2a01      	cmp	r2, #1
 8002da8:	d101      	bne.n	8002dae <ETH_SetMACConfig+0x106>
 8002daa:	2208      	movs	r2, #8
 8002dac:	e000      	b.n	8002db0 <ETH_SetMACConfig+0x108>
 8002dae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002db0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	d101      	bne.n	8002dc0 <ETH_SetMACConfig+0x118>
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	e000      	b.n	8002dc2 <ETH_SetMACConfig+0x11a>
 8002dc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002dca:	2a01      	cmp	r2, #1
 8002dcc:	d101      	bne.n	8002dd2 <ETH_SetMACConfig+0x12a>
 8002dce:	2202      	movs	r2, #2
 8002dd0:	e000      	b.n	8002dd4 <ETH_SetMACConfig+0x12c>
 8002dd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe fd83 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	ff20810f 	.word	0xff20810f

08002e08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <ETH_SetDMAConfig+0x110>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7b1b      	ldrb	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <ETH_SetDMAConfig+0x2c>
 8002e2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e32:	e000      	b.n	8002e36 <ETH_SetDMAConfig+0x2e>
 8002e34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	7b5b      	ldrb	r3, [r3, #13]
 8002e3a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e3c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	7f52      	ldrb	r2, [r2, #29]
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d102      	bne.n	8002e4c <ETH_SetDMAConfig+0x44>
 8002e46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e4a:	e000      	b.n	8002e4e <ETH_SetDMAConfig+0x46>
 8002e4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	7b9b      	ldrb	r3, [r3, #14]
 8002e54:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e56:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
 8002e62:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e64:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7f9b      	ldrb	r3, [r3, #30]
 8002e6a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e6c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f7fe fd2a 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eac:	461a      	mov	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	791b      	ldrb	r3, [r3, #4]
 8002eb6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ebc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ec2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ec8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ed0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ed2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eda:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ee0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7fe fcfb 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	f8de3f23 	.word	0xf8de3f23

08002f1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b0a6      	sub	sp, #152	; 0x98
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f30:	2300      	movs	r3, #0
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fe86 	bl	8002ca8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fd6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fdc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff08 	bl	8002e08 <ETH_SetDMAConfig>
}
 8002ff8:	bf00      	nop
 8002ffa:	3798      	adds	r7, #152	; 0x98
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3305      	adds	r3, #5
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	3204      	adds	r2, #4
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <ETH_MACAddressConfig+0x68>)
 8003022:	4413      	add	r3, r2
 8003024:	461a      	mov	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3303      	adds	r3, #3
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	061a      	lsls	r2, r3, #24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3302      	adds	r3, #2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3301      	adds	r3, #1
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4313      	orrs	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <ETH_MACAddressConfig+0x6c>)
 8003052:	4413      	add	r3, r2
 8003054:	461a      	mov	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40028040 	.word	0x40028040
 800306c:	40028044 	.word	0x40028044

08003070 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e03e      	b.n	80030fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	3206      	adds	r2, #6
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d80c      	bhi.n	80030e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	e004      	b.n	80030ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d9bd      	bls.n	800307e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003114:	611a      	str	r2, [r3, #16]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e046      	b.n	80031be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800316c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003174:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	3212      	adds	r2, #18
 800318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d80c      	bhi.n	80031ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6919      	ldr	r1, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e004      	b.n	80031b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d9b5      	bls.n	8003130 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ee:	60da      	str	r2, [r3, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e177      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 8166 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	2b02      	cmp	r3, #2
 800324c:	d130      	bne.n	80032b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80c0 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_GPIO_Init+0x324>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_GPIO_Init+0x324>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_GPIO_Init+0x324>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339e:	4a61      	ldr	r2, [pc, #388]	; (8003524 <HAL_GPIO_Init+0x328>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_GPIO_Init+0x32c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_GPIO_Init+0x330>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_GPIO_Init+0x334>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a55      	ldr	r2, [pc, #340]	; (8003534 <HAL_GPIO_Init+0x338>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a54      	ldr	r2, [pc, #336]	; (8003538 <HAL_GPIO_Init+0x33c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a53      	ldr	r2, [pc, #332]	; (800353c <HAL_GPIO_Init+0x340>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_GPIO_Init+0x344>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a51      	ldr	r2, [pc, #324]	; (8003544 <HAL_GPIO_Init+0x348>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a50      	ldr	r2, [pc, #320]	; (8003548 <HAL_GPIO_Init+0x34c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4f      	ldr	r2, [pc, #316]	; (800354c <HAL_GPIO_Init+0x350>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800344c:	4935      	ldr	r1, [pc, #212]	; (8003524 <HAL_GPIO_Init+0x328>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_GPIO_Init+0x354>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347e:	4a34      	ldr	r2, [pc, #208]	; (8003550 <HAL_GPIO_Init+0x354>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_GPIO_Init+0x354>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae84 	bls.w	8003218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40022000 	.word	0x40022000
 800354c:	40022400 	.word	0x40022400
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	887b      	ldrh	r3, [r7, #2]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e001      	b.n	8003576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
 8003590:	4613      	mov	r3, r2
 8003592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003594:	787b      	ldrb	r3, [r7, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a0:	e003      	b.n	80035aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035c8:	887a      	ldrh	r2, [r7, #2]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4013      	ands	r3, r2
 80035ce:	041a      	lsls	r2, r3, #16
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	400b      	ands	r3, r1
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fcf2 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e12b      	b.n	8003886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fec0 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003680:	f001 fb4e 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a81      	ldr	r2, [pc, #516]	; (8003890 <HAL_I2C_Init+0x274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d807      	bhi.n	80036a0 <HAL_I2C_Init+0x84>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_I2C_Init+0x278>)
 8003694:	4293      	cmp	r3, r2
 8003696:	bf94      	ite	ls
 8003698:	2301      	movls	r3, #1
 800369a:	2300      	movhi	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e006      	b.n	80036ae <HAL_I2C_Init+0x92>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_I2C_Init+0x27c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0e7      	b.n	8003886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a78      	ldr	r2, [pc, #480]	; (800389c <HAL_I2C_Init+0x280>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_I2C_Init+0x274>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <HAL_I2C_Init+0xd4>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3301      	adds	r3, #1
 80036ee:	e009      	b.n	8003704 <HAL_I2C_Init+0xe8>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_I2C_Init+0x284>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	3301      	adds	r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	495c      	ldr	r1, [pc, #368]	; (8003890 <HAL_I2C_Init+0x274>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d819      	bhi.n	8003758 <HAL_I2C_Init+0x13c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e59      	subs	r1, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003738:	400b      	ands	r3, r1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_I2C_Init+0x138>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e59      	subs	r1, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fbb1 f3f3 	udiv	r3, r1, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	e051      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003754:	2304      	movs	r3, #4
 8003756:	e04f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <HAL_I2C_Init+0x168>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e012      	b.n	80037aa <HAL_I2C_Init+0x18e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	0099      	lsls	r1, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x196>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <HAL_I2C_Init+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e58      	subs	r0, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	440b      	add	r3, r1
 80037c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6809      	ldr	r1, [r1, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6911      	ldr	r1, [r2, #16]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	000186a0 	.word	0x000186a0
 8003894:	001e847f 	.word	0x001e847f
 8003898:	003d08ff 	.word	0x003d08ff
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	460b      	mov	r3, r1
 80038b2:	817b      	strh	r3, [r7, #10]
 80038b4:	4613      	mov	r3, r2
 80038b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7fe f812 	bl	80018e0 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	f040 80e0 	bne.w	8003a8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	4970      	ldr	r1, [pc, #448]	; (8003a98 <HAL_I2C_Master_Transmit+0x1f4>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa92 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0d3      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_I2C_Master_Transmit+0x50>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0cc      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d007      	beq.n	800391a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003928:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2221      	movs	r2, #33	; 0x21
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2210      	movs	r2, #16
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	893a      	ldrh	r2, [r7, #8]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a50      	ldr	r2, [pc, #320]	; (8003a9c <HAL_I2C_Master_Transmit+0x1f8>)
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f9ca 	bl	8003cfc <I2C_MasterRequestWrite>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e08d      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003988:	e066      	b.n	8003a58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb0c 	bl	8003fac <I2C_WaitOnTXEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d107      	bne.n	80039b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06b      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d11b      	bne.n	8003a2c <HAL_I2C_Master_Transmit+0x188>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	6a39      	ldr	r1, [r7, #32]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fafc 	bl	800402e <I2C_WaitOnBTFFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d107      	bne.n	8003a54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e01a      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d194      	bne.n	800398a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	00100002 	.word	0x00100002
 8003a9c:	ffff0000 	.word	0xffff0000

08003aa0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7fd ff16 	bl	80018e0 <HAL_GetTick>
 8003ab4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 8111 	bne.w	8003cea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4988      	ldr	r1, [pc, #544]	; (8003cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f994 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e104      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2C_IsDeviceReady+0x50>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0fd      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d007      	beq.n	8003b16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2224      	movs	r2, #36	; 0x24
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_I2C_IsDeviceReady+0x258>)
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f952 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b70:	d103      	bne.n	8003b7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0b6      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b7e:	897b      	ldrh	r3, [r7, #10]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fea7 	bl	80018e0 <HAL_GetTick>
 8003b92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bc2:	e025      	b.n	8003c10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7fd fe8c 	bl	80018e0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d302      	bcc.n	8003bda <HAL_I2C_IsDeviceReady+0x13a>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22a0      	movs	r2, #160	; 0xa0
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2ba0      	cmp	r3, #160	; 0xa0
 8003c1a:	d005      	beq.n	8003c28 <HAL_I2C_IsDeviceReady+0x188>
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_I2C_IsDeviceReady+0x188>
 8003c22:	7dbb      	ldrb	r3, [r7, #22]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0cd      	beq.n	8003bc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d129      	bne.n	8003c92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2319      	movs	r3, #25
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4921      	ldr	r1, [pc, #132]	; (8003cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f8c6 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e036      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e02c      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003caa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2319      	movs	r3, #25
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8a2 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e012      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f4ff af32 	bcc.w	8003b3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	00100002 	.word	0x00100002
 8003cf8:	ffff0000 	.word	0xffff0000

08003cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d006      	beq.n	8003d26 <I2C_MasterRequestWrite+0x2a>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d003      	beq.n	8003d26 <I2C_MasterRequestWrite+0x2a>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d24:	d108      	bne.n	8003d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00b      	b.n	8003d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2b12      	cmp	r3, #18
 8003d3e:	d107      	bne.n	8003d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f84f 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d103      	bne.n	8003d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e035      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8c:	d108      	bne.n	8003da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d9c:	611a      	str	r2, [r3, #16]
 8003d9e:	e01b      	b.n	8003dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da0:	897b      	ldrh	r3, [r7, #10]
 8003da2:	11db      	asrs	r3, r3, #7
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f063 030f 	orn	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <I2C_MasterRequestWrite+0xfc>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f875 	bl	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e010      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4907      	ldr	r1, [pc, #28]	; (8003dfc <I2C_MasterRequestWrite+0x100>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f865 	bl	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	00010008 	.word	0x00010008
 8003dfc:	00010002 	.word	0x00010002

08003e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e10:	e025      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d021      	beq.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fd fd61 	bl	80018e0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e023      	b.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d10d      	bne.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	e00c      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d0b6      	beq.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ebc:	e051      	b.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	d123      	bne.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e046      	b.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d021      	beq.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fd fcdf 	bl	80018e0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d116      	bne.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e020      	b.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10c      	bne.n	8003f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e00b      	b.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d18d      	bne.n	8003ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb8:	e02d      	b.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f878 	bl	80040b0 <I2C_IsAcknowledgeFailed>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02d      	b.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d021      	beq.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fd fc85 	bl	80018e0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e007      	b.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d1ca      	bne.n	8003fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800403a:	e02d      	b.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f837 	bl	80040b0 <I2C_IsAcknowledgeFailed>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e02d      	b.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d021      	beq.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004054:	f7fd fc44 	bl	80018e0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e007      	b.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d1ca      	bne.n	800403c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d11b      	bne.n	8004100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d129      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0210 	bic.w	r2, r2, #16
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b20      	cmp	r3, #32
 800419e:	d12a      	bne.n	80041f6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	f023 030f 	bic.w	r3, r3, #15
 80041c6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	89fb      	ldrh	r3, [r7, #14]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	89fa      	ldrh	r2, [r7, #14]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004206:	b08f      	sub	sp, #60	; 0x3c
 8004208:	af0a      	add	r7, sp, #40	; 0x28
 800420a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e10f      	b.n	8004436 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fd f983 	bl	800153c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2203      	movs	r2, #3
 800423a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f002 fabe 	bl	80067d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	687e      	ldr	r6, [r7, #4]
 8004262:	466d      	mov	r5, sp
 8004264:	f106 0410 	add.w	r4, r6, #16
 8004268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004274:	e885 0003 	stmia.w	r5, {r0, r1}
 8004278:	1d33      	adds	r3, r6, #4
 800427a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800427c:	6838      	ldr	r0, [r7, #0]
 800427e:	f002 fa49 	bl	8006714 <USB_CoreInit>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0d0      	b.n	8004436 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f002 faac 	bl	80067f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e04a      	b.n	800433c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	333d      	adds	r3, #61	; 0x3d
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	333c      	adds	r3, #60	; 0x3c
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	b298      	uxth	r0, r3
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3344      	adds	r3, #68	; 0x44
 80042e2:	4602      	mov	r2, r0
 80042e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3340      	adds	r3, #64	; 0x40
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3348      	adds	r3, #72	; 0x48
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334c      	adds	r3, #76	; 0x4c
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3354      	adds	r3, #84	; 0x54
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	3301      	adds	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3af      	bcc.n	80042a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
 800434a:	e044      	b.n	80043d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	3301      	adds	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3b5      	bcc.n	800434c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	687e      	ldr	r6, [r7, #4]
 80043e8:	466d      	mov	r5, sp
 80043ea:	f106 0410 	add.w	r4, r6, #16
 80043ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80043fe:	1d33      	adds	r3, r6, #4
 8004400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004402:	6838      	ldr	r0, [r7, #0]
 8004404:	f002 fa44 	bl	8006890 <USB_DevInit>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e00d      	b.n	8004436 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f002 fc0f 	bl	8006c52 <USB_DevDisconnect>

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e267      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d075      	beq.n	800454a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	4b88      	ldr	r3, [pc, #544]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b04      	cmp	r3, #4
 8004468:	d00c      	beq.n	8004484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b85      	ldr	r3, [pc, #532]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004472:	2b08      	cmp	r3, #8
 8004474:	d112      	bne.n	800449c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004482:	d10b      	bne.n	800449c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d05b      	beq.n	8004548 <HAL_RCC_OscConfig+0x108>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d157      	bne.n	8004548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e242      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d106      	bne.n	80044b4 <HAL_RCC_OscConfig+0x74>
 80044a6:	4b76      	ldr	r3, [pc, #472]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a75      	ldr	r2, [pc, #468]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e01d      	b.n	80044f0 <HAL_RCC_OscConfig+0xb0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x98>
 80044be:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6f      	ldr	r2, [pc, #444]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6c      	ldr	r2, [pc, #432]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0xb0>
 80044d8:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a68      	ldr	r2, [pc, #416]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a65      	ldr	r2, [pc, #404]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd f9f2 	bl	80018e0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd f9ee 	bl	80018e0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e207      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b5b      	ldr	r3, [pc, #364]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0xc0>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd f9de 	bl	80018e0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd f9da 	bl	80018e0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e1f3      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	4b51      	ldr	r3, [pc, #324]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0xe8>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d063      	beq.n	800461e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800456a:	2b08      	cmp	r3, #8
 800456c:	d11c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b44      	ldr	r3, [pc, #272]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d116      	bne.n	80045a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	4b41      	ldr	r3, [pc, #260]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x152>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e1c7      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4937      	ldr	r1, [pc, #220]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	e03a      	b.n	800461e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <HAL_RCC_OscConfig+0x244>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fd f993 	bl	80018e0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045be:	f7fd f98f 	bl	80018e0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1a8      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4925      	ldr	r1, [pc, #148]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
 80045f0:	e015      	b.n	800461e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCC_OscConfig+0x244>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd f972 	bl	80018e0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd f96e 	bl	80018e0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e187      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d036      	beq.n	8004698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x248>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd f952 	bl	80018e0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd f94e 	bl	80018e0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e167      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_OscConfig+0x240>)
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x200>
 800465e:	e01b      	b.n	8004698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x248>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7fd f93b 	bl	80018e0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	e00e      	b.n	800468c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466e:	f7fd f937 	bl	80018e0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d907      	bls.n	800468c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e150      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
 8004680:	40023800 	.word	0x40023800
 8004684:	42470000 	.word	0x42470000
 8004688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ea      	bne.n	800466e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8097 	beq.w	80047d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b81      	ldr	r3, [pc, #516]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	4b7d      	ldr	r3, [pc, #500]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a7c      	ldr	r2, [pc, #496]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b7a      	ldr	r3, [pc, #488]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	4b77      	ldr	r3, [pc, #476]	; (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d118      	bne.n	8004714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e2:	4b74      	ldr	r3, [pc, #464]	; (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a73      	ldr	r2, [pc, #460]	; (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7fd f8f7 	bl	80018e0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f6:	f7fd f8f3 	bl	80018e0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e10c      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004708:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCC_OscConfig+0x474>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x2ea>
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a63      	ldr	r2, [pc, #396]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	e01c      	b.n	8004764 <HAL_RCC_OscConfig+0x324>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x30c>
 8004732:	4b5f      	ldr	r3, [pc, #380]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a5e      	ldr	r2, [pc, #376]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004738:	f043 0304 	orr.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a5b      	ldr	r2, [pc, #364]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0x324>
 800474c:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	4a57      	ldr	r2, [pc, #348]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6713      	str	r3, [r2, #112]	; 0x70
 8004758:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a54      	ldr	r2, [pc, #336]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800475e:	f023 0304 	bic.w	r3, r3, #4
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fd f8b8 	bl	80018e0 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fd f8b4 	bl	80018e0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0cb      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0ee      	beq.n	8004774 <HAL_RCC_OscConfig+0x334>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004798:	f7fd f8a2 	bl	80018e0 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fd f89e 	bl	80018e0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0b5      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b6:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ee      	bne.n	80047a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	4a38      	ldr	r2, [pc, #224]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80a1 	beq.w	8004920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047de:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d05c      	beq.n	80048a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d141      	bne.n	8004876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_OscConfig+0x478>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd f872 	bl	80018e0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd f86e 	bl	80018e0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e087      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	3b01      	subs	r3, #1
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	491b      	ldr	r1, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x478>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fd f847 	bl	80018e0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd f843 	bl	80018e0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e05c      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x416>
 8004874:	e054      	b.n	8004920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_RCC_OscConfig+0x478>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd f830 	bl	80018e0 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd f82c 	bl	80018e0 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e045      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x444>
 80048a2:	e03d      	b.n	8004920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e038      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000
 80048b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4ec>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d028      	beq.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d121      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d11a      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	3b01      	subs	r3, #1
 8004906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800

08004930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0cc      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d90c      	bls.n	800496c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b8      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800498e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a52      	ldr	r2, [pc, #328]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	494d      	ldr	r1, [pc, #308]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d044      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d119      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d003      	beq.n	80049ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e06f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fe:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e067      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0e:	4b37      	ldr	r3, [pc, #220]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4934      	ldr	r1, [pc, #208]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a20:	f7fc ff5e 	bl	80018e0 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fc ff5a 	bl	80018e0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e04f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	4b2b      	ldr	r3, [pc, #172]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 020c 	and.w	r2, r3, #12
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1eb      	bne.n	8004a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d20c      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e032      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ab6:	f000 f821 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	490a      	ldr	r1, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc febe 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023c00 	.word	0x40023c00
 8004aec:	40023800 	.word	0x40023800
 8004af0:	080080cc 	.word	0x080080cc
 8004af4:	20000008 	.word	0x20000008
 8004af8:	2000000c 	.word	0x2000000c

08004afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b00:	b094      	sub	sp, #80	; 0x50
 8004b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	647b      	str	r3, [r7, #68]	; 0x44
 8004b08:	2300      	movs	r3, #0
 8004b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b14:	4b79      	ldr	r3, [pc, #484]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d00d      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x40>
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	f200 80e1 	bhi.w	8004ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x34>
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b2e:	e0db      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b34:	e0db      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b36:	4b73      	ldr	r3, [pc, #460]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b3a:	e0d8      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b3c:	4b6f      	ldr	r3, [pc, #444]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b46:	4b6d      	ldr	r3, [pc, #436]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d063      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b52:	4b6a      	ldr	r3, [pc, #424]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	2200      	movs	r2, #0
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
 8004b66:	2300      	movs	r3, #0
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b6e:	4622      	mov	r2, r4
 8004b70:	462b      	mov	r3, r5
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0159      	lsls	r1, r3, #5
 8004b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b80:	0150      	lsls	r0, r2, #5
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4621      	mov	r1, r4
 8004b88:	1a51      	subs	r1, r2, r1
 8004b8a:	6139      	str	r1, [r7, #16]
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	018b      	lsls	r3, r1, #6
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004baa:	4651      	mov	r1, sl
 8004bac:	018a      	lsls	r2, r1, #6
 8004bae:	4651      	mov	r1, sl
 8004bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bce:	4690      	mov	r8, r2
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	eb18 0303 	adds.w	r3, r8, r3
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	462b      	mov	r3, r5
 8004bdc:	eb49 0303 	adc.w	r3, r9, r3
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bee:	4629      	mov	r1, r5
 8004bf0:	024b      	lsls	r3, r1, #9
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	024a      	lsls	r2, r1, #9
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c02:	2200      	movs	r2, #0
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c0c:	f7fb fb48 	bl	80002a0 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4613      	mov	r3, r2
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	e058      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1a:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	099b      	lsrs	r3, r3, #6
 8004c20:	2200      	movs	r2, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	4611      	mov	r1, r2
 8004c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c2a:	623b      	str	r3, [r7, #32]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	0159      	lsls	r1, r3, #5
 8004c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c46:	0150      	lsls	r0, r2, #5
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c70:	eb63 050b 	sbc.w	r5, r3, fp
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	00eb      	lsls	r3, r5, #3
 8004c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c82:	00e2      	lsls	r2, r4, #3
 8004c84:	4614      	mov	r4, r2
 8004c86:	461d      	mov	r5, r3
 8004c88:	4643      	mov	r3, r8
 8004c8a:	18e3      	adds	r3, r4, r3
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	464b      	mov	r3, r9
 8004c90:	eb45 0303 	adc.w	r3, r5, r3
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	028b      	lsls	r3, r1, #10
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cac:	4621      	mov	r1, r4
 8004cae:	028a      	lsls	r2, r1, #10
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	61fa      	str	r2, [r7, #28]
 8004cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc0:	f7fb faee 	bl	80002a0 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ce6:	e002      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3750      	adds	r7, #80	; 0x50
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	007a1200 	.word	0x007a1200

08004d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000008 	.word	0x20000008

08004d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d24:	f7ff fff0 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0a9b      	lsrs	r3, r3, #10
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	080080dc 	.word	0x080080dc

08004d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d4c:	f7ff ffdc 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0b5b      	lsrs	r3, r3, #13
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	080080dc 	.word	0x080080dc

08004d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d075      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004da4:	4b91      	ldr	r3, [pc, #580]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004daa:	f7fc fd99 	bl	80018e0 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004db2:	f7fc fd95 	bl	80018e0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e189      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc4:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d009      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	019a      	lsls	r2, r3, #6
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	071b      	lsls	r3, r3, #28
 8004de8:	4981      	ldr	r1, [pc, #516]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01f      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfc:	4b7c      	ldr	r3, [pc, #496]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	019a      	lsls	r2, r3, #6
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	431a      	orrs	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	071b      	lsls	r3, r3, #28
 8004e1c:	4974      	ldr	r1, [pc, #464]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e24:	4b72      	ldr	r3, [pc, #456]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2a:	f023 021f 	bic.w	r2, r3, #31
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	496e      	ldr	r1, [pc, #440]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	019a      	lsls	r2, r3, #6
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	071b      	lsls	r3, r3, #28
 8004e5c:	4964      	ldr	r1, [pc, #400]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e64:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6a:	f7fc fd39 	bl	80018e0 <HAL_GetTick>
 8004e6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e72:	f7fc fd35 	bl	80018e0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e129      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e84:	4b5a      	ldr	r3, [pc, #360]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d079      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eae:	f7fc fd17 	bl	80018e0 <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004eb6:	f7fc fd13 	bl	80018e0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e107      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec8:	4b49      	ldr	r3, [pc, #292]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ee2:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	0f1b      	lsrs	r3, r3, #28
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	019a      	lsls	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	431a      	orrs	r2, r3
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	493b      	ldr	r1, [pc, #236]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	4934      	ldr	r1, [pc, #208]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01e      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f30:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	0e1b      	lsrs	r3, r3, #24
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	019a      	lsls	r2, r3, #6
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	071b      	lsls	r3, r3, #28
 8004f50:	4927      	ldr	r1, [pc, #156]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	4922      	ldr	r1, [pc, #136]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f6e:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f74:	f7fc fcb4 	bl	80018e0 <HAL_GetTick>
 8004f78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f7c:	f7fc fcb0 	bl	80018e0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0a4      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9a:	d1ef      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 808b 	beq.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a0b      	ldr	r2, [pc, #44]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd2:	f7fc fc85 	bl	80018e0 <HAL_GetTick>
 8004fd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd8:	e010      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fc fc81 	bl	80018e0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d909      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e075      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004fec:	42470068 	.word	0x42470068
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	42470070 	.word	0x42470070
 8004ff8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffc:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0e8      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005008:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d028      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005026:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800503c:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005042:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d114      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800504e:	f7fc fc47 	bl	80018e0 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc fc43 	bl	80018e0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e035      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005084:	d10d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	4912      	ldr	r1, [pc, #72]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800509c:	4313      	orrs	r3, r2
 800509e:	608b      	str	r3, [r1, #8]
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050ac:	6093      	str	r3, [r2, #8]
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ba:	490a      	ldr	r1, [pc, #40]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80050d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40007000 	.word	0x40007000
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470e40 	.word	0x42470e40
 80050ec:	424711e0 	.word	0x424711e0

080050f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e066      	b.n	80051d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	7f5b      	ldrb	r3, [r3, #29]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc f99e 	bl	8001458 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	22ca      	movs	r2, #202	; 0xca
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2253      	movs	r2, #83	; 0x53
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa45 	bl	80055c2 <RTC_EnterInitMode>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d12c      	bne.n	800519c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68d2      	ldr	r2, [r2, #12]
 800517c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6919      	ldr	r1, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	041a      	lsls	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa4c 	bl	8005630 <RTC_ExitInitMode>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	7f1b      	ldrb	r3, [r3, #28]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_RTC_SetTime+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e087      	b.n	8005308 <HAL_RTC_SetTime+0x12c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2202      	movs	r2, #2
 8005202:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d126      	bne.n	8005258 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fa29 	bl	800567a <RTC_ByteToBcd2>
 8005228:	4603      	mov	r3, r0
 800522a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fa22 	bl	800567a <RTC_ByteToBcd2>
 8005236:	4603      	mov	r3, r0
 8005238:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800523a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	789b      	ldrb	r3, [r3, #2]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa1a 	bl	800567a <RTC_ByteToBcd2>
 8005246:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005248:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	78db      	ldrb	r3, [r3, #3]
 8005250:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e018      	b.n	800528a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2200      	movs	r2, #0
 800526a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005278:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800527e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ca      	movs	r2, #202	; 0xca
 8005290:	625a      	str	r2, [r3, #36]	; 0x24
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2253      	movs	r2, #83	; 0x53
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f991 	bl	80055c2 <RTC_EnterInitMode>
 80052a0:	4603      	mov	r3, r0
 80052a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d120      	bne.n	80052ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f9a4 	bl	8005630 <RTC_ExitInitMode>
 80052e8:	4603      	mov	r3, r0
 80052ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	22ff      	movs	r2, #255	; 0xff
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]

  return status;
 8005306:	7cfb      	ldrb	r3, [r7, #19]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005342:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005346:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	0d9b      	lsrs	r3, r3, #22
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11a      	bne.n	80053c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f98f 	bl	80056b4 <RTC_Bcd2ToByte>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f986 	bl	80056b4 <RTC_Bcd2ToByte>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	789b      	ldrb	r3, [r3, #2]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f97d 	bl	80056b4 <RTC_Bcd2ToByte>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	7f1b      	ldrb	r3, [r3, #28]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_RTC_SetDate+0x1c>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e071      	b.n	80054cc <HAL_RTC_SetDate+0x100>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2202      	movs	r2, #2
 80053f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10e      	bne.n	8005418 <HAL_RTC_SetDate+0x4c>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	b2db      	uxtb	r3, r3
 8005410:	330a      	adds	r3, #10
 8005412:	b2da      	uxtb	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11c      	bne.n	8005458 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f929 	bl	800567a <RTC_ByteToBcd2>
 8005428:	4603      	mov	r3, r0
 800542a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f922 	bl	800567a <RTC_ByteToBcd2>
 8005436:	4603      	mov	r3, r0
 8005438:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800543a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	789b      	ldrb	r3, [r3, #2]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f91a 	bl	800567a <RTC_ByteToBcd2>
 8005446:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005448:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e00e      	b.n	8005476 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005464:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800546a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	22ca      	movs	r2, #202	; 0xca
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2253      	movs	r2, #83	; 0x53
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f89b 	bl	80055c2 <RTC_EnterInitMode>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8c2 	bl	8005630 <RTC_ExitInitMode>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]

  return status;
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}

080054d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	0b5b      	lsrs	r3, r3, #13
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d11a      	bne.n	8005568 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f8bc 	bl	80056b4 <RTC_Bcd2ToByte>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f8b3 	bl	80056b4 <RTC_Bcd2ToByte>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	789b      	ldrb	r3, [r3, #2]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f8aa 	bl	80056b4 <RTC_Bcd2ToByte>
 8005560:	4603      	mov	r3, r0
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800558c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800558e:	f7fc f9a7 	bl	80018e0 <HAL_GetTick>
 8005592:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005594:	e009      	b.n	80055aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005596:	f7fc f9a3 	bl	80018e0 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055a4:	d901      	bls.n	80055aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e007      	b.n	80055ba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ee      	beq.n	8005596 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d122      	bne.n	8005626 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fc f976 	bl	80018e0 <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055f6:	e00c      	b.n	8005612 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055f8:	f7fc f972 	bl	80018e0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005606:	d904      	bls.n	8005612 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <RTC_EnterInitMode+0x64>
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d1e8      	bne.n	80055f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff89 	bl	8005572 <HAL_RTC_WaitForSynchro>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	4603      	mov	r3, r0
 8005682:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005688:	e005      	b.n	8005696 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	3301      	adds	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	3b0a      	subs	r3, #10
 8005694:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b09      	cmp	r3, #9
 800569a:	d8f6      	bhi.n	800568a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b2db      	uxtb	r3, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	4413      	add	r3, r2
 80056de:	b2db      	uxtb	r3, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e03f      	b.n	800577e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb feca 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800572e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fd7b 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b08a      	sub	sp, #40	; 0x28
 800578a:	af02      	add	r7, sp, #8
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d17c      	bne.n	80058a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Transmit+0x2c>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e075      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Transmit+0x3e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e06e      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2221      	movs	r2, #33	; 0x21
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057da:	f7fc f881 	bl	80018e0 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d108      	bne.n	8005808 <HAL_UART_Transmit+0x82>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e003      	b.n	8005810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005818:	e02a      	b.n	8005870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2200      	movs	r2, #0
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 faf9 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e036      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3302      	adds	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e007      	b.n	8005862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1cf      	bne.n	800581a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fac9 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
  }
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b0ba      	sub	sp, #232	; 0xe8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_UART_IRQHandler+0x66>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fbd3 	bl	80060b6 <UART_Receive_IT>
      return;
 8005910:	e256      	b.n	8005dc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80de 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x22c>
 800591c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80d1 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <HAL_UART_IRQHandler+0xae>
 8005942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_UART_IRQHandler+0xd2>
 8005966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0202 	orr.w	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xf6>
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0204 	orr.w	r2, r3, #4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <HAL_UART_IRQHandler+0x126>
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f043 0208 	orr.w	r2, r3, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 81ed 	beq.w	8005db6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_UART_IRQHandler+0x14e>
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb5e 	bl	80060b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <HAL_UART_IRQHandler+0x17a>
 8005a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d04f      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa66 	bl	8005ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d141      	bne.n	8005abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1d9      	bne.n	8005a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d013      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	4a7d      	ldr	r2, [pc, #500]	; (8005c88 <HAL_UART_IRQHandler+0x3dc>)
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fdfa 	bl	8002694 <HAL_DMA_Abort_IT>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	e00e      	b.n	8005ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f99a 	bl	8005df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e00a      	b.n	8005ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f996 	bl	8005df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	e006      	b.n	8005ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f992 	bl	8005df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ad2:	e170      	b.n	8005db6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	bf00      	nop
    return;
 8005ad6:	e16e      	b.n	8005db6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 814a 	bne.w	8005d76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8143 	beq.w	8005d76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 813c 	beq.w	8005d76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	f040 80b4 	bne.w	8005c8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8140 	beq.w	8005dba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f080 8139 	bcs.w	8005dba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	f000 8088 	beq.w	8005c6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1d9      	bne.n	8005b5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e1      	bne.n	8005baa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e3      	bne.n	8005be6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c50:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e3      	bne.n	8005c2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fc fca3 	bl	80025b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f8c0 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c84:	e099      	b.n	8005dba <HAL_UART_IRQHandler+0x50e>
 8005c86:	bf00      	nop
 8005c88:	08005fbf 	.word	0x08005fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 808b 	beq.w	8005dbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8086 	beq.w	8005dbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8005cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e3      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e3      	bne.n	8005cea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d54:	61fa      	str	r2, [r7, #28]
 8005d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	617b      	str	r3, [r7, #20]
   return(result);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e3      	bne.n	8005d30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f848 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d74:	e023      	b.n	8005dbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <HAL_UART_IRQHandler+0x4ea>
 8005d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f929 	bl	8005fe6 <UART_Transmit_IT>
    return;
 8005d94:	e014      	b.n	8005dc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x514>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f969 	bl	8006086 <UART_EndTransmit_IT>
    return;
 8005db4:	e004      	b.n	8005dc0 <HAL_UART_IRQHandler+0x514>
    return;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8005dbe:	bf00      	nop
  }
}
 8005dc0:	37e8      	adds	r7, #232	; 0xe8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2c:	e050      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d04c      	beq.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3c:	f7fb fd50 	bl	80018e0 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d241      	bcs.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e6c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea0:	623a      	str	r2, [r7, #32]
 8005ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e00f      	b.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d09f      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3740      	adds	r7, #64	; 0x40
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b095      	sub	sp, #84	; 0x54
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f20:	643a      	str	r2, [r7, #64]	; 0x40
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d119      	bne.n	8005fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f90:	61ba      	str	r2, [r7, #24]
 8005f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fb2:	bf00      	nop
 8005fb4:	3754      	adds	r7, #84	; 0x54
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff ff09 	bl	8005df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d13e      	bne.n	8006078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d114      	bne.n	800602e <UART_Transmit_IT+0x48>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]
 800602c:	e008      	b.n	8006040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6211      	str	r1, [r2, #32]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10f      	bne.n	8006074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fe8e 	bl	8005dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	; 0x30
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b22      	cmp	r3, #34	; 0x22
 80060c8:	f040 80ab 	bne.w	8006222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d117      	bne.n	8006106 <UART_Receive_IT+0x50>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e026      	b.n	8006154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d007      	beq.n	800612a <UART_Receive_IT+0x74>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <UART_Receive_IT+0x82>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e008      	b.n	800614a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006164:	2b00      	cmp	r3, #0
 8006166:	d15a      	bne.n	800621e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0220 	bic.w	r2, r2, #32
 8006176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d135      	bne.n	8006214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	623a      	str	r2, [r7, #32]
 80061d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	61bb      	str	r3, [r7, #24]
   return(result);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d10a      	bne.n	8006206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fdf9 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
 8006212:	e002      	b.n	800621a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fde1 	bl	8005ddc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e002      	b.n	8006224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3730      	adds	r7, #48	; 0x30
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0c0      	sub	sp, #256	; 0x100
 8006232:	af00      	add	r7, sp, #0
 8006234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	ea40 0301 	orr.w	r3, r0, r1
 8006254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006284:	f021 010c 	bic.w	r1, r1, #12
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006292:	430b      	orrs	r3, r1
 8006294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	ea40 0301 	orr.w	r3, r0, r1
 80062b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b8f      	ldr	r3, [pc, #572]	; (80064f8 <UART_SetConfig+0x2cc>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <UART_SetConfig+0xa0>
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8d      	ldr	r3, [pc, #564]	; (80064fc <UART_SetConfig+0x2d0>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fe fd3c 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 80062d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fe fd23 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
 80062da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	f040 810c 	bne.w	8006504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	65b9      	str	r1, [r7, #88]	; 0x58
 8006306:	415b      	adcs	r3, r3
 8006308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800630a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800630e:	4621      	mov	r1, r4
 8006310:	eb12 0801 	adds.w	r8, r2, r1
 8006314:	4629      	mov	r1, r5
 8006316:	eb43 0901 	adc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800633c:	462b      	mov	r3, r5
 800633e:	eb49 0303 	adc.w	r3, r9, r3
 8006342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800635a:	460b      	mov	r3, r1
 800635c:	18db      	adds	r3, r3, r3
 800635e:	653b      	str	r3, [r7, #80]	; 0x50
 8006360:	4613      	mov	r3, r2
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
 8006368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800636c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006370:	f7f9 ff96 	bl	80002a0 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b61      	ldr	r3, [pc, #388]	; (8006500 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	64b9      	str	r1, [r7, #72]	; 0x48
 800639c:	415b      	adcs	r3, r3
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063a4:	4641      	mov	r1, r8
 80063a6:	eb12 0a01 	adds.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0b01 	adc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	4692      	mov	sl, r2
 80063c6:	469b      	mov	fp, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	eb1a 0303 	adds.w	r3, sl, r3
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d2:	464b      	mov	r3, r9
 80063d4:	eb4b 0303 	adc.w	r3, fp, r3
 80063d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006406:	f7f9 ff4b 	bl	80002a0 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	; 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <UART_SetConfig+0x2d4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006434:	441c      	add	r4, r3
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006450:	415b      	adcs	r3, r3
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6339      	str	r1, [r7, #48]	; 0x30
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	464b      	mov	r3, r9
 800648e:	460a      	mov	r2, r1
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064ac:	460b      	mov	r3, r1
 80064ae:	18db      	adds	r3, r3, r3
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b2:	4613      	mov	r3, r2
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064c2:	f7f9 feed 	bl	80002a0 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	; (8006500 <UART_SetConfig+0x2d4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f4:	e106      	b.n	8006704 <UART_SetConfig+0x4d8>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40011400 	.word	0x40011400
 8006500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800650e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	6239      	str	r1, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	4641      	mov	r1, r8
 8006528:	1854      	adds	r4, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0501 	adc.w	r5, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	00eb      	lsls	r3, r5, #3
 800653a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800653e:	00e2      	lsls	r2, r4, #3
 8006540:	4614      	mov	r4, r2
 8006542:	461d      	mov	r5, r3
 8006544:	4643      	mov	r3, r8
 8006546:	18e3      	adds	r3, r4, r3
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800654c:	464b      	mov	r3, r9
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006572:	4629      	mov	r1, r5
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4621      	mov	r1, r4
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006584:	f7f9 fe8c 	bl	80002a0 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b60      	ldr	r3, [pc, #384]	; (8006710 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b8:	4641      	mov	r1, r8
 80065ba:	1851      	adds	r1, r2, r1
 80065bc:	6139      	str	r1, [r7, #16]
 80065be:	4649      	mov	r1, r9
 80065c0:	414b      	adcs	r3, r1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d0:	4659      	mov	r1, fp
 80065d2:	00cb      	lsls	r3, r1, #3
 80065d4:	4651      	mov	r1, sl
 80065d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065da:	4651      	mov	r1, sl
 80065dc:	00ca      	lsls	r2, r1, #3
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	4642      	mov	r2, r8
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ec:	464b      	mov	r3, r9
 80065ee:	460a      	mov	r2, r1
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	67bb      	str	r3, [r7, #120]	; 0x78
 8006602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006622:	f7f9 fe3d 	bl	80002a0 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b38      	ldr	r3, [pc, #224]	; (8006710 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	; 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	3332      	adds	r3, #50	; 0x32
 8006640:	4a33      	ldr	r2, [pc, #204]	; (8006710 <UART_SetConfig+0x4e4>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800664c:	441c      	add	r4, r3
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	673b      	str	r3, [r7, #112]	; 0x70
 8006656:	677a      	str	r2, [r7, #116]	; 0x74
 8006658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	415b      	adcs	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	66bb      	str	r3, [r7, #104]	; 0x68
 800669e:	464b      	mov	r3, r9
 80066a0:	460a      	mov	r2, r1
 80066a2:	eb42 0303 	adc.w	r3, r2, r3
 80066a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	663b      	str	r3, [r7, #96]	; 0x60
 80066b2:	667a      	str	r2, [r7, #100]	; 0x64
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066d2:	f7f9 fde5 	bl	80002a0 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006714:	b084      	sub	sp, #16
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	f107 001c 	add.w	r0, r7, #28
 8006722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b01      	cmp	r3, #1
 800672a:	d122      	bne.n	8006772 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 faa2 	bl	8006cb0 <USB_CoreReset>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
 8006770:	e01a      	b.n	80067a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa96 	bl	8006cb0 <USB_CoreReset>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
 800679a:	e005      	b.n	80067a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d10b      	bne.n	80067c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f043 0206 	orr.w	r2, r3, #6
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d2:	b004      	add	sp, #16
 80067d4:	4770      	bx	lr

080067d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d115      	bne.n	8006846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006826:	2001      	movs	r0, #1
 8006828:	f7fb f866 	bl	80018f8 <HAL_Delay>
      ms++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa2e 	bl	8006c94 <USB_GetMode>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d01e      	beq.n	800687c <USB_SetCurrentMode+0x84>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b31      	cmp	r3, #49	; 0x31
 8006842:	d9f0      	bls.n	8006826 <USB_SetCurrentMode+0x2e>
 8006844:	e01a      	b.n	800687c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006858:	2001      	movs	r0, #1
 800685a:	f7fb f84d 	bl	80018f8 <HAL_Delay>
      ms++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa15 	bl	8006c94 <USB_GetMode>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <USB_SetCurrentMode+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b31      	cmp	r3, #49	; 0x31
 8006874:	d9f0      	bls.n	8006858 <USB_SetCurrentMode+0x60>
 8006876:	e001      	b.n	800687c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e005      	b.n	8006888 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b32      	cmp	r3, #50	; 0x32
 8006880:	d101      	bne.n	8006886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006890:	b084      	sub	sp, #16
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800689e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	e009      	b.n	80068c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3340      	adds	r3, #64	; 0x40
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b0e      	cmp	r3, #14
 80068c8:	d9f2      	bls.n	80068b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11c      	bne.n	800690a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068de:	f043 0302 	orr.w	r3, r3, #2
 80068e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
 8006908:	e00b      	b.n	8006922 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006928:	461a      	mov	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006934:	4619      	mov	r1, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693c:	461a      	mov	r2, r3
 800693e:	680b      	ldr	r3, [r1, #0]
 8006940:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10c      	bne.n	8006962 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f965 	bl	8006c20 <USB_SetDevSpeed>
 8006956:	e008      	b.n	800696a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006958:	2101      	movs	r1, #1
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f960 	bl	8006c20 <USB_SetDevSpeed>
 8006960:	e003      	b.n	800696a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006962:	2103      	movs	r1, #3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f95b 	bl	8006c20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800696a:	2110      	movs	r1, #16
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8f3 	bl	8006b58 <USB_FlushTxFifo>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f91f 	bl	8006bc0 <USB_FlushRxFifo>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	461a      	mov	r2, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	461a      	mov	r2, r3
 80069ac:	2300      	movs	r3, #0
 80069ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	e043      	b.n	8006a3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069cc:	d118      	bne.n	8006a00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e013      	b.n	8006a12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f6:	461a      	mov	r2, r3
 80069f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e008      	b.n	8006a12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d3b7      	bcc.n	80069b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e043      	b.n	8006ad4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a62:	d118      	bne.n	8006a96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	461a      	mov	r2, r3
 8006a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e013      	b.n	8006aa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	e008      	b.n	8006aa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d3b7      	bcc.n	8006a4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006afc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <USB_DevInit+0x2c4>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f043 0208 	orr.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b3c:	f043 0304 	orr.w	r3, r3, #4
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b50:	b004      	add	sp, #16
 8006b52:	4770      	bx	lr
 8006b54:	803c3800 	.word	0x803c3800

08006b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <USB_FlushTxFifo+0x64>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e01b      	b.n	8006bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	daf2      	bge.n	8006b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	019b      	lsls	r3, r3, #6
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a08      	ldr	r2, [pc, #32]	; (8006bbc <USB_FlushTxFifo+0x64>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e006      	b.n	8006bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d0f0      	beq.n	8006b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	00030d40 	.word	0x00030d40

08006bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <USB_FlushRxFifo+0x5c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e018      	b.n	8006c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	daf2      	bge.n	8006bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2210      	movs	r2, #16
 8006bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <USB_FlushRxFifo+0x5c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e006      	b.n	8006c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b10      	cmp	r3, #16
 8006c0c:	d0f0      	beq.n	8006bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	00030d40 	.word	0x00030d40

08006c20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c40:	4313      	orrs	r3, r2
 8006c42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c6c:	f023 0303 	bic.w	r3, r3, #3
 8006c70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c80:	f043 0302 	orr.w	r3, r3, #2
 8006c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <USB_CoreReset+0x64>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e01b      	b.n	8006d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	daf2      	bge.n	8006cbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f043 0201 	orr.w	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <USB_CoreReset+0x64>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d901      	bls.n	8006cf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e006      	b.n	8006d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d0f0      	beq.n	8006ce6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	00030d40 	.word	0x00030d40

08006d18 <std>:
 8006d18:	2300      	movs	r3, #0
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d26:	6083      	str	r3, [r0, #8]
 8006d28:	8181      	strh	r1, [r0, #12]
 8006d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d2c:	81c2      	strh	r2, [r0, #14]
 8006d2e:	6183      	str	r3, [r0, #24]
 8006d30:	4619      	mov	r1, r3
 8006d32:	2208      	movs	r2, #8
 8006d34:	305c      	adds	r0, #92	; 0x5c
 8006d36:	f000 f95a 	bl	8006fee <memset>
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <std+0x58>)
 8006d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <std+0x5c>)
 8006d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <std+0x60>)
 8006d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <std+0x64>)
 8006d48:	6323      	str	r3, [r4, #48]	; 0x30
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x68>)
 8006d4c:	6224      	str	r4, [r4, #32]
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d006      	beq.n	8006d60 <std+0x48>
 8006d52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d56:	4294      	cmp	r4, r2
 8006d58:	d002      	beq.n	8006d60 <std+0x48>
 8006d5a:	33d0      	adds	r3, #208	; 0xd0
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	d105      	bne.n	8006d6c <std+0x54>
 8006d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d68:	f000 b9ba 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	08006f69 	.word	0x08006f69
 8006d74:	08006f8b 	.word	0x08006f8b
 8006d78:	08006fc3 	.word	0x08006fc3
 8006d7c:	08006fe7 	.word	0x08006fe7
 8006d80:	2000096c 	.word	0x2000096c

08006d84 <stdio_exit_handler>:
 8006d84:	4a02      	ldr	r2, [pc, #8]	; (8006d90 <stdio_exit_handler+0xc>)
 8006d86:	4903      	ldr	r1, [pc, #12]	; (8006d94 <stdio_exit_handler+0x10>)
 8006d88:	4803      	ldr	r0, [pc, #12]	; (8006d98 <stdio_exit_handler+0x14>)
 8006d8a:	f000 b869 	b.w	8006e60 <_fwalk_sglue>
 8006d8e:	bf00      	nop
 8006d90:	20000014 	.word	0x20000014
 8006d94:	08007c3d 	.word	0x08007c3d
 8006d98:	20000020 	.word	0x20000020

08006d9c <cleanup_stdio>:
 8006d9c:	6841      	ldr	r1, [r0, #4]
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <cleanup_stdio+0x34>)
 8006da0:	4299      	cmp	r1, r3
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	d001      	beq.n	8006dac <cleanup_stdio+0x10>
 8006da8:	f000 ff48 	bl	8007c3c <_fflush_r>
 8006dac:	68a1      	ldr	r1, [r4, #8]
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <cleanup_stdio+0x38>)
 8006db0:	4299      	cmp	r1, r3
 8006db2:	d002      	beq.n	8006dba <cleanup_stdio+0x1e>
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 ff41 	bl	8007c3c <_fflush_r>
 8006dba:	68e1      	ldr	r1, [r4, #12]
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <cleanup_stdio+0x3c>)
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d004      	beq.n	8006dcc <cleanup_stdio+0x30>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc8:	f000 bf38 	b.w	8007c3c <_fflush_r>
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000096c 	.word	0x2000096c
 8006dd4:	200009d4 	.word	0x200009d4
 8006dd8:	20000a3c 	.word	0x20000a3c

08006ddc <global_stdio_init.part.0>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <global_stdio_init.part.0+0x30>)
 8006de0:	4c0b      	ldr	r4, [pc, #44]	; (8006e10 <global_stdio_init.part.0+0x34>)
 8006de2:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <global_stdio_init.part.0+0x38>)
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	4620      	mov	r0, r4
 8006de8:	2200      	movs	r2, #0
 8006dea:	2104      	movs	r1, #4
 8006dec:	f7ff ff94 	bl	8006d18 <std>
 8006df0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006df4:	2201      	movs	r2, #1
 8006df6:	2109      	movs	r1, #9
 8006df8:	f7ff ff8e 	bl	8006d18 <std>
 8006dfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e00:	2202      	movs	r2, #2
 8006e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e06:	2112      	movs	r1, #18
 8006e08:	f7ff bf86 	b.w	8006d18 <std>
 8006e0c:	20000aa4 	.word	0x20000aa4
 8006e10:	2000096c 	.word	0x2000096c
 8006e14:	08006d85 	.word	0x08006d85

08006e18 <__sfp_lock_acquire>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__sfp_lock_acquire+0x8>)
 8006e1a:	f000 b962 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000aad 	.word	0x20000aad

08006e24 <__sfp_lock_release>:
 8006e24:	4801      	ldr	r0, [pc, #4]	; (8006e2c <__sfp_lock_release+0x8>)
 8006e26:	f000 b95d 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20000aad 	.word	0x20000aad

08006e30 <__sinit>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	f7ff fff0 	bl	8006e18 <__sfp_lock_acquire>
 8006e38:	6a23      	ldr	r3, [r4, #32]
 8006e3a:	b11b      	cbz	r3, 8006e44 <__sinit+0x14>
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f7ff bff0 	b.w	8006e24 <__sfp_lock_release>
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <__sinit+0x28>)
 8006e46:	6223      	str	r3, [r4, #32]
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <__sinit+0x2c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f5      	bne.n	8006e3c <__sinit+0xc>
 8006e50:	f7ff ffc4 	bl	8006ddc <global_stdio_init.part.0>
 8006e54:	e7f2      	b.n	8006e3c <__sinit+0xc>
 8006e56:	bf00      	nop
 8006e58:	08006d9d 	.word	0x08006d9d
 8006e5c:	20000aa4 	.word	0x20000aa4

08006e60 <_fwalk_sglue>:
 8006e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e64:	4607      	mov	r7, r0
 8006e66:	4688      	mov	r8, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e70:	f1b9 0901 	subs.w	r9, r9, #1
 8006e74:	d505      	bpl.n	8006e82 <_fwalk_sglue+0x22>
 8006e76:	6824      	ldr	r4, [r4, #0]
 8006e78:	2c00      	cmp	r4, #0
 8006e7a:	d1f7      	bne.n	8006e6c <_fwalk_sglue+0xc>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d907      	bls.n	8006e98 <_fwalk_sglue+0x38>
 8006e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	d003      	beq.n	8006e98 <_fwalk_sglue+0x38>
 8006e90:	4629      	mov	r1, r5
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c0      	blx	r8
 8006e96:	4306      	orrs	r6, r0
 8006e98:	3568      	adds	r5, #104	; 0x68
 8006e9a:	e7e9      	b.n	8006e70 <_fwalk_sglue+0x10>

08006e9c <iprintf>:
 8006e9c:	b40f      	push	{r0, r1, r2, r3}
 8006e9e:	b507      	push	{r0, r1, r2, lr}
 8006ea0:	4906      	ldr	r1, [pc, #24]	; (8006ebc <iprintf+0x20>)
 8006ea2:	ab04      	add	r3, sp, #16
 8006ea4:	6808      	ldr	r0, [r1, #0]
 8006ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eaa:	6881      	ldr	r1, [r0, #8]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f000 fb95 	bl	80075dc <_vfiprintf_r>
 8006eb2:	b003      	add	sp, #12
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	b004      	add	sp, #16
 8006eba:	4770      	bx	lr
 8006ebc:	2000006c 	.word	0x2000006c

08006ec0 <sniprintf>:
 8006ec0:	b40c      	push	{r2, r3}
 8006ec2:	b530      	push	{r4, r5, lr}
 8006ec4:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <sniprintf+0x64>)
 8006ec6:	1e0c      	subs	r4, r1, #0
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	b09d      	sub	sp, #116	; 0x74
 8006ecc:	da08      	bge.n	8006ee0 <sniprintf+0x20>
 8006ece:	238b      	movs	r3, #139	; 0x8b
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	b01d      	add	sp, #116	; 0x74
 8006ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006edc:	b002      	add	sp, #8
 8006ede:	4770      	bx	lr
 8006ee0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ee4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ee8:	bf14      	ite	ne
 8006eea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006eee:	4623      	moveq	r3, r4
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f02:	ab21      	add	r3, sp, #132	; 0x84
 8006f04:	a902      	add	r1, sp, #8
 8006f06:	4628      	mov	r0, r5
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	f000 fa3f 	bl	800738c <_svfiprintf_r>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	bfbc      	itt	lt
 8006f12:	238b      	movlt	r3, #139	; 0x8b
 8006f14:	602b      	strlt	r3, [r5, #0]
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	d0dd      	beq.n	8006ed6 <sniprintf+0x16>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e7d9      	b.n	8006ed6 <sniprintf+0x16>
 8006f22:	bf00      	nop
 8006f24:	2000006c 	.word	0x2000006c

08006f28 <siprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b500      	push	{lr}
 8006f2c:	b09c      	sub	sp, #112	; 0x70
 8006f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f38:	4809      	ldr	r0, [pc, #36]	; (8006f60 <siprintf+0x38>)
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	9104      	str	r1, [sp, #16]
 8006f3e:	4909      	ldr	r1, [pc, #36]	; (8006f64 <siprintf+0x3c>)
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	9105      	str	r1, [sp, #20]
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	a902      	add	r1, sp, #8
 8006f4c:	f000 fa1e 	bl	800738c <_svfiprintf_r>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	b01c      	add	sp, #112	; 0x70
 8006f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f5c:	b003      	add	sp, #12
 8006f5e:	4770      	bx	lr
 8006f60:	2000006c 	.word	0x2000006c
 8006f64:	ffff0208 	.word	0xffff0208

08006f68 <__sread>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	f000 f868 	bl	8007044 <_read_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	bfab      	itete	ge
 8006f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f7c:	181b      	addge	r3, r3, r0
 8006f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f82:	bfac      	ite	ge
 8006f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f86:	81a3      	strhlt	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__swrite>:
 8006f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	461f      	mov	r7, r3
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	05db      	lsls	r3, r3, #23
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4616      	mov	r6, r2
 8006f9a:	d505      	bpl.n	8006fa8 <__swrite+0x1e>
 8006f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f000 f83c 	bl	8007020 <_lseek_r>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	f000 b853 	b.w	8007068 <_write_r>

08006fc2 <__sseek>:
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fca:	f000 f829 	bl	8007020 <_lseek_r>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	bf15      	itete	ne
 8006fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fde:	81a3      	strheq	r3, [r4, #12]
 8006fe0:	bf18      	it	ne
 8006fe2:	81a3      	strhne	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__sclose>:
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 b809 	b.w	8007000 <_close_r>

08006fee <memset>:
 8006fee:	4402      	add	r2, r0
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d100      	bne.n	8006ff8 <memset+0xa>
 8006ff6:	4770      	bx	lr
 8006ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffc:	e7f9      	b.n	8006ff2 <memset+0x4>
	...

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa fb5b 	bl	80016c6 <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000aa8 	.word	0x20000aa8

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	; (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fa fb70 	bl	8001714 <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000aa8 	.word	0x20000aa8

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	; (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fa fb1a 	bl	800168c <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000aa8 	.word	0x20000aa8

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	; (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7f9 fbb6 	bl	80007e8 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000aa8 	.word	0x20000aa8

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	; (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	2000006c 	.word	0x2000006c

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	; (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	; (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	; (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	; (80070dc <__libc_init_array+0x44>)
 80070ac:	f000 ff78 	bl	8007fa0 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08008128 	.word	0x08008128
 80070d4:	08008128 	.word	0x08008128
 80070d8:	08008128 	.word	0x08008128
 80070dc:	0800812c 	.word	0x0800812c

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr
	...

080070e8 <_free_r>:
 80070e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ea:	2900      	cmp	r1, #0
 80070ec:	d044      	beq.n	8007178 <_free_r+0x90>
 80070ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f2:	9001      	str	r0, [sp, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f1a1 0404 	sub.w	r4, r1, #4
 80070fa:	bfb8      	it	lt
 80070fc:	18e4      	addlt	r4, r4, r3
 80070fe:	f000 f8df 	bl	80072c0 <__malloc_lock>
 8007102:	4a1e      	ldr	r2, [pc, #120]	; (800717c <_free_r+0x94>)
 8007104:	9801      	ldr	r0, [sp, #4]
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	b933      	cbnz	r3, 8007118 <_free_r+0x30>
 800710a:	6063      	str	r3, [r4, #4]
 800710c:	6014      	str	r4, [r2, #0]
 800710e:	b003      	add	sp, #12
 8007110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007114:	f000 b8da 	b.w	80072cc <__malloc_unlock>
 8007118:	42a3      	cmp	r3, r4
 800711a:	d908      	bls.n	800712e <_free_r+0x46>
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	1961      	adds	r1, r4, r5
 8007120:	428b      	cmp	r3, r1
 8007122:	bf01      	itttt	eq
 8007124:	6819      	ldreq	r1, [r3, #0]
 8007126:	685b      	ldreq	r3, [r3, #4]
 8007128:	1949      	addeq	r1, r1, r5
 800712a:	6021      	streq	r1, [r4, #0]
 800712c:	e7ed      	b.n	800710a <_free_r+0x22>
 800712e:	461a      	mov	r2, r3
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	b10b      	cbz	r3, 8007138 <_free_r+0x50>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d9fa      	bls.n	800712e <_free_r+0x46>
 8007138:	6811      	ldr	r1, [r2, #0]
 800713a:	1855      	adds	r5, r2, r1
 800713c:	42a5      	cmp	r5, r4
 800713e:	d10b      	bne.n	8007158 <_free_r+0x70>
 8007140:	6824      	ldr	r4, [r4, #0]
 8007142:	4421      	add	r1, r4
 8007144:	1854      	adds	r4, r2, r1
 8007146:	42a3      	cmp	r3, r4
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	d1e0      	bne.n	800710e <_free_r+0x26>
 800714c:	681c      	ldr	r4, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	6053      	str	r3, [r2, #4]
 8007152:	440c      	add	r4, r1
 8007154:	6014      	str	r4, [r2, #0]
 8007156:	e7da      	b.n	800710e <_free_r+0x26>
 8007158:	d902      	bls.n	8007160 <_free_r+0x78>
 800715a:	230c      	movs	r3, #12
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	e7d6      	b.n	800710e <_free_r+0x26>
 8007160:	6825      	ldr	r5, [r4, #0]
 8007162:	1961      	adds	r1, r4, r5
 8007164:	428b      	cmp	r3, r1
 8007166:	bf04      	itt	eq
 8007168:	6819      	ldreq	r1, [r3, #0]
 800716a:	685b      	ldreq	r3, [r3, #4]
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	bf04      	itt	eq
 8007170:	1949      	addeq	r1, r1, r5
 8007172:	6021      	streq	r1, [r4, #0]
 8007174:	6054      	str	r4, [r2, #4]
 8007176:	e7ca      	b.n	800710e <_free_r+0x26>
 8007178:	b003      	add	sp, #12
 800717a:	bd30      	pop	{r4, r5, pc}
 800717c:	20000ab0 	.word	0x20000ab0

08007180 <sbrk_aligned>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4e0e      	ldr	r6, [pc, #56]	; (80071bc <sbrk_aligned+0x3c>)
 8007184:	460c      	mov	r4, r1
 8007186:	6831      	ldr	r1, [r6, #0]
 8007188:	4605      	mov	r5, r0
 800718a:	b911      	cbnz	r1, 8007192 <sbrk_aligned+0x12>
 800718c:	f000 fe2e 	bl	8007dec <_sbrk_r>
 8007190:	6030      	str	r0, [r6, #0]
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 fe29 	bl	8007dec <_sbrk_r>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d00a      	beq.n	80071b4 <sbrk_aligned+0x34>
 800719e:	1cc4      	adds	r4, r0, #3
 80071a0:	f024 0403 	bic.w	r4, r4, #3
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d007      	beq.n	80071b8 <sbrk_aligned+0x38>
 80071a8:	1a21      	subs	r1, r4, r0
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 fe1e 	bl	8007dec <_sbrk_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d101      	bne.n	80071b8 <sbrk_aligned+0x38>
 80071b4:	f04f 34ff 	mov.w	r4, #4294967295
 80071b8:	4620      	mov	r0, r4
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	20000ab4 	.word	0x20000ab4

080071c0 <_malloc_r>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	1ccd      	adds	r5, r1, #3
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	4607      	mov	r7, r0
 80071d6:	db01      	blt.n	80071dc <_malloc_r+0x1c>
 80071d8:	42a9      	cmp	r1, r5
 80071da:	d905      	bls.n	80071e8 <_malloc_r+0x28>
 80071dc:	230c      	movs	r3, #12
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	2600      	movs	r6, #0
 80071e2:	4630      	mov	r0, r6
 80071e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072bc <_malloc_r+0xfc>
 80071ec:	f000 f868 	bl	80072c0 <__malloc_lock>
 80071f0:	f8d8 3000 	ldr.w	r3, [r8]
 80071f4:	461c      	mov	r4, r3
 80071f6:	bb5c      	cbnz	r4, 8007250 <_malloc_r+0x90>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4638      	mov	r0, r7
 80071fc:	f7ff ffc0 	bl	8007180 <sbrk_aligned>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	4604      	mov	r4, r0
 8007204:	d155      	bne.n	80072b2 <_malloc_r+0xf2>
 8007206:	f8d8 4000 	ldr.w	r4, [r8]
 800720a:	4626      	mov	r6, r4
 800720c:	2e00      	cmp	r6, #0
 800720e:	d145      	bne.n	800729c <_malloc_r+0xdc>
 8007210:	2c00      	cmp	r4, #0
 8007212:	d048      	beq.n	80072a6 <_malloc_r+0xe6>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	4631      	mov	r1, r6
 8007218:	4638      	mov	r0, r7
 800721a:	eb04 0903 	add.w	r9, r4, r3
 800721e:	f000 fde5 	bl	8007dec <_sbrk_r>
 8007222:	4581      	cmp	r9, r0
 8007224:	d13f      	bne.n	80072a6 <_malloc_r+0xe6>
 8007226:	6821      	ldr	r1, [r4, #0]
 8007228:	1a6d      	subs	r5, r5, r1
 800722a:	4629      	mov	r1, r5
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff ffa7 	bl	8007180 <sbrk_aligned>
 8007232:	3001      	adds	r0, #1
 8007234:	d037      	beq.n	80072a6 <_malloc_r+0xe6>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	442b      	add	r3, r5
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	f8d8 3000 	ldr.w	r3, [r8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d038      	beq.n	80072b6 <_malloc_r+0xf6>
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	42a2      	cmp	r2, r4
 8007248:	d12b      	bne.n	80072a2 <_malloc_r+0xe2>
 800724a:	2200      	movs	r2, #0
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e00f      	b.n	8007270 <_malloc_r+0xb0>
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	1b52      	subs	r2, r2, r5
 8007254:	d41f      	bmi.n	8007296 <_malloc_r+0xd6>
 8007256:	2a0b      	cmp	r2, #11
 8007258:	d917      	bls.n	800728a <_malloc_r+0xca>
 800725a:	1961      	adds	r1, r4, r5
 800725c:	42a3      	cmp	r3, r4
 800725e:	6025      	str	r5, [r4, #0]
 8007260:	bf18      	it	ne
 8007262:	6059      	strne	r1, [r3, #4]
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	bf08      	it	eq
 8007268:	f8c8 1000 	streq.w	r1, [r8]
 800726c:	5162      	str	r2, [r4, r5]
 800726e:	604b      	str	r3, [r1, #4]
 8007270:	4638      	mov	r0, r7
 8007272:	f104 060b 	add.w	r6, r4, #11
 8007276:	f000 f829 	bl	80072cc <__malloc_unlock>
 800727a:	f026 0607 	bic.w	r6, r6, #7
 800727e:	1d23      	adds	r3, r4, #4
 8007280:	1af2      	subs	r2, r6, r3
 8007282:	d0ae      	beq.n	80071e2 <_malloc_r+0x22>
 8007284:	1b9b      	subs	r3, r3, r6
 8007286:	50a3      	str	r3, [r4, r2]
 8007288:	e7ab      	b.n	80071e2 <_malloc_r+0x22>
 800728a:	42a3      	cmp	r3, r4
 800728c:	6862      	ldr	r2, [r4, #4]
 800728e:	d1dd      	bne.n	800724c <_malloc_r+0x8c>
 8007290:	f8c8 2000 	str.w	r2, [r8]
 8007294:	e7ec      	b.n	8007270 <_malloc_r+0xb0>
 8007296:	4623      	mov	r3, r4
 8007298:	6864      	ldr	r4, [r4, #4]
 800729a:	e7ac      	b.n	80071f6 <_malloc_r+0x36>
 800729c:	4634      	mov	r4, r6
 800729e:	6876      	ldr	r6, [r6, #4]
 80072a0:	e7b4      	b.n	800720c <_malloc_r+0x4c>
 80072a2:	4613      	mov	r3, r2
 80072a4:	e7cc      	b.n	8007240 <_malloc_r+0x80>
 80072a6:	230c      	movs	r3, #12
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	4638      	mov	r0, r7
 80072ac:	f000 f80e 	bl	80072cc <__malloc_unlock>
 80072b0:	e797      	b.n	80071e2 <_malloc_r+0x22>
 80072b2:	6025      	str	r5, [r4, #0]
 80072b4:	e7dc      	b.n	8007270 <_malloc_r+0xb0>
 80072b6:	605b      	str	r3, [r3, #4]
 80072b8:	deff      	udf	#255	; 0xff
 80072ba:	bf00      	nop
 80072bc:	20000ab0 	.word	0x20000ab0

080072c0 <__malloc_lock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__malloc_lock+0x8>)
 80072c2:	f7ff bf0e 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	20000aac 	.word	0x20000aac

080072cc <__malloc_unlock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__malloc_unlock+0x8>)
 80072ce:	f7ff bf09 	b.w	80070e4 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000aac 	.word	0x20000aac

080072d8 <__ssputs_r>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	688e      	ldr	r6, [r1, #8]
 80072de:	461f      	mov	r7, r3
 80072e0:	42be      	cmp	r6, r7
 80072e2:	680b      	ldr	r3, [r1, #0]
 80072e4:	4682      	mov	sl, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	4690      	mov	r8, r2
 80072ea:	d82c      	bhi.n	8007346 <__ssputs_r+0x6e>
 80072ec:	898a      	ldrh	r2, [r1, #12]
 80072ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072f2:	d026      	beq.n	8007342 <__ssputs_r+0x6a>
 80072f4:	6965      	ldr	r5, [r4, #20]
 80072f6:	6909      	ldr	r1, [r1, #16]
 80072f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072fc:	eba3 0901 	sub.w	r9, r3, r1
 8007300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007304:	1c7b      	adds	r3, r7, #1
 8007306:	444b      	add	r3, r9
 8007308:	106d      	asrs	r5, r5, #1
 800730a:	429d      	cmp	r5, r3
 800730c:	bf38      	it	cc
 800730e:	461d      	movcc	r5, r3
 8007310:	0553      	lsls	r3, r2, #21
 8007312:	d527      	bpl.n	8007364 <__ssputs_r+0x8c>
 8007314:	4629      	mov	r1, r5
 8007316:	f7ff ff53 	bl	80071c0 <_malloc_r>
 800731a:	4606      	mov	r6, r0
 800731c:	b360      	cbz	r0, 8007378 <__ssputs_r+0xa0>
 800731e:	6921      	ldr	r1, [r4, #16]
 8007320:	464a      	mov	r2, r9
 8007322:	f000 fd73 	bl	8007e0c <memcpy>
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800732c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	6126      	str	r6, [r4, #16]
 8007334:	6165      	str	r5, [r4, #20]
 8007336:	444e      	add	r6, r9
 8007338:	eba5 0509 	sub.w	r5, r5, r9
 800733c:	6026      	str	r6, [r4, #0]
 800733e:	60a5      	str	r5, [r4, #8]
 8007340:	463e      	mov	r6, r7
 8007342:	42be      	cmp	r6, r7
 8007344:	d900      	bls.n	8007348 <__ssputs_r+0x70>
 8007346:	463e      	mov	r6, r7
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	4632      	mov	r2, r6
 800734c:	4641      	mov	r1, r8
 800734e:	f000 fd33 	bl	8007db8 <memmove>
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	1b9b      	subs	r3, r3, r6
 8007356:	60a3      	str	r3, [r4, #8]
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	4433      	add	r3, r6
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	2000      	movs	r0, #0
 8007360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007364:	462a      	mov	r2, r5
 8007366:	f000 fd5f 	bl	8007e28 <_realloc_r>
 800736a:	4606      	mov	r6, r0
 800736c:	2800      	cmp	r0, #0
 800736e:	d1e0      	bne.n	8007332 <__ssputs_r+0x5a>
 8007370:	6921      	ldr	r1, [r4, #16]
 8007372:	4650      	mov	r0, sl
 8007374:	f7ff feb8 	bl	80070e8 <_free_r>
 8007378:	230c      	movs	r3, #12
 800737a:	f8ca 3000 	str.w	r3, [sl]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	e7e9      	b.n	8007360 <__ssputs_r+0x88>

0800738c <_svfiprintf_r>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	4698      	mov	r8, r3
 8007392:	898b      	ldrh	r3, [r1, #12]
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	b09d      	sub	sp, #116	; 0x74
 8007398:	4607      	mov	r7, r0
 800739a:	460d      	mov	r5, r1
 800739c:	4614      	mov	r4, r2
 800739e:	d50e      	bpl.n	80073be <_svfiprintf_r+0x32>
 80073a0:	690b      	ldr	r3, [r1, #16]
 80073a2:	b963      	cbnz	r3, 80073be <_svfiprintf_r+0x32>
 80073a4:	2140      	movs	r1, #64	; 0x40
 80073a6:	f7ff ff0b 	bl	80071c0 <_malloc_r>
 80073aa:	6028      	str	r0, [r5, #0]
 80073ac:	6128      	str	r0, [r5, #16]
 80073ae:	b920      	cbnz	r0, 80073ba <_svfiprintf_r+0x2e>
 80073b0:	230c      	movs	r3, #12
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e0d0      	b.n	800755c <_svfiprintf_r+0x1d0>
 80073ba:	2340      	movs	r3, #64	; 0x40
 80073bc:	616b      	str	r3, [r5, #20]
 80073be:	2300      	movs	r3, #0
 80073c0:	9309      	str	r3, [sp, #36]	; 0x24
 80073c2:	2320      	movs	r3, #32
 80073c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80073cc:	2330      	movs	r3, #48	; 0x30
 80073ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007574 <_svfiprintf_r+0x1e8>
 80073d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073d6:	f04f 0901 	mov.w	r9, #1
 80073da:	4623      	mov	r3, r4
 80073dc:	469a      	mov	sl, r3
 80073de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073e2:	b10a      	cbz	r2, 80073e8 <_svfiprintf_r+0x5c>
 80073e4:	2a25      	cmp	r2, #37	; 0x25
 80073e6:	d1f9      	bne.n	80073dc <_svfiprintf_r+0x50>
 80073e8:	ebba 0b04 	subs.w	fp, sl, r4
 80073ec:	d00b      	beq.n	8007406 <_svfiprintf_r+0x7a>
 80073ee:	465b      	mov	r3, fp
 80073f0:	4622      	mov	r2, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	4638      	mov	r0, r7
 80073f6:	f7ff ff6f 	bl	80072d8 <__ssputs_r>
 80073fa:	3001      	adds	r0, #1
 80073fc:	f000 80a9 	beq.w	8007552 <_svfiprintf_r+0x1c6>
 8007400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007402:	445a      	add	r2, fp
 8007404:	9209      	str	r2, [sp, #36]	; 0x24
 8007406:	f89a 3000 	ldrb.w	r3, [sl]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80a1 	beq.w	8007552 <_svfiprintf_r+0x1c6>
 8007410:	2300      	movs	r3, #0
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800741a:	f10a 0a01 	add.w	sl, sl, #1
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	9307      	str	r3, [sp, #28]
 8007422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007426:	931a      	str	r3, [sp, #104]	; 0x68
 8007428:	4654      	mov	r4, sl
 800742a:	2205      	movs	r2, #5
 800742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007430:	4850      	ldr	r0, [pc, #320]	; (8007574 <_svfiprintf_r+0x1e8>)
 8007432:	f7f8 fee5 	bl	8000200 <memchr>
 8007436:	9a04      	ldr	r2, [sp, #16]
 8007438:	b9d8      	cbnz	r0, 8007472 <_svfiprintf_r+0xe6>
 800743a:	06d0      	lsls	r0, r2, #27
 800743c:	bf44      	itt	mi
 800743e:	2320      	movmi	r3, #32
 8007440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007444:	0711      	lsls	r1, r2, #28
 8007446:	bf44      	itt	mi
 8007448:	232b      	movmi	r3, #43	; 0x2b
 800744a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800744e:	f89a 3000 	ldrb.w	r3, [sl]
 8007452:	2b2a      	cmp	r3, #42	; 0x2a
 8007454:	d015      	beq.n	8007482 <_svfiprintf_r+0xf6>
 8007456:	9a07      	ldr	r2, [sp, #28]
 8007458:	4654      	mov	r4, sl
 800745a:	2000      	movs	r0, #0
 800745c:	f04f 0c0a 	mov.w	ip, #10
 8007460:	4621      	mov	r1, r4
 8007462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007466:	3b30      	subs	r3, #48	; 0x30
 8007468:	2b09      	cmp	r3, #9
 800746a:	d94d      	bls.n	8007508 <_svfiprintf_r+0x17c>
 800746c:	b1b0      	cbz	r0, 800749c <_svfiprintf_r+0x110>
 800746e:	9207      	str	r2, [sp, #28]
 8007470:	e014      	b.n	800749c <_svfiprintf_r+0x110>
 8007472:	eba0 0308 	sub.w	r3, r0, r8
 8007476:	fa09 f303 	lsl.w	r3, r9, r3
 800747a:	4313      	orrs	r3, r2
 800747c:	9304      	str	r3, [sp, #16]
 800747e:	46a2      	mov	sl, r4
 8007480:	e7d2      	b.n	8007428 <_svfiprintf_r+0x9c>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	1d19      	adds	r1, r3, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	9103      	str	r1, [sp, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfbb      	ittet	lt
 800748e:	425b      	neglt	r3, r3
 8007490:	f042 0202 	orrlt.w	r2, r2, #2
 8007494:	9307      	strge	r3, [sp, #28]
 8007496:	9307      	strlt	r3, [sp, #28]
 8007498:	bfb8      	it	lt
 800749a:	9204      	strlt	r2, [sp, #16]
 800749c:	7823      	ldrb	r3, [r4, #0]
 800749e:	2b2e      	cmp	r3, #46	; 0x2e
 80074a0:	d10c      	bne.n	80074bc <_svfiprintf_r+0x130>
 80074a2:	7863      	ldrb	r3, [r4, #1]
 80074a4:	2b2a      	cmp	r3, #42	; 0x2a
 80074a6:	d134      	bne.n	8007512 <_svfiprintf_r+0x186>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	9203      	str	r2, [sp, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfb8      	it	lt
 80074b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074b8:	3402      	adds	r4, #2
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007584 <_svfiprintf_r+0x1f8>
 80074c0:	7821      	ldrb	r1, [r4, #0]
 80074c2:	2203      	movs	r2, #3
 80074c4:	4650      	mov	r0, sl
 80074c6:	f7f8 fe9b 	bl	8000200 <memchr>
 80074ca:	b138      	cbz	r0, 80074dc <_svfiprintf_r+0x150>
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	eba0 000a 	sub.w	r0, r0, sl
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	4082      	lsls	r2, r0
 80074d6:	4313      	orrs	r3, r2
 80074d8:	3401      	adds	r4, #1
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e0:	4825      	ldr	r0, [pc, #148]	; (8007578 <_svfiprintf_r+0x1ec>)
 80074e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074e6:	2206      	movs	r2, #6
 80074e8:	f7f8 fe8a 	bl	8000200 <memchr>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d038      	beq.n	8007562 <_svfiprintf_r+0x1d6>
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <_svfiprintf_r+0x1f0>)
 80074f2:	bb1b      	cbnz	r3, 800753c <_svfiprintf_r+0x1b0>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	3307      	adds	r3, #7
 80074f8:	f023 0307 	bic.w	r3, r3, #7
 80074fc:	3308      	adds	r3, #8
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	4433      	add	r3, r6
 8007504:	9309      	str	r3, [sp, #36]	; 0x24
 8007506:	e768      	b.n	80073da <_svfiprintf_r+0x4e>
 8007508:	fb0c 3202 	mla	r2, ip, r2, r3
 800750c:	460c      	mov	r4, r1
 800750e:	2001      	movs	r0, #1
 8007510:	e7a6      	b.n	8007460 <_svfiprintf_r+0xd4>
 8007512:	2300      	movs	r3, #0
 8007514:	3401      	adds	r4, #1
 8007516:	9305      	str	r3, [sp, #20]
 8007518:	4619      	mov	r1, r3
 800751a:	f04f 0c0a 	mov.w	ip, #10
 800751e:	4620      	mov	r0, r4
 8007520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007524:	3a30      	subs	r2, #48	; 0x30
 8007526:	2a09      	cmp	r2, #9
 8007528:	d903      	bls.n	8007532 <_svfiprintf_r+0x1a6>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0c6      	beq.n	80074bc <_svfiprintf_r+0x130>
 800752e:	9105      	str	r1, [sp, #20]
 8007530:	e7c4      	b.n	80074bc <_svfiprintf_r+0x130>
 8007532:	fb0c 2101 	mla	r1, ip, r1, r2
 8007536:	4604      	mov	r4, r0
 8007538:	2301      	movs	r3, #1
 800753a:	e7f0      	b.n	800751e <_svfiprintf_r+0x192>
 800753c:	ab03      	add	r3, sp, #12
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	462a      	mov	r2, r5
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <_svfiprintf_r+0x1f4>)
 8007544:	a904      	add	r1, sp, #16
 8007546:	4638      	mov	r0, r7
 8007548:	f3af 8000 	nop.w
 800754c:	1c42      	adds	r2, r0, #1
 800754e:	4606      	mov	r6, r0
 8007550:	d1d6      	bne.n	8007500 <_svfiprintf_r+0x174>
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	065b      	lsls	r3, r3, #25
 8007556:	f53f af2d 	bmi.w	80073b4 <_svfiprintf_r+0x28>
 800755a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800755c:	b01d      	add	sp, #116	; 0x74
 800755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007562:	ab03      	add	r3, sp, #12
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	462a      	mov	r2, r5
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <_svfiprintf_r+0x1f4>)
 800756a:	a904      	add	r1, sp, #16
 800756c:	4638      	mov	r0, r7
 800756e:	f000 f9bd 	bl	80078ec <_printf_i>
 8007572:	e7eb      	b.n	800754c <_svfiprintf_r+0x1c0>
 8007574:	080080ec 	.word	0x080080ec
 8007578:	080080f6 	.word	0x080080f6
 800757c:	00000000 	.word	0x00000000
 8007580:	080072d9 	.word	0x080072d9
 8007584:	080080f2 	.word	0x080080f2

08007588 <__sfputc_r>:
 8007588:	6893      	ldr	r3, [r2, #8]
 800758a:	3b01      	subs	r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	b410      	push	{r4}
 8007590:	6093      	str	r3, [r2, #8]
 8007592:	da08      	bge.n	80075a6 <__sfputc_r+0x1e>
 8007594:	6994      	ldr	r4, [r2, #24]
 8007596:	42a3      	cmp	r3, r4
 8007598:	db01      	blt.n	800759e <__sfputc_r+0x16>
 800759a:	290a      	cmp	r1, #10
 800759c:	d103      	bne.n	80075a6 <__sfputc_r+0x1e>
 800759e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a2:	f000 bb73 	b.w	8007c8c <__swbuf_r>
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	1c58      	adds	r0, r3, #1
 80075aa:	6010      	str	r0, [r2, #0]
 80075ac:	7019      	strb	r1, [r3, #0]
 80075ae:	4608      	mov	r0, r1
 80075b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <__sfputs_r>:
 80075b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b8:	4606      	mov	r6, r0
 80075ba:	460f      	mov	r7, r1
 80075bc:	4614      	mov	r4, r2
 80075be:	18d5      	adds	r5, r2, r3
 80075c0:	42ac      	cmp	r4, r5
 80075c2:	d101      	bne.n	80075c8 <__sfputs_r+0x12>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e007      	b.n	80075d8 <__sfputs_r+0x22>
 80075c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075cc:	463a      	mov	r2, r7
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ffda 	bl	8007588 <__sfputc_r>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d1f3      	bne.n	80075c0 <__sfputs_r+0xa>
 80075d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075dc <_vfiprintf_r>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460d      	mov	r5, r1
 80075e2:	b09d      	sub	sp, #116	; 0x74
 80075e4:	4614      	mov	r4, r2
 80075e6:	4698      	mov	r8, r3
 80075e8:	4606      	mov	r6, r0
 80075ea:	b118      	cbz	r0, 80075f4 <_vfiprintf_r+0x18>
 80075ec:	6a03      	ldr	r3, [r0, #32]
 80075ee:	b90b      	cbnz	r3, 80075f4 <_vfiprintf_r+0x18>
 80075f0:	f7ff fc1e 	bl	8006e30 <__sinit>
 80075f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_vfiprintf_r+0x2a>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_vfiprintf_r+0x2a>
 8007600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007602:	f7ff fd6e 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	d501      	bpl.n	8007610 <_vfiprintf_r+0x34>
 800760c:	692b      	ldr	r3, [r5, #16]
 800760e:	b99b      	cbnz	r3, 8007638 <_vfiprintf_r+0x5c>
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f000 fb78 	bl	8007d08 <__swsetup_r>
 8007618:	b170      	cbz	r0, 8007638 <_vfiprintf_r+0x5c>
 800761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761c:	07dc      	lsls	r4, r3, #31
 800761e:	d504      	bpl.n	800762a <_vfiprintf_r+0x4e>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	0598      	lsls	r0, r3, #22
 800762e:	d4f7      	bmi.n	8007620 <_vfiprintf_r+0x44>
 8007630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007632:	f7ff fd57 	bl	80070e4 <__retarget_lock_release_recursive>
 8007636:	e7f3      	b.n	8007620 <_vfiprintf_r+0x44>
 8007638:	2300      	movs	r3, #0
 800763a:	9309      	str	r3, [sp, #36]	; 0x24
 800763c:	2320      	movs	r3, #32
 800763e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007642:	f8cd 800c 	str.w	r8, [sp, #12]
 8007646:	2330      	movs	r3, #48	; 0x30
 8007648:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80077fc <_vfiprintf_r+0x220>
 800764c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007650:	f04f 0901 	mov.w	r9, #1
 8007654:	4623      	mov	r3, r4
 8007656:	469a      	mov	sl, r3
 8007658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765c:	b10a      	cbz	r2, 8007662 <_vfiprintf_r+0x86>
 800765e:	2a25      	cmp	r2, #37	; 0x25
 8007660:	d1f9      	bne.n	8007656 <_vfiprintf_r+0x7a>
 8007662:	ebba 0b04 	subs.w	fp, sl, r4
 8007666:	d00b      	beq.n	8007680 <_vfiprintf_r+0xa4>
 8007668:	465b      	mov	r3, fp
 800766a:	4622      	mov	r2, r4
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff ffa1 	bl	80075b6 <__sfputs_r>
 8007674:	3001      	adds	r0, #1
 8007676:	f000 80a9 	beq.w	80077cc <_vfiprintf_r+0x1f0>
 800767a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767c:	445a      	add	r2, fp
 800767e:	9209      	str	r2, [sp, #36]	; 0x24
 8007680:	f89a 3000 	ldrb.w	r3, [sl]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80a1 	beq.w	80077cc <_vfiprintf_r+0x1f0>
 800768a:	2300      	movs	r3, #0
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007694:	f10a 0a01 	add.w	sl, sl, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a0:	931a      	str	r3, [sp, #104]	; 0x68
 80076a2:	4654      	mov	r4, sl
 80076a4:	2205      	movs	r2, #5
 80076a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076aa:	4854      	ldr	r0, [pc, #336]	; (80077fc <_vfiprintf_r+0x220>)
 80076ac:	f7f8 fda8 	bl	8000200 <memchr>
 80076b0:	9a04      	ldr	r2, [sp, #16]
 80076b2:	b9d8      	cbnz	r0, 80076ec <_vfiprintf_r+0x110>
 80076b4:	06d1      	lsls	r1, r2, #27
 80076b6:	bf44      	itt	mi
 80076b8:	2320      	movmi	r3, #32
 80076ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076be:	0713      	lsls	r3, r2, #28
 80076c0:	bf44      	itt	mi
 80076c2:	232b      	movmi	r3, #43	; 0x2b
 80076c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c8:	f89a 3000 	ldrb.w	r3, [sl]
 80076cc:	2b2a      	cmp	r3, #42	; 0x2a
 80076ce:	d015      	beq.n	80076fc <_vfiprintf_r+0x120>
 80076d0:	9a07      	ldr	r2, [sp, #28]
 80076d2:	4654      	mov	r4, sl
 80076d4:	2000      	movs	r0, #0
 80076d6:	f04f 0c0a 	mov.w	ip, #10
 80076da:	4621      	mov	r1, r4
 80076dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e0:	3b30      	subs	r3, #48	; 0x30
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d94d      	bls.n	8007782 <_vfiprintf_r+0x1a6>
 80076e6:	b1b0      	cbz	r0, 8007716 <_vfiprintf_r+0x13a>
 80076e8:	9207      	str	r2, [sp, #28]
 80076ea:	e014      	b.n	8007716 <_vfiprintf_r+0x13a>
 80076ec:	eba0 0308 	sub.w	r3, r0, r8
 80076f0:	fa09 f303 	lsl.w	r3, r9, r3
 80076f4:	4313      	orrs	r3, r2
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	46a2      	mov	sl, r4
 80076fa:	e7d2      	b.n	80076a2 <_vfiprintf_r+0xc6>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	1d19      	adds	r1, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	9103      	str	r1, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfbb      	ittet	lt
 8007708:	425b      	neglt	r3, r3
 800770a:	f042 0202 	orrlt.w	r2, r2, #2
 800770e:	9307      	strge	r3, [sp, #28]
 8007710:	9307      	strlt	r3, [sp, #28]
 8007712:	bfb8      	it	lt
 8007714:	9204      	strlt	r2, [sp, #16]
 8007716:	7823      	ldrb	r3, [r4, #0]
 8007718:	2b2e      	cmp	r3, #46	; 0x2e
 800771a:	d10c      	bne.n	8007736 <_vfiprintf_r+0x15a>
 800771c:	7863      	ldrb	r3, [r4, #1]
 800771e:	2b2a      	cmp	r3, #42	; 0x2a
 8007720:	d134      	bne.n	800778c <_vfiprintf_r+0x1b0>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	9203      	str	r2, [sp, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	bfb8      	it	lt
 800772e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007732:	3402      	adds	r4, #2
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800780c <_vfiprintf_r+0x230>
 800773a:	7821      	ldrb	r1, [r4, #0]
 800773c:	2203      	movs	r2, #3
 800773e:	4650      	mov	r0, sl
 8007740:	f7f8 fd5e 	bl	8000200 <memchr>
 8007744:	b138      	cbz	r0, 8007756 <_vfiprintf_r+0x17a>
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	eba0 000a 	sub.w	r0, r0, sl
 800774c:	2240      	movs	r2, #64	; 0x40
 800774e:	4082      	lsls	r2, r0
 8007750:	4313      	orrs	r3, r2
 8007752:	3401      	adds	r4, #1
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775a:	4829      	ldr	r0, [pc, #164]	; (8007800 <_vfiprintf_r+0x224>)
 800775c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007760:	2206      	movs	r2, #6
 8007762:	f7f8 fd4d 	bl	8000200 <memchr>
 8007766:	2800      	cmp	r0, #0
 8007768:	d03f      	beq.n	80077ea <_vfiprintf_r+0x20e>
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <_vfiprintf_r+0x228>)
 800776c:	bb1b      	cbnz	r3, 80077b6 <_vfiprintf_r+0x1da>
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	3307      	adds	r3, #7
 8007772:	f023 0307 	bic.w	r3, r3, #7
 8007776:	3308      	adds	r3, #8
 8007778:	9303      	str	r3, [sp, #12]
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	443b      	add	r3, r7
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	e768      	b.n	8007654 <_vfiprintf_r+0x78>
 8007782:	fb0c 3202 	mla	r2, ip, r2, r3
 8007786:	460c      	mov	r4, r1
 8007788:	2001      	movs	r0, #1
 800778a:	e7a6      	b.n	80076da <_vfiprintf_r+0xfe>
 800778c:	2300      	movs	r3, #0
 800778e:	3401      	adds	r4, #1
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	4619      	mov	r1, r3
 8007794:	f04f 0c0a 	mov.w	ip, #10
 8007798:	4620      	mov	r0, r4
 800779a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779e:	3a30      	subs	r2, #48	; 0x30
 80077a0:	2a09      	cmp	r2, #9
 80077a2:	d903      	bls.n	80077ac <_vfiprintf_r+0x1d0>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0c6      	beq.n	8007736 <_vfiprintf_r+0x15a>
 80077a8:	9105      	str	r1, [sp, #20]
 80077aa:	e7c4      	b.n	8007736 <_vfiprintf_r+0x15a>
 80077ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80077b0:	4604      	mov	r4, r0
 80077b2:	2301      	movs	r3, #1
 80077b4:	e7f0      	b.n	8007798 <_vfiprintf_r+0x1bc>
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	462a      	mov	r2, r5
 80077bc:	4b12      	ldr	r3, [pc, #72]	; (8007808 <_vfiprintf_r+0x22c>)
 80077be:	a904      	add	r1, sp, #16
 80077c0:	4630      	mov	r0, r6
 80077c2:	f3af 8000 	nop.w
 80077c6:	4607      	mov	r7, r0
 80077c8:	1c78      	adds	r0, r7, #1
 80077ca:	d1d6      	bne.n	800777a <_vfiprintf_r+0x19e>
 80077cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d405      	bmi.n	80077de <_vfiprintf_r+0x202>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d402      	bmi.n	80077de <_vfiprintf_r+0x202>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f7ff fc83 	bl	80070e4 <__retarget_lock_release_recursive>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	065b      	lsls	r3, r3, #25
 80077e2:	f53f af1d 	bmi.w	8007620 <_vfiprintf_r+0x44>
 80077e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e8:	e71c      	b.n	8007624 <_vfiprintf_r+0x48>
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462a      	mov	r2, r5
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <_vfiprintf_r+0x22c>)
 80077f2:	a904      	add	r1, sp, #16
 80077f4:	4630      	mov	r0, r6
 80077f6:	f000 f879 	bl	80078ec <_printf_i>
 80077fa:	e7e4      	b.n	80077c6 <_vfiprintf_r+0x1ea>
 80077fc:	080080ec 	.word	0x080080ec
 8007800:	080080f6 	.word	0x080080f6
 8007804:	00000000 	.word	0x00000000
 8007808:	080075b7 	.word	0x080075b7
 800780c:	080080f2 	.word	0x080080f2

08007810 <_printf_common>:
 8007810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	4616      	mov	r6, r2
 8007816:	4699      	mov	r9, r3
 8007818:	688a      	ldr	r2, [r1, #8]
 800781a:	690b      	ldr	r3, [r1, #16]
 800781c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007820:	4293      	cmp	r3, r2
 8007822:	bfb8      	it	lt
 8007824:	4613      	movlt	r3, r2
 8007826:	6033      	str	r3, [r6, #0]
 8007828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800782c:	4607      	mov	r7, r0
 800782e:	460c      	mov	r4, r1
 8007830:	b10a      	cbz	r2, 8007836 <_printf_common+0x26>
 8007832:	3301      	adds	r3, #1
 8007834:	6033      	str	r3, [r6, #0]
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	0699      	lsls	r1, r3, #26
 800783a:	bf42      	ittt	mi
 800783c:	6833      	ldrmi	r3, [r6, #0]
 800783e:	3302      	addmi	r3, #2
 8007840:	6033      	strmi	r3, [r6, #0]
 8007842:	6825      	ldr	r5, [r4, #0]
 8007844:	f015 0506 	ands.w	r5, r5, #6
 8007848:	d106      	bne.n	8007858 <_printf_common+0x48>
 800784a:	f104 0a19 	add.w	sl, r4, #25
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	6832      	ldr	r2, [r6, #0]
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	42ab      	cmp	r3, r5
 8007856:	dc26      	bgt.n	80078a6 <_printf_common+0x96>
 8007858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800785c:	1e13      	subs	r3, r2, #0
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	bf18      	it	ne
 8007862:	2301      	movne	r3, #1
 8007864:	0692      	lsls	r2, r2, #26
 8007866:	d42b      	bmi.n	80078c0 <_printf_common+0xb0>
 8007868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800786c:	4649      	mov	r1, r9
 800786e:	4638      	mov	r0, r7
 8007870:	47c0      	blx	r8
 8007872:	3001      	adds	r0, #1
 8007874:	d01e      	beq.n	80078b4 <_printf_common+0xa4>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	6922      	ldr	r2, [r4, #16]
 800787a:	f003 0306 	and.w	r3, r3, #6
 800787e:	2b04      	cmp	r3, #4
 8007880:	bf02      	ittt	eq
 8007882:	68e5      	ldreq	r5, [r4, #12]
 8007884:	6833      	ldreq	r3, [r6, #0]
 8007886:	1aed      	subeq	r5, r5, r3
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	bf0c      	ite	eq
 800788c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007890:	2500      	movne	r5, #0
 8007892:	4293      	cmp	r3, r2
 8007894:	bfc4      	itt	gt
 8007896:	1a9b      	subgt	r3, r3, r2
 8007898:	18ed      	addgt	r5, r5, r3
 800789a:	2600      	movs	r6, #0
 800789c:	341a      	adds	r4, #26
 800789e:	42b5      	cmp	r5, r6
 80078a0:	d11a      	bne.n	80078d8 <_printf_common+0xc8>
 80078a2:	2000      	movs	r0, #0
 80078a4:	e008      	b.n	80078b8 <_printf_common+0xa8>
 80078a6:	2301      	movs	r3, #1
 80078a8:	4652      	mov	r2, sl
 80078aa:	4649      	mov	r1, r9
 80078ac:	4638      	mov	r0, r7
 80078ae:	47c0      	blx	r8
 80078b0:	3001      	adds	r0, #1
 80078b2:	d103      	bne.n	80078bc <_printf_common+0xac>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078bc:	3501      	adds	r5, #1
 80078be:	e7c6      	b.n	800784e <_printf_common+0x3e>
 80078c0:	18e1      	adds	r1, r4, r3
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	2030      	movs	r0, #48	; 0x30
 80078c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ca:	4422      	add	r2, r4
 80078cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078d4:	3302      	adds	r3, #2
 80078d6:	e7c7      	b.n	8007868 <_printf_common+0x58>
 80078d8:	2301      	movs	r3, #1
 80078da:	4622      	mov	r2, r4
 80078dc:	4649      	mov	r1, r9
 80078de:	4638      	mov	r0, r7
 80078e0:	47c0      	blx	r8
 80078e2:	3001      	adds	r0, #1
 80078e4:	d0e6      	beq.n	80078b4 <_printf_common+0xa4>
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7d9      	b.n	800789e <_printf_common+0x8e>
	...

080078ec <_printf_i>:
 80078ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078f0:	7e0f      	ldrb	r7, [r1, #24]
 80078f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078f4:	2f78      	cmp	r7, #120	; 0x78
 80078f6:	4691      	mov	r9, r2
 80078f8:	4680      	mov	r8, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	469a      	mov	sl, r3
 80078fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007902:	d807      	bhi.n	8007914 <_printf_i+0x28>
 8007904:	2f62      	cmp	r7, #98	; 0x62
 8007906:	d80a      	bhi.n	800791e <_printf_i+0x32>
 8007908:	2f00      	cmp	r7, #0
 800790a:	f000 80d4 	beq.w	8007ab6 <_printf_i+0x1ca>
 800790e:	2f58      	cmp	r7, #88	; 0x58
 8007910:	f000 80c0 	beq.w	8007a94 <_printf_i+0x1a8>
 8007914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800791c:	e03a      	b.n	8007994 <_printf_i+0xa8>
 800791e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007922:	2b15      	cmp	r3, #21
 8007924:	d8f6      	bhi.n	8007914 <_printf_i+0x28>
 8007926:	a101      	add	r1, pc, #4	; (adr r1, 800792c <_printf_i+0x40>)
 8007928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800792c:	08007985 	.word	0x08007985
 8007930:	08007999 	.word	0x08007999
 8007934:	08007915 	.word	0x08007915
 8007938:	08007915 	.word	0x08007915
 800793c:	08007915 	.word	0x08007915
 8007940:	08007915 	.word	0x08007915
 8007944:	08007999 	.word	0x08007999
 8007948:	08007915 	.word	0x08007915
 800794c:	08007915 	.word	0x08007915
 8007950:	08007915 	.word	0x08007915
 8007954:	08007915 	.word	0x08007915
 8007958:	08007a9d 	.word	0x08007a9d
 800795c:	080079c5 	.word	0x080079c5
 8007960:	08007a57 	.word	0x08007a57
 8007964:	08007915 	.word	0x08007915
 8007968:	08007915 	.word	0x08007915
 800796c:	08007abf 	.word	0x08007abf
 8007970:	08007915 	.word	0x08007915
 8007974:	080079c5 	.word	0x080079c5
 8007978:	08007915 	.word	0x08007915
 800797c:	08007915 	.word	0x08007915
 8007980:	08007a5f 	.word	0x08007a5f
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	1d1a      	adds	r2, r3, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	602a      	str	r2, [r5, #0]
 800798c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007994:	2301      	movs	r3, #1
 8007996:	e09f      	b.n	8007ad8 <_printf_i+0x1ec>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	0607      	lsls	r7, r0, #24
 800799e:	f103 0104 	add.w	r1, r3, #4
 80079a2:	6029      	str	r1, [r5, #0]
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0xbe>
 80079a6:	681e      	ldr	r6, [r3, #0]
 80079a8:	e003      	b.n	80079b2 <_printf_i+0xc6>
 80079aa:	0646      	lsls	r6, r0, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0xba>
 80079ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	da03      	bge.n	80079be <_printf_i+0xd2>
 80079b6:	232d      	movs	r3, #45	; 0x2d
 80079b8:	4276      	negs	r6, r6
 80079ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079be:	485a      	ldr	r0, [pc, #360]	; (8007b28 <_printf_i+0x23c>)
 80079c0:	230a      	movs	r3, #10
 80079c2:	e012      	b.n	80079ea <_printf_i+0xfe>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	1d19      	adds	r1, r3, #4
 80079ca:	6029      	str	r1, [r5, #0]
 80079cc:	0605      	lsls	r5, r0, #24
 80079ce:	d501      	bpl.n	80079d4 <_printf_i+0xe8>
 80079d0:	681e      	ldr	r6, [r3, #0]
 80079d2:	e002      	b.n	80079da <_printf_i+0xee>
 80079d4:	0641      	lsls	r1, r0, #25
 80079d6:	d5fb      	bpl.n	80079d0 <_printf_i+0xe4>
 80079d8:	881e      	ldrh	r6, [r3, #0]
 80079da:	4853      	ldr	r0, [pc, #332]	; (8007b28 <_printf_i+0x23c>)
 80079dc:	2f6f      	cmp	r7, #111	; 0x6f
 80079de:	bf0c      	ite	eq
 80079e0:	2308      	moveq	r3, #8
 80079e2:	230a      	movne	r3, #10
 80079e4:	2100      	movs	r1, #0
 80079e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ea:	6865      	ldr	r5, [r4, #4]
 80079ec:	60a5      	str	r5, [r4, #8]
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	bfa2      	ittt	ge
 80079f2:	6821      	ldrge	r1, [r4, #0]
 80079f4:	f021 0104 	bicge.w	r1, r1, #4
 80079f8:	6021      	strge	r1, [r4, #0]
 80079fa:	b90e      	cbnz	r6, 8007a00 <_printf_i+0x114>
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	d04b      	beq.n	8007a98 <_printf_i+0x1ac>
 8007a00:	4615      	mov	r5, r2
 8007a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a06:	fb03 6711 	mls	r7, r3, r1, r6
 8007a0a:	5dc7      	ldrb	r7, [r0, r7]
 8007a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a10:	4637      	mov	r7, r6
 8007a12:	42bb      	cmp	r3, r7
 8007a14:	460e      	mov	r6, r1
 8007a16:	d9f4      	bls.n	8007a02 <_printf_i+0x116>
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d10b      	bne.n	8007a34 <_printf_i+0x148>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07de      	lsls	r6, r3, #31
 8007a20:	d508      	bpl.n	8007a34 <_printf_i+0x148>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	4299      	cmp	r1, r3
 8007a28:	bfde      	ittt	le
 8007a2a:	2330      	movle	r3, #48	; 0x30
 8007a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a34:	1b52      	subs	r2, r2, r5
 8007a36:	6122      	str	r2, [r4, #16]
 8007a38:	f8cd a000 	str.w	sl, [sp]
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	aa03      	add	r2, sp, #12
 8007a40:	4621      	mov	r1, r4
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7ff fee4 	bl	8007810 <_printf_common>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d14a      	bne.n	8007ae2 <_printf_i+0x1f6>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	b004      	add	sp, #16
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	f043 0320 	orr.w	r3, r3, #32
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	4833      	ldr	r0, [pc, #204]	; (8007b2c <_printf_i+0x240>)
 8007a60:	2778      	movs	r7, #120	; 0x78
 8007a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	6829      	ldr	r1, [r5, #0]
 8007a6a:	061f      	lsls	r7, r3, #24
 8007a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a70:	d402      	bmi.n	8007a78 <_printf_i+0x18c>
 8007a72:	065f      	lsls	r7, r3, #25
 8007a74:	bf48      	it	mi
 8007a76:	b2b6      	uxthmi	r6, r6
 8007a78:	07df      	lsls	r7, r3, #31
 8007a7a:	bf48      	it	mi
 8007a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007a80:	6029      	str	r1, [r5, #0]
 8007a82:	bf48      	it	mi
 8007a84:	6023      	strmi	r3, [r4, #0]
 8007a86:	b91e      	cbnz	r6, 8007a90 <_printf_i+0x1a4>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	f023 0320 	bic.w	r3, r3, #32
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	2310      	movs	r3, #16
 8007a92:	e7a7      	b.n	80079e4 <_printf_i+0xf8>
 8007a94:	4824      	ldr	r0, [pc, #144]	; (8007b28 <_printf_i+0x23c>)
 8007a96:	e7e4      	b.n	8007a62 <_printf_i+0x176>
 8007a98:	4615      	mov	r5, r2
 8007a9a:	e7bd      	b.n	8007a18 <_printf_i+0x12c>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	6826      	ldr	r6, [r4, #0]
 8007aa0:	6961      	ldr	r1, [r4, #20]
 8007aa2:	1d18      	adds	r0, r3, #4
 8007aa4:	6028      	str	r0, [r5, #0]
 8007aa6:	0635      	lsls	r5, r6, #24
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	d501      	bpl.n	8007ab0 <_printf_i+0x1c4>
 8007aac:	6019      	str	r1, [r3, #0]
 8007aae:	e002      	b.n	8007ab6 <_printf_i+0x1ca>
 8007ab0:	0670      	lsls	r0, r6, #25
 8007ab2:	d5fb      	bpl.n	8007aac <_printf_i+0x1c0>
 8007ab4:	8019      	strh	r1, [r3, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	4615      	mov	r5, r2
 8007abc:	e7bc      	b.n	8007a38 <_printf_i+0x14c>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	1d1a      	adds	r2, r3, #4
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	6862      	ldr	r2, [r4, #4]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4628      	mov	r0, r5
 8007acc:	f7f8 fb98 	bl	8000200 <memchr>
 8007ad0:	b108      	cbz	r0, 8007ad6 <_printf_i+0x1ea>
 8007ad2:	1b40      	subs	r0, r0, r5
 8007ad4:	6060      	str	r0, [r4, #4]
 8007ad6:	6863      	ldr	r3, [r4, #4]
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	2300      	movs	r3, #0
 8007adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae0:	e7aa      	b.n	8007a38 <_printf_i+0x14c>
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	462a      	mov	r2, r5
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	47d0      	blx	sl
 8007aec:	3001      	adds	r0, #1
 8007aee:	d0ad      	beq.n	8007a4c <_printf_i+0x160>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	079b      	lsls	r3, r3, #30
 8007af4:	d413      	bmi.n	8007b1e <_printf_i+0x232>
 8007af6:	68e0      	ldr	r0, [r4, #12]
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	4298      	cmp	r0, r3
 8007afc:	bfb8      	it	lt
 8007afe:	4618      	movlt	r0, r3
 8007b00:	e7a6      	b.n	8007a50 <_printf_i+0x164>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4632      	mov	r2, r6
 8007b06:	4649      	mov	r1, r9
 8007b08:	4640      	mov	r0, r8
 8007b0a:	47d0      	blx	sl
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d09d      	beq.n	8007a4c <_printf_i+0x160>
 8007b10:	3501      	adds	r5, #1
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	9903      	ldr	r1, [sp, #12]
 8007b16:	1a5b      	subs	r3, r3, r1
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dcf2      	bgt.n	8007b02 <_printf_i+0x216>
 8007b1c:	e7eb      	b.n	8007af6 <_printf_i+0x20a>
 8007b1e:	2500      	movs	r5, #0
 8007b20:	f104 0619 	add.w	r6, r4, #25
 8007b24:	e7f5      	b.n	8007b12 <_printf_i+0x226>
 8007b26:	bf00      	nop
 8007b28:	080080fd 	.word	0x080080fd
 8007b2c:	0800810e 	.word	0x0800810e

08007b30 <__sflush_r>:
 8007b30:	898a      	ldrh	r2, [r1, #12]
 8007b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	0710      	lsls	r0, r2, #28
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	d458      	bmi.n	8007bf0 <__sflush_r+0xc0>
 8007b3e:	684b      	ldr	r3, [r1, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dc05      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dc02      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d0f9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b5c:	682f      	ldr	r7, [r5, #0]
 8007b5e:	6a21      	ldr	r1, [r4, #32]
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	d032      	beq.n	8007bca <__sflush_r+0x9a>
 8007b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	075a      	lsls	r2, r3, #29
 8007b6a:	d505      	bpl.n	8007b78 <__sflush_r+0x48>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	1ac0      	subs	r0, r0, r3
 8007b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b72:	b10b      	cbz	r3, 8007b78 <__sflush_r+0x48>
 8007b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b76:	1ac0      	subs	r0, r0, r3
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b0      	blx	r6
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	d106      	bne.n	8007b98 <__sflush_r+0x68>
 8007b8a:	6829      	ldr	r1, [r5, #0]
 8007b8c:	291d      	cmp	r1, #29
 8007b8e:	d82b      	bhi.n	8007be8 <__sflush_r+0xb8>
 8007b90:	4a29      	ldr	r2, [pc, #164]	; (8007c38 <__sflush_r+0x108>)
 8007b92:	410a      	asrs	r2, r1
 8007b94:	07d6      	lsls	r6, r2, #31
 8007b96:	d427      	bmi.n	8007be8 <__sflush_r+0xb8>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6062      	str	r2, [r4, #4]
 8007b9c:	04d9      	lsls	r1, r3, #19
 8007b9e:	6922      	ldr	r2, [r4, #16]
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	d504      	bpl.n	8007bae <__sflush_r+0x7e>
 8007ba4:	1c42      	adds	r2, r0, #1
 8007ba6:	d101      	bne.n	8007bac <__sflush_r+0x7c>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b903      	cbnz	r3, 8007bae <__sflush_r+0x7e>
 8007bac:	6560      	str	r0, [r4, #84]	; 0x54
 8007bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb0:	602f      	str	r7, [r5, #0]
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d0c9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	d002      	beq.n	8007bc4 <__sflush_r+0x94>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f7ff fa92 	bl	80070e8 <_free_r>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8007bc8:	e7c0      	b.n	8007b4c <__sflush_r+0x1c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	1c41      	adds	r1, r0, #1
 8007bd2:	d1c8      	bne.n	8007b66 <__sflush_r+0x36>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0c5      	beq.n	8007b66 <__sflush_r+0x36>
 8007bda:	2b1d      	cmp	r3, #29
 8007bdc:	d001      	beq.n	8007be2 <__sflush_r+0xb2>
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d101      	bne.n	8007be6 <__sflush_r+0xb6>
 8007be2:	602f      	str	r7, [r5, #0]
 8007be4:	e7b1      	b.n	8007b4a <__sflush_r+0x1a>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7ad      	b.n	8007b4c <__sflush_r+0x1c>
 8007bf0:	690f      	ldr	r7, [r1, #16]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d0a9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bf6:	0793      	lsls	r3, r2, #30
 8007bf8:	680e      	ldr	r6, [r1, #0]
 8007bfa:	bf08      	it	eq
 8007bfc:	694b      	ldreq	r3, [r1, #20]
 8007bfe:	600f      	str	r7, [r1, #0]
 8007c00:	bf18      	it	ne
 8007c02:	2300      	movne	r3, #0
 8007c04:	eba6 0807 	sub.w	r8, r6, r7
 8007c08:	608b      	str	r3, [r1, #8]
 8007c0a:	f1b8 0f00 	cmp.w	r8, #0
 8007c0e:	dd9c      	ble.n	8007b4a <__sflush_r+0x1a>
 8007c10:	6a21      	ldr	r1, [r4, #32]
 8007c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c14:	4643      	mov	r3, r8
 8007c16:	463a      	mov	r2, r7
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b0      	blx	r6
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dc06      	bgt.n	8007c2e <__sflush_r+0xfe>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e78e      	b.n	8007b4c <__sflush_r+0x1c>
 8007c2e:	4407      	add	r7, r0
 8007c30:	eba8 0800 	sub.w	r8, r8, r0
 8007c34:	e7e9      	b.n	8007c0a <__sflush_r+0xda>
 8007c36:	bf00      	nop
 8007c38:	dfbffffe 	.word	0xdfbffffe

08007c3c <_fflush_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b913      	cbnz	r3, 8007c4c <_fflush_r+0x10>
 8007c46:	2500      	movs	r5, #0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	b118      	cbz	r0, 8007c56 <_fflush_r+0x1a>
 8007c4e:	6a03      	ldr	r3, [r0, #32]
 8007c50:	b90b      	cbnz	r3, 8007c56 <_fflush_r+0x1a>
 8007c52:	f7ff f8ed 	bl	8006e30 <__sinit>
 8007c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f3      	beq.n	8007c46 <_fflush_r+0xa>
 8007c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c60:	07d0      	lsls	r0, r2, #31
 8007c62:	d404      	bmi.n	8007c6e <_fflush_r+0x32>
 8007c64:	0599      	lsls	r1, r3, #22
 8007c66:	d402      	bmi.n	8007c6e <_fflush_r+0x32>
 8007c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6a:	f7ff fa3a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	4621      	mov	r1, r4
 8007c72:	f7ff ff5d 	bl	8007b30 <__sflush_r>
 8007c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c78:	07da      	lsls	r2, r3, #31
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	d4e4      	bmi.n	8007c48 <_fflush_r+0xc>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	059b      	lsls	r3, r3, #22
 8007c82:	d4e1      	bmi.n	8007c48 <_fflush_r+0xc>
 8007c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c86:	f7ff fa2d 	bl	80070e4 <__retarget_lock_release_recursive>
 8007c8a:	e7dd      	b.n	8007c48 <_fflush_r+0xc>

08007c8c <__swbuf_r>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	460e      	mov	r6, r1
 8007c90:	4614      	mov	r4, r2
 8007c92:	4605      	mov	r5, r0
 8007c94:	b118      	cbz	r0, 8007c9e <__swbuf_r+0x12>
 8007c96:	6a03      	ldr	r3, [r0, #32]
 8007c98:	b90b      	cbnz	r3, 8007c9e <__swbuf_r+0x12>
 8007c9a:	f7ff f8c9 	bl	8006e30 <__sinit>
 8007c9e:	69a3      	ldr	r3, [r4, #24]
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	071a      	lsls	r2, r3, #28
 8007ca6:	d525      	bpl.n	8007cf4 <__swbuf_r+0x68>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	b31b      	cbz	r3, 8007cf4 <__swbuf_r+0x68>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	6922      	ldr	r2, [r4, #16]
 8007cb0:	1a98      	subs	r0, r3, r2
 8007cb2:	6963      	ldr	r3, [r4, #20]
 8007cb4:	b2f6      	uxtb	r6, r6
 8007cb6:	4283      	cmp	r3, r0
 8007cb8:	4637      	mov	r7, r6
 8007cba:	dc04      	bgt.n	8007cc6 <__swbuf_r+0x3a>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f7ff ffbc 	bl	8007c3c <_fflush_r>
 8007cc4:	b9e0      	cbnz	r0, 8007d00 <__swbuf_r+0x74>
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	701e      	strb	r6, [r3, #0]
 8007cd4:	6962      	ldr	r2, [r4, #20]
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d004      	beq.n	8007ce6 <__swbuf_r+0x5a>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d506      	bpl.n	8007cf0 <__swbuf_r+0x64>
 8007ce2:	2e0a      	cmp	r6, #10
 8007ce4:	d104      	bne.n	8007cf0 <__swbuf_r+0x64>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f7ff ffa7 	bl	8007c3c <_fflush_r>
 8007cee:	b938      	cbnz	r0, 8007d00 <__swbuf_r+0x74>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f806 	bl	8007d08 <__swsetup_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d0d5      	beq.n	8007cac <__swbuf_r+0x20>
 8007d00:	f04f 37ff 	mov.w	r7, #4294967295
 8007d04:	e7f4      	b.n	8007cf0 <__swbuf_r+0x64>
	...

08007d08 <__swsetup_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <__swsetup_r+0xac>)
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	460c      	mov	r4, r1
 8007d12:	b118      	cbz	r0, 8007d1c <__swsetup_r+0x14>
 8007d14:	6a03      	ldr	r3, [r0, #32]
 8007d16:	b90b      	cbnz	r3, 8007d1c <__swsetup_r+0x14>
 8007d18:	f7ff f88a 	bl	8006e30 <__sinit>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d22:	0718      	lsls	r0, r3, #28
 8007d24:	d422      	bmi.n	8007d6c <__swsetup_r+0x64>
 8007d26:	06d9      	lsls	r1, r3, #27
 8007d28:	d407      	bmi.n	8007d3a <__swsetup_r+0x32>
 8007d2a:	2309      	movs	r3, #9
 8007d2c:	602b      	str	r3, [r5, #0]
 8007d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	e034      	b.n	8007da4 <__swsetup_r+0x9c>
 8007d3a:	0758      	lsls	r0, r3, #29
 8007d3c:	d512      	bpl.n	8007d64 <__swsetup_r+0x5c>
 8007d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d40:	b141      	cbz	r1, 8007d54 <__swsetup_r+0x4c>
 8007d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d002      	beq.n	8007d50 <__swsetup_r+0x48>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f7ff f9cc 	bl	80070e8 <_free_r>
 8007d50:	2300      	movs	r3, #0
 8007d52:	6363      	str	r3, [r4, #52]	; 0x34
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f043 0308 	orr.w	r3, r3, #8
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	b94b      	cbnz	r3, 8007d84 <__swsetup_r+0x7c>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7a:	d003      	beq.n	8007d84 <__swsetup_r+0x7c>
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f000 f8a7 	bl	8007ed2 <__smakebuf_r>
 8007d84:	89a0      	ldrh	r0, [r4, #12]
 8007d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8a:	f010 0301 	ands.w	r3, r0, #1
 8007d8e:	d00a      	beq.n	8007da6 <__swsetup_r+0x9e>
 8007d90:	2300      	movs	r3, #0
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	6963      	ldr	r3, [r4, #20]
 8007d96:	425b      	negs	r3, r3
 8007d98:	61a3      	str	r3, [r4, #24]
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	b943      	cbnz	r3, 8007db0 <__swsetup_r+0xa8>
 8007d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007da2:	d1c4      	bne.n	8007d2e <__swsetup_r+0x26>
 8007da4:	bd38      	pop	{r3, r4, r5, pc}
 8007da6:	0781      	lsls	r1, r0, #30
 8007da8:	bf58      	it	pl
 8007daa:	6963      	ldrpl	r3, [r4, #20]
 8007dac:	60a3      	str	r3, [r4, #8]
 8007dae:	e7f4      	b.n	8007d9a <__swsetup_r+0x92>
 8007db0:	2000      	movs	r0, #0
 8007db2:	e7f7      	b.n	8007da4 <__swsetup_r+0x9c>
 8007db4:	2000006c 	.word	0x2000006c

08007db8 <memmove>:
 8007db8:	4288      	cmp	r0, r1
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	eb01 0402 	add.w	r4, r1, r2
 8007dc0:	d902      	bls.n	8007dc8 <memmove+0x10>
 8007dc2:	4284      	cmp	r4, r0
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	d807      	bhi.n	8007dd8 <memmove+0x20>
 8007dc8:	1e43      	subs	r3, r0, #1
 8007dca:	42a1      	cmp	r1, r4
 8007dcc:	d008      	beq.n	8007de0 <memmove+0x28>
 8007dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd6:	e7f8      	b.n	8007dca <memmove+0x12>
 8007dd8:	4402      	add	r2, r0
 8007dda:	4601      	mov	r1, r0
 8007ddc:	428a      	cmp	r2, r1
 8007dde:	d100      	bne.n	8007de2 <memmove+0x2a>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dea:	e7f7      	b.n	8007ddc <memmove+0x24>

08007dec <_sbrk_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d06      	ldr	r5, [pc, #24]	; (8007e08 <_sbrk_r+0x1c>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7f9 fc9a 	bl	8001730 <_sbrk>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_sbrk_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_sbrk_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20000aa8 	.word	0x20000aa8

08007e0c <memcpy>:
 8007e0c:	440a      	add	r2, r1
 8007e0e:	4291      	cmp	r1, r2
 8007e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e14:	d100      	bne.n	8007e18 <memcpy+0xc>
 8007e16:	4770      	bx	lr
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e22:	4291      	cmp	r1, r2
 8007e24:	d1f9      	bne.n	8007e1a <memcpy+0xe>
 8007e26:	bd10      	pop	{r4, pc}

08007e28 <_realloc_r>:
 8007e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4614      	mov	r4, r2
 8007e30:	460e      	mov	r6, r1
 8007e32:	b921      	cbnz	r1, 8007e3e <_realloc_r+0x16>
 8007e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e38:	4611      	mov	r1, r2
 8007e3a:	f7ff b9c1 	b.w	80071c0 <_malloc_r>
 8007e3e:	b92a      	cbnz	r2, 8007e4c <_realloc_r+0x24>
 8007e40:	f7ff f952 	bl	80070e8 <_free_r>
 8007e44:	4625      	mov	r5, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	f000 f8a0 	bl	8007f90 <_malloc_usable_size_r>
 8007e50:	4284      	cmp	r4, r0
 8007e52:	4607      	mov	r7, r0
 8007e54:	d802      	bhi.n	8007e5c <_realloc_r+0x34>
 8007e56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e5a:	d812      	bhi.n	8007e82 <_realloc_r+0x5a>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4640      	mov	r0, r8
 8007e60:	f7ff f9ae 	bl	80071c0 <_malloc_r>
 8007e64:	4605      	mov	r5, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d0ed      	beq.n	8007e46 <_realloc_r+0x1e>
 8007e6a:	42bc      	cmp	r4, r7
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	4631      	mov	r1, r6
 8007e70:	bf28      	it	cs
 8007e72:	463a      	movcs	r2, r7
 8007e74:	f7ff ffca 	bl	8007e0c <memcpy>
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff f934 	bl	80070e8 <_free_r>
 8007e80:	e7e1      	b.n	8007e46 <_realloc_r+0x1e>
 8007e82:	4635      	mov	r5, r6
 8007e84:	e7df      	b.n	8007e46 <_realloc_r+0x1e>

08007e86 <__swhatbuf_r>:
 8007e86:	b570      	push	{r4, r5, r6, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	b096      	sub	sp, #88	; 0x58
 8007e92:	4615      	mov	r5, r2
 8007e94:	461e      	mov	r6, r3
 8007e96:	da0d      	bge.n	8007eb4 <__swhatbuf_r+0x2e>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e9e:	f04f 0100 	mov.w	r1, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ea8:	2340      	movne	r3, #64	; 0x40
 8007eaa:	2000      	movs	r0, #0
 8007eac:	6031      	str	r1, [r6, #0]
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	b016      	add	sp, #88	; 0x58
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	466a      	mov	r2, sp
 8007eb6:	f000 f849 	bl	8007f4c <_fstat_r>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dbec      	blt.n	8007e98 <__swhatbuf_r+0x12>
 8007ebe:	9901      	ldr	r1, [sp, #4]
 8007ec0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ec4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ec8:	4259      	negs	r1, r3
 8007eca:	4159      	adcs	r1, r3
 8007ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed0:	e7eb      	b.n	8007eaa <__swhatbuf_r+0x24>

08007ed2 <__smakebuf_r>:
 8007ed2:	898b      	ldrh	r3, [r1, #12]
 8007ed4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed6:	079d      	lsls	r5, r3, #30
 8007ed8:	4606      	mov	r6, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	d507      	bpl.n	8007eee <__smakebuf_r+0x1c>
 8007ede:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	6163      	str	r3, [r4, #20]
 8007eea:	b002      	add	sp, #8
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
 8007eee:	ab01      	add	r3, sp, #4
 8007ef0:	466a      	mov	r2, sp
 8007ef2:	f7ff ffc8 	bl	8007e86 <__swhatbuf_r>
 8007ef6:	9900      	ldr	r1, [sp, #0]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	4630      	mov	r0, r6
 8007efc:	f7ff f960 	bl	80071c0 <_malloc_r>
 8007f00:	b948      	cbnz	r0, 8007f16 <__smakebuf_r+0x44>
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	059a      	lsls	r2, r3, #22
 8007f08:	d4ef      	bmi.n	8007eea <__smakebuf_r+0x18>
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	e7e3      	b.n	8007ede <__smakebuf_r+0xc>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	6020      	str	r0, [r4, #0]
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	6163      	str	r3, [r4, #20]
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	6120      	str	r0, [r4, #16]
 8007f28:	b15b      	cbz	r3, 8007f42 <__smakebuf_r+0x70>
 8007f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 f81e 	bl	8007f70 <_isatty_r>
 8007f34:	b128      	cbz	r0, 8007f42 <__smakebuf_r+0x70>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	431d      	orrs	r5, r3
 8007f46:	81a5      	strh	r5, [r4, #12]
 8007f48:	e7cf      	b.n	8007eea <__smakebuf_r+0x18>
	...

08007f4c <_fstat_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d07      	ldr	r5, [pc, #28]	; (8007f6c <_fstat_r+0x20>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	f7f9 fbc0 	bl	80016de <_fstat>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d102      	bne.n	8007f68 <_fstat_r+0x1c>
 8007f62:	682b      	ldr	r3, [r5, #0]
 8007f64:	b103      	cbz	r3, 8007f68 <_fstat_r+0x1c>
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000aa8 	.word	0x20000aa8

08007f70 <_isatty_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4d06      	ldr	r5, [pc, #24]	; (8007f8c <_isatty_r+0x1c>)
 8007f74:	2300      	movs	r3, #0
 8007f76:	4604      	mov	r4, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	f7f9 fbbf 	bl	80016fe <_isatty>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_isatty_r+0x1a>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_isatty_r+0x1a>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	20000aa8 	.word	0x20000aa8

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_init>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr

08007fac <_fini>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr
