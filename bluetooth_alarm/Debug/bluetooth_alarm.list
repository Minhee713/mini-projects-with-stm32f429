
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2fc  0800b2fc  00020348  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b304  0800b304  00020348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0800b30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020348  2**0
                  CONTENTS
 10 .bss          00000bb8  20000348  20000348  00020348  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f00  20000f00  00020348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e98d  00000000  00000000  000203bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ef4  00000000  00000000  0003ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b88  00000000  00000000  00042c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159e  00000000  00000000  000447c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000299c8  00000000  00000000  00045d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000213a5  00000000  00000000  0006f72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb10a  00000000  00000000  00090ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000805c  00000000  00000000  0018bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00193c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000348 	.word	0x20000348
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af00 	.word	0x0800af00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	0800af00 	.word	0x0800af00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f007 ffcb 	bl	800856a <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 ff4f 	bl	800548c <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f009 fc0d 	bl	8009e24 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f007 ffa4 	bl	800856a <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f007 ff9c 	bl	800856a <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f007 ff8c 	bl	800856a <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800af28 	.word	0x0800af28
 8000660:	20000780 	.word	0x20000780
 8000664:	20000638 	.word	0x20000638
 8000668:	0800af18 	.word	0x0800af18
 800066c:	0800af20 	.word	0x0800af20
 8000670:	0800af24 	.word	0x0800af24

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 fefb 	bl	800548c <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f004 fdc4 	bl	8005290 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f002 f9bf 	bl	8002a90 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000638 	.word	0x20000638

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f002 f8de 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f878 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 fbfa 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f000 fbd8 	bl	8000fac <MX_DMA_Init>
  MX_ETH_Init();
 80007fc:	f000 f972 	bl	8000ae4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000800:	f000 fb7c 	bl	8000efc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000804:	f000 fba4 	bl	8000f50 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000808:	f000 f90c 	bl	8000a24 <MX_ADC1_Init>
  MX_I2C1_Init();
 800080c:	f000 f9b8 	bl	8000b80 <MX_I2C1_Init>
  MX_RTC_Init();
 8000810:	f000 f9f6 	bl	8000c00 <MX_RTC_Init>
  MX_TIM2_Init();
 8000814:	f000 fa86 	bl	8000d24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000818:	f000 fad0 	bl	8000dbc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800081c:	f000 fb44 	bl	8000ea8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000820:	f000 f8cc 	bl	80009bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000824:	2202      	movs	r2, #2
 8000826:	4924      	ldr	r1, [pc, #144]	; (80008b8 <main+0xd0>)
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <main+0xd4>)
 800082a:	f002 faa9 	bl	8002d80 <HAL_ADC_Start_DMA>
	init();
 800082e:	f7ff ffd2 	bl	80007d6 <init>
	init_getFlashTime();
 8000832:	f000 fdb9 	bl	80013a8 <init_getFlashTime>
	init_getFlashAlarm();
 8000836:	f000 fded 	bl	8001414 <init_getFlashAlarm>
	init_getFlashMusic();
 800083a:	f000 fe23 	bl	8001484 <init_getFlashMusic>
	lcd_clear();
 800083e:	f000 fe45 	bl	80014cc <lcd_clear>
	HAL_UART_Receive_IT(&huart3, &rx3_data, sizeof(rx3_data));
 8000842:	2201      	movs	r2, #1
 8000844:	491e      	ldr	r1, [pc, #120]	; (80008c0 <main+0xd8>)
 8000846:	481f      	ldr	r0, [pc, #124]	; (80008c4 <main+0xdc>)
 8000848:	f007 ff21 	bl	800868e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &rx2_data, sizeof(rx2_data));
 800084c:	2201      	movs	r2, #1
 800084e:	491e      	ldr	r1, [pc, #120]	; (80008c8 <main+0xe0>)
 8000850:	481e      	ldr	r0, [pc, #120]	; (80008cc <main+0xe4>)
 8000852:	f007 ff1c 	bl	800868e <HAL_UART_Receive_IT>
	current_state.mode = NORMAL_STATE;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <main+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
	current_state.music_num = 0;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <main+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]

	if(nv_items->magic_num == MAGIC_NUM) {
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <main+0xec>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <main+0xf0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d103      	bne.n	8000874 <main+0x8c>
//		RTC_Time.Hours = default_nvitem.setting_time.hours;
//		RTC_Time.Minutes = default_nvitem.setting_time.minutes;
//		RTC_Time.Seconds = default_nvitem.setting_time.seconds;
		printf("this is main init magic_num exist\r\n");
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <main+0xf4>)
 800086e:	f009 fad1 	bl	8009e14 <puts>
 8000872:	e004      	b.n	800087e <main+0x96>
	} else {
		printf("this is main init update_nvitems\r\n");
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <main+0xf8>)
 8000876:	f009 facd 	bl	8009e14 <puts>
		update_nvitems();
 800087a:	f000 ff7f 	bl	800177c <update_nvitems>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (current_state.mode) {
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <main+0xe8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d816      	bhi.n	80008b4 <main+0xcc>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <main+0xa4>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008a3 	.word	0x080008a3
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008af 	.word	0x080008af
		case NORMAL_STATE:
			get_time();
 800089c:	f000 fe1e 	bl	80014dc <get_time>
			break;
 80008a0:	e009      	b.n	80008b6 <main+0xce>
		case TIME_SETTING:
			time_set_mode();
 80008a2:	f000 ffdb 	bl	800185c <time_set_mode>
			break;
 80008a6:	e006      	b.n	80008b6 <main+0xce>
		case ALARM_TIME_SETTING:
			alarm_set_mode();
 80008a8:	f001 f940 	bl	8001b2c <alarm_set_mode>
			break;
 80008ac:	e003      	b.n	80008b6 <main+0xce>
		case MUSIC_SELECT:
			music_set_mode();
 80008ae:	f001 faa7 	bl	8001e00 <music_set_mode>
			break;
 80008b2:	e000      	b.n	80008b6 <main+0xce>
		default:
			break;
 80008b4:	bf00      	nop
		switch (current_state.mode) {
 80008b6:	e7e2      	b.n	800087e <main+0x96>
 80008b8:	20000cd0 	.word	0x20000cd0
 80008bc:	200004e0 	.word	0x200004e0
 80008c0:	20000d80 	.word	0x20000d80
 80008c4:	20000780 	.word	0x20000780
 80008c8:	20000d81 	.word	0x20000d81
 80008cc:	2000073c 	.word	0x2000073c
 80008d0:	20000d30 	.word	0x20000d30
 80008d4:	080c0000 	.word	0x080c0000
 80008d8:	deadbeef 	.word	0xdeadbeef
 80008dc:	0800af40 	.word	0x0800af40
 80008e0:	0800af64 	.word	0x0800af64

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f009 fbc2 	bl	800a07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <SystemClock_Config+0xd0>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <SystemClock_Config+0xd0>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0xd0>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <SystemClock_Config+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <SystemClock_Config+0xd4>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <SystemClock_Config+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000940:	2305      	movs	r3, #5
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000944:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000958:	2304      	movs	r3, #4
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800095c:	23a8      	movs	r3, #168	; 0xa8
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f005 fa5d 	bl	8005e2c <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000978:	f001 fb9e 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fcbe 	bl	800631c <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009a6:	f001 fb87 	bl	80020b8 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2027      	movs	r0, #39	; 0x27
 80009c6:	f002 fea8 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009ca:	2027      	movs	r0, #39	; 0x27
 80009cc:	f002 fec1 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2028      	movs	r0, #40	; 0x28
 80009d6:	f002 fea0 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f002 feb9 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2012      	movs	r0, #18
 80009e6:	f002 fe98 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009ea:	2012      	movs	r0, #18
 80009ec:	f002 feb1 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2029      	movs	r0, #41	; 0x29
 80009f6:	f002 fe90 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009fa:	2029      	movs	r0, #41	; 0x29
 80009fc:	f002 fea9 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	201c      	movs	r0, #28
 8000a06:	f002 fe88 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f002 fea1 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2026      	movs	r0, #38	; 0x26
 8000a16:	f002 fe80 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1a:	2026      	movs	r0, #38	; 0x26
 8000a1c:	f002 fe99 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <MX_ADC1_Init+0xb8>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <MX_ADC1_Init+0xbc>)
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000a86:	f002 f827 	bl	8002ad8 <HAL_ADC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a90:	f001 fb12 	bl	80020b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a94:	230a      	movs	r3, #10
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000aa6:	f002 faa3 	bl	8002ff0 <HAL_ADC_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab0:	f001 fb02 	bl	80020b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ab4:	230d      	movs	r3, #13
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_ADC1_Init+0xb4>)
 8000ac2:	f002 fa95 	bl	8002ff0 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000acc:	f001 faf4 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200004e0 	.word	0x200004e0
 8000adc:	40012000 	.word	0x40012000
 8000ae0:	0f000001 	.word	0x0f000001

08000ae4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_ETH_Init+0x84>)
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <MX_ETH_Init+0x88>)
 8000aec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000afc:	22e1      	movs	r2, #225	; 0xe1
 8000afe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b16:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b1e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <MX_ETH_Init+0x90>)
 8000b24:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_ETH_Init+0x94>)
 8000b2a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b32:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b36:	f003 fa29 	bl	8003f8c <HAL_ETH_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b40:	f001 faba 	bl	80020b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	2100      	movs	r1, #0
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b4a:	f009 fa97 	bl	800a07c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b50:	2221      	movs	r2, #33	; 0x21
 8000b52:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b56:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b5a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000588 	.word	0x20000588
 8000b6c:	40028000 	.word	0x40028000
 8000b70:	20000d84 	.word	0x20000d84
 8000b74:	20000440 	.word	0x20000440
 8000b78:	200003a0 	.word	0x200003a0
 8000b7c:	20000368 	.word	0x20000368

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <MX_I2C1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bbe:	f004 fa23 	bl	8005008 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f001 fa76 	bl	80020b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bd0:	f004 ff93 	bl	8005afa <HAL_I2CEx_ConfigAnalogFilter>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bda:	f001 fa6d 	bl	80020b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000be2:	f004 ffc6 	bl	8005b72 <HAL_I2CEx_ConfigDigitalFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bec:	f001 fa64 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000638 	.word	0x20000638
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2228      	movs	r2, #40	; 0x28
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f009 fa2b 	bl	800a07c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <MX_RTC_Init+0x120>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c2e:	2240      	movs	r2, #64	; 0x40
 8000c30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c34:	227f      	movs	r2, #127	; 0x7f
 8000c36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c38:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c3a:	22ff      	movs	r2, #255	; 0xff
 8000c3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c50:	4832      	ldr	r0, [pc, #200]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c52:	f005 ff43 	bl	8006adc <HAL_RTC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f001 fa2c 	bl	80020b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	4824      	ldr	r0, [pc, #144]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000c8a:	f005 ff9d 	bl	8006bc8 <HAL_RTC_SetTime>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000c94:	f001 fa10 	bl	80020b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000c9e:	2311      	movs	r3, #17
 8000ca0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x16;
 8000ca4:	2316      	movs	r3, #22
 8000ca6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000caa:	2323      	movs	r3, #35	; 0x23
 8000cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000cba:	f006 f87d 	bl	8006db8 <HAL_RTC_SetDate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000cc4:	f001 f9f8 	bl	80020b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x45;
 8000cd0:	2345      	movs	r3, #69	; 0x45
 8000cd2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ce8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_RTC_Init+0x11c>)
 8000d06:	f006 f92b 	bl	8006f60 <HAL_RTC_SetAlarm_IT>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8000d10:	f001 f9d2 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3740      	adds	r7, #64	; 0x40
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000068c 	.word	0x2000068c
 8000d20:	40002800 	.word	0x40002800

08000d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d4a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d58:	22c7      	movs	r2, #199	; 0xc7
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d6a:	f006 fb48 	bl	80073fe <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d74:	f001 f9a0 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d86:	f006 ff13 	bl	8007bb0 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d90:	f001 f992 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000da2:	f007 fb05 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dac:	f001 f984 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200006ac 	.word	0x200006ac

08000dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	; 0x38
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <MX_TIM3_Init+0xe8>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000df4:	220f      	movs	r2, #15
 8000df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e00:	22c7      	movs	r2, #199	; 0xc7
 8000e02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e10:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e12:	f006 faf4 	bl	80073fe <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e1c:	f001 f94c 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e2e:	f006 febf 	bl	8007bb0 <HAL_TIM_ConfigClockSource>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e38:	f001 f93e 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e3c:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e3e:	f006 fb5c 	bl	80074fa <HAL_TIM_PWM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e48:	f001 f936 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e5c:	f007 faa8 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e66:	f001 f927 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6a:	2360      	movs	r3, #96	; 0x60
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e82:	f006 fdd3 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e8c:	f001 f914 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <MX_TIM3_Init+0xe4>)
 8000e92:	f001 fb41 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8000e96:	bf00      	nop
 8000e98:	3738      	adds	r7, #56	; 0x38
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200006f4 	.word	0x200006f4
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f007 faf6 	bl	80084d0 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f001 f8e5 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000073c 	.word	0x2000073c
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART3_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART3_UART_Init+0x4c>)
 8000f34:	f007 facc 	bl	80084d0 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f001 f8bb 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000780 	.word	0x20000780
 8000f4c:	40004800 	.word	0x40004800

08000f50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f94:	f004 fe2c 	bl	8005bf0 <HAL_PCD_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f001 f88b 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200007c4 	.word	0x200007c4

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2038      	movs	r0, #56	; 0x38
 8000fd4:	f002 fba1 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd8:	2038      	movs	r0, #56	; 0x38
 8000fda:	f002 fbba 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <MX_GPIO_Init+0x190>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <MX_GPIO_Init+0x190>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b5a      	ldr	r3, [pc, #360]	; (800117c <MX_GPIO_Init+0x190>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <MX_GPIO_Init+0x190>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a55      	ldr	r2, [pc, #340]	; (800117c <MX_GPIO_Init+0x190>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <MX_GPIO_Init+0x190>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <MX_GPIO_Init+0x190>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a4e      	ldr	r2, [pc, #312]	; (800117c <MX_GPIO_Init+0x190>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <MX_GPIO_Init+0x190>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <MX_GPIO_Init+0x190>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <MX_GPIO_Init+0x190>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <MX_GPIO_Init+0x190>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <MX_GPIO_Init+0x190>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <MX_GPIO_Init+0x190>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b3e      	ldr	r3, [pc, #248]	; (800117c <MX_GPIO_Init+0x190>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <MX_GPIO_Init+0x190>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a39      	ldr	r2, [pc, #228]	; (800117c <MX_GPIO_Init+0x190>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <MX_GPIO_Init+0x190>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_GPIO_Init+0x190>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <MX_GPIO_Init+0x190>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_GPIO_Init+0x190>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80010cc:	482c      	ldr	r0, [pc, #176]	; (8001180 <MX_GPIO_Init+0x194>)
 80010ce:	f003 ff4f 	bl	8004f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	482b      	ldr	r0, [pc, #172]	; (8001184 <MX_GPIO_Init+0x198>)
 80010d8:	f003 ff4a 	bl	8004f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4825      	ldr	r0, [pc, #148]	; (8001188 <MX_GPIO_Init+0x19c>)
 80010f4:	f003 fd78 	bl	8004be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joy_btn_Pin */
  GPIO_InitStruct.Pin = Joy_btn_Pin;
 80010f8:	2308      	movs	r3, #8
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010fc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	481f      	ldr	r0, [pc, #124]	; (800118c <MX_GPIO_Init+0x1a0>)
 800110e:	f003 fd6b 	bl	8004be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001112:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4815      	ldr	r0, [pc, #84]	; (8001180 <MX_GPIO_Init+0x194>)
 800112c:	f003 fd5c 	bl	8004be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <MX_GPIO_Init+0x198>)
 8001148:	f003 fd4e 	bl	8004be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <MX_GPIO_Init+0x198>)
 8001160:	f003 fd42 	bl	8004be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2009      	movs	r0, #9
 800116a:	f002 fad6 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800116e:	2009      	movs	r0, #9
 8001170:	f002 faef 	bl	8003752 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	40021800 	.word	0x40021800
 8001188:	40020800 	.word	0x40020800
 800118c:	40021400 	.word	0x40021400

08001190 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d162      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0xd6>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80011a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a4:	4832      	ldr	r0, [pc, #200]	; (8001270 <HAL_GPIO_EXTI_Callback+0xe0>)
 80011a6:	f003 fefc 	bl	8004fa2 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 80011aa:	f001 fc65 	bl	8002a78 <HAL_GetTick>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a30      	ldr	r2, [pc, #192]	; (8001274 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011b2:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 80011c0:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011c8:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 80011ca:	2108      	movs	r1, #8
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <HAL_GPIO_EXTI_Callback+0xf0>)
 80011ce:	f003 feb7 	bl	8004f40 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d146      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0xd6>
			if (interval < 130) {
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b81      	cmp	r3, #129	; 0x81
 80011de:	d805      	bhi.n	80011ec <HAL_GPIO_EXTI_Callback+0x5c>
				btn_cnt += 3;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3303      	adds	r3, #3
 80011e6:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e02a      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0xb2>
			} else if (interval >= 130 && interval < 200) {
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b81      	cmp	r3, #129	; 0x81
 80011f2:	d910      	bls.n	8001216 <HAL_GPIO_EXTI_Callback+0x86>
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2bc7      	cmp	r3, #199	; 0xc7
 80011fa:	d80c      	bhi.n	8001216 <HAL_GPIO_EXTI_Callback+0x86>
				printf("One click!!  interval = %u\r\n",
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4821      	ldr	r0, [pc, #132]	; (8001288 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001204:	f008 fda0 	bl	8009d48 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e015      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0xb2>
			} else if (interval >= 300 && interval <= 1000) {
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800121e:	d310      	bcc.n	8001242 <HAL_GPIO_EXTI_Callback+0xb2>
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001228:	d80b      	bhi.n	8001242 <HAL_GPIO_EXTI_Callback+0xb2>
				printf("Long click!!  interval = %u\r\n",
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <HAL_GPIO_EXTI_Callback+0x100>)
 8001232:	f008 fd89 	bl	8009d48 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_GPIO_EXTI_Callback+0xfc>)
 800123e:	2202      	movs	r2, #2
 8001240:	701a      	strb	r2, [r3, #0]
			}
			if (btn_cnt >= 5) {
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b04      	cmp	r3, #4
 8001248:	dd0d      	ble.n	8001266 <HAL_GPIO_EXTI_Callback+0xd6>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_GPIO_EXTI_Callback+0xec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <HAL_GPIO_EXTI_Callback+0x104>)
 8001256:	f008 fd77 	bl	8009d48 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_GPIO_EXTI_Callback+0xf4>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020400 	.word	0x40020400
 8001274:	20000cd8 	.word	0x20000cd8
 8001278:	20000cdc 	.word	0x20000cdc
 800127c:	20000ce0 	.word	0x20000ce0
 8001280:	40021400 	.word	0x40021400
 8001284:	20000ce4 	.word	0x20000ce4
 8001288:	0800af88 	.word	0x0800af88
 800128c:	20000d30 	.word	0x20000d30
 8001290:	0800afa8 	.word	0x0800afa8
 8001294:	0800afc8 	.word	0x0800afc8

08001298 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_RTC_AlarmAEventCallback+0x40>)
 80012ae:	1899      	adds	r1, r3, r2
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 80012b4:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 80012ba:	4618      	mov	r0, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012be:	789b      	ldrb	r3, [r3, #2]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4603      	mov	r3, r0
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_RTC_AlarmAEventCallback+0x44>)
 80012c6:	f008 fd3f 	bl	8009d48 <iprintf>
//	start = 1;
//	seq = 0;
//
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000d58 	.word	0x20000d58
 80012d8:	2000028c 	.word	0x2000028c
 80012dc:	0800affc 	.word	0x0800affc

080012e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
//	} else {
//		HAL_TIM_Base_Start_IT(&htim2);
//		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
//	}

}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_UART_RxCpltCallback+0x54>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10b      	bne.n	800131e <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Transmit(&huart2, &rx3_data, sizeof(rx3_data), 10);
 8001306:	230a      	movs	r3, #10
 8001308:	2201      	movs	r2, #1
 800130a:	4910      	ldr	r1, [pc, #64]	; (800134c <HAL_UART_RxCpltCallback+0x58>)
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <HAL_UART_RxCpltCallback+0x5c>)
 800130e:	f007 f92c 	bl	800856a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, &rx3_data, sizeof(rx3_data));
 8001312:	2201      	movs	r2, #1
 8001314:	490d      	ldr	r1, [pc, #52]	; (800134c <HAL_UART_RxCpltCallback+0x58>)
 8001316:	480f      	ldr	r0, [pc, #60]	; (8001354 <HAL_UART_RxCpltCallback+0x60>)
 8001318:	f007 f9b9 	bl	800868e <HAL_UART_Receive_IT>
	} else if(huart->Instance==USART2) {
		HAL_UART_Transmit(&huart3, &rx2_data, sizeof(rx2_data), 10);
		HAL_UART_Receive_IT(&huart2, &rx2_data, sizeof(rx2_data));
	}
}
 800131c:	e00f      	b.n	800133e <HAL_UART_RxCpltCallback+0x4a>
	} else if(huart->Instance==USART2) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_UART_RxCpltCallback+0x64>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d10a      	bne.n	800133e <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Transmit(&huart3, &rx2_data, sizeof(rx2_data), 10);
 8001328:	230a      	movs	r3, #10
 800132a:	2201      	movs	r2, #1
 800132c:	490b      	ldr	r1, [pc, #44]	; (800135c <HAL_UART_RxCpltCallback+0x68>)
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <HAL_UART_RxCpltCallback+0x60>)
 8001330:	f007 f91b 	bl	800856a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx2_data, sizeof(rx2_data));
 8001334:	2201      	movs	r2, #1
 8001336:	4909      	ldr	r1, [pc, #36]	; (800135c <HAL_UART_RxCpltCallback+0x68>)
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_UART_RxCpltCallback+0x5c>)
 800133a:	f007 f9a8 	bl	800868e <HAL_UART_Receive_IT>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004800 	.word	0x40004800
 800134c:	20000d80 	.word	0x20000d80
 8001350:	2000073c 	.word	0x2000073c
 8001354:	20000780 	.word	0x20000780
 8001358:	40004400 	.word	0x40004400
 800135c:	20000d81 	.word	0x20000d81

08001360 <_write>:


int _write(int file, char *ptr, int len) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <_write+0x28>)
 8001378:	f007 f8f7 	bl	800856a <HAL_UART_Transmit>
	return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000780 	.word	0x20000780

0800138c <readFlash>:

uint8_t readFlash(uint32_t addr) {
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	uint8_t value = *(uint8_t*) addr;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	73fb      	strb	r3, [r7, #15]

//	printf("flash value=%d\r\n", value);

	return value;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <init_getFlashTime>:

void init_getFlashTime() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	RTC_Time.Hours = readFlash(FLASH_USER_START_ADDR + 4);
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <init_getFlashTime+0x54>)
 80013ae:	f7ff ffed 	bl	800138c <readFlash>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <init_getFlashTime+0x58>)
 80013b8:	701a      	strb	r2, [r3, #0]
	RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 5);
 80013ba:	4812      	ldr	r0, [pc, #72]	; (8001404 <init_getFlashTime+0x5c>)
 80013bc:	f7ff ffe6 	bl	800138c <readFlash>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <init_getFlashTime+0x58>)
 80013c6:	705a      	strb	r2, [r3, #1]
	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 6);
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <init_getFlashTime+0x60>)
 80013ca:	f7ff ffdf 	bl	800138c <readFlash>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <init_getFlashTime+0x58>)
 80013d4:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 80013d6:	2200      	movs	r2, #0
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <init_getFlashTime+0x58>)
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <init_getFlashTime+0x64>)
 80013dc:	f005 fbf4 	bl	8006bc8 <HAL_RTC_SetTime>

	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <init_getFlashTime+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <init_getFlashTime+0x58>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	461a      	mov	r2, r3
			RTC_Time.Seconds);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <init_getFlashTime+0x58>)
 80013ee:	789b      	ldrb	r3, [r3, #2]
	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <init_getFlashTime+0x68>)
 80013f2:	f008 fca9 	bl	8009d48 <iprintf>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	080c0004 	.word	0x080c0004
 8001400:	20000d44 	.word	0x20000d44
 8001404:	080c0005 	.word	0x080c0005
 8001408:	080c0006 	.word	0x080c0006
 800140c:	2000068c 	.word	0x2000068c
 8001410:	0800b024 	.word	0x0800b024

08001414 <init_getFlashAlarm>:

void init_getFlashAlarm() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	RTC_Alarm.AlarmTime.Hours = readFlash(FLASH_USER_START_ADDR + 7);
 8001418:	4813      	ldr	r0, [pc, #76]	; (8001468 <init_getFlashAlarm+0x54>)
 800141a:	f7ff ffb7 	bl	800138c <readFlash>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <init_getFlashAlarm+0x58>)
 8001424:	701a      	strb	r2, [r3, #0]
	RTC_Alarm.AlarmTime.Minutes = readFlash(FLASH_USER_START_ADDR + 8);
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <init_getFlashAlarm+0x5c>)
 8001428:	f7ff ffb0 	bl	800138c <readFlash>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <init_getFlashAlarm+0x58>)
 8001432:	705a      	strb	r2, [r3, #1]
	RTC_Alarm.AlarmTime.Seconds = readFlash(FLASH_USER_START_ADDR + 9);
 8001434:	480f      	ldr	r0, [pc, #60]	; (8001474 <init_getFlashAlarm+0x60>)
 8001436:	f7ff ffa9 	bl	800138c <readFlash>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <init_getFlashAlarm+0x58>)
 8001440:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8001442:	2200      	movs	r2, #0
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <init_getFlashAlarm+0x64>)
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <init_getFlashAlarm+0x68>)
 8001448:	f005 fbbe 	bl	8006bc8 <HAL_RTC_SetTime>

	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <init_getFlashAlarm+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <init_getFlashAlarm+0x58>)
 8001454:	785b      	ldrb	r3, [r3, #1]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 8001456:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <init_getFlashAlarm+0x58>)
 800145a:	789b      	ldrb	r3, [r3, #2]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <init_getFlashAlarm+0x6c>)
 800145e:	f008 fc73 	bl	8009d48 <iprintf>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	080c0007 	.word	0x080c0007
 800146c:	20000d58 	.word	0x20000d58
 8001470:	080c0008 	.word	0x080c0008
 8001474:	080c0009 	.word	0x080c0009
 8001478:	20000d44 	.word	0x20000d44
 800147c:	2000068c 	.word	0x2000068c
 8001480:	0800b044 	.word	0x0800b044

08001484 <init_getFlashMusic>:

void init_getFlashMusic() {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	current_state.music_num = readFlash(FLASH_USER_START_ADDR + 10);
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <init_getFlashMusic+0x38>)
 800148a:	f7ff ff7f 	bl	800138c <readFlash>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <init_getFlashMusic+0x3c>)
 8001494:	605a      	str	r2, [r3, #4]

	printf("Setting Music: %d %s\r\n", current_state.music_num,
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <init_getFlashMusic+0x3c>)
 8001498:	6859      	ldr	r1, [r3, #4]
			alarmMusic[current_state.music_num].musicTitle);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <init_getFlashMusic+0x3c>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00da      	lsls	r2, r3, #3
 80014a6:	1ad2      	subs	r2, r2, r3
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <init_getFlashMusic+0x40>)
 80014aa:	4413      	add	r3, r2
 80014ac:	3301      	adds	r3, #1
	printf("Setting Music: %d %s\r\n", current_state.music_num,
 80014ae:	461a      	mov	r2, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <init_getFlashMusic+0x44>)
 80014b2:	f008 fc49 	bl	8009d48 <iprintf>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	080c000a 	.word	0x080c000a
 80014c0:	20000d30 	.word	0x20000d30
 80014c4:	200002a0 	.word	0x200002a0
 80014c8:	0800b068 	.word	0x0800b068

080014cc <lcd_clear>:

void lcd_clear() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00000001);
 80014d0:	2101      	movs	r1, #1
 80014d2:	204e      	movs	r0, #78	; 0x4e
 80014d4:	f7ff f924 	bl	8000720 <LCD_SendCommand>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <get_time>:

void get_time(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 80014e2:	2200      	movs	r2, #0
 80014e4:	4912      	ldr	r1, [pc, #72]	; (8001530 <get_time+0x54>)
 80014e6:	4813      	ldr	r0, [pc, #76]	; (8001534 <get_time+0x58>)
 80014e8:	f005 fc08 	bl	8006cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4912      	ldr	r1, [pc, #72]	; (8001538 <get_time+0x5c>)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <get_time+0x58>)
 80014f2:	f005 fce5 	bl	8006ec0 <HAL_RTC_GetDate>

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d ",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <get_time+0x54>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <get_time+0x60>)
 8001504:	441a      	add	r2, r3
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <get_time+0x54>)
 8001508:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d ",
 800150a:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <get_time+0x54>)
 800150e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d ",
 8001510:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <get_time+0x54>)
 8001514:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d ",
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9100      	str	r1, [sp, #0]
 800151a:	4603      	mov	r3, r0
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <get_time+0x64>)
 800151e:	4809      	ldr	r0, [pc, #36]	; (8001544 <get_time+0x68>)
 8001520:	f008 fcb4 	bl	8009e8c <siprintf>

	showCurrentTime();
 8001524:	f000 f810 	bl	8001548 <showCurrentTime>
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000d44 	.word	0x20000d44
 8001534:	2000068c 	.word	0x2000068c
 8001538:	20000d40 	.word	0x20000d40
 800153c:	2000028c 	.word	0x2000028c
 8001540:	0800b080 	.word	0x0800b080
 8001544:	20000d10 	.word	0x20000d10

08001548 <showCurrentTime>:

void showCurrentTime() {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	204e      	movs	r0, #78	; 0x4e
 8001550:	f7ff f8e6 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time ");
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <showCurrentTime+0x28>)
 8001556:	204e      	movs	r0, #78	; 0x4e
 8001558:	f7ff f923 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800155c:	21c0      	movs	r1, #192	; 0xc0
 800155e:	204e      	movs	r0, #78	; 0x4e
 8001560:	f7ff f8de 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 8001564:	4903      	ldr	r1, [pc, #12]	; (8001574 <showCurrentTime+0x2c>)
 8001566:	204e      	movs	r0, #78	; 0x4e
 8001568:	f7ff f91b 	bl	80007a2 <LCD_SendString>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	0800b098 	.word	0x0800b098
 8001574:	20000d10 	.word	0x20000d10

08001578 <timeDisplay>:

void timeDisplay() {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == TIME_SETTING) {
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <timeDisplay+0x14c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d114      	bne.n	80015b0 <timeDisplay+0x38>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	204e      	movs	r0, #78	; 0x4e
 800158a:	f7ff f8c9 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting ");
 800158e:	494e      	ldr	r1, [pc, #312]	; (80016c8 <timeDisplay+0x150>)
 8001590:	204e      	movs	r0, #78	; 0x4e
 8001592:	f7ff f906 	bl	80007a2 <LCD_SendString>

		hours = stime.hours;
 8001596:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <timeDisplay+0x154>)
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <timeDisplay+0x154>)
 80015a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015a4:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <timeDisplay+0x154>)
 80015a8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80015ac:	717b      	strb	r3, [r7, #5]
 80015ae:	e017      	b.n	80015e0 <timeDisplay+0x68>
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <timeDisplay+0x14c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d113      	bne.n	80015e0 <timeDisplay+0x68>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	204e      	movs	r0, #78	; 0x4e
 80015bc:	f7ff f8b0 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting ");
 80015c0:	4943      	ldr	r1, [pc, #268]	; (80016d0 <timeDisplay+0x158>)
 80015c2:	204e      	movs	r0, #78	; 0x4e
 80015c4:	f7ff f8ed 	bl	80007a2 <LCD_SendString>

		hours = atime.hours;
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <timeDisplay+0x15c>)
 80015ca:	f993 3000 	ldrsb.w	r3, [r3]
 80015ce:	71fb      	strb	r3, [r7, #7]
		minutes = atime.minutes;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <timeDisplay+0x15c>)
 80015d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015d6:	71bb      	strb	r3, [r7, #6]
		seconds = atime.seconds;
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <timeDisplay+0x15c>)
 80015da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80015de:	717b      	strb	r3, [r7, #5]
	}

	if (hours >= 12) {
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b0b      	cmp	r3, #11
 80015e4:	d933      	bls.n	800164e <timeDisplay+0xd6>
		if (current_state.mode == TIME_SETTING) {
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <timeDisplay+0x14c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d115      	bne.n	800161a <timeDisplay+0xa2>
			sprintf(timeStr, "%s %02d: %02d: %02d  ", ampm[RTC_Time.TimeFormat],
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <timeDisplay+0x160>)
 80015f0:	78db      	ldrb	r3, [r3, #3]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	4a38      	ldr	r2, [pc, #224]	; (80016dc <timeDisplay+0x164>)
 80015fc:	1899      	adds	r1, r3, r2
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f1a3 000c 	sub.w	r0, r3, #12
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	797a      	ldrb	r2, [r7, #5]
 8001608:	9201      	str	r2, [sp, #4]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	460a      	mov	r2, r1
 8001610:	4933      	ldr	r1, [pc, #204]	; (80016e0 <timeDisplay+0x168>)
 8001612:	4834      	ldr	r0, [pc, #208]	; (80016e4 <timeDisplay+0x16c>)
 8001614:	f008 fc3a 	bl	8009e8c <siprintf>
 8001618:	e048      	b.n	80016ac <timeDisplay+0x134>
					hours - 12, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <timeDisplay+0x14c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d144      	bne.n	80016ac <timeDisplay+0x134>
			sprintf(timeStr, "%s %02d: %02d: %02d  ",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours - 12, minutes,
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <timeDisplay+0x170>)
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	461a      	mov	r2, r3
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <timeDisplay+0x164>)
 8001630:	1899      	adds	r1, r3, r2
			sprintf(timeStr, "%s %02d: %02d: %02d  ",
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f1a3 000c 	sub.w	r0, r3, #12
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	9201      	str	r2, [sp, #4]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4603      	mov	r3, r0
 8001642:	460a      	mov	r2, r1
 8001644:	4926      	ldr	r1, [pc, #152]	; (80016e0 <timeDisplay+0x168>)
 8001646:	4827      	ldr	r0, [pc, #156]	; (80016e4 <timeDisplay+0x16c>)
 8001648:	f008 fc20 	bl	8009e8c <siprintf>
 800164c:	e02e      	b.n	80016ac <timeDisplay+0x134>
					seconds);
		}
	} else {
		if (current_state.mode == TIME_SETTING) {
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <timeDisplay+0x14c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d113      	bne.n	800167e <timeDisplay+0x106>
			sprintf(timeStr, "%s %02d: %02d: %02d  ", ampm[RTC_Time.TimeFormat],
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <timeDisplay+0x160>)
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	461a      	mov	r2, r3
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <timeDisplay+0x164>)
 8001664:	1899      	adds	r1, r3, r2
 8001666:	79f8      	ldrb	r0, [r7, #7]
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	797a      	ldrb	r2, [r7, #5]
 800166c:	9201      	str	r2, [sp, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	460a      	mov	r2, r1
 8001674:	491a      	ldr	r1, [pc, #104]	; (80016e0 <timeDisplay+0x168>)
 8001676:	481b      	ldr	r0, [pc, #108]	; (80016e4 <timeDisplay+0x16c>)
 8001678:	f008 fc08 	bl	8009e8c <siprintf>
 800167c:	e016      	b.n	80016ac <timeDisplay+0x134>
					hours, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <timeDisplay+0x14c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d112      	bne.n	80016ac <timeDisplay+0x134>
			sprintf(timeStr, "%s %02d: %02d: %02d  ",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours, minutes,
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <timeDisplay+0x170>)
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	461a      	mov	r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <timeDisplay+0x164>)
 8001694:	1899      	adds	r1, r3, r2
			sprintf(timeStr, "%s %02d: %02d: %02d  ",
 8001696:	79f8      	ldrb	r0, [r7, #7]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	797a      	ldrb	r2, [r7, #5]
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	4603      	mov	r3, r0
 80016a2:	460a      	mov	r2, r1
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <timeDisplay+0x168>)
 80016a6:	480f      	ldr	r0, [pc, #60]	; (80016e4 <timeDisplay+0x16c>)
 80016a8:	f008 fbf0 	bl	8009e8c <siprintf>
					seconds);
		}
	}

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80016ac:	21c0      	movs	r1, #192	; 0xc0
 80016ae:	204e      	movs	r0, #78	; 0x4e
 80016b0:	f7ff f836 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 80016b4:	490b      	ldr	r1, [pc, #44]	; (80016e4 <timeDisplay+0x16c>)
 80016b6:	204e      	movs	r0, #78	; 0x4e
 80016b8:	f7ff f873 	bl	80007a2 <LCD_SendString>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000d30 	.word	0x20000d30
 80016c8:	0800b0a8 	.word	0x0800b0a8
 80016cc:	20000d38 	.word	0x20000d38
 80016d0:	0800b0b8 	.word	0x0800b0b8
 80016d4:	20000d3c 	.word	0x20000d3c
 80016d8:	20000d44 	.word	0x20000d44
 80016dc:	2000028c 	.word	0x2000028c
 80016e0:	0800b0c8 	.word	0x0800b0c8
 80016e4:	20000cf0 	.word	0x20000cf0
 80016e8:	20000d58 	.word	0x20000d58

080016ec <joyStick_btn_chk>:

enum CLOCK_BUTTON joyStick_btn_chk() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
	if (xy[1] > 4000) {
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <joyStick_btn_chk+0x78>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80016f8:	d904      	bls.n	8001704 <joyStick_btn_chk+0x18>
		printf("up\r\n");
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <joyStick_btn_chk+0x7c>)
 80016fc:	f008 fb8a 	bl	8009e14 <puts>
		return UP;
 8001700:	2301      	movs	r3, #1
 8001702:	e02d      	b.n	8001760 <joyStick_btn_chk+0x74>
	}
	if (xy[1] < 1000) {
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <joyStick_btn_chk+0x78>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170c:	d204      	bcs.n	8001718 <joyStick_btn_chk+0x2c>
		printf("down\r\n");
 800170e:	4817      	ldr	r0, [pc, #92]	; (800176c <joyStick_btn_chk+0x80>)
 8001710:	f008 fb80 	bl	8009e14 <puts>
		return DOWN;
 8001714:	2302      	movs	r3, #2
 8001716:	e023      	b.n	8001760 <joyStick_btn_chk+0x74>
	}
	if (xy[0] > 4000) {
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <joyStick_btn_chk+0x78>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001720:	d904      	bls.n	800172c <joyStick_btn_chk+0x40>
		printf("left\r\n");
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <joyStick_btn_chk+0x84>)
 8001724:	f008 fb76 	bl	8009e14 <puts>
		return LEFT;
 8001728:	2304      	movs	r3, #4
 800172a:	e019      	b.n	8001760 <joyStick_btn_chk+0x74>
	}
	if (xy[0] < 1000) {
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <joyStick_btn_chk+0x78>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001734:	d204      	bcs.n	8001740 <joyStick_btn_chk+0x54>
		printf("right\r\n");
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <joyStick_btn_chk+0x88>)
 8001738:	f008 fb6c 	bl	8009e14 <puts>
		return RIGHT;
 800173c:	2303      	movs	r3, #3
 800173e:	e00f      	b.n	8001760 <joyStick_btn_chk+0x74>
	}
	if (xy[0] >= 2000 && xy[0] <= 2100) {
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <joyStick_btn_chk+0x78>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001748:	d30a      	bcc.n	8001760 <joyStick_btn_chk+0x74>
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <joyStick_btn_chk+0x78>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f640 0234 	movw	r2, #2100	; 0x834
 8001752:	4293      	cmp	r3, r2
 8001754:	d804      	bhi.n	8001760 <joyStick_btn_chk+0x74>
		printf("nothing\r\n");
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <joyStick_btn_chk+0x8c>)
 8001758:	f008 fb5c 	bl	8009e14 <puts>
		return NOTHING;
 800175c:	2300      	movs	r3, #0
 800175e:	e7ff      	b.n	8001760 <joyStick_btn_chk+0x74>
	}

}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000cd0 	.word	0x20000cd0
 8001768:	0800b0e0 	.word	0x0800b0e0
 800176c:	0800b0e4 	.word	0x0800b0e4
 8001770:	0800b0ec 	.word	0x0800b0ec
 8001774:	0800b0f4 	.word	0x0800b0f4
 8001778:	0800b0fc 	.word	0x0800b0fc

0800177c <update_nvitems>:

HAL_StatusTypeDef update_nvitems(void) {
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();
 8001788:	f002 ff7c 	bl	8004684 <HAL_FLASH_Unlock>

	FirstSector = FLASH_SECTOR_10;
 800178c:	230a      	movs	r3, #10
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_1;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FirstSector;
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	60fb      	str	r3, [r7, #12]

//	printf("\r\n--------------erase-----------\r\n");

//	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK) {
 80017a4:	f107 0214 	add.w	r2, r7, #20
 80017a8:	463b      	mov	r3, r7
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 f8db 	bl	8004968 <HAL_FLASHEx_Erase>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <update_nvitems+0x4c>
		printf("\r\n--------------erase complete-----------\r\n");
 80017b8:	4822      	ldr	r0, [pc, #136]	; (8001844 <update_nvitems+0xc8>)
 80017ba:	f008 fb2b 	bl	8009e14 <puts>
	} else {
		printf("\r\n--------------erase error-----------\r\n");
		return error;
	}

	ptr = (uint8_t*) &default_nvitem;
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <update_nvitems+0xcc>)
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
 80017c6:	e030      	b.n	800182a <update_nvitems+0xae>
		printf("\r\n--------------erase error-----------\r\n");
 80017c8:	4820      	ldr	r0, [pc, #128]	; (800184c <update_nvitems+0xd0>)
 80017ca:	f008 fb23 	bl	8009e14 <puts>
		return error;
 80017ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017d2:	e032      	b.n	800183a <update_nvitems+0xbe>
		Address = (uint8_t*) nv_items + i;
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017da:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 80017de:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*) ptr + i);
 80017e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2200      	movs	r2, #0
 80017ec:	461c      	mov	r4, r3
 80017ee:	4615      	mov	r5, r2
 80017f0:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
 80017f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	2000      	movs	r0, #0
 80017fc:	f002 feee 	bl	80045dc <HAL_FLASH_Program>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		printf("DATA: %ld\r\n", Data);
 8001806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <update_nvitems+0xd4>)
 800180c:	f008 fa9c 	bl	8009d48 <iprintf>

		if (error != HAL_OK) {
 8001810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <update_nvitems+0xa8>
			printf("\r\n--------------overwrite error-----------\r\n");
 8001818:	480e      	ldr	r0, [pc, #56]	; (8001854 <update_nvitems+0xd8>)
 800181a:	f008 fafb 	bl	8009e14 <puts>
			return error;
 800181e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001822:	e00a      	b.n	800183a <update_nvitems+0xbe>
	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	3301      	adds	r3, #1
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	2b0b      	cmp	r3, #11
 800182e:	d9d1      	bls.n	80017d4 <update_nvitems+0x58>
		}
	}
	printf("\r\n--------------overwrite complete-----------\r\n");
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <update_nvitems+0xdc>)
 8001832:	f008 faef 	bl	8009e14 <puts>
	HAL_FLASH_Lock();
 8001836:	f002 ff47 	bl	80046c8 <HAL_FLASH_Lock>
}
 800183a:	4618      	mov	r0, r3
 800183c:	3738      	adds	r7, #56	; 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	0800b108 	.word	0x0800b108
 8001848:	20000294 	.word	0x20000294
 800184c:	0800b134 	.word	0x0800b134
 8001850:	0800b15c 	.word	0x0800b15c
 8001854:	0800b168 	.word	0x0800b168
 8001858:	0800b194 	.word	0x0800b194

0800185c <time_set_mode>:

void time_set_mode() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
 8001862:	f7ff ff43 	bl	80016ec <joyStick_btn_chk>
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	if (t_position == 0) {
 800186a:	4ba5      	ldr	r3, [pc, #660]	; (8001b00 <time_set_mode+0x2a4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d12b      	bne.n	80018ca <time_set_mode+0x6e>
		printf("t_position 0 \r\n");
 8001872:	48a4      	ldr	r0, [pc, #656]	; (8001b04 <time_set_mode+0x2a8>)
 8001874:	f008 face 	bl	8009e14 <puts>
		switch (t_button) {
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d002      	beq.n	8001884 <time_set_mode+0x28>
 800187e:	2b03      	cmp	r3, #3
 8001880:	d01f      	beq.n	80018c2 <time_set_mode+0x66>
			break;
		case RIGHT:
			t_position = 1;
			break;
		default:
			break;
 8001882:	e136      	b.n	8001af2 <time_set_mode+0x296>
			if (stime.hours >= 12) {
 8001884:	4ba0      	ldr	r3, [pc, #640]	; (8001b08 <time_set_mode+0x2ac>)
 8001886:	f993 3000 	ldrsb.w	r3, [r3]
 800188a:	2b0b      	cmp	r3, #11
 800188c:	dd0c      	ble.n	80018a8 <time_set_mode+0x4c>
				stime.hours -= 12;
 800188e:	4b9e      	ldr	r3, [pc, #632]	; (8001b08 <time_set_mode+0x2ac>)
 8001890:	f993 3000 	ldrsb.w	r3, [r3]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	3b0c      	subs	r3, #12
 8001898:	b2db      	uxtb	r3, r3
 800189a:	b25a      	sxtb	r2, r3
 800189c:	4b9a      	ldr	r3, [pc, #616]	; (8001b08 <time_set_mode+0x2ac>)
 800189e:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 80018a0:	4b9a      	ldr	r3, [pc, #616]	; (8001b0c <time_set_mode+0x2b0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	70da      	strb	r2, [r3, #3]
			break;
 80018a6:	e124      	b.n	8001af2 <time_set_mode+0x296>
				stime.hours += 12;
 80018a8:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <time_set_mode+0x2ac>)
 80018aa:	f993 3000 	ldrsb.w	r3, [r3]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	330c      	adds	r3, #12
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	4b94      	ldr	r3, [pc, #592]	; (8001b08 <time_set_mode+0x2ac>)
 80018b8:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 1;
 80018ba:	4b94      	ldr	r3, [pc, #592]	; (8001b0c <time_set_mode+0x2b0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	70da      	strb	r2, [r3, #3]
			break;
 80018c0:	e117      	b.n	8001af2 <time_set_mode+0x296>
			t_position = 1;
 80018c2:	4b8f      	ldr	r3, [pc, #572]	; (8001b00 <time_set_mode+0x2a4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
			break;
 80018c8:	e113      	b.n	8001af2 <time_set_mode+0x296>
		}
	} else if (t_position == 1) {
 80018ca:	4b8d      	ldr	r3, [pc, #564]	; (8001b00 <time_set_mode+0x2a4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d143      	bne.n	800195a <time_set_mode+0xfe>
		printf("t_position 1 \r\n");
 80018d2:	488f      	ldr	r0, [pc, #572]	; (8001b10 <time_set_mode+0x2b4>)
 80018d4:	f008 fa9e 	bl	8009e14 <puts>
		switch (t_button) {
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	3b01      	subs	r3, #1
 80018dc:	2b03      	cmp	r3, #3
 80018de:	f200 80fb 	bhi.w	8001ad8 <time_set_mode+0x27c>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <time_set_mode+0x8c>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001909 	.word	0x08001909
 80018ec:	08001935 	.word	0x08001935
 80018f0:	080018f9 	.word	0x080018f9
 80018f4:	08001901 	.word	0x08001901
		case RIGHT:
			t_position = 2;
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <time_set_mode+0x2a4>)
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
			break;
 80018fe:	e0f8      	b.n	8001af2 <time_set_mode+0x296>
		case LEFT:
			t_position = 0;
 8001900:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <time_set_mode+0x2a4>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
			break;
 8001906:	e0f4      	b.n	8001af2 <time_set_mode+0x296>
		case UP:
			stime.hours++;
 8001908:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <time_set_mode+0x2ac>)
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	b25a      	sxtb	r2, r3
 8001916:	4b7c      	ldr	r3, [pc, #496]	; (8001b08 <time_set_mode+0x2ac>)
 8001918:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <time_set_mode+0x2ac>)
 800191c:	f993 3000 	ldrsb.w	r3, [r3]
 8001920:	2b0b      	cmp	r3, #11
 8001922:	f340 80db 	ble.w	8001adc <time_set_mode+0x280>
				stime.hours = 0;
 8001926:	4b78      	ldr	r3, [pc, #480]	; (8001b08 <time_set_mode+0x2ac>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 800192c:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <time_set_mode+0x2b0>)
 800192e:	2200      	movs	r2, #0
 8001930:	70da      	strb	r2, [r3, #3]
			}
			break;
 8001932:	e0d3      	b.n	8001adc <time_set_mode+0x280>
		case DOWN:
			stime.hours--;
 8001934:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <time_set_mode+0x2ac>)
 8001936:	f993 3000 	ldrsb.w	r3, [r3]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	4b71      	ldr	r3, [pc, #452]	; (8001b08 <time_set_mode+0x2ac>)
 8001944:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <time_set_mode+0x2ac>)
 8001948:	f993 3000 	ldrsb.w	r3, [r3]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f280 80c3 	bge.w	8001ad8 <time_set_mode+0x27c>
				stime.hours = 11;
 8001952:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <time_set_mode+0x2ac>)
 8001954:	220b      	movs	r2, #11
 8001956:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8001958:	e0be      	b.n	8001ad8 <time_set_mode+0x27c>
		}

	} else if (t_position == 2) {
 800195a:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <time_set_mode+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d13f      	bne.n	80019e2 <time_set_mode+0x186>
		printf("t_position 2 \r\n");
 8001962:	486c      	ldr	r0, [pc, #432]	; (8001b14 <time_set_mode+0x2b8>)
 8001964:	f008 fa56 	bl	8009e14 <puts>
		switch (t_button) {
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3b01      	subs	r3, #1
 800196c:	2b03      	cmp	r3, #3
 800196e:	f200 80b7 	bhi.w	8001ae0 <time_set_mode+0x284>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <time_set_mode+0x11c>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001997 	.word	0x08001997
 800197c:	080019bd 	.word	0x080019bd
 8001980:	08001989 	.word	0x08001989
 8001984:	08001991 	.word	0x08001991
		case RIGHT:
			t_position = 3;
 8001988:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <time_set_mode+0x2a4>)
 800198a:	2203      	movs	r2, #3
 800198c:	601a      	str	r2, [r3, #0]
			break;
 800198e:	e0b0      	b.n	8001af2 <time_set_mode+0x296>
		case LEFT:
			t_position = 1;
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <time_set_mode+0x2a4>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
		case UP:
			stime.minutes++;
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <time_set_mode+0x2ac>)
 8001998:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <time_set_mode+0x2ac>)
 80019a6:	705a      	strb	r2, [r3, #1]
			if (stime.minutes >= 60) {
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <time_set_mode+0x2ac>)
 80019aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019ae:	2b3b      	cmp	r3, #59	; 0x3b
 80019b0:	f340 8098 	ble.w	8001ae4 <time_set_mode+0x288>
				stime.minutes = 0;
 80019b4:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <time_set_mode+0x2ac>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
			}
			break;
 80019ba:	e093      	b.n	8001ae4 <time_set_mode+0x288>
		case DOWN:
			stime.minutes--;
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <time_set_mode+0x2ac>)
 80019be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	b25a      	sxtb	r2, r3
 80019ca:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <time_set_mode+0x2ac>)
 80019cc:	705a      	strb	r2, [r3, #1]
			if (stime.minutes < 0) {
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <time_set_mode+0x2ac>)
 80019d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f280 8083 	bge.w	8001ae0 <time_set_mode+0x284>
				stime.minutes = 59;
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <time_set_mode+0x2ac>)
 80019dc:	223b      	movs	r2, #59	; 0x3b
 80019de:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 80019e0:	e07e      	b.n	8001ae0 <time_set_mode+0x284>
		}
	} else if (t_position == 3) {
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <time_set_mode+0x2a4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	f040 8083 	bne.w	8001af2 <time_set_mode+0x296>
		printf("t_position 3 \r\n");
 80019ec:	484a      	ldr	r0, [pc, #296]	; (8001b18 <time_set_mode+0x2bc>)
 80019ee:	f008 fa11 	bl	8009e14 <puts>
		switch (t_button) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d876      	bhi.n	8001ae8 <time_set_mode+0x28c>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <time_set_mode+0x1a4>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a91 	.word	0x08001a91
 8001a04:	08001ab5 	.word	0x08001ab5
 8001a08:	08001a11 	.word	0x08001a11
 8001a0c:	08001a89 	.word	0x08001a89
		case RIGHT:

			default_nvitem.setting_time.hours = stime.hours;
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <time_set_mode+0x2ac>)
 8001a12:	f993 2000 	ldrsb.w	r2, [r3]
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <time_set_mode+0x2c0>)
 8001a18:	711a      	strb	r2, [r3, #4]
			default_nvitem.setting_time.minutes = stime.minutes;
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <time_set_mode+0x2ac>)
 8001a1c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <time_set_mode+0x2c0>)
 8001a22:	715a      	strb	r2, [r3, #5]
			default_nvitem.setting_time.seconds = stime.seconds;
 8001a24:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <time_set_mode+0x2ac>)
 8001a26:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <time_set_mode+0x2c0>)
 8001a2c:	719a      	strb	r2, [r3, #6]

			RTC_Time.Hours = default_nvitem.setting_time.hours;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <time_set_mode+0x2c0>)
 8001a30:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <time_set_mode+0x2b0>)
 8001a38:	701a      	strb	r2, [r3, #0]
			RTC_Time.Minutes = default_nvitem.setting_time.minutes;
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <time_set_mode+0x2c0>)
 8001a3c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <time_set_mode+0x2b0>)
 8001a44:	705a      	strb	r2, [r3, #1]
			RTC_Time.Seconds = default_nvitem.setting_time.seconds;
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <time_set_mode+0x2c0>)
 8001a48:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <time_set_mode+0x2b0>)
 8001a50:	709a      	strb	r2, [r3, #2]
			RTC_Time.Hours %= 12;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <time_set_mode+0x2b0>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <time_set_mode+0x2c4>)
 8001a58:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5c:	08d9      	lsrs	r1, r3, #3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <time_set_mode+0x2b0>)
 8001a6c:	701a      	strb	r2, [r3, #0]

			update_nvitems();
 8001a6e:	f7ff fe85 	bl	800177c <update_nvitems>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8001a72:	2200      	movs	r2, #0
 8001a74:	4925      	ldr	r1, [pc, #148]	; (8001b0c <time_set_mode+0x2b0>)
 8001a76:	482b      	ldr	r0, [pc, #172]	; (8001b24 <time_set_mode+0x2c8>)
 8001a78:	f005 f8a6 	bl	8006bc8 <HAL_RTC_SetTime>
			lcd_clear();
 8001a7c:	f7ff fd26 	bl	80014cc <lcd_clear>

			current_state.mode = NORMAL_STATE;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <time_set_mode+0x2cc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
			break;
 8001a86:	e034      	b.n	8001af2 <time_set_mode+0x296>
		case LEFT:
			t_position = 2;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <time_set_mode+0x2a4>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
			break;
 8001a8e:	e030      	b.n	8001af2 <time_set_mode+0x296>
		case UP:
			stime.seconds++;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <time_set_mode+0x2ac>)
 8001a92:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <time_set_mode+0x2ac>)
 8001aa0:	709a      	strb	r2, [r3, #2]
			if (stime.seconds >= 60) {
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <time_set_mode+0x2ac>)
 8001aa4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001aa8:	2b3b      	cmp	r3, #59	; 0x3b
 8001aaa:	dd1f      	ble.n	8001aec <time_set_mode+0x290>
				stime.seconds = 0;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <time_set_mode+0x2ac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001ab2:	e01b      	b.n	8001aec <time_set_mode+0x290>
		case DOWN:
			stime.seconds--;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <time_set_mode+0x2ac>)
 8001ab6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	b25a      	sxtb	r2, r3
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <time_set_mode+0x2ac>)
 8001ac4:	709a      	strb	r2, [r3, #2]
			if (stime.seconds < 0) {
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <time_set_mode+0x2ac>)
 8001ac8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0f      	bge.n	8001af0 <time_set_mode+0x294>
				stime.seconds = 59;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <time_set_mode+0x2ac>)
 8001ad2:	223b      	movs	r2, #59	; 0x3b
 8001ad4:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001ad6:	e00b      	b.n	8001af0 <time_set_mode+0x294>
			break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <time_set_mode+0x296>
			break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <time_set_mode+0x296>
			break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <time_set_mode+0x296>
			break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <time_set_mode+0x296>
		default:
			break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <time_set_mode+0x296>
			break;
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <time_set_mode+0x296>
			break;
 8001af0:	bf00      	nop

		}
	}
	timeDisplay();
 8001af2:	f7ff fd41 	bl	8001578 <timeDisplay>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000ce8 	.word	0x20000ce8
 8001b04:	0800b1c4 	.word	0x0800b1c4
 8001b08:	20000d38 	.word	0x20000d38
 8001b0c:	20000d44 	.word	0x20000d44
 8001b10:	0800b1d4 	.word	0x0800b1d4
 8001b14:	0800b1e4 	.word	0x0800b1e4
 8001b18:	0800b1f4 	.word	0x0800b1f4
 8001b1c:	20000294 	.word	0x20000294
 8001b20:	aaaaaaab 	.word	0xaaaaaaab
 8001b24:	2000068c 	.word	0x2000068c
 8001b28:	20000d30 	.word	0x20000d30

08001b2c <alarm_set_mode>:


void alarm_set_mode(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

	enum CLOCK_BUTTON al_button;

	al_button = joyStick_btn_chk();
 8001b32:	f7ff fddb 	bl	80016ec <joyStick_btn_chk>
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]

	if (al_position == 0) {
 8001b3a:	4ba5      	ldr	r3, [pc, #660]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12b      	bne.n	8001b9a <alarm_set_mode+0x6e>
		printf("al_position 0 \r\n");
 8001b42:	48a4      	ldr	r0, [pc, #656]	; (8001dd4 <alarm_set_mode+0x2a8>)
 8001b44:	f008 f966 	bl	8009e14 <puts>
		switch (al_button) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d002      	beq.n	8001b54 <alarm_set_mode+0x28>
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d01f      	beq.n	8001b92 <alarm_set_mode+0x66>
			break;
		case RIGHT:
			al_position = 1;
			break;
		default:
			break;
 8001b52:	e136      	b.n	8001dc2 <alarm_set_mode+0x296>
			if (atime.hours >= 12) {
 8001b54:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001b56:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5a:	2b0b      	cmp	r3, #11
 8001b5c:	dd0c      	ble.n	8001b78 <alarm_set_mode+0x4c>
				atime.hours -= 12;
 8001b5e:	4b9e      	ldr	r3, [pc, #632]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001b60:	f993 3000 	ldrsb.w	r3, [r3]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3b0c      	subs	r3, #12
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	4b9a      	ldr	r3, [pc, #616]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001b6e:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 0;
 8001b70:	4b9a      	ldr	r3, [pc, #616]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	70da      	strb	r2, [r3, #3]
			break;
 8001b76:	e124      	b.n	8001dc2 <alarm_set_mode+0x296>
				atime.hours += 12;
 8001b78:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	330c      	adds	r3, #12
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	b25a      	sxtb	r2, r3
 8001b86:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001b88:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 1;
 8001b8a:	4b94      	ldr	r3, [pc, #592]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	70da      	strb	r2, [r3, #3]
			break;
 8001b90:	e117      	b.n	8001dc2 <alarm_set_mode+0x296>
			al_position = 1;
 8001b92:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
			break;
 8001b98:	e113      	b.n	8001dc2 <alarm_set_mode+0x296>
		}
	} else if (al_position == 1) {
 8001b9a:	4b8d      	ldr	r3, [pc, #564]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d143      	bne.n	8001c2a <alarm_set_mode+0xfe>
		printf("al_position 1 \r\n");
 8001ba2:	488f      	ldr	r0, [pc, #572]	; (8001de0 <alarm_set_mode+0x2b4>)
 8001ba4:	f008 f936 	bl	8009e14 <puts>
		switch (al_button) {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	f200 80fb 	bhi.w	8001da8 <alarm_set_mode+0x27c>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <alarm_set_mode+0x8c>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bd9 	.word	0x08001bd9
 8001bbc:	08001c05 	.word	0x08001c05
 8001bc0:	08001bc9 	.word	0x08001bc9
 8001bc4:	08001bd1 	.word	0x08001bd1
		case RIGHT:
			al_position = 2;
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
			break;
 8001bce:	e0f8      	b.n	8001dc2 <alarm_set_mode+0x296>
		case LEFT:
			al_position = 0;
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
			break;
 8001bd6:	e0f4      	b.n	8001dc2 <alarm_set_mode+0x296>
		case UP:
			atime.hours++;
 8001bd8:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001bda:	f993 3000 	ldrsb.w	r3, [r3]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001be8:	701a      	strb	r2, [r3, #0]
			if (atime.hours >= 12) {
 8001bea:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001bec:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf0:	2b0b      	cmp	r3, #11
 8001bf2:	f340 80db 	ble.w	8001dac <alarm_set_mode+0x280>
				atime.hours = 0;
 8001bf6:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 0;
 8001bfc:	4b77      	ldr	r3, [pc, #476]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	70da      	strb	r2, [r3, #3]
			}
			break;
 8001c02:	e0d3      	b.n	8001dac <alarm_set_mode+0x280>
		case DOWN:
			atime.hours--;
 8001c04:	4b74      	ldr	r3, [pc, #464]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c06:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	b25a      	sxtb	r2, r3
 8001c12:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c14:	701a      	strb	r2, [r3, #0]
			if (atime.hours < 0) {
 8001c16:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c18:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f280 80c3 	bge.w	8001da8 <alarm_set_mode+0x27c>
				atime.hours = 11;
 8001c22:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c24:	220b      	movs	r2, #11
 8001c26:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8001c28:	e0be      	b.n	8001da8 <alarm_set_mode+0x27c>
		}

	} else if (al_position == 2) {
 8001c2a:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d13f      	bne.n	8001cb2 <alarm_set_mode+0x186>
		printf("al_position 2 \r\n");
 8001c32:	486c      	ldr	r0, [pc, #432]	; (8001de4 <alarm_set_mode+0x2b8>)
 8001c34:	f008 f8ee 	bl	8009e14 <puts>
		switch (al_button) {
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f200 80b7 	bhi.w	8001db0 <alarm_set_mode+0x284>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <alarm_set_mode+0x11c>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c67 	.word	0x08001c67
 8001c4c:	08001c8d 	.word	0x08001c8d
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	08001c61 	.word	0x08001c61
		case RIGHT:
			al_position = 3;
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	601a      	str	r2, [r3, #0]
			break;
 8001c5e:	e0b0      	b.n	8001dc2 <alarm_set_mode+0x296>
		case LEFT:
			al_position = 1;
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
		case UP:
			atime.minutes++;
 8001c66:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c76:	705a      	strb	r2, [r3, #1]
			if (atime.minutes >= 60) {
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c7e:	2b3b      	cmp	r3, #59	; 0x3b
 8001c80:	f340 8098 	ble.w	8001db4 <alarm_set_mode+0x288>
				atime.minutes = 0;
 8001c84:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001c8a:	e093      	b.n	8001db4 <alarm_set_mode+0x288>
		case DOWN:
			atime.minutes--;
 8001c8c:	4b52      	ldr	r3, [pc, #328]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001c9c:	705a      	strb	r2, [r3, #1]
			if (atime.minutes < 0) {
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001ca0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f280 8083 	bge.w	8001db0 <alarm_set_mode+0x284>
				atime.minutes = 59;
 8001caa:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001cac:	223b      	movs	r2, #59	; 0x3b
 8001cae:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 8001cb0:	e07e      	b.n	8001db0 <alarm_set_mode+0x284>
		}
	} else if (al_position == 3) {
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	f040 8083 	bne.w	8001dc2 <alarm_set_mode+0x296>
		printf("al_position 3 \r\n");
 8001cbc:	484a      	ldr	r0, [pc, #296]	; (8001de8 <alarm_set_mode+0x2bc>)
 8001cbe:	f008 f8a9 	bl	8009e14 <puts>
		switch (al_button) {
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d876      	bhi.n	8001db8 <alarm_set_mode+0x28c>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <alarm_set_mode+0x1a4>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d61 	.word	0x08001d61
 8001cd4:	08001d85 	.word	0x08001d85
 8001cd8:	08001ce1 	.word	0x08001ce1
 8001cdc:	08001d59 	.word	0x08001d59
		case RIGHT:

			default_nvitem.alarm_time.hours = atime.hours;
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001ce2:	f993 2000 	ldrsb.w	r2, [r3]
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <alarm_set_mode+0x2c0>)
 8001ce8:	71da      	strb	r2, [r3, #7]
			default_nvitem.alarm_time.minutes = atime.minutes;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001cec:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <alarm_set_mode+0x2c0>)
 8001cf2:	721a      	strb	r2, [r3, #8]
			default_nvitem.alarm_time.seconds = atime.seconds;
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001cf6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <alarm_set_mode+0x2c0>)
 8001cfc:	725a      	strb	r2, [r3, #9]

			RTC_Alarm.AlarmTime.Hours = default_nvitem.alarm_time.hours;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <alarm_set_mode+0x2c0>)
 8001d00:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001d08:	701a      	strb	r2, [r3, #0]
			RTC_Alarm.AlarmTime.Minutes = default_nvitem.alarm_time.minutes;
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <alarm_set_mode+0x2c0>)
 8001d0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001d14:	705a      	strb	r2, [r3, #1]
			RTC_Alarm.AlarmTime.Seconds = default_nvitem.alarm_time.seconds;
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <alarm_set_mode+0x2c0>)
 8001d18:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001d20:	709a      	strb	r2, [r3, #2]
			RTC_Alarm.AlarmTime.Hours %= 12;
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <alarm_set_mode+0x2c4>)
 8001d28:	fba3 1302 	umull	r1, r3, r3, r2
 8001d2c:	08d9      	lsrs	r1, r3, #3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <alarm_set_mode+0x2b0>)
 8001d3c:	701a      	strb	r2, [r3, #0]

//			printf("rtc alarm time %s %d: %d: %d\r\n", ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours, RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);

			update_nvitems();
 8001d3e:	f7ff fd1d 	bl	800177c <update_nvitems>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8001d42:	2200      	movs	r2, #0
 8001d44:	492b      	ldr	r1, [pc, #172]	; (8001df4 <alarm_set_mode+0x2c8>)
 8001d46:	482c      	ldr	r0, [pc, #176]	; (8001df8 <alarm_set_mode+0x2cc>)
 8001d48:	f004 ff3e 	bl	8006bc8 <HAL_RTC_SetTime>
			lcd_clear();
 8001d4c:	f7ff fbbe 	bl	80014cc <lcd_clear>

			current_state.mode = NORMAL_STATE;
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <alarm_set_mode+0x2d0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			break;
 8001d56:	e034      	b.n	8001dc2 <alarm_set_mode+0x296>
		case LEFT:
			al_position = 2;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <alarm_set_mode+0x2a4>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
			break;
 8001d5e:	e030      	b.n	8001dc2 <alarm_set_mode+0x296>
		case UP:
			atime.seconds++;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d62:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d70:	709a      	strb	r2, [r3, #2]
			if (atime.seconds >= 60) {
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d74:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d78:	2b3b      	cmp	r3, #59	; 0x3b
 8001d7a:	dd1f      	ble.n	8001dbc <alarm_set_mode+0x290>
				atime.seconds = 0;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001d82:	e01b      	b.n	8001dbc <alarm_set_mode+0x290>
		case DOWN:
			atime.seconds--;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	b25a      	sxtb	r2, r3
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d94:	709a      	strb	r2, [r3, #2]
			if (atime.seconds < 0) {
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001d98:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da0f      	bge.n	8001dc0 <alarm_set_mode+0x294>
				atime.seconds = 59;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <alarm_set_mode+0x2ac>)
 8001da2:	223b      	movs	r2, #59	; 0x3b
 8001da4:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001da6:	e00b      	b.n	8001dc0 <alarm_set_mode+0x294>
			break;
 8001da8:	bf00      	nop
 8001daa:	e00a      	b.n	8001dc2 <alarm_set_mode+0x296>
			break;
 8001dac:	bf00      	nop
 8001dae:	e008      	b.n	8001dc2 <alarm_set_mode+0x296>
			break;
 8001db0:	bf00      	nop
 8001db2:	e006      	b.n	8001dc2 <alarm_set_mode+0x296>
			break;
 8001db4:	bf00      	nop
 8001db6:	e004      	b.n	8001dc2 <alarm_set_mode+0x296>
		default:
			break;
 8001db8:	bf00      	nop
 8001dba:	e002      	b.n	8001dc2 <alarm_set_mode+0x296>
			break;
 8001dbc:	bf00      	nop
 8001dbe:	e000      	b.n	8001dc2 <alarm_set_mode+0x296>
			break;
 8001dc0:	bf00      	nop

		}
	}
	timeDisplay();
 8001dc2:	f7ff fbd9 	bl	8001578 <timeDisplay>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000cec 	.word	0x20000cec
 8001dd4:	0800b204 	.word	0x0800b204
 8001dd8:	20000d3c 	.word	0x20000d3c
 8001ddc:	20000d58 	.word	0x20000d58
 8001de0:	0800b214 	.word	0x0800b214
 8001de4:	0800b224 	.word	0x0800b224
 8001de8:	0800b234 	.word	0x0800b234
 8001dec:	20000294 	.word	0x20000294
 8001df0:	aaaaaaab 	.word	0xaaaaaaab
 8001df4:	20000d44 	.word	0x20000d44
 8001df8:	2000068c 	.word	0x2000068c
 8001dfc:	20000d30 	.word	0x20000d30

08001e00 <music_set_mode>:

void music_set_mode() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
	enum CLOCK_BUTTON mu_button;
	int mu_position, mu_cnt;

	mu_button = joyStick_btn_chk();
 8001e06:	f7ff fc71 	bl	80016ec <joyStick_btn_chk>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	72fb      	strb	r3, [r7, #11]
	mu_position = current_state.music_num;
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <music_set_mode+0xb4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60fb      	str	r3, [r7, #12]
	mu_cnt = sizeof(alarmMusic) / sizeof(alarmMusic[0]);
 8001e14:	2303      	movs	r3, #3
 8001e16:	607b      	str	r3, [r7, #4]

	switch (mu_button) {
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d838      	bhi.n	8001e90 <music_set_mode+0x90>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <music_set_mode+0x24>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e45 	.word	0x08001e45
 8001e2c:	08001e59 	.word	0x08001e59
 8001e30:	08001e6d 	.word	0x08001e6d
	case NOTHING:
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e34:	4820      	ldr	r0, [pc, #128]	; (8001eb8 <music_set_mode+0xb8>)
 8001e36:	f005 fb31 	bl	800749c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	481f      	ldr	r0, [pc, #124]	; (8001ebc <music_set_mode+0xbc>)
 8001e3e:	f005 fc7d 	bl	800773c <HAL_TIM_PWM_Stop>
		break;
 8001e42:	e02a      	b.n	8001e9a <music_set_mode+0x9a>
	case UP:
		mu_position++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
		if (mu_position == mu_cnt) {
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d120      	bne.n	8001e94 <music_set_mode+0x94>
			mu_position = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001e56:	e01d      	b.n	8001e94 <music_set_mode+0x94>
	case DOWN:
		mu_position--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
		if (mu_position < 0) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da19      	bge.n	8001e98 <music_set_mode+0x98>
			mu_position = mu_cnt - 1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001e6a:	e015      	b.n	8001e98 <music_set_mode+0x98>
	case RIGHT:
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <music_set_mode+0xb8>)
 8001e6e:	f005 fb15 	bl	800749c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001e72:	2108      	movs	r1, #8
 8001e74:	4811      	ldr	r0, [pc, #68]	; (8001ebc <music_set_mode+0xbc>)
 8001e76:	f005 fc61 	bl	800773c <HAL_TIM_PWM_Stop>

		default_nvitem.alarm_music_num = mu_position;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <music_set_mode+0xc0>)
 8001e80:	729a      	strb	r2, [r3, #10]

		update_nvitems();
 8001e82:	f7ff fc7b 	bl	800177c <update_nvitems>
		lcd_clear();
 8001e86:	f7ff fb21 	bl	80014cc <lcd_clear>

		current_state.mode = NORMAL_STATE;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <music_set_mode+0xb4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
	default:
		break;
 8001e90:	bf00      	nop
 8001e92:	e002      	b.n	8001e9a <music_set_mode+0x9a>
		break;
 8001e94:	bf00      	nop
 8001e96:	e000      	b.n	8001e9a <music_set_mode+0x9a>
		break;
 8001e98:	bf00      	nop
	}

	current_state.music_num = mu_position;
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <music_set_mode+0xb4>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6053      	str	r3, [r2, #4]

	musicDisplay(mu_position);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f879 	bl	8001f98 <musicDisplay>
	musicPlay(mu_position);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f8a6 	bl	8001ff8 <musicPlay>

}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000d30 	.word	0x20000d30
 8001eb8:	200006ac 	.word	0x200006ac
 8001ebc:	200006f4 	.word	0x200006f4
 8001ec0:	20000294 	.word	0x20000294

08001ec4 <melodyPlay>:


void melodyPlay(_BUZZER* song, int melodySize) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]

		uint16_t melody = (uint16_t) (1000000 / song[seq].freq);
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <melodyPlay+0xb8>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <melodyPlay+0xbc>)
 8001ede:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ee2:	81fb      	strh	r3, [r7, #14]

		if (stop == 1) {
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <melodyPlay+0xc0>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10c      	bne.n	8001f06 <melodyPlay+0x42>
			TIM2->ARR = 2000;
 8001eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ef0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	4823      	ldr	r0, [pc, #140]	; (8001f88 <melodyPlay+0xc4>)
 8001efa:	f005 fc1f 	bl	800773c <HAL_TIM_PWM_Stop>
			stop = 0;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <melodyPlay+0xc0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e030      	b.n	8001f68 <melodyPlay+0xa4>
		} else {
			if (seq == melodySize || current_state.mode != MUSIC_SELECT) {
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <melodyPlay+0xb8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <melodyPlay+0x56>
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <melodyPlay+0xc8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d003      	beq.n	8001f22 <melodyPlay+0x5e>
				seq = 0;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <melodyPlay+0xb8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e022      	b.n	8001f68 <melodyPlay+0xa4>
			} else {
				TIM3->ARR = melody;
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <melodyPlay+0xcc>)
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM3->CCR3 = melody / 2;
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <melodyPlay+0xcc>)
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->ARR = song[seq].delay * 2000;
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <melodyPlay+0xb8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	885b      	ldrh	r3, [r3, #2]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f44:	fb03 f202 	mul.w	r2, r3, r2
 8001f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f4e:	2108      	movs	r1, #8
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <melodyPlay+0xc4>)
 8001f52:	f005 fb2b 	bl	80075ac <HAL_TIM_PWM_Start>
				stop = 1;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <melodyPlay+0xc0>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
				seq++;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <melodyPlay+0xb8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <melodyPlay+0xb8>)
 8001f66:	701a      	strb	r2, [r3, #0]
			}
		}
		printf("    seq is %d\r\n", seq);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <melodyPlay+0xb8>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <melodyPlay+0xd0>)
 8001f70:	f007 feea 	bl	8009d48 <iprintf>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000364 	.word	0x20000364
 8001f80:	000f4240 	.word	0x000f4240
 8001f84:	20000365 	.word	0x20000365
 8001f88:	200006f4 	.word	0x200006f4
 8001f8c:	20000d30 	.word	0x20000d30
 8001f90:	40000400 	.word	0x40000400
 8001f94:	0800b244 	.word	0x0800b244

08001f98 <musicDisplay>:

void musicDisplay(int musicNumber) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	char music_str[30];

	sprintf(music_str, "%d. %s ", musicNumber,
			alarmMusic[musicNumber].musicTitle);
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00da      	lsls	r2, r3, #3
 8001faa:	1ad2      	subs	r2, r2, r3
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <musicDisplay+0x54>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	3301      	adds	r3, #1
	sprintf(music_str, "%d. %s ", musicNumber,
 8001fb2:	f107 0008 	add.w	r0, r7, #8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <musicDisplay+0x58>)
 8001fba:	f007 ff67 	bl	8009e8c <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	204e      	movs	r0, #78	; 0x4e
 8001fc2:	f7fe fbad 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Music Setting ");
 8001fc6:	490b      	ldr	r1, [pc, #44]	; (8001ff4 <musicDisplay+0x5c>)
 8001fc8:	204e      	movs	r0, #78	; 0x4e
 8001fca:	f7fe fbea 	bl	80007a2 <LCD_SendString>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001fce:	21c0      	movs	r1, #192	; 0xc0
 8001fd0:	204e      	movs	r0, #78	; 0x4e
 8001fd2:	f7fe fba5 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, music_str);
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	4619      	mov	r1, r3
 8001fdc:	204e      	movs	r0, #78	; 0x4e
 8001fde:	f7fe fbe0 	bl	80007a2 <LCD_SendString>
}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200002a0 	.word	0x200002a0
 8001ff0:	0800b254 	.word	0x0800b254
 8001ff4:	0800b25c 	.word	0x0800b25c

08001ff8 <musicPlay>:

void musicPlay(int musicNumber) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

	void (*fp) (_BUZZER*, int);

	fp = melodyPlay;
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <musicPlay+0x9c>)
 8002002:	60fb      	str	r3, [r7, #12]

	switch(musicNumber) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d029      	beq.n	800205e <musicPlay+0x66>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	dc36      	bgt.n	800207e <musicPlay+0x86>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <musicPlay+0x26>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d010      	beq.n	800203e <musicPlay+0x46>
		if(current_state.music_num != musicNumber) {
					seq = 0;
				}
		break;
	default:
		break;
 800201c:	e02f      	b.n	800207e <musicPlay+0x86>
		printf("schoolBell play!");
 800201e:	481e      	ldr	r0, [pc, #120]	; (8002098 <musicPlay+0xa0>)
 8002020:	f007 fe92 	bl	8009d48 <iprintf>
		melodyPlay(schoolBell, sizeof(schoolBell)/sizeof(schoolBell[0]));
 8002024:	2118      	movs	r1, #24
 8002026:	481d      	ldr	r0, [pc, #116]	; (800209c <musicPlay+0xa4>)
 8002028:	f7ff ff4c 	bl	8001ec4 <melodyPlay>
		if(current_state.music_num != musicNumber) {
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <musicPlay+0xa8>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d025      	beq.n	8002082 <musicPlay+0x8a>
			seq = 0;
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <musicPlay+0xac>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
		break;
 800203c:	e021      	b.n	8002082 <musicPlay+0x8a>
		printf("jingleBell play!");
 800203e:	481a      	ldr	r0, [pc, #104]	; (80020a8 <musicPlay+0xb0>)
 8002040:	f007 fe82 	bl	8009d48 <iprintf>
		melodyPlay(jingleBell, sizeof(jingleBell)/sizeof(jingleBell[0]));
 8002044:	215d      	movs	r1, #93	; 0x5d
 8002046:	4819      	ldr	r0, [pc, #100]	; (80020ac <musicPlay+0xb4>)
 8002048:	f7ff ff3c 	bl	8001ec4 <melodyPlay>
		if(current_state.music_num != musicNumber) {
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <musicPlay+0xa8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d017      	beq.n	8002086 <musicPlay+0x8e>
			seq = 0;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <musicPlay+0xac>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
		break;
 800205c:	e013      	b.n	8002086 <musicPlay+0x8e>
		printf("silent night play!");
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <musicPlay+0xb8>)
 8002060:	f007 fe72 	bl	8009d48 <iprintf>
		melodyPlay(silentNight, sizeof(silentNight)/sizeof(silentNight[0]));
 8002064:	212e      	movs	r1, #46	; 0x2e
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <musicPlay+0xbc>)
 8002068:	f7ff ff2c 	bl	8001ec4 <melodyPlay>
		if(current_state.music_num != musicNumber) {
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <musicPlay+0xa8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d009      	beq.n	800208a <musicPlay+0x92>
					seq = 0;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <musicPlay+0xac>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
		break;
 800207c:	e005      	b.n	800208a <musicPlay+0x92>
		break;
 800207e:	bf00      	nop
 8002080:	e004      	b.n	800208c <musicPlay+0x94>
		break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <musicPlay+0x94>
		break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <musicPlay+0x94>
		break;
 800208a:	bf00      	nop

	}

}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	08001ec5 	.word	0x08001ec5
 8002098:	0800b26c 	.word	0x0800b26c
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000d30 	.word	0x20000d30
 80020a4:	20000364 	.word	0x20000364
 80020a8:	0800b280 	.word	0x0800b280
 80020ac:	20000060 	.word	0x20000060
 80020b0:	0800b294 	.word	0x0800b294
 80020b4:	200001d4 	.word	0x200001d4

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_MspInit+0x4c>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_MspInit+0x4c>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_ADC_MspInit+0x110>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d171      	bne.n	800221a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_ADC_MspInit+0x114>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b38      	ldr	r3, [pc, #224]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_ADC_MspInit+0x114>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_ADC_MspInit+0x114>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800218a:	2309      	movs	r3, #9
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <HAL_ADC_MspInit+0x118>)
 800219e:	f002 fd23 	bl	8004be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a2:	2308      	movs	r3, #8
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a6:	2303      	movs	r3, #3
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	481e      	ldr	r0, [pc, #120]	; (8002230 <HAL_ADC_MspInit+0x11c>)
 80021b6:	f002 fd17 	bl	8004be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_ADC_MspInit+0x124>)
 80021be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_ADC_MspInit+0x120>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <HAL_ADC_MspInit+0x120>)
 8002200:	f001 fac2 	bl	8003788 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800220a:	f7ff ff55 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_ADC_MspInit+0x120>)
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_ADC_MspInit+0x120>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012000 	.word	0x40012000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020800 	.word	0x40020800
 8002230:	40020000 	.word	0x40020000
 8002234:	20000528 	.word	0x20000528
 8002238:	40026410 	.word	0x40026410

0800223c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_ETH_MspInit+0x174>)
 800225a:	4293      	cmp	r3, r2
 800225c:	f040 80a4 	bne.w	80023a8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 800226a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 8002286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800228a:	6313      	str	r3, [r2, #48]	; 0x30
 800228c:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a2f      	ldr	r2, [pc, #188]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_ETH_MspInit+0x178>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002324:	2332      	movs	r3, #50	; 0x32
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002334:	230b      	movs	r3, #11
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	481e      	ldr	r0, [pc, #120]	; (80023b8 <HAL_ETH_MspInit+0x17c>)
 8002340:	f002 fc52 	bl	8004be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002344:	2386      	movs	r3, #134	; 0x86
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002354:	230b      	movs	r3, #11
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	4817      	ldr	r0, [pc, #92]	; (80023bc <HAL_ETH_MspInit+0x180>)
 8002360:	f002 fc42 	bl	8004be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002376:	230b      	movs	r3, #11
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	480f      	ldr	r0, [pc, #60]	; (80023c0 <HAL_ETH_MspInit+0x184>)
 8002382:	f002 fc31 	bl	8004be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002386:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002398:	230b      	movs	r3, #11
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4808      	ldr	r0, [pc, #32]	; (80023c4 <HAL_ETH_MspInit+0x188>)
 80023a4:	f002 fc20 	bl	8004be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40028000 	.word	0x40028000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40021800 	.word	0x40021800

080023c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_I2C_MspInit+0x84>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12c      	bne.n	8002444 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240c:	2312      	movs	r3, #18
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002418:	2304      	movs	r3, #4
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <HAL_I2C_MspInit+0x8c>)
 8002424:	f002 fbe0 	bl	8004be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_I2C_MspInit+0x88>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_I2C_MspInit+0x88>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_I2C_MspInit+0x88>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002444:	bf00      	nop
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400
 8002450:	40023800 	.word	0x40023800
 8002454:	40020400 	.word	0x40020400

08002458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08e      	sub	sp, #56	; 0x38
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	2230      	movs	r2, #48	; 0x30
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f007 fe07 	bl	800a07c <memset>
  if(hrtc->Instance==RTC)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_RTC_MspInit+0x4c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d111      	bne.n	800249c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002478:	2320      	movs	r3, #32
 800247a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800247c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	4618      	mov	r0, r3
 8002488:	f004 f968 	bl	800675c <HAL_RCCEx_PeriphCLKConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002492:	f7ff fe11 	bl	80020b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_RTC_MspInit+0x50>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3738      	adds	r7, #56	; 0x38
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40002800 	.word	0x40002800
 80024a8:	42470e3c 	.word	0x42470e3c

080024ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024da:	e012      	b.n	8002502 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_TIM_Base_MspInit+0x68>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10d      	bne.n	8002502 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_TIM_Base_MspInit+0x64>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40000400 	.word	0x40000400

08002518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <HAL_TIM_MspPostInit+0x68>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d11d      	bne.n	8002576 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_TIM_MspPostInit+0x6c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_TIM_MspPostInit+0x6c>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_TIM_MspPostInit+0x6c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002556:	2301      	movs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_TIM_MspPostInit+0x70>)
 8002572:	f002 fb39 	bl	8004be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40000400 	.word	0x40000400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a32      	ldr	r2, [pc, #200]	; (8002674 <HAL_UART_MspInit+0xe8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12c      	bne.n	8002608 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_UART_MspInit+0xec>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025e6:	2360      	movs	r3, #96	; 0x60
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025f6:	2307      	movs	r3, #7
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	481e      	ldr	r0, [pc, #120]	; (800267c <HAL_UART_MspInit+0xf0>)
 8002602:	f002 faf1 	bl	8004be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002606:	e031      	b.n	800266c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_UART_MspInit+0xf4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d12c      	bne.n	800266c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_UART_MspInit+0xec>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_UART_MspInit+0xec>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_UART_MspInit+0xec>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_UART_MspInit+0xec>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_UART_MspInit+0xec>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_UART_MspInit+0xec>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800264a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800265c:	2307      	movs	r3, #7
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <HAL_UART_MspInit+0xf0>)
 8002668:	f002 fabe 	bl	8004be8 <HAL_GPIO_Init>
}
 800266c:	bf00      	nop
 800266e:	3730      	adds	r7, #48	; 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40004400 	.word	0x40004400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40004800 	.word	0x40004800

08002684 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a4:	d13f      	bne.n	8002726 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_PCD_MspInit+0xac>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_PCD_MspInit+0xac>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_PCD_MspInit+0xac>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026d4:	230a      	movs	r3, #10
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4815      	ldr	r0, [pc, #84]	; (8002734 <HAL_PCD_MspInit+0xb0>)
 80026e0:	f002 fa82 	bl	8004be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <HAL_PCD_MspInit+0xb0>)
 80026fa:	f002 fa75 	bl	8004be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_PCD_MspInit+0xac>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_PCD_MspInit+0xac>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	6353      	str	r3, [r2, #52]	; 0x34
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_PCD_MspInit+0xac>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_PCD_MspInit+0xac>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_PCD_MspInit+0xac>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40020000 	.word	0x40020000

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 f964 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8002790:	2008      	movs	r0, #8
 8002792:	f002 fc21 	bl	8004fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <ADC_IRQHandler+0x10>)
 80027a2:	f000 f9dc 	bl	8002b5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200004e0 	.word	0x200004e0

080027b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TIM2_IRQHandler+0x10>)
 80027b6:	f005 f831 	bl	800781c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200006ac 	.word	0x200006ac

080027c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <USART2_IRQHandler+0x10>)
 80027ca:	f005 ff91 	bl	80086f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000073c 	.word	0x2000073c

080027d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <USART3_IRQHandler+0x10>)
 80027de:	f005 ff87 	bl	80086f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000780 	.word	0x20000780

080027ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80027f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027f4:	f002 fbf0 	bl	8004fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <RTC_Alarm_IRQHandler+0x10>)
 8002802:	f004 fcef 	bl	80071e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000068c 	.word	0x2000068c

08002810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DMA2_Stream0_IRQHandler+0x10>)
 8002816:	f001 f94f 	bl	8003ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000528 	.word	0x20000528

08002824 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e00a      	b.n	800284c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002836:	f3af 8000 	nop.w
 800283a:	4601      	mov	r1, r0
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	b2ca      	uxtb	r2, r1
 8002844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbf0      	blt.n	8002836 <_read+0x12>
  }

  return len;
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_close>:
  }
  return len;
}

int _close(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002886:	605a      	str	r2, [r3, #4]
  return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_isatty>:

int _isatty(int file)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f007 fc0e 	bl	800a118 <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20030000 	.word	0x20030000
 8002928:	00000400 	.word	0x00000400
 800292c:	20000d8c 	.word	0x20000d8c
 8002930:	20000f00 	.word	0x20000f00

08002934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <SystemInit+0x20>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <SystemInit+0x20>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002990 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002974:	4c0b      	ldr	r4, [pc, #44]	; (80029a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002982:	f7ff ffd7 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002986:	f007 fbcd 	bl	800a124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298a:	f7fd ff2d 	bl	80007e8 <main>
  bx  lr    
 800298e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002990:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 800299c:	0800b30c 	.word	0x0800b30c
  ldr r2, =_sbss
 80029a0:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 80029a4:	20000f00 	.word	0x20000f00

080029a8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <CAN1_RX0_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_Init+0x40>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_Init+0x40>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_Init+0x40>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 fe95 	bl	8003704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f808 	bl	80029f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e0:	f7ff fb70 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_InitTick+0x54>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x58>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fead 	bl	800376e <HAL_SYSTICK_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00e      	b.n	8002a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d80a      	bhi.n	8002a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f000 fe75 	bl	800371a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <HAL_InitTick+0x5c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200002e0 	.word	0x200002e0
 8002a48:	200002e8 	.word	0x200002e8
 8002a4c:	200002e4 	.word	0x200002e4

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	200002e8 	.word	0x200002e8
 8002a74:	20000d90 	.word	0x20000d90

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000d90 	.word	0x20000d90

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002e8 	.word	0x200002e8

08002ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e033      	b.n	8002b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fb0c 	bl	8002114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b1e:	f023 0302 	bic.w	r3, r3, #2
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fb92 	bl	8003254 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
 8002b46:	e001      	b.n	8002b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d049      	beq.n	8002c28 <HAL_ADC_IRQHandler+0xca>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d046      	beq.n	8002c28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d105      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d12b      	bne.n	8002c18 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d119      	bne.n	8002c18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0220 	bic.w	r2, r2, #32
 8002bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f9c1 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0212 	mvn.w	r2, #18
 8002c26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d057      	beq.n	8002cee <HAL_ADC_IRQHandler+0x190>
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d054      	beq.n	8002cee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d139      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d12b      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d124      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11d      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d119      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fc36 	bl	8003550 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 020c 	mvn.w	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x1d6>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d014      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10d      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94f 	bl	8002fc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0201 	mvn.w	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d015      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x218>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0220 	mvn.w	r2, #32
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f938 	bl	8002fdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	601a      	str	r2, [r3, #0]
  }
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0e9      	b.n	8002f72 <HAL_ADC_Start_DMA+0x1f2>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d018      	beq.n	8002de6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc4:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_ADC_Start_DMA+0x1fc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6d      	ldr	r2, [pc, #436]	; (8002f80 <HAL_ADC_Start_DMA+0x200>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9a      	lsrs	r2, r3, #18
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002dd8:	e002      	b.n	8002de0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f9      	bne.n	8002dda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d107      	bne.n	8002e06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 80a1 	bne.w	8002f58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d106      	bne.n	8002e64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f023 0206 	bic.w	r2, r3, #6
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
 8002e62:	e002      	b.n	8002e6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <HAL_ADC_Start_DMA+0x204>)
 8002e74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <HAL_ADC_Start_DMA+0x208>)
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_ADC_Start_DMA+0x20c>)
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	4a41      	ldr	r2, [pc, #260]	; (8002f90 <HAL_ADC_Start_DMA+0x210>)
 8002e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ea6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	334c      	adds	r3, #76	; 0x4c
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f000 fd0c 	bl	80038e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d12a      	bne.n	8002f2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <HAL_ADC_Start_DMA+0x214>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d015      	beq.n	8002f0e <HAL_ADC_Start_DMA+0x18e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <HAL_ADC_Start_DMA+0x218>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_Start_DMA+0x178>
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_ADC_Start_DMA+0x204>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_ADC_Start_DMA+0x21c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d136      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_ADC_Start_DMA+0x204>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d130      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d129      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e020      	b.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <HAL_ADC_Start_DMA+0x214>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d11b      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d114      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e00b      	b.n	8002f70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200002e0 	.word	0x200002e0
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	40012300 	.word	0x40012300
 8002f88:	0800344d 	.word	0x0800344d
 8002f8c:	08003507 	.word	0x08003507
 8002f90:	08003523 	.word	0x08003523
 8002f94:	40012000 	.word	0x40012000
 8002f98:	40012100 	.word	0x40012100
 8002f9c:	40012200 	.word	0x40012200

08002fa0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x1c>
 8003008:	2302      	movs	r3, #2
 800300a:	e113      	b.n	8003234 <HAL_ADC_ConfigChannel+0x244>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b09      	cmp	r3, #9
 800301a:	d925      	bls.n	8003068 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68d9      	ldr	r1, [r3, #12]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	2207      	movs	r2, #7
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43da      	mvns	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	400a      	ands	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	4603      	mov	r3, r0
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4403      	add	r3, r0
 800305a:	3b1e      	subs	r3, #30
 800305c:	409a      	lsls	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	e022      	b.n	80030ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6919      	ldr	r1, [r3, #16]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	2207      	movs	r2, #7
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	4618      	mov	r0, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4403      	add	r3, r0
 80030a4:	409a      	lsls	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d824      	bhi.n	8003100 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b05      	subs	r3, #5
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	400a      	ands	r2, r1
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b05      	subs	r3, #5
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34
 80030fe:	e04c      	b.n	800319a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d824      	bhi.n	8003152 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b23      	subs	r3, #35	; 0x23
 800311a:	221f      	movs	r2, #31
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43da      	mvns	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	400a      	ands	r2, r1
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b23      	subs	r3, #35	; 0x23
 8003144:	fa00 f203 	lsl.w	r2, r0, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
 8003150:	e023      	b.n	800319a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3b41      	subs	r3, #65	; 0x41
 8003164:	221f      	movs	r2, #31
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b41      	subs	r3, #65	; 0x41
 800318e:	fa00 f203 	lsl.w	r2, r0, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319a:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_ADC_ConfigChannel+0x250>)
 800319c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a28      	ldr	r2, [pc, #160]	; (8003244 <HAL_ADC_ConfigChannel+0x254>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10f      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1d8>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b12      	cmp	r3, #18
 80031ae:	d10b      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_ADC_ConfigChannel+0x254>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d12b      	bne.n	800322a <HAL_ADC_ConfigChannel+0x23a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_ADC_ConfigChannel+0x258>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x1f4>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b11      	cmp	r3, #17
 80031e2:	d122      	bne.n	800322a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_ADC_ConfigChannel+0x258>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d111      	bne.n	800322a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_ADC_ConfigChannel+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_ADC_ConfigChannel+0x260>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	0c9a      	lsrs	r2, r3, #18
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800321c:	e002      	b.n	8003224 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f9      	bne.n	800321e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40012300 	.word	0x40012300
 8003244:	40012000 	.word	0x40012000
 8003248:	10000012 	.word	0x10000012
 800324c:	200002e0 	.word	0x200002e0
 8003250:	431bde83 	.word	0x431bde83

08003254 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800325c:	4b79      	ldr	r3, [pc, #484]	; (8003444 <ADC_Init+0x1f0>)
 800325e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	021a      	lsls	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	4a58      	ldr	r2, [pc, #352]	; (8003448 <ADC_Init+0x1f4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800331c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6899      	ldr	r1, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	e00f      	b.n	8003352 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003350:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0202 	bic.w	r2, r2, #2
 8003360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7e1b      	ldrb	r3, [r3, #24]
 800336c:	005a      	lsls	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800339e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	3b01      	subs	r3, #1
 80033ac:	035a      	lsls	r2, r3, #13
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	e007      	b.n	80033c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	051a      	lsls	r2, r3, #20
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800340a:	025a      	lsls	r2, r3, #9
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	029a      	lsls	r2, r3, #10
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40012300 	.word	0x40012300
 8003448:	0f000001 	.word	0x0f000001

0800344c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13c      	bne.n	80034e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d12b      	bne.n	80034d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d127      	bne.n	80034d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d119      	bne.n	80034d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0220 	bic.w	r2, r2, #32
 80034b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff fd61 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034de:	e00e      	b.n	80034fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fd75 	bl	8002fdc <HAL_ADC_ErrorCallback>
}
 80034f2:	e004      	b.n	80034fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fd4d 	bl	8002fb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff fd4a 	bl	8002fdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <__NVIC_EnableIRQ+0x38>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	; (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
         );
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d0:	d301      	bcc.n	80036d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00f      	b.n	80036f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <SysTick_Config+0x40>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036de:	210f      	movs	r1, #15
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f7ff ff8e 	bl	8003604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SysTick_Config+0x40>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <SysTick_Config+0x40>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010

08003704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff29 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff3e 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff8e 	bl	8003658 <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff5d 	bl	8003604 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff31 	bl	80035c8 <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffa2 	bl	80036c0 <SysTick_Config>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003794:	f7ff f970 	bl	8002a78 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e099      	b.n	80038d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c4:	e00f      	b.n	80037e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c6:	f7ff f957 	bl	8002a78 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d908      	bls.n	80037e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e078      	b.n	80038d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e8      	bne.n	80037c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <HAL_DMA_Init+0x158>)
 8003800:	4013      	ands	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	2b04      	cmp	r3, #4
 800383e:	d107      	bne.n	8003850 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4313      	orrs	r3, r2
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b04      	cmp	r3, #4
 8003878:	d117      	bne.n	80038aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb01 	bl	8003e94 <DMA_CheckFifoParam>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038a6:	2301      	movs	r3, #1
 80038a8:	e016      	b.n	80038d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fab8 	bl	8003e28 <DMA_CalcBaseAndBitshift>
 80038b8:	4603      	mov	r3, r0
 80038ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	223f      	movs	r2, #63	; 0x3f
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	f010803f 	.word	0xf010803f

080038e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_DMA_Start_IT+0x26>
 8003906:	2302      	movs	r3, #2
 8003908:	e040      	b.n	800398c <HAL_DMA_Start_IT+0xa8>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d12f      	bne.n	800397e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa4a 	bl	8003dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	223f      	movs	r2, #63	; 0x3f
 800393e:	409a      	lsls	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0216 	orr.w	r2, r2, #22
 8003952:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e005      	b.n	800398a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039a2:	f7ff f869 	bl	8002a78 <HAL_GetTick>
 80039a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e052      	b.n	8003a6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0216 	bic.w	r2, r2, #22
 80039d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_DMA_Abort+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0208 	bic.w	r2, r2, #8
 8003a04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a16:	e013      	b.n	8003a40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a18:	f7ff f82e 	bl	8002a78 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d90c      	bls.n	8003a40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e015      	b.n	8003a6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e4      	bne.n	8003a18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	223f      	movs	r2, #63	; 0x3f
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00c      	b.n	8003aac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2205      	movs	r2, #5
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac4:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_DMA_IRQHandler+0x248>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8e      	ldr	r2, [pc, #568]	; (8003d04 <HAL_DMA_IRQHandler+0x24c>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01a      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	2208      	movs	r2, #8
 8003b12:	409a      	lsls	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f043 0201 	orr.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	2201      	movs	r2, #1
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2204      	movs	r2, #4
 8003b60:	409a      	lsls	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d012      	beq.n	8003b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f043 0204 	orr.w	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	2210      	movs	r2, #16
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d043      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03c      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d024      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	e01f      	b.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
 8003bf8:	e016      	b.n	8003c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0208 	bic.w	r2, r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 808f 	beq.w	8003d58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8087 	beq.w	8003d58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	2220      	movs	r2, #32
 8003c50:	409a      	lsls	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d136      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0216 	bic.w	r2, r2, #22
 8003c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_DMA_IRQHandler+0x1da>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0208 	bic.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d07e      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
        }
        return;
 8003cce:	e079      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d031      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
 8003cfc:	e02c      	b.n	8003d58 <HAL_DMA_IRQHandler+0x2a0>
 8003cfe:	bf00      	nop
 8003d00:	200002e0 	.word	0x200002e0
 8003d04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d023      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
 8003d18:	e01e      	b.n	8003d58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10f      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0210 	bic.w	r2, r2, #16
 8003d36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d032      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2205      	movs	r2, #5
 8003d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d307      	bcc.n	8003da0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x2cc>
 8003d9e:	e000      	b.n	8003da2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003da0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	e000      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dc4:	bf00      	nop
    }
  }
}
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d108      	bne.n	8003e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0a:	e007      	b.n	8003e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	3b10      	subs	r3, #16
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <DMA_CalcBaseAndBitshift+0x64>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <DMA_CalcBaseAndBitshift+0x68>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d909      	bls.n	8003e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
 8003e68:	e007      	b.n	8003e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	aaaaaaab 	.word	0xaaaaaaab
 8003e90:	0800b2c0 	.word	0x0800b2c0

08003e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11f      	bne.n	8003eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d856      	bhi.n	8003f62 <DMA_CheckFifoParam+0xce>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <DMA_CheckFifoParam+0x28>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003edf 	.word	0x08003edf
 8003ec4:	08003ecd 	.word	0x08003ecd
 8003ec8:	08003f63 	.word	0x08003f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d046      	beq.n	8003f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e043      	b.n	8003f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee6:	d140      	bne.n	8003f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e03d      	b.n	8003f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef6:	d121      	bne.n	8003f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d837      	bhi.n	8003f6e <DMA_CheckFifoParam+0xda>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <DMA_CheckFifoParam+0x70>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f1b 	.word	0x08003f1b
 8003f0c:	08003f15 	.word	0x08003f15
 8003f10:	08003f2d 	.word	0x08003f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      break;
 8003f18:	e030      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d025      	beq.n	8003f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2a:	e022      	b.n	8003f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f34:	d11f      	bne.n	8003f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3a:	e01c      	b.n	8003f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d903      	bls.n	8003f4a <DMA_CheckFifoParam+0xb6>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d003      	beq.n	8003f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f48:	e018      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4e:	e015      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e00b      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f62:	bf00      	nop
 8003f64:	e00a      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
 8003f68:	e008      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e006      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <DMA_CheckFifoParam+0xe8>
      break;
 8003f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop

08003f8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06c      	b.n	8004078 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2223      	movs	r2, #35	; 0x23
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fe f943 	bl	800223c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a30      	ldr	r2, [pc, #192]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4927      	ldr	r1, [pc, #156]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004008:	f7fe fd36 	bl	8002a78 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800400e:	e011      	b.n	8004034 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004010:	f7fe fd32 	bl	8002a78 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800401e:	d909      	bls.n	8004034 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	22e0      	movs	r2, #224	; 0xe0
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e021      	b.n	8004078 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e4      	bne.n	8004010 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f958 	bl	80042fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9ff 	bl	8004450 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa55 	bl	8004502 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	461a      	mov	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9bd 	bl	80043e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2210      	movs	r2, #16
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	40013800 	.word	0x40013800

08004088 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <ETH_SetMACConfig+0x15c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7c1b      	ldrb	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <ETH_SetMACConfig+0x28>
 80040aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040ae:	e000      	b.n	80040b2 <ETH_SetMACConfig+0x2a>
 80040b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7c5b      	ldrb	r3, [r3, #17]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <ETH_SetMACConfig+0x38>
 80040ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040be:	e000      	b.n	80040c2 <ETH_SetMACConfig+0x3a>
 80040c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7fdb      	ldrb	r3, [r3, #31]
 80040ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	7f92      	ldrb	r2, [r2, #30]
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d102      	bne.n	80040e6 <ETH_SetMACConfig+0x5e>
 80040e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e4:	e000      	b.n	80040e8 <ETH_SetMACConfig+0x60>
 80040e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80040e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	7f1b      	ldrb	r3, [r3, #28]
 80040ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004106:	2a00      	cmp	r2, #0
 8004108:	d102      	bne.n	8004110 <ETH_SetMACConfig+0x88>
 800410a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410e:	e000      	b.n	8004112 <ETH_SetMACConfig+0x8a>
 8004110:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004112:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	7bdb      	ldrb	r3, [r3, #15]
 8004118:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800411a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004120:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004128:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800412a:	4313      	orrs	r3, r2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004142:	2001      	movs	r0, #1
 8004144:	f7fe fca4 	bl	8002a90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004166:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800416e:	2a00      	cmp	r2, #0
 8004170:	d101      	bne.n	8004176 <ETH_SetMACConfig+0xee>
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	e000      	b.n	8004178 <ETH_SetMACConfig+0xf0>
 8004176:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004178:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800417e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004186:	2a01      	cmp	r2, #1
 8004188:	d101      	bne.n	800418e <ETH_SetMACConfig+0x106>
 800418a:	2208      	movs	r2, #8
 800418c:	e000      	b.n	8004190 <ETH_SetMACConfig+0x108>
 800418e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004190:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004198:	2a01      	cmp	r2, #1
 800419a:	d101      	bne.n	80041a0 <ETH_SetMACConfig+0x118>
 800419c:	2204      	movs	r2, #4
 800419e:	e000      	b.n	80041a2 <ETH_SetMACConfig+0x11a>
 80041a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80041aa:	2a01      	cmp	r2, #1
 80041ac:	d101      	bne.n	80041b2 <ETH_SetMACConfig+0x12a>
 80041ae:	2202      	movs	r2, #2
 80041b0:	e000      	b.n	80041b4 <ETH_SetMACConfig+0x12c>
 80041b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041b4:	4313      	orrs	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fe fc5f 	bl	8002a90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	ff20810f 	.word	0xff20810f

080041e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <ETH_SetDMAConfig+0x110>)
 8004202:	4013      	ands	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7b1b      	ldrb	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <ETH_SetDMAConfig+0x2c>
 800420e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004212:	e000      	b.n	8004216 <ETH_SetDMAConfig+0x2e>
 8004214:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	7b5b      	ldrb	r3, [r3, #13]
 800421a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800421c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	7f52      	ldrb	r2, [r2, #29]
 8004222:	2a00      	cmp	r2, #0
 8004224:	d102      	bne.n	800422c <ETH_SetDMAConfig+0x44>
 8004226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800422a:	e000      	b.n	800422e <ETH_SetDMAConfig+0x46>
 800422c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800422e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7b9b      	ldrb	r3, [r3, #14]
 8004234:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004236:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800423c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	7f1b      	ldrb	r3, [r3, #28]
 8004242:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004244:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7f9b      	ldrb	r3, [r3, #30]
 800424a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800424c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004252:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800425a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800425c:	4313      	orrs	r3, r2
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800427e:	2001      	movs	r0, #1
 8004280:	f7fe fc06 	bl	8002a90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	461a      	mov	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	791b      	ldrb	r3, [r3, #4]
 8004296:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800429c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80042a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80042b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fe fbd7 	bl	8002a90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	f8de3f23 	.word	0xf8de3f23

080042fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b0a6      	sub	sp, #152	; 0x98
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004338:	2300      	movs	r3, #0
 800433a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004342:	2300      	movs	r3, #0
 8004344:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800435e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004368:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004370:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe86 	bl	8004088 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800437c:	2301      	movs	r3, #1
 800437e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004380:	2301      	movs	r3, #1
 8004382:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800438a:	2301      	movs	r3, #1
 800438c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800439e:	2300      	movs	r3, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff08 	bl	80041e8 <ETH_SetDMAConfig>
}
 80043d8:	bf00      	nop
 80043da:	3798      	adds	r7, #152	; 0x98
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3305      	adds	r3, #5
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	3204      	adds	r2, #4
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <ETH_MACAddressConfig+0x68>)
 8004402:	4413      	add	r3, r2
 8004404:	461a      	mov	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3303      	adds	r3, #3
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	061a      	lsls	r2, r3, #24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3302      	adds	r3, #2
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3301      	adds	r3, #1
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	4313      	orrs	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <ETH_MACAddressConfig+0x6c>)
 8004432:	4413      	add	r3, r2
 8004434:	461a      	mov	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40028040 	.word	0x40028040
 800444c:	40028044 	.word	0x40028044

08004450 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e03e      	b.n	80044dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68d9      	ldr	r1, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	3206      	adds	r2, #6
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d80c      	bhi.n	80044c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e004      	b.n	80044ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d9bd      	bls.n	800445e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f4:	611a      	str	r2, [r3, #16]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e046      	b.n	800459e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6919      	ldr	r1, [r3, #16]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	440b      	add	r3, r1
 8004520:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2200      	movs	r2, #0
 800453e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800454c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004554:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	3212      	adds	r2, #18
 800456a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d80c      	bhi.n	800458e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e004      	b.n	8004598 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	461a      	mov	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d9b5      	bls.n	8004510 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045ee:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_FLASH_Program+0xa0>)
 80045f0:	7e1b      	ldrb	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_FLASH_Program+0x1e>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e03b      	b.n	8004672 <HAL_FLASH_Program+0x96>
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_FLASH_Program+0xa0>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004600:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004604:	f000 f870 	bl	80046e8 <FLASH_WaitForLastOperation>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d12b      	bne.n	800466a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004618:	783b      	ldrb	r3, [r7, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f000 f91b 	bl	8004858 <FLASH_Program_Byte>
 8004622:	e016      	b.n	8004652 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800462a:	883b      	ldrh	r3, [r7, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	68b8      	ldr	r0, [r7, #8]
 8004630:	f000 f8ee 	bl	8004810 <FLASH_Program_HalfWord>
 8004634:	e00d      	b.n	8004652 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d105      	bne.n	8004648 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f000 f8c3 	bl	80047cc <FLASH_Program_Word>
 8004646:	e004      	b.n	8004652 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f000 f88b 	bl	8004768 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004652:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004656:	f000 f847 	bl	80046e8 <FLASH_WaitForLastOperation>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_FLASH_Program+0xa4>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <HAL_FLASH_Program+0xa4>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_FLASH_Program+0xa0>)
 800466c:	2200      	movs	r2, #0
 800466e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000d94 	.word	0x20000d94
 8004680:	40023c00 	.word	0x40023c00

08004684 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	da0b      	bge.n	80046ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_FLASH_Unlock+0x3c>)
 800469a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_FLASH_Unlock+0x40>)
 80046a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da01      	bge.n	80046ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046ae:	79fb      	ldrb	r3, [r7, #7]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	45670123 	.word	0x45670123
 80046c4:	cdef89ab 	.word	0xcdef89ab

080046c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_FLASH_Lock+0x1c>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_FLASH_Lock+0x1c>)
 80046d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40023c00 	.word	0x40023c00

080046e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046f4:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <FLASH_WaitForLastOperation+0x78>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80046fa:	f7fe f9bd 	bl	8002a78 <HAL_GetTick>
 80046fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004700:	e010      	b.n	8004724 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d00c      	beq.n	8004724 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <FLASH_WaitForLastOperation+0x38>
 8004710:	f7fe f9b2 	bl	8002a78 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d201      	bcs.n	8004724 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e019      	b.n	8004758 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <FLASH_WaitForLastOperation+0x7c>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e8      	bne.n	8004702 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <FLASH_WaitForLastOperation+0x7c>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <FLASH_WaitForLastOperation+0x7c>)
 800473e:	2201      	movs	r2, #1
 8004740:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <FLASH_WaitForLastOperation+0x7c>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800474e:	f000 f8a5 	bl	800489c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
  
}  
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000d94 	.word	0x20000d94
 8004764:	40023c00 	.word	0x40023c00

08004768 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 8004786:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800478a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <FLASH_Program_DoubleWord+0x60>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800479e:	f3bf 8f6f 	isb	sy
}
 80047a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80047a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	000a      	movs	r2, r1
 80047b2:	2300      	movs	r3, #0
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	3104      	adds	r1, #4
 80047b8:	4613      	mov	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40023c00 	.word	0x40023c00

080047cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <FLASH_Program_Word+0x40>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4a0c      	ldr	r2, [pc, #48]	; (800480c <FLASH_Program_Word+0x40>)
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <FLASH_Program_Word+0x40>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <FLASH_Program_Word+0x40>)
 80047e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <FLASH_Program_Word+0x40>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	4a06      	ldr	r2, [pc, #24]	; (800480c <FLASH_Program_Word+0x40>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	601a      	str	r2, [r3, #0]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40023c00 	.word	0x40023c00

08004810 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	4a06      	ldr	r2, [pc, #24]	; (8004854 <FLASH_Program_HalfWord+0x44>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	801a      	strh	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023c00 	.word	0x40023c00

08004858 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <FLASH_Program_Byte+0x40>)
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <FLASH_Program_Byte+0x40>)
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <FLASH_Program_Byte+0x40>)
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <FLASH_Program_Byte+0x40>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <FLASH_Program_Byte+0x40>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	4a06      	ldr	r2, [pc, #24]	; (8004898 <FLASH_Program_Byte+0x40>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	701a      	strb	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00

0800489c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f043 0310 	orr.w	r3, r3, #16
 80048b4:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048ba:	2210      	movs	r2, #16
 80048bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80048ca:	4b26      	ldr	r3, [pc, #152]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f043 0308 	orr.w	r3, r3, #8
 80048d2:	4a24      	ldr	r2, [pc, #144]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048d8:	2220      	movs	r2, #32
 80048da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 80048f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 8004910:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 800492e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 8004932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004936:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <FLASH_SetErrorCode+0xc8>)
 800494e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <FLASH_SetErrorCode+0xc4>)
 8004952:	2202      	movs	r2, #2
 8004954:	60da      	str	r2, [r3, #12]
  }
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40023c00 	.word	0x40023c00
 8004964:	20000d94 	.word	0x20000d94

08004968 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800497a:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_FLASHEx_Erase+0xdc>)
 800497c:	7e1b      	ldrb	r3, [r3, #24]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_FLASHEx_Erase+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e05a      	b.n	8004a3c <HAL_FLASHEx_Erase+0xd4>
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_FLASHEx_Erase+0xdc>)
 8004988:	2201      	movs	r2, #1
 800498a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800498c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004990:	f7ff feaa 	bl	80046e8 <FLASH_WaitForLastOperation>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d14a      	bne.n	8004a34 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d117      	bne.n	80049de <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 f846 	bl	8004a4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049c4:	f7ff fe90 	bl	80046e8 <FLASH_WaitForLastOperation>
 80049c8:	4603      	mov	r3, r0
 80049ca:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_FLASHEx_Erase+0xe0>)
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_FLASHEx_Erase+0xe0>)
 80049d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6113      	str	r3, [r2, #16]
 80049dc:	e028      	b.n	8004a30 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	e01c      	b.n	8004a20 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	68b8      	ldr	r0, [r7, #8]
 80049f0:	f000 f866 	bl	8004ac0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049f8:	f7ff fe76 	bl	80046e8 <FLASH_WaitForLastOperation>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_FLASHEx_Erase+0xe0>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <HAL_FLASHEx_Erase+0xe0>)
 8004a06:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004a0a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	601a      	str	r2, [r3, #0]
          break;
 8004a18:	e00a      	b.n	8004a30 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3da      	bcc.n	80049e6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004a30:	f000 f894 	bl	8004b5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_FLASHEx_Erase+0xdc>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	761a      	strb	r2, [r3, #24]

  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000d94 	.word	0x20000d94
 8004a48:	40023c00 	.word	0x40023c00

08004a4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <FLASH_MassErase+0x70>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	; (8004abc <FLASH_MassErase+0x70>)
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d108      	bne.n	8004a7c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <FLASH_MassErase+0x70>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <FLASH_MassErase+0x70>)
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	6113      	str	r3, [r2, #16]
 8004a7a:	e00f      	b.n	8004a9c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d106      	bne.n	8004a90 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <FLASH_MassErase+0x70>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	4a0d      	ldr	r2, [pc, #52]	; (8004abc <FLASH_MassErase+0x70>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6113      	str	r3, [r2, #16]
 8004a8e:	e005      	b.n	8004a9c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <FLASH_MassErase+0x70>)
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <FLASH_MassErase+0x70>)
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <FLASH_MassErase+0x70>)
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	4a05      	ldr	r2, [pc, #20]	; (8004abc <FLASH_MassErase+0x70>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6113      	str	r3, [r2, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023c00 	.word	0x40023c00

08004ac0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e010      	b.n	8004afe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d103      	bne.n	8004aea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e009      	b.n	8004afe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d103      	bne.n	8004af8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e002      	b.n	8004afe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0b      	cmp	r3, #11
 8004b02:	d902      	bls.n	8004b0a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	490f      	ldr	r1, [pc, #60]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <FLASH_Erase_Sector+0x98>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	6113      	str	r3, [r2, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004b9c:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <FLASH_FlushCaches+0x88>)
 8004bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd6:	6013      	str	r3, [r2, #0]
  }
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40023c00 	.word	0x40023c00

08004be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b089      	sub	sp, #36	; 0x24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e177      	b.n	8004ef4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c04:	2201      	movs	r2, #1
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	f040 8166 	bne.w	8004eee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d005      	beq.n	8004c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d130      	bne.n	8004c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	2203      	movs	r2, #3
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c70:	2201      	movs	r2, #1
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 0201 	and.w	r2, r3, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d017      	beq.n	8004cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d123      	bne.n	8004d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	220f      	movs	r2, #15
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	08da      	lsrs	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3208      	adds	r2, #8
 8004d26:	69b9      	ldr	r1, [r7, #24]
 8004d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 0203 	and.w	r2, r3, #3
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80c0 	beq.w	8004eee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	4b66      	ldr	r3, [pc, #408]	; (8004f0c <HAL_GPIO_Init+0x324>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4a65      	ldr	r2, [pc, #404]	; (8004f0c <HAL_GPIO_Init+0x324>)
 8004d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7e:	4b63      	ldr	r3, [pc, #396]	; (8004f0c <HAL_GPIO_Init+0x324>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d8a:	4a61      	ldr	r2, [pc, #388]	; (8004f10 <HAL_GPIO_Init+0x328>)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	3302      	adds	r3, #2
 8004d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	220f      	movs	r2, #15
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_GPIO_Init+0x32c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d037      	beq.n	8004e26 <HAL_GPIO_Init+0x23e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_GPIO_Init+0x330>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d031      	beq.n	8004e22 <HAL_GPIO_Init+0x23a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_GPIO_Init+0x334>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d02b      	beq.n	8004e1e <HAL_GPIO_Init+0x236>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a55      	ldr	r2, [pc, #340]	; (8004f20 <HAL_GPIO_Init+0x338>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d025      	beq.n	8004e1a <HAL_GPIO_Init+0x232>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_GPIO_Init+0x33c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01f      	beq.n	8004e16 <HAL_GPIO_Init+0x22e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a53      	ldr	r2, [pc, #332]	; (8004f28 <HAL_GPIO_Init+0x340>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d019      	beq.n	8004e12 <HAL_GPIO_Init+0x22a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_GPIO_Init+0x344>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_GPIO_Init+0x226>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a51      	ldr	r2, [pc, #324]	; (8004f30 <HAL_GPIO_Init+0x348>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00d      	beq.n	8004e0a <HAL_GPIO_Init+0x222>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a50      	ldr	r2, [pc, #320]	; (8004f34 <HAL_GPIO_Init+0x34c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <HAL_GPIO_Init+0x21e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4f      	ldr	r2, [pc, #316]	; (8004f38 <HAL_GPIO_Init+0x350>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_GPIO_Init+0x21a>
 8004dfe:	2309      	movs	r3, #9
 8004e00:	e012      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e02:	230a      	movs	r3, #10
 8004e04:	e010      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e06:	2308      	movs	r3, #8
 8004e08:	e00e      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e0a:	2307      	movs	r3, #7
 8004e0c:	e00c      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e0e:	2306      	movs	r3, #6
 8004e10:	e00a      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e12:	2305      	movs	r3, #5
 8004e14:	e008      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e16:	2304      	movs	r3, #4
 8004e18:	e006      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e004      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e002      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_GPIO_Init+0x240>
 8004e26:	2300      	movs	r3, #0
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	f002 0203 	and.w	r2, r2, #3
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	4093      	lsls	r3, r2
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e38:	4935      	ldr	r1, [pc, #212]	; (8004f10 <HAL_GPIO_Init+0x328>)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	3302      	adds	r3, #2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e6a:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e70:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e94:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e9a:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ee8:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <HAL_GPIO_Init+0x354>)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b0f      	cmp	r3, #15
 8004ef8:	f67f ae84 	bls.w	8004c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3724      	adds	r7, #36	; 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40013800 	.word	0x40013800
 8004f14:	40020000 	.word	0x40020000
 8004f18:	40020400 	.word	0x40020400
 8004f1c:	40020800 	.word	0x40020800
 8004f20:	40020c00 	.word	0x40020c00
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40021400 	.word	0x40021400
 8004f2c:	40021800 	.word	0x40021800
 8004f30:	40021c00 	.word	0x40021c00
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40022400 	.word	0x40022400
 8004f3c:	40013c00 	.word	0x40013c00

08004f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	887b      	ldrh	r3, [r7, #2]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e001      	b.n	8004f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f80:	787b      	ldrb	r3, [r7, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f8c:	e003      	b.n	8004f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	041a      	lsls	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fb4:	887a      	ldrh	r2, [r7, #2]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	041a      	lsls	r2, r3, #16
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	43d9      	mvns	r1, r3
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	400b      	ands	r3, r1
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	619a      	str	r2, [r3, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc f8ca 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40013c00 	.word	0x40013c00

08005008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e12b      	b.n	8005272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fd f9ca 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800506a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800506c:	f001 fb4e 	bl	800670c <HAL_RCC_GetPCLK1Freq>
 8005070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a81      	ldr	r2, [pc, #516]	; (800527c <HAL_I2C_Init+0x274>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d807      	bhi.n	800508c <HAL_I2C_Init+0x84>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a80      	ldr	r2, [pc, #512]	; (8005280 <HAL_I2C_Init+0x278>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e006      	b.n	800509a <HAL_I2C_Init+0x92>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a7d      	ldr	r2, [pc, #500]	; (8005284 <HAL_I2C_Init+0x27c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	bf94      	ite	ls
 8005094:	2301      	movls	r3, #1
 8005096:	2300      	movhi	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0e7      	b.n	8005272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a78      	ldr	r2, [pc, #480]	; (8005288 <HAL_I2C_Init+0x280>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	0c9b      	lsrs	r3, r3, #18
 80050ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a6a      	ldr	r2, [pc, #424]	; (800527c <HAL_I2C_Init+0x274>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d802      	bhi.n	80050dc <HAL_I2C_Init+0xd4>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3301      	adds	r3, #1
 80050da:	e009      	b.n	80050f0 <HAL_I2C_Init+0xe8>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	4a69      	ldr	r2, [pc, #420]	; (800528c <HAL_I2C_Init+0x284>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	3301      	adds	r3, #1
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	495c      	ldr	r1, [pc, #368]	; (800527c <HAL_I2C_Init+0x274>)
 800510c:	428b      	cmp	r3, r1
 800510e:	d819      	bhi.n	8005144 <HAL_I2C_Init+0x13c>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1e59      	subs	r1, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fbb1 f3f3 	udiv	r3, r1, r3
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005124:	400b      	ands	r3, r1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_I2C_Init+0x138>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1e59      	subs	r1, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fbb1 f3f3 	udiv	r3, r1, r3
 8005138:	3301      	adds	r3, #1
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	e051      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 8005140:	2304      	movs	r3, #4
 8005142:	e04f      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d111      	bne.n	8005170 <HAL_I2C_Init+0x168>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1e58      	subs	r0, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	440b      	add	r3, r1
 800515a:	fbb0 f3f3 	udiv	r3, r0, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e012      	b.n	8005196 <HAL_I2C_Init+0x18e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	0099      	lsls	r1, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x196>
 800519a:	2301      	movs	r3, #1
 800519c:	e022      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10e      	bne.n	80051c4 <HAL_I2C_Init+0x1bc>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e58      	subs	r0, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	440b      	add	r3, r1
 80051b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b8:	3301      	adds	r3, #1
 80051ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c2:	e00f      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e58      	subs	r0, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	0099      	lsls	r1, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	6809      	ldr	r1, [r1, #0]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6911      	ldr	r1, [r2, #16]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68d2      	ldr	r2, [r2, #12]
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	000186a0 	.word	0x000186a0
 8005280:	001e847f 	.word	0x001e847f
 8005284:	003d08ff 	.word	0x003d08ff
 8005288:	431bde83 	.word	0x431bde83
 800528c:	10624dd3 	.word	0x10624dd3

08005290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	460b      	mov	r3, r1
 800529e:	817b      	strh	r3, [r7, #10]
 80052a0:	4613      	mov	r3, r2
 80052a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052a4:	f7fd fbe8 	bl	8002a78 <HAL_GetTick>
 80052a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	f040 80e0 	bne.w	8005478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2319      	movs	r3, #25
 80052be:	2201      	movs	r2, #1
 80052c0:	4970      	ldr	r1, [pc, #448]	; (8005484 <HAL_I2C_Master_Transmit+0x1f4>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fa92 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
 80052d0:	e0d3      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_I2C_Master_Transmit+0x50>
 80052dc:	2302      	movs	r3, #2
 80052de:	e0cc      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d007      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2210      	movs	r2, #16
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	893a      	ldrh	r2, [r7, #8]
 8005336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a50      	ldr	r2, [pc, #320]	; (8005488 <HAL_I2C_Master_Transmit+0x1f8>)
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005348:	8979      	ldrh	r1, [r7, #10]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f9ca 	bl	80056e8 <I2C_MasterRequestWrite>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e08d      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005374:	e066      	b.n	8005444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6a39      	ldr	r1, [r7, #32]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fb0c 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06b      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_I2C_Master_Transmit+0x188>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d017      	beq.n	8005418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	6a39      	ldr	r1, [r7, #32]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fafc 	bl	8005a1a <I2C_WaitOnBTFFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b04      	cmp	r3, #4
 800542e:	d107      	bne.n	8005440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e01a      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d194      	bne.n	8005376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	00100002 	.word	0x00100002
 8005488:	ffff0000 	.word	0xffff0000

0800548c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	460b      	mov	r3, r1
 800549a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800549c:	f7fd faec 	bl	8002a78 <HAL_GetTick>
 80054a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	f040 8111 	bne.w	80056d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2319      	movs	r3, #25
 80054ba:	2201      	movs	r2, #1
 80054bc:	4988      	ldr	r1, [pc, #544]	; (80056e0 <HAL_I2C_IsDeviceReady+0x254>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f994 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
 80054cc:	e104      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_I2C_IsDeviceReady+0x50>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0fd      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d007      	beq.n	8005502 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2224      	movs	r2, #36	; 0x24
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a70      	ldr	r2, [pc, #448]	; (80056e4 <HAL_I2C_IsDeviceReady+0x258>)
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005534:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f952 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555c:	d103      	bne.n	8005566 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0b6      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800557a:	f7fd fa7d 	bl	8002a78 <HAL_GetTick>
 800557e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055ae:	e025      	b.n	80055fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055b0:	f7fd fa62 	bl	8002a78 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <HAL_I2C_IsDeviceReady+0x13a>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	22a0      	movs	r2, #160	; 0xa0
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2ba0      	cmp	r3, #160	; 0xa0
 8005606:	d005      	beq.n	8005614 <HAL_I2C_IsDeviceReady+0x188>
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_I2C_IsDeviceReady+0x188>
 800560e:	7dbb      	ldrb	r3, [r7, #22]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0cd      	beq.n	80055b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d129      	bne.n	800567e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005638:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2319      	movs	r3, #25
 8005656:	2201      	movs	r2, #1
 8005658:	4921      	ldr	r1, [pc, #132]	; (80056e0 <HAL_I2C_IsDeviceReady+0x254>)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f8c6 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e036      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	e02c      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005696:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2319      	movs	r3, #25
 800569e:	2201      	movs	r2, #1
 80056a0:	490f      	ldr	r1, [pc, #60]	; (80056e0 <HAL_I2C_IsDeviceReady+0x254>)
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8a2 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e012      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3301      	adds	r3, #1
 80056b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	429a      	cmp	r2, r3
 80056be:	f4ff af32 	bcc.w	8005526 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	00100002 	.word	0x00100002
 80056e4:	ffff0000 	.word	0xffff0000

080056e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	460b      	mov	r3, r1
 80056f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d006      	beq.n	8005712 <I2C_MasterRequestWrite+0x2a>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d003      	beq.n	8005712 <I2C_MasterRequestWrite+0x2a>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005710:	d108      	bne.n	8005724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e00b      	b.n	800573c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	2b12      	cmp	r3, #18
 800572a:	d107      	bne.n	800573c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f84f 	bl	80057ec <I2C_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005762:	d103      	bne.n	800576c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e035      	b.n	80057dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005778:	d108      	bne.n	800578c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800577a:	897b      	ldrh	r3, [r7, #10]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005788:	611a      	str	r2, [r3, #16]
 800578a:	e01b      	b.n	80057c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800578c:	897b      	ldrh	r3, [r7, #10]
 800578e:	11db      	asrs	r3, r3, #7
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0306 	and.w	r3, r3, #6
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f063 030f 	orn	r3, r3, #15
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	490e      	ldr	r1, [pc, #56]	; (80057e4 <I2C_MasterRequestWrite+0xfc>)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f875 	bl	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e010      	b.n	80057dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057ba:	897b      	ldrh	r3, [r7, #10]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4907      	ldr	r1, [pc, #28]	; (80057e8 <I2C_MasterRequestWrite+0x100>)
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f865 	bl	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	00010008 	.word	0x00010008
 80057e8:	00010002 	.word	0x00010002

080057ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057fc:	e025      	b.n	800584a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d021      	beq.n	800584a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fd f937 	bl	8002a78 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d116      	bne.n	800584a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e023      	b.n	8005892 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10d      	bne.n	8005870 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	43da      	mvns	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	e00c      	b.n	800588a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	429a      	cmp	r2, r3
 800588e:	d0b6      	beq.n	80057fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058a8:	e051      	b.n	800594e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d123      	bne.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0204 	orr.w	r2, r3, #4
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e046      	b.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d021      	beq.n	800594e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fd f8b5 	bl	8002a78 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e020      	b.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10c      	bne.n	8005972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	43da      	mvns	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e00b      	b.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	43da      	mvns	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d18d      	bne.n	80058aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a4:	e02d      	b.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f878 	bl	8005a9c <I2C_IsAcknowledgeFailed>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e02d      	b.n	8005a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d021      	beq.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fd f85b 	bl	8002a78 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e007      	b.n	8005a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b80      	cmp	r3, #128	; 0x80
 8005a0e:	d1ca      	bne.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a26:	e02d      	b.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f837 	bl	8005a9c <I2C_IsAcknowledgeFailed>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e02d      	b.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d021      	beq.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fd f81a 	bl	8002a78 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d1ca      	bne.n	8005a28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d11b      	bne.n	8005aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f043 0204 	orr.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d129      	bne.n	8005b64 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0210 	bic.w	r2, r2, #16
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d12a      	bne.n	8005be2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	f023 030f 	bic.w	r3, r3, #15
 8005bb2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	89fb      	ldrh	r3, [r7, #14]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	89fa      	ldrh	r2, [r7, #14]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b08f      	sub	sp, #60	; 0x3c
 8005bf4:	af0a      	add	r7, sp, #40	; 0x28
 8005bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e10f      	b.n	8005e22 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fc fd31 	bl	8002684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2203      	movs	r2, #3
 8005c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f003 fd1e 	bl	8009682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	687e      	ldr	r6, [r7, #4]
 8005c4e:	466d      	mov	r5, sp
 8005c50:	f106 0410 	add.w	r4, r6, #16
 8005c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c64:	1d33      	adds	r3, r6, #4
 8005c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	f003 fca9 	bl	80095c0 <USB_CoreInit>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0d0      	b.n	8005e22 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f003 fd0c 	bl	80096a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	e04a      	b.n	8005d28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	333d      	adds	r3, #61	; 0x3d
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	333c      	adds	r3, #60	; 0x3c
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	b298      	uxth	r0, r3
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3344      	adds	r3, #68	; 0x44
 8005cce:	4602      	mov	r2, r0
 8005cd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cd2:	7bfa      	ldrb	r2, [r7, #15]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3340      	adds	r3, #64	; 0x40
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ce6:	7bfa      	ldrb	r2, [r7, #15]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3348      	adds	r3, #72	; 0x48
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cfa:	7bfa      	ldrb	r2, [r7, #15]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	334c      	adds	r3, #76	; 0x4c
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3354      	adds	r3, #84	; 0x54
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	3301      	adds	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
 8005d28:	7bfa      	ldrb	r2, [r7, #15]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3af      	bcc.n	8005c92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
 8005d36:	e044      	b.n	8005dc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d38:	7bfa      	ldrb	r2, [r7, #15]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d4e:	7bfa      	ldrb	r2, [r7, #15]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d64:	7bfa      	ldrb	r2, [r7, #15]
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d7a:	7bfa      	ldrb	r2, [r7, #15]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d90:	7bfa      	ldrb	r2, [r7, #15]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005da6:	7bfa      	ldrb	r2, [r7, #15]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d3b5      	bcc.n	8005d38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	687e      	ldr	r6, [r7, #4]
 8005dd4:	466d      	mov	r5, sp
 8005dd6:	f106 0410 	add.w	r4, r6, #16
 8005dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005de6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dea:	1d33      	adds	r3, r6, #4
 8005dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f003 fca4 	bl	800973c <USB_DevInit>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e00d      	b.n	8005e22 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f003 fe6f 	bl	8009afe <USB_DevDisconnect>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e267      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d075      	beq.n	8005f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e4a:	4b88      	ldr	r3, [pc, #544]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d00c      	beq.n	8005e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e56:	4b85      	ldr	r3, [pc, #532]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d112      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e62:	4b82      	ldr	r3, [pc, #520]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	4b7e      	ldr	r3, [pc, #504]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05b      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d157      	bne.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e242      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d106      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x74>
 8005e92:	4b76      	ldr	r3, [pc, #472]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a75      	ldr	r2, [pc, #468]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e01d      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b70      	ldr	r3, [pc, #448]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6f      	ldr	r2, [pc, #444]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b6d      	ldr	r3, [pc, #436]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a6c      	ldr	r2, [pc, #432]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ec4:	4b69      	ldr	r3, [pc, #420]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a68      	ldr	r2, [pc, #416]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b66      	ldr	r3, [pc, #408]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a65      	ldr	r2, [pc, #404]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fdc8 	bl	8002a78 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fdc4 	bl	8002a78 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e207      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	4b5b      	ldr	r3, [pc, #364]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fc fdb4 	bl	8002a78 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fc fdb0 	bl	8002a78 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	; 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e1f3      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f26:	4b51      	ldr	r3, [pc, #324]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d063      	beq.n	800600a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f42:	4b4a      	ldr	r3, [pc, #296]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4e:	4b47      	ldr	r3, [pc, #284]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d11c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5a:	4b44      	ldr	r3, [pc, #272]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d116      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f66:	4b41      	ldr	r3, [pc, #260]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e1c7      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7e:	4b3b      	ldr	r3, [pc, #236]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4937      	ldr	r1, [pc, #220]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f92:	e03a      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d020      	beq.n	8005fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f9c:	4b34      	ldr	r3, [pc, #208]	; (8006070 <HAL_RCC_OscConfig+0x244>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa2:	f7fc fd69 	bl	8002a78 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005faa:	f7fc fd65 	bl	8002a78 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e1a8      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc8:	4b28      	ldr	r3, [pc, #160]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	4925      	ldr	r1, [pc, #148]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	e015      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <HAL_RCC_OscConfig+0x244>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fc fd48 	bl	8002a78 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fec:	f7fc fd44 	bl	8002a78 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e187      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <HAL_RCC_OscConfig+0x248>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fc fd28 	bl	8002a78 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800602c:	f7fc fd24 	bl	8002a78 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e167      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCC_OscConfig+0x240>)
 8006040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
 800604a:	e01b      	b.n	8006084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_RCC_OscConfig+0x248>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006052:	f7fc fd11 	bl	8002a78 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	e00e      	b.n	8006078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605a:	f7fc fd0d 	bl	8002a78 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d907      	bls.n	8006078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e150      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
 800606c:	40023800 	.word	0x40023800
 8006070:	42470000 	.word	0x42470000
 8006074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006078:	4b88      	ldr	r3, [pc, #544]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ea      	bne.n	800605a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8097 	beq.w	80061c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006096:	4b81      	ldr	r3, [pc, #516]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10f      	bne.n	80060c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	4b7d      	ldr	r3, [pc, #500]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	4a7c      	ldr	r2, [pc, #496]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6413      	str	r3, [r2, #64]	; 0x40
 80060b2:	4b7a      	ldr	r3, [pc, #488]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c2:	4b77      	ldr	r3, [pc, #476]	; (80062a0 <HAL_RCC_OscConfig+0x474>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d118      	bne.n	8006100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ce:	4b74      	ldr	r3, [pc, #464]	; (80062a0 <HAL_RCC_OscConfig+0x474>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a73      	ldr	r2, [pc, #460]	; (80062a0 <HAL_RCC_OscConfig+0x474>)
 80060d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060da:	f7fc fccd 	bl	8002a78 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e2:	f7fc fcc9 	bl	8002a78 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e10c      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f4:	4b6a      	ldr	r3, [pc, #424]	; (80062a0 <HAL_RCC_OscConfig+0x474>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x2ea>
 8006108:	4b64      	ldr	r3, [pc, #400]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a63      	ldr	r2, [pc, #396]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	e01c      	b.n	8006150 <HAL_RCC_OscConfig+0x324>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x30c>
 800611e:	4b5f      	ldr	r3, [pc, #380]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a5e      	ldr	r2, [pc, #376]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
 800612a:	4b5c      	ldr	r3, [pc, #368]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a5b      	ldr	r2, [pc, #364]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
 8006136:	e00b      	b.n	8006150 <HAL_RCC_OscConfig+0x324>
 8006138:	4b58      	ldr	r3, [pc, #352]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4a57      	ldr	r2, [pc, #348]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	; 0x70
 8006144:	4b55      	ldr	r3, [pc, #340]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	4a54      	ldr	r2, [pc, #336]	; (800629c <HAL_RCC_OscConfig+0x470>)
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fc fc8e 	bl	8002a78 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615e:	e00a      	b.n	8006176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fc fc8a 	bl	8002a78 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0cb      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006176:	4b49      	ldr	r3, [pc, #292]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ee      	beq.n	8006160 <HAL_RCC_OscConfig+0x334>
 8006182:	e014      	b.n	80061ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006184:	f7fc fc78 	bl	8002a78 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc fc74 	bl	8002a78 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0b5      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a2:	4b3e      	ldr	r3, [pc, #248]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ee      	bne.n	800618c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b4:	4b39      	ldr	r3, [pc, #228]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	4a38      	ldr	r2, [pc, #224]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80061ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80a1 	beq.w	800630c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ca:	4b34      	ldr	r3, [pc, #208]	; (800629c <HAL_RCC_OscConfig+0x470>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d05c      	beq.n	8006290 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d141      	bne.n	8006262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <HAL_RCC_OscConfig+0x478>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fc fc48 	bl	8002a78 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fc fc44 	bl	8002a78 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e087      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fe:	4b27      	ldr	r3, [pc, #156]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	491b      	ldr	r1, [pc, #108]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006234:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006236:	2201      	movs	r2, #1
 8006238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623a:	f7fc fc1d 	bl	8002a78 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006242:	f7fc fc19 	bl	8002a78 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e05c      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <HAL_RCC_OscConfig+0x416>
 8006260:	e054      	b.n	800630c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006268:	f7fc fc06 	bl	8002a78 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006270:	f7fc fc02 	bl	8002a78 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e045      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_RCC_OscConfig+0x470>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x444>
 800628e:	e03d      	b.n	800630c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d107      	bne.n	80062a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e038      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
 800629c:	40023800 	.word	0x40023800
 80062a0:	40007000 	.word	0x40007000
 80062a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_RCC_OscConfig+0x4ec>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d028      	beq.n	8006308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d121      	bne.n	8006308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d11a      	bne.n	8006308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d111      	bne.n	8006308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	3b01      	subs	r3, #1
 80062f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d107      	bne.n	8006308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800

0800631c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0cc      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006330:	4b68      	ldr	r3, [pc, #416]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d90c      	bls.n	8006358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b63      	ldr	r3, [pc, #396]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0b8      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006370:	4b59      	ldr	r3, [pc, #356]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4a58      	ldr	r2, [pc, #352]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800637a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006388:	4b53      	ldr	r3, [pc, #332]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4a52      	ldr	r2, [pc, #328]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006394:	4b50      	ldr	r3, [pc, #320]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	494d      	ldr	r1, [pc, #308]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d044      	beq.n	800643c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ba:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d119      	bne.n	80063fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e07f      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d003      	beq.n	80063da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d107      	bne.n	80063ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063da:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e06f      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e067      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063fa:	4b37      	ldr	r3, [pc, #220]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f023 0203 	bic.w	r2, r3, #3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	4934      	ldr	r1, [pc, #208]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	4313      	orrs	r3, r2
 800640a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800640c:	f7fc fb34 	bl	8002a78 <HAL_GetTick>
 8006410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006412:	e00a      	b.n	800642a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006414:	f7fc fb30 	bl	8002a78 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e04f      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 020c 	and.w	r2, r3, #12
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	429a      	cmp	r2, r3
 800643a:	d1eb      	bne.n	8006414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800643c:	4b25      	ldr	r3, [pc, #148]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d20c      	bcs.n	8006464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644a:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d001      	beq.n	8006464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e032      	b.n	80064ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4916      	ldr	r1, [pc, #88]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	490e      	ldr	r1, [pc, #56]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064a2:	f000 f821 	bl	80064e8 <HAL_RCC_GetSysClockFreq>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	091b      	lsrs	r3, r3, #4
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	490a      	ldr	r1, [pc, #40]	; (80064dc <HAL_RCC_ClockConfig+0x1c0>)
 80064b4:	5ccb      	ldrb	r3, [r1, r3]
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_RCC_ClockConfig+0x1c8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fc fa94 	bl	80029f0 <HAL_InitTick>

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40023c00 	.word	0x40023c00
 80064d8:	40023800 	.word	0x40023800
 80064dc:	0800b2a8 	.word	0x0800b2a8
 80064e0:	200002e0 	.word	0x200002e0
 80064e4:	200002e4 	.word	0x200002e4

080064e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ec:	b094      	sub	sp, #80	; 0x50
 80064ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	647b      	str	r3, [r7, #68]	; 0x44
 80064f4:	2300      	movs	r3, #0
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f8:	2300      	movs	r3, #0
 80064fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006500:	4b79      	ldr	r3, [pc, #484]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 030c 	and.w	r3, r3, #12
 8006508:	2b08      	cmp	r3, #8
 800650a:	d00d      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x40>
 800650c:	2b08      	cmp	r3, #8
 800650e:	f200 80e1 	bhi.w	80066d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_RCC_GetSysClockFreq+0x34>
 8006516:	2b04      	cmp	r3, #4
 8006518:	d003      	beq.n	8006522 <HAL_RCC_GetSysClockFreq+0x3a>
 800651a:	e0db      	b.n	80066d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800651c:	4b73      	ldr	r3, [pc, #460]	; (80066ec <HAL_RCC_GetSysClockFreq+0x204>)
 800651e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006520:	e0db      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006522:	4b73      	ldr	r3, [pc, #460]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006526:	e0d8      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006528:	4b6f      	ldr	r3, [pc, #444]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006530:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006532:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d063      	beq.n	8006606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653e:	4b6a      	ldr	r3, [pc, #424]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	099b      	lsrs	r3, r3, #6
 8006544:	2200      	movs	r2, #0
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
 8006548:	63fa      	str	r2, [r7, #60]	; 0x3c
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006550:	633b      	str	r3, [r7, #48]	; 0x30
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800655a:	4622      	mov	r2, r4
 800655c:	462b      	mov	r3, r5
 800655e:	f04f 0000 	mov.w	r0, #0
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	0159      	lsls	r1, r3, #5
 8006568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800656c:	0150      	lsls	r0, r2, #5
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4621      	mov	r1, r4
 8006574:	1a51      	subs	r1, r2, r1
 8006576:	6139      	str	r1, [r7, #16]
 8006578:	4629      	mov	r1, r5
 800657a:	eb63 0301 	sbc.w	r3, r3, r1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800658c:	4659      	mov	r1, fp
 800658e:	018b      	lsls	r3, r1, #6
 8006590:	4651      	mov	r1, sl
 8006592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006596:	4651      	mov	r1, sl
 8006598:	018a      	lsls	r2, r1, #6
 800659a:	4651      	mov	r1, sl
 800659c:	ebb2 0801 	subs.w	r8, r2, r1
 80065a0:	4659      	mov	r1, fp
 80065a2:	eb63 0901 	sbc.w	r9, r3, r1
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ba:	4690      	mov	r8, r2
 80065bc:	4699      	mov	r9, r3
 80065be:	4623      	mov	r3, r4
 80065c0:	eb18 0303 	adds.w	r3, r8, r3
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	462b      	mov	r3, r5
 80065c8:	eb49 0303 	adc.w	r3, r9, r3
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065da:	4629      	mov	r1, r5
 80065dc:	024b      	lsls	r3, r1, #9
 80065de:	4621      	mov	r1, r4
 80065e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065e4:	4621      	mov	r1, r4
 80065e6:	024a      	lsls	r2, r1, #9
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ee:	2200      	movs	r2, #0
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065f8:	f7f9 fe52 	bl	80002a0 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006604:	e058      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006606:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	2200      	movs	r2, #0
 800660e:	4618      	mov	r0, r3
 8006610:	4611      	mov	r1, r2
 8006612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006616:	623b      	str	r3, [r7, #32]
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
 800661c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006620:	4642      	mov	r2, r8
 8006622:	464b      	mov	r3, r9
 8006624:	f04f 0000 	mov.w	r0, #0
 8006628:	f04f 0100 	mov.w	r1, #0
 800662c:	0159      	lsls	r1, r3, #5
 800662e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006632:	0150      	lsls	r0, r2, #5
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4641      	mov	r1, r8
 800663a:	ebb2 0a01 	subs.w	sl, r2, r1
 800663e:	4649      	mov	r1, r9
 8006640:	eb63 0b01 	sbc.w	fp, r3, r1
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006658:	ebb2 040a 	subs.w	r4, r2, sl
 800665c:	eb63 050b 	sbc.w	r5, r3, fp
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	00eb      	lsls	r3, r5, #3
 800666a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666e:	00e2      	lsls	r2, r4, #3
 8006670:	4614      	mov	r4, r2
 8006672:	461d      	mov	r5, r3
 8006674:	4643      	mov	r3, r8
 8006676:	18e3      	adds	r3, r4, r3
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	464b      	mov	r3, r9
 800667c:	eb45 0303 	adc.w	r3, r5, r3
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800668e:	4629      	mov	r1, r5
 8006690:	028b      	lsls	r3, r1, #10
 8006692:	4621      	mov	r1, r4
 8006694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006698:	4621      	mov	r1, r4
 800669a:	028a      	lsls	r2, r1, #10
 800669c:	4610      	mov	r0, r2
 800669e:	4619      	mov	r1, r3
 80066a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a2:	2200      	movs	r2, #0
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	61fa      	str	r2, [r7, #28]
 80066a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ac:	f7f9 fdf8 	bl	80002a0 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4613      	mov	r3, r2
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	3301      	adds	r3, #1
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066d2:	e002      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <HAL_RCC_GetSysClockFreq+0x204>)
 80066d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3750      	adds	r7, #80	; 0x50
 80066e0:	46bd      	mov	sp, r7
 80066e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e6:	bf00      	nop
 80066e8:	40023800 	.word	0x40023800
 80066ec:	00f42400 	.word	0x00f42400
 80066f0:	007a1200 	.word	0x007a1200

080066f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f8:	4b03      	ldr	r3, [pc, #12]	; (8006708 <HAL_RCC_GetHCLKFreq+0x14>)
 80066fa:	681b      	ldr	r3, [r3, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	200002e0 	.word	0x200002e0

0800670c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006710:	f7ff fff0 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	0a9b      	lsrs	r3, r3, #10
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4903      	ldr	r1, [pc, #12]	; (8006730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40023800 	.word	0x40023800
 8006730:	0800b2b8 	.word	0x0800b2b8

08006734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006738:	f7ff ffdc 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	0b5b      	lsrs	r3, r3, #13
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	4903      	ldr	r1, [pc, #12]	; (8006758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800674a:	5ccb      	ldrb	r3, [r1, r3]
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40023800 	.word	0x40023800
 8006758:	0800b2b8 	.word	0x0800b2b8

0800675c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800678c:	2b00      	cmp	r3, #0
 800678e:	d075      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006790:	4b91      	ldr	r3, [pc, #580]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006796:	f7fc f96f 	bl	8002a78 <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800679e:	f7fc f96b 	bl	8002a78 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e189      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067b0:	4b8a      	ldr	r3, [pc, #552]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	019a      	lsls	r2, r3, #6
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	071b      	lsls	r3, r3, #28
 80067d4:	4981      	ldr	r1, [pc, #516]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01f      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067e8:	4b7c      	ldr	r3, [pc, #496]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ee:	0f1b      	lsrs	r3, r3, #28
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	019a      	lsls	r2, r3, #6
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	431a      	orrs	r2, r3
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	071b      	lsls	r3, r3, #28
 8006808:	4974      	ldr	r1, [pc, #464]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006810:	4b72      	ldr	r3, [pc, #456]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006816:	f023 021f 	bic.w	r2, r3, #31
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	3b01      	subs	r3, #1
 8006820:	496e      	ldr	r1, [pc, #440]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	019a      	lsls	r2, r3, #6
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	061b      	lsls	r3, r3, #24
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	071b      	lsls	r3, r3, #28
 8006848:	4964      	ldr	r1, [pc, #400]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006850:	4b61      	ldr	r3, [pc, #388]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006856:	f7fc f90f 	bl	8002a78 <HAL_GetTick>
 800685a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800685c:	e008      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800685e:	f7fc f90b 	bl	8002a78 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e129      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006870:	4b5a      	ldr	r3, [pc, #360]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006890:	2b00      	cmp	r3, #0
 8006892:	d079      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006894:	4b52      	ldr	r3, [pc, #328]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800689a:	f7fc f8ed 	bl	8002a78 <HAL_GetTick>
 800689e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068a2:	f7fc f8e9 	bl	8002a78 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e107      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b4:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c0:	d0ef      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068ce:	4b43      	ldr	r3, [pc, #268]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	0f1b      	lsrs	r3, r3, #28
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	019a      	lsls	r2, r3, #6
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	061b      	lsls	r3, r3, #24
 80068e8:	431a      	orrs	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	493b      	ldr	r1, [pc, #236]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	3b01      	subs	r3, #1
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	4934      	ldr	r1, [pc, #208]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01e      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800691c:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	0e1b      	lsrs	r3, r3, #24
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	019a      	lsls	r2, r3, #6
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	061b      	lsls	r3, r3, #24
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	071b      	lsls	r3, r3, #28
 800693c:	4927      	ldr	r1, [pc, #156]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	4922      	ldr	r1, [pc, #136]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800695c:	2201      	movs	r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006960:	f7fc f88a 	bl	8002a78 <HAL_GetTick>
 8006964:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006966:	e008      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006968:	f7fc f886 	bl	8002a78 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e0a4      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800697a:	4b18      	ldr	r3, [pc, #96]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006986:	d1ef      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 808b 	beq.w	8006aac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	4a0f      	ldr	r2, [pc, #60]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a4:	6413      	str	r3, [r2, #64]	; 0x40
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0b      	ldr	r2, [pc, #44]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069be:	f7fc f85b 	bl	8002a78 <HAL_GetTick>
 80069c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069c4:	e010      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069c6:	f7fc f857 	bl	8002a78 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d909      	bls.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e075      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80069d8:	42470068 	.word	0x42470068
 80069dc:	40023800 	.word	0x40023800
 80069e0:	42470070 	.word	0x42470070
 80069e4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069e8:	4b38      	ldr	r3, [pc, #224]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0e8      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d02f      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d028      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a12:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a22:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a28:	4a29      	ldr	r2, [pc, #164]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a2e:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d114      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a3a:	f7fc f81d 	bl	8002a78 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a40:	e00a      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fc f819 	bl	8002a78 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e035      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0ee      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a70:	d10d      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a86:	4912      	ldr	r1, [pc, #72]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]
 8006a8c:	e005      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a98:	6093      	str	r3, [r2, #8]
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa6:	490a      	ldr	r1, [pc, #40]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ac0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40007000 	.word	0x40007000
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	42470e40 	.word	0x42470e40
 8006ad8:	424711e0 	.word	0x424711e0

08006adc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e066      	b.n	8006bc0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7f5b      	ldrb	r3, [r3, #29]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb fca8 	bl	8002458 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	22ca      	movs	r2, #202	; 0xca
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2253      	movs	r2, #83	; 0x53
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fbce 	bl	80072c0 <RTC_EnterInitMode>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d12c      	bne.n	8006b88 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b40:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6899      	ldr	r1, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68d2      	ldr	r2, [r2, #12]
 8006b68:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6919      	ldr	r1, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	041a      	lsls	r2, r3, #16
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fbd5 	bl	800732e <RTC_ExitInitMode>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d113      	bne.n	8006bb6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	22ff      	movs	r2, #255	; 0xff
 8006bbc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bc8:	b590      	push	{r4, r7, lr}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	7f1b      	ldrb	r3, [r3, #28]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_RTC_SetTime+0x1c>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e087      	b.n	8006cf4 <HAL_RTC_SetTime+0x12c>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2202      	movs	r2, #2
 8006bee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d126      	bne.n	8006c44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fbb2 	bl	8007378 <RTC_ByteToBcd2>
 8006c14:	4603      	mov	r3, r0
 8006c16:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fbab 	bl	8007378 <RTC_ByteToBcd2>
 8006c22:	4603      	mov	r3, r0
 8006c24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c26:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	789b      	ldrb	r3, [r3, #2]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fba3 	bl	8007378 <RTC_ByteToBcd2>
 8006c32:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c34:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e018      	b.n	8006c76 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c64:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c6a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	22ca      	movs	r2, #202	; 0xca
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2253      	movs	r2, #83	; 0x53
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fb1a 	bl	80072c0 <RTC_EnterInitMode>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d120      	bne.n	8006cd8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ca0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6899      	ldr	r1, [r3, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fb2d 	bl	800732e <RTC_ExitInitMode>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006cd8:	7cfb      	ldrb	r3, [r7, #19]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	22ff      	movs	r2, #255	; 0xff
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	771a      	strb	r2, [r3, #28]

  return status;
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}

08006cfc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	0d9b      	lsrs	r3, r3, #22
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11a      	bne.n	8006dae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fb18 	bl	80073b2 <RTC_Bcd2ToByte>
 8006d82:	4603      	mov	r3, r0
 8006d84:	461a      	mov	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fb0f 	bl	80073b2 <RTC_Bcd2ToByte>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	789b      	ldrb	r3, [r3, #2]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fb06 	bl	80073b2 <RTC_Bcd2ToByte>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	7f1b      	ldrb	r3, [r3, #28]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_RTC_SetDate+0x1c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e071      	b.n	8006eb8 <HAL_RTC_SetDate+0x100>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10e      	bne.n	8006e04 <HAL_RTC_SetDate+0x4c>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	330a      	adds	r3, #10
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d11c      	bne.n	8006e44 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fab2 	bl	8007378 <RTC_ByteToBcd2>
 8006e14:	4603      	mov	r3, r0
 8006e16:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 faab 	bl	8007378 <RTC_ByteToBcd2>
 8006e22:	4603      	mov	r3, r0
 8006e24:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e26:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	789b      	ldrb	r3, [r3, #2]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 faa3 	bl	8007378 <RTC_ByteToBcd2>
 8006e32:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e34:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e00e      	b.n	8006e62 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	78db      	ldrb	r3, [r3, #3]
 8006e48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e50:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	22ca      	movs	r2, #202	; 0xca
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2253      	movs	r2, #83	; 0x53
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fa24 	bl	80072c0 <RTC_EnterInitMode>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e90:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fa4b 	bl	800732e <RTC_ExitInitMode>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	771a      	strb	r2, [r3, #28]

  return status;
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd90      	pop	{r4, r7, pc}

08006ec0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ede:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0b5b      	lsrs	r3, r3, #13
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11a      	bne.n	8006f54 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	78db      	ldrb	r3, [r3, #3]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fa45 	bl	80073b2 <RTC_Bcd2ToByte>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fa3c 	bl	80073b2 <RTC_Bcd2ToByte>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	789b      	ldrb	r3, [r3, #2]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fa33 	bl	80073b2 <RTC_Bcd2ToByte>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b089      	sub	sp, #36	; 0x24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006f6c:	4b9a      	ldr	r3, [pc, #616]	; (80071d8 <HAL_RTC_SetAlarm_IT+0x278>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a9a      	ldr	r2, [pc, #616]	; (80071dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	0adb      	lsrs	r3, r3, #11
 8006f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f7c:	fb02 f303 	mul.w	r3, r2, r3
 8006f80:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7f1b      	ldrb	r3, [r3, #28]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_RTC_SetAlarm_IT+0x36>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e11c      	b.n	80071d0 <HAL_RTC_SetAlarm_IT+0x270>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d137      	bne.n	8007018 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 f9d9 	bl	8007378 <RTC_ByteToBcd2>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f9d2 	bl	8007378 <RTC_ByteToBcd2>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006fd8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	789b      	ldrb	r3, [r3, #2]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f9ca 	bl	8007378 <RTC_ByteToBcd2>
 8006fe4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fe6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006ff0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f9bc 	bl	8007378 <RTC_ByteToBcd2>
 8007000:	4603      	mov	r3, r0
 8007002:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007004:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800700c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007012:	4313      	orrs	r3, r2
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e023      	b.n	8007060 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007038:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800703e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	78db      	ldrb	r3, [r3, #3]
 8007044:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007046:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800704e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007050:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007056:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800705c:	4313      	orrs	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007068:	4313      	orrs	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	22ca      	movs	r2, #202	; 0xca
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2253      	movs	r2, #83	; 0x53
 800707a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007084:	d141      	bne.n	800710a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007094:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80070a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1e5a      	subs	r2, r3, #1
 80070ac:	617a      	str	r2, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2203      	movs	r2, #3
 80070be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e082      	b.n	80071d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0e7      	beq.n	80070a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	e04b      	b.n	80071a2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007118:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f462 7220 	orn	r2, r2, #640	; 0x280
 800712a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800712c:	4b2a      	ldr	r3, [pc, #168]	; (80071d8 <HAL_RTC_SetAlarm_IT+0x278>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8007132:	fba2 2303 	umull	r2, r3, r2, r3
 8007136:	0adb      	lsrs	r3, r3, #11
 8007138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	1e5a      	subs	r2, r3, #1
 8007146:	617a      	str	r2, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	22ff      	movs	r2, #255	; 0xff
 8007152:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2203      	movs	r2, #3
 8007158:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e035      	b.n	80071d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0e7      	beq.n	8007142 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007190:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a0e      	ldr	r2, [pc, #56]	; (80071e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80071a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ac:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	4a0b      	ldr	r2, [pc, #44]	; (80071e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80071b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	22ff      	movs	r2, #255	; 0xff
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3724      	adds	r7, #36	; 0x24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}
 80071d8:	200002e0 	.word	0x200002e0
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	40013c00 	.word	0x40013c00

080071e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d012      	beq.n	8007220 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fa f845 	bl	8001298 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800721e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8d4 	bl	80073ea <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007252:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RTC_AlarmIRQHandler+0x88>)
 8007256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800725a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	775a      	strb	r2, [r3, #29]
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40013c00 	.word	0x40013c00

08007270 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800728a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800728c:	f7fb fbf4 	bl	8002a78 <HAL_GetTick>
 8007290:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007292:	e009      	b.n	80072a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007294:	f7fb fbf0 	bl	8002a78 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a2:	d901      	bls.n	80072a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e007      	b.n	80072b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0ee      	beq.n	8007294 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d122      	bne.n	8007324 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ee:	f7fb fbc3 	bl	8002a78 <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072f4:	e00c      	b.n	8007310 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072f6:	f7fb fbbf 	bl	8002a78 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007304:	d904      	bls.n	8007310 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <RTC_EnterInitMode+0x64>
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d1e8      	bne.n	80072f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007348:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff89 	bl	8007270 <HAL_RTC_WaitForSynchro>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007386:	e005      	b.n	8007394 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	3301      	adds	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	3b0a      	subs	r3, #10
 8007392:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b09      	cmp	r3, #9
 8007398:	d8f6      	bhi.n	8007388 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b2db      	uxtb	r3, r3
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	4603      	mov	r3, r0
 80073ba:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	091b      	lsrs	r3, r3, #4
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	0092      	lsls	r2, r2, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4413      	add	r3, r2
 80073dc:	b2db      	uxtb	r3, r3
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e041      	b.n	8007494 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fb f841 	bl	80024ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3304      	adds	r3, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f000 fca7 	bl	8007d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10f      	bne.n	80074e4 <HAL_TIM_Base_Stop_IT+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	f240 4344 	movw	r3, #1092	; 0x444
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d107      	bne.n	80074e4 <HAL_TIM_Base_Stop_IT+0x48>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e041      	b.n	8007590 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f839 	bl	8007598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 fc29 	bl	8007d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_TIM_PWM_Start+0x24>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e022      	b.n	8007616 <HAL_TIM_PWM_Start+0x6a>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d109      	bne.n	80075ea <HAL_TIM_PWM_Start+0x3e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b01      	cmp	r3, #1
 80075e0:	bf14      	ite	ne
 80075e2:	2301      	movne	r3, #1
 80075e4:	2300      	moveq	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	e015      	b.n	8007616 <HAL_TIM_PWM_Start+0x6a>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d109      	bne.n	8007604 <HAL_TIM_PWM_Start+0x58>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	bf14      	ite	ne
 80075fc:	2301      	movne	r3, #1
 80075fe:	2300      	moveq	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	e008      	b.n	8007616 <HAL_TIM_PWM_Start+0x6a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b01      	cmp	r3, #1
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e07c      	b.n	8007718 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <HAL_TIM_PWM_Start+0x82>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800762c:	e013      	b.n	8007656 <HAL_TIM_PWM_Start+0xaa>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b04      	cmp	r3, #4
 8007632:	d104      	bne.n	800763e <HAL_TIM_PWM_Start+0x92>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800763c:	e00b      	b.n	8007656 <HAL_TIM_PWM_Start+0xaa>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d104      	bne.n	800764e <HAL_TIM_PWM_Start+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764c:	e003      	b.n	8007656 <HAL_TIM_PWM_Start+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2201      	movs	r2, #1
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fe80 	bl	8008364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	; (8007720 <HAL_TIM_PWM_Start+0x174>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_TIM_PWM_Start+0xcc>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2c      	ldr	r2, [pc, #176]	; (8007724 <HAL_TIM_PWM_Start+0x178>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d101      	bne.n	800767c <HAL_TIM_PWM_Start+0xd0>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <HAL_TIM_PWM_Start+0xd2>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a22      	ldr	r2, [pc, #136]	; (8007720 <HAL_TIM_PWM_Start+0x174>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a4:	d01d      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <HAL_TIM_PWM_Start+0x17c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1d      	ldr	r2, [pc, #116]	; (800772c <HAL_TIM_PWM_Start+0x180>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <HAL_TIM_PWM_Start+0x184>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a16      	ldr	r2, [pc, #88]	; (8007724 <HAL_TIM_PWM_Start+0x178>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a18      	ldr	r2, [pc, #96]	; (8007734 <HAL_TIM_PWM_Start+0x188>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x136>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <HAL_TIM_PWM_Start+0x18c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d111      	bne.n	8007706 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b06      	cmp	r3, #6
 80076f2:	d010      	beq.n	8007716 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	e007      	b.n	8007716 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0201 	orr.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	40010000 	.word	0x40010000
 8007724:	40010400 	.word	0x40010400
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40014000 	.word	0x40014000
 8007738:	40001800 	.word	0x40001800

0800773c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fe08 	bl	8008364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <HAL_TIM_PWM_Stop+0xd8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_TIM_PWM_Stop+0x2c>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2d      	ldr	r2, [pc, #180]	; (8007818 <HAL_TIM_PWM_Stop+0xdc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d101      	bne.n	800776c <HAL_TIM_PWM_Stop+0x30>
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <HAL_TIM_PWM_Stop+0x32>
 800776c:	2300      	movs	r3, #0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d017      	beq.n	80077a2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6a1a      	ldr	r2, [r3, #32]
 8007778:	f241 1311 	movw	r3, #4369	; 0x1111
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10f      	bne.n	80077a2 <HAL_TIM_PWM_Stop+0x66>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a1a      	ldr	r2, [r3, #32]
 8007788:	f240 4344 	movw	r3, #1092	; 0x444
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d107      	bne.n	80077a2 <HAL_TIM_PWM_Stop+0x66>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10f      	bne.n	80077d2 <HAL_TIM_PWM_Stop+0x96>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	f240 4344 	movw	r3, #1092	; 0x444
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <HAL_TIM_PWM_Stop+0x96>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_PWM_Stop+0xa6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e0:	e013      	b.n	800780a <HAL_TIM_PWM_Stop+0xce>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Stop+0xb6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f0:	e00b      	b.n	800780a <HAL_TIM_PWM_Stop+0xce>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Stop+0xc6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007800:	e003      	b.n	800780a <HAL_TIM_PWM_Stop+0xce>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b02      	cmp	r3, #2
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0202 	mvn.w	r2, #2
 8007848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa77 	bl	8007d52 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa69 	bl	8007d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa7a 	bl	8007d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0204 	mvn.w	r2, #4
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2202      	movs	r2, #2
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa4d 	bl	8007d52 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa3f 	bl	8007d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa50 	bl	8007d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0208 	mvn.w	r2, #8
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa23 	bl	8007d52 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa15 	bl	8007d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa26 	bl	8007d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b10      	cmp	r3, #16
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0210 	mvn.w	r2, #16
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2208      	movs	r2, #8
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9f9 	bl	8007d52 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9eb 	bl	8007d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9fc 	bl	8007d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d107      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0201 	mvn.w	r2, #1
 8007998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7f9 fca0 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fd78 	bl	80084bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d10e      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d107      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9c1 	bl	8007d7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d10e      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0320 	and.w	r3, r3, #32
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d107      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0220 	mvn.w	r2, #32
 8007a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fd42 	bl	80084a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e0ae      	b.n	8007ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	f200 809f 	bhi.w	8007b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a95 	.word	0x08007a95
 8007a64:	08007b99 	.word	0x08007b99
 8007a68:	08007b99 	.word	0x08007b99
 8007a6c:	08007b99 	.word	0x08007b99
 8007a70:	08007ad5 	.word	0x08007ad5
 8007a74:	08007b99 	.word	0x08007b99
 8007a78:	08007b99 	.word	0x08007b99
 8007a7c:	08007b99 	.word	0x08007b99
 8007a80:	08007b17 	.word	0x08007b17
 8007a84:	08007b99 	.word	0x08007b99
 8007a88:	08007b99 	.word	0x08007b99
 8007a8c:	08007b99 	.word	0x08007b99
 8007a90:	08007b57 	.word	0x08007b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fa18 	bl	8007ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0208 	orr.w	r2, r2, #8
 8007aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0204 	bic.w	r2, r2, #4
 8007abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6999      	ldr	r1, [r3, #24]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	619a      	str	r2, [r3, #24]
      break;
 8007ad2:	e064      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fa68 	bl	8007fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	021a      	lsls	r2, r3, #8
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	619a      	str	r2, [r3, #24]
      break;
 8007b14:	e043      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fabd 	bl	800809c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0208 	orr.w	r2, r2, #8
 8007b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0204 	bic.w	r2, r2, #4
 8007b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	61da      	str	r2, [r3, #28]
      break;
 8007b54:	e023      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fb11 	bl	8008184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69d9      	ldr	r1, [r3, #28]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	021a      	lsls	r2, r3, #8
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	61da      	str	r2, [r3, #28]
      break;
 8007b96:	e002      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIM_ConfigClockSource+0x1c>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e0b4      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x186>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c04:	d03e      	beq.n	8007c84 <HAL_TIM_ConfigClockSource+0xd4>
 8007c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0a:	f200 8087 	bhi.w	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c12:	f000 8086 	beq.w	8007d22 <HAL_TIM_ConfigClockSource+0x172>
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1a:	d87f      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c1c:	2b70      	cmp	r3, #112	; 0x70
 8007c1e:	d01a      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0xa6>
 8007c20:	2b70      	cmp	r3, #112	; 0x70
 8007c22:	d87b      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c24:	2b60      	cmp	r3, #96	; 0x60
 8007c26:	d050      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x11a>
 8007c28:	2b60      	cmp	r3, #96	; 0x60
 8007c2a:	d877      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c2c:	2b50      	cmp	r3, #80	; 0x50
 8007c2e:	d03c      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0xfa>
 8007c30:	2b50      	cmp	r3, #80	; 0x50
 8007c32:	d873      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d058      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x13a>
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	d86f      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c3c:	2b30      	cmp	r3, #48	; 0x30
 8007c3e:	d064      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x15a>
 8007c40:	2b30      	cmp	r3, #48	; 0x30
 8007c42:	d86b      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d060      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x15a>
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d867      	bhi.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d05c      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x15a>
 8007c50:	2b10      	cmp	r3, #16
 8007c52:	d05a      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x15a>
 8007c54:	e062      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6899      	ldr	r1, [r3, #8]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f000 fb5d 	bl	8008324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	609a      	str	r2, [r3, #8]
      break;
 8007c82:	e04f      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	6899      	ldr	r1, [r3, #8]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f000 fb46 	bl	8008324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ca6:	609a      	str	r2, [r3, #8]
      break;
 8007ca8:	e03c      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f000 faba 	bl	8008230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2150      	movs	r1, #80	; 0x50
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fb13 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007cc8:	e02c      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 fad9 	bl	800828e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2160      	movs	r1, #96	; 0x60
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fb03 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e01c      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6859      	ldr	r1, [r3, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f000 fa9a 	bl	8008230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2140      	movs	r1, #64	; 0x40
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 faf3 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007d08:	e00c      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4619      	mov	r1, r3
 8007d14:	4610      	mov	r0, r2
 8007d16:	f000 faea 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007d1a:	e003      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e000      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a40      	ldr	r2, [pc, #256]	; (8007ea4 <TIM_Base_SetConfig+0x114>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dae:	d00f      	beq.n	8007dd0 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3d      	ldr	r2, [pc, #244]	; (8007ea8 <TIM_Base_SetConfig+0x118>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_Base_SetConfig+0x40>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a3c      	ldr	r2, [pc, #240]	; (8007eac <TIM_Base_SetConfig+0x11c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_Base_SetConfig+0x40>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a3b      	ldr	r2, [pc, #236]	; (8007eb0 <TIM_Base_SetConfig+0x120>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0x40>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a3a      	ldr	r2, [pc, #232]	; (8007eb4 <TIM_Base_SetConfig+0x124>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d108      	bne.n	8007de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2f      	ldr	r2, [pc, #188]	; (8007ea4 <TIM_Base_SetConfig+0x114>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d02b      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df0:	d027      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2c      	ldr	r2, [pc, #176]	; (8007ea8 <TIM_Base_SetConfig+0x118>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d023      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2b      	ldr	r2, [pc, #172]	; (8007eac <TIM_Base_SetConfig+0x11c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01f      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <TIM_Base_SetConfig+0x120>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01b      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a29      	ldr	r2, [pc, #164]	; (8007eb4 <TIM_Base_SetConfig+0x124>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d017      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <TIM_Base_SetConfig+0x128>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a27      	ldr	r2, [pc, #156]	; (8007ebc <TIM_Base_SetConfig+0x12c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00f      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a26      	ldr	r2, [pc, #152]	; (8007ec0 <TIM_Base_SetConfig+0x130>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a25      	ldr	r2, [pc, #148]	; (8007ec4 <TIM_Base_SetConfig+0x134>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d007      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a24      	ldr	r2, [pc, #144]	; (8007ec8 <TIM_Base_SetConfig+0x138>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d003      	beq.n	8007e42 <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a23      	ldr	r2, [pc, #140]	; (8007ecc <TIM_Base_SetConfig+0x13c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d108      	bne.n	8007e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <TIM_Base_SetConfig+0x114>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_Base_SetConfig+0xf8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <TIM_Base_SetConfig+0x124>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d103      	bne.n	8007e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	615a      	str	r2, [r3, #20]
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40010400 	.word	0x40010400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40014800 	.word	0x40014800
 8007ec4:	40001800 	.word	0x40001800
 8007ec8:	40001c00 	.word	0x40001c00
 8007ecc:	40002000 	.word	0x40002000

08007ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f023 0201 	bic.w	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 0302 	bic.w	r3, r3, #2
 8007f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a20      	ldr	r2, [pc, #128]	; (8007fa8 <TIM_OC1_SetConfig+0xd8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC1_SetConfig+0x64>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1f      	ldr	r2, [pc, #124]	; (8007fac <TIM_OC1_SetConfig+0xdc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d10c      	bne.n	8007f4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f023 0308 	bic.w	r3, r3, #8
 8007f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 0304 	bic.w	r3, r3, #4
 8007f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <TIM_OC1_SetConfig+0xd8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_OC1_SetConfig+0x8e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a14      	ldr	r2, [pc, #80]	; (8007fac <TIM_OC1_SetConfig+0xdc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d111      	bne.n	8007f82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400

08007fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f023 0210 	bic.w	r2, r3, #16
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f023 0320 	bic.w	r3, r3, #32
 8007ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a22      	ldr	r2, [pc, #136]	; (8008094 <TIM_OC2_SetConfig+0xe4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_OC2_SetConfig+0x68>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a21      	ldr	r2, [pc, #132]	; (8008098 <TIM_OC2_SetConfig+0xe8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d10d      	bne.n	8008034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <TIM_OC2_SetConfig+0xe4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC2_SetConfig+0x94>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <TIM_OC2_SetConfig+0xe8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d113      	bne.n	800806c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800804a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	621a      	str	r2, [r3, #32]
}
 8008086:	bf00      	nop
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40010400 	.word	0x40010400

0800809c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a21      	ldr	r2, [pc, #132]	; (800817c <TIM_OC3_SetConfig+0xe0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_OC3_SetConfig+0x66>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a20      	ldr	r2, [pc, #128]	; (8008180 <TIM_OC3_SetConfig+0xe4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800811c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a16      	ldr	r2, [pc, #88]	; (800817c <TIM_OC3_SetConfig+0xe0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_OC3_SetConfig+0x92>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a15      	ldr	r2, [pc, #84]	; (8008180 <TIM_OC3_SetConfig+0xe4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d113      	bne.n	8008156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800813c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	621a      	str	r2, [r3, #32]
}
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	031b      	lsls	r3, r3, #12
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a12      	ldr	r2, [pc, #72]	; (8008228 <TIM_OC4_SetConfig+0xa4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_OC4_SetConfig+0x68>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a11      	ldr	r2, [pc, #68]	; (800822c <TIM_OC4_SetConfig+0xa8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d109      	bne.n	8008200 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	019b      	lsls	r3, r3, #6
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40010000 	.word	0x40010000
 800822c:	40010400 	.word	0x40010400

08008230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f023 0201 	bic.w	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800825a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f023 030a 	bic.w	r3, r3, #10
 800826c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800828e:	b480      	push	{r7}
 8008290:	b087      	sub	sp, #28
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f023 0210 	bic.w	r2, r3, #16
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	031b      	lsls	r3, r3, #12
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	621a      	str	r2, [r3, #32]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	f043 0307 	orr.w	r3, r3, #7
 8008310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	609a      	str	r2, [r3, #8]
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800833e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	021a      	lsls	r2, r3, #8
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	431a      	orrs	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4313      	orrs	r3, r2
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	609a      	str	r2, [r3, #8]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2201      	movs	r2, #1
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1a      	ldr	r2, [r3, #32]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	43db      	mvns	r3, r3
 8008386:	401a      	ands	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1a      	ldr	r2, [r3, #32]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	fa01 f303 	lsl.w	r3, r1, r3
 800839c:	431a      	orrs	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e05a      	b.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a21      	ldr	r2, [pc, #132]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d022      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008414:	d01d      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d018      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00e      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d009      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a17      	ldr	r2, [pc, #92]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d004      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d10c      	bne.n	800846c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4313      	orrs	r3, r2
 8008462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40010000 	.word	0x40010000
 8008490:	40000400 	.word	0x40000400
 8008494:	40000800 	.word	0x40000800
 8008498:	40000c00 	.word	0x40000c00
 800849c:	40010400 	.word	0x40010400
 80084a0:	40014000 	.word	0x40014000
 80084a4:	40001800 	.word	0x40001800

080084a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e03f      	b.n	8008562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fa f848 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2224      	movs	r2, #36	; 0x24
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fddf 	bl	80090d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2220      	movs	r2, #32
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b08a      	sub	sp, #40	; 0x28
 800856e:	af02      	add	r7, sp, #8
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b20      	cmp	r3, #32
 8008588:	d17c      	bne.n	8008684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_UART_Transmit+0x2c>
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e075      	b.n	8008686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_UART_Transmit+0x3e>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e06e      	b.n	8008686 <HAL_UART_Transmit+0x11c>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2221      	movs	r2, #33	; 0x21
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085be:	f7fa fa5b 	bl	8002a78 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d108      	bne.n	80085ec <HAL_UART_Transmit+0x82>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d104      	bne.n	80085ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e003      	b.n	80085f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085fc:	e02a      	b.n	8008654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	2180      	movs	r1, #128	; 0x80
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fb1f 	bl	8008c4c <UART_WaitOnFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e036      	b.n	8008686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800862c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	3302      	adds	r3, #2
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	e007      	b.n	8008646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1cf      	bne.n	80085fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	2140      	movs	r1, #64	; 0x40
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 faef 	bl	8008c4c <UART_WaitOnFlagUntilTimeout>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e006      	b.n	8008686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e000      	b.n	8008686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008684:	2302      	movs	r3, #2
  }
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	4613      	mov	r3, r2
 800869a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d11d      	bne.n	80086e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_UART_Receive_IT+0x26>
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e016      	b.n	80086e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Receive_IT+0x38>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e00f      	b.n	80086e6 <HAL_UART_Receive_IT+0x58>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	461a      	mov	r2, r3
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fb24 	bl	8008d28 <UART_Start_Receive_IT>
 80086e0:	4603      	mov	r3, r0
 80086e2:	e000      	b.n	80086e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b0ba      	sub	sp, #232	; 0xe8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008716:	2300      	movs	r3, #0
 8008718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800871c:	2300      	movs	r3, #0
 800871e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800872e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10f      	bne.n	8008756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d009      	beq.n	8008756 <HAL_UART_IRQHandler+0x66>
 8008742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fc07 	bl	8008f62 <UART_Receive_IT>
      return;
 8008754:	e256      	b.n	8008c04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80de 	beq.w	800891c <HAL_UART_IRQHandler+0x22c>
 8008760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800876c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008770:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80d1 	beq.w	800891c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800877a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00b      	beq.n	800879e <HAL_UART_IRQHandler+0xae>
 8008786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800879e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <HAL_UART_IRQHandler+0xd2>
 80087aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f043 0202 	orr.w	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <HAL_UART_IRQHandler+0xf6>
 80087ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	f043 0204 	orr.w	r2, r3, #4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d011      	beq.n	8008816 <HAL_UART_IRQHandler+0x126>
 80087f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f043 0208 	orr.w	r2, r3, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 81ed 	beq.w	8008bfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d008      	beq.n	800883e <HAL_UART_IRQHandler+0x14e>
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb92 	bl	8008f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b40      	cmp	r3, #64	; 0x40
 800884a:	bf0c      	ite	eq
 800884c:	2301      	moveq	r3, #1
 800884e:	2300      	movne	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f003 0308 	and.w	r3, r3, #8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <HAL_UART_IRQHandler+0x17a>
 8008862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d04f      	beq.n	800890a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa9a 	bl	8008da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887a:	2b40      	cmp	r3, #64	; 0x40
 800887c:	d141      	bne.n	8008902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3314      	adds	r3, #20
 8008884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800889c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3314      	adds	r3, #20
 80088a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1d9      	bne.n	800887e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d013      	beq.n	80088fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	4a7d      	ldr	r2, [pc, #500]	; (8008acc <HAL_UART_IRQHandler+0x3dc>)
 80088d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fb f8c8 	bl	8003a74 <HAL_DMA_Abort_IT>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d016      	beq.n	8008918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f8:	e00e      	b.n	8008918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f990 	bl	8008c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008900:	e00a      	b.n	8008918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f98c 	bl	8008c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	e006      	b.n	8008918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f988 	bl	8008c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008916:	e170      	b.n	8008bfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008918:	bf00      	nop
    return;
 800891a:	e16e      	b.n	8008bfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	2b01      	cmp	r3, #1
 8008922:	f040 814a 	bne.w	8008bba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 8143 	beq.w	8008bba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 813c 	beq.w	8008bba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008942:	2300      	movs	r3, #0
 8008944:	60bb      	str	r3, [r7, #8]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008962:	2b40      	cmp	r3, #64	; 0x40
 8008964:	f040 80b4 	bne.w	8008ad0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8140 	beq.w	8008bfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008986:	429a      	cmp	r2, r3
 8008988:	f080 8139 	bcs.w	8008bfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008992:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800899e:	f000 8088 	beq.w	8008ab2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1d9      	bne.n	80089a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3314      	adds	r3, #20
 80089f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3314      	adds	r3, #20
 8008a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e1      	bne.n	80089ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3314      	adds	r3, #20
 8008a30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3314      	adds	r3, #20
 8008a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e3      	bne.n	8008a2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	330c      	adds	r3, #12
 8008a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a82:	f023 0310 	bic.w	r3, r3, #16
 8008a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	330c      	adds	r3, #12
 8008a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a94:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e3      	bne.n	8008a70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fa ff71 	bl	8003994 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f8b6 	bl	8008c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ac8:	e099      	b.n	8008bfe <HAL_UART_IRQHandler+0x50e>
 8008aca:	bf00      	nop
 8008acc:	08008e6b 	.word	0x08008e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 808b 	beq.w	8008c02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8086 	beq.w	8008c02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e3      	bne.n	8008af6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3314      	adds	r3, #20
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b52:	633a      	str	r2, [r7, #48]	; 0x30
 8008b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b98:	61fa      	str	r2, [r7, #28]
 8008b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	69b9      	ldr	r1, [r7, #24]
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e3      	bne.n	8008b74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f83e 	bl	8008c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bb8:	e023      	b.n	8008c02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <HAL_UART_IRQHandler+0x4ea>
 8008bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f95d 	bl	8008e92 <UART_Transmit_IT>
    return;
 8008bd8:	e014      	b.n	8008c04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <HAL_UART_IRQHandler+0x514>
 8008be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f99d 	bl	8008f32 <UART_EndTransmit_IT>
    return;
 8008bf8:	e004      	b.n	8008c04 <HAL_UART_IRQHandler+0x514>
    return;
 8008bfa:	bf00      	nop
 8008bfc:	e002      	b.n	8008c04 <HAL_UART_IRQHandler+0x514>
      return;
 8008bfe:	bf00      	nop
 8008c00:	e000      	b.n	8008c04 <HAL_UART_IRQHandler+0x514>
      return;
 8008c02:	bf00      	nop
  }
}
 8008c04:	37e8      	adds	r7, #232	; 0xe8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop

08008c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b090      	sub	sp, #64	; 0x40
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5c:	e050      	b.n	8008d00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c64:	d04c      	beq.n	8008d00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c6c:	f7f9 ff04 	bl	8002a78 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d241      	bcs.n	8008d00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c9c:	637a      	str	r2, [r7, #52]	; 0x34
 8008c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e5      	bne.n	8008c7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3314      	adds	r3, #20
 8008cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd0:	623a      	str	r2, [r7, #32]
 8008cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e00f      	b.n	8008d20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d09f      	beq.n	8008c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3740      	adds	r7, #64	; 0x40
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2222      	movs	r2, #34	; 0x22
 8008d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f042 0220 	orr.w	r2, r2, #32
 8008d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b095      	sub	sp, #84	; 0x54
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dcc:	643a      	str	r2, [r7, #64]	; 0x40
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e5      	bne.n	8008dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3314      	adds	r3, #20
 8008de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3314      	adds	r3, #20
 8008dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e5      	bne.n	8008de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d119      	bne.n	8008e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f023 0310 	bic.w	r3, r3, #16
 8008e32:	647b      	str	r3, [r7, #68]	; 0x44
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3c:	61ba      	str	r2, [r7, #24]
 8008e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6979      	ldr	r1, [r7, #20]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e5      	bne.n	8008e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e5e:	bf00      	nop
 8008e60:	3754      	adds	r7, #84	; 0x54
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fecb 	bl	8008c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b21      	cmp	r3, #33	; 0x21
 8008ea4:	d13e      	bne.n	8008f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eae:	d114      	bne.n	8008eda <UART_Transmit_IT+0x48>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d110      	bne.n	8008eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	1c9a      	adds	r2, r3, #2
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	621a      	str	r2, [r3, #32]
 8008ed8:	e008      	b.n	8008eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	1c59      	adds	r1, r3, #1
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6211      	str	r1, [r2, #32]
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10f      	bne.n	8008f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e000      	b.n	8008f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fe5a 	bl	8008c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b08c      	sub	sp, #48	; 0x30
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b22      	cmp	r3, #34	; 0x22
 8008f74:	f040 80ab 	bne.w	80090ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f80:	d117      	bne.n	8008fb2 <UART_Receive_IT+0x50>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d113      	bne.n	8008fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	1c9a      	adds	r2, r3, #2
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28
 8008fb0:	e026      	b.n	8009000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc4:	d007      	beq.n	8008fd6 <UART_Receive_IT+0x74>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <UART_Receive_IT+0x82>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	e008      	b.n	8008ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4619      	mov	r1, r3
 800900e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009010:	2b00      	cmp	r3, #0
 8009012:	d15a      	bne.n	80090ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 0220 	bic.w	r2, r2, #32
 8009022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	2b01      	cmp	r3, #1
 8009052:	d135      	bne.n	80090c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	330c      	adds	r3, #12
 8009060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	613b      	str	r3, [r7, #16]
   return(result);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f023 0310 	bic.w	r3, r3, #16
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	623a      	str	r2, [r7, #32]
 800907c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	69f9      	ldr	r1, [r7, #28]
 8009080:	6a3a      	ldr	r2, [r7, #32]
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	61bb      	str	r3, [r7, #24]
   return(result);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b10      	cmp	r3, #16
 800909a:	d10a      	bne.n	80090b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fdbb 	bl	8008c34 <HAL_UARTEx_RxEventCallback>
 80090be:	e002      	b.n	80090c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f8 f917 	bl	80012f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e002      	b.n	80090d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3730      	adds	r7, #48	; 0x30
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090dc:	b0c0      	sub	sp, #256	; 0x100
 80090de:	af00      	add	r7, sp, #0
 80090e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f4:	68d9      	ldr	r1, [r3, #12]
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	ea40 0301 	orr.w	r3, r0, r1
 8009100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	431a      	orrs	r2, r3
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	431a      	orrs	r2, r3
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4313      	orrs	r3, r2
 8009120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009130:	f021 010c 	bic.w	r1, r1, #12
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800913e:	430b      	orrs	r3, r1
 8009140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009152:	6999      	ldr	r1, [r3, #24]
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	ea40 0301 	orr.w	r3, r0, r1
 800915e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b8f      	ldr	r3, [pc, #572]	; (80093a4 <UART_SetConfig+0x2cc>)
 8009168:	429a      	cmp	r2, r3
 800916a:	d005      	beq.n	8009178 <UART_SetConfig+0xa0>
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b8d      	ldr	r3, [pc, #564]	; (80093a8 <UART_SetConfig+0x2d0>)
 8009174:	429a      	cmp	r2, r3
 8009176:	d104      	bne.n	8009182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009178:	f7fd fadc 	bl	8006734 <HAL_RCC_GetPCLK2Freq>
 800917c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009180:	e003      	b.n	800918a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fd fac3 	bl	800670c <HAL_RCC_GetPCLK1Freq>
 8009186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009194:	f040 810c 	bne.w	80093b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800919c:	2200      	movs	r2, #0
 800919e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	1891      	adds	r1, r2, r2
 80091b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80091b2:	415b      	adcs	r3, r3
 80091b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091ba:	4621      	mov	r1, r4
 80091bc:	eb12 0801 	adds.w	r8, r2, r1
 80091c0:	4629      	mov	r1, r5
 80091c2:	eb43 0901 	adc.w	r9, r3, r1
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091da:	4690      	mov	r8, r2
 80091dc:	4699      	mov	r9, r3
 80091de:	4623      	mov	r3, r4
 80091e0:	eb18 0303 	adds.w	r3, r8, r3
 80091e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091e8:	462b      	mov	r3, r5
 80091ea:	eb49 0303 	adc.w	r3, r9, r3
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009206:	460b      	mov	r3, r1
 8009208:	18db      	adds	r3, r3, r3
 800920a:	653b      	str	r3, [r7, #80]	; 0x50
 800920c:	4613      	mov	r3, r2
 800920e:	eb42 0303 	adc.w	r3, r2, r3
 8009212:	657b      	str	r3, [r7, #84]	; 0x54
 8009214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800921c:	f7f7 f840 	bl	80002a0 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4b61      	ldr	r3, [pc, #388]	; (80093ac <UART_SetConfig+0x2d4>)
 8009226:	fba3 2302 	umull	r2, r3, r3, r2
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	011c      	lsls	r4, r3, #4
 800922e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800923c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	1891      	adds	r1, r2, r2
 8009246:	64b9      	str	r1, [r7, #72]	; 0x48
 8009248:	415b      	adcs	r3, r3
 800924a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009250:	4641      	mov	r1, r8
 8009252:	eb12 0a01 	adds.w	sl, r2, r1
 8009256:	4649      	mov	r1, r9
 8009258:	eb43 0b01 	adc.w	fp, r3, r1
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800926c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009270:	4692      	mov	sl, r2
 8009272:	469b      	mov	fp, r3
 8009274:	4643      	mov	r3, r8
 8009276:	eb1a 0303 	adds.w	r3, sl, r3
 800927a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800927e:	464b      	mov	r3, r9
 8009280:	eb4b 0303 	adc.w	r3, fp, r3
 8009284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800929c:	460b      	mov	r3, r1
 800929e:	18db      	adds	r3, r3, r3
 80092a0:	643b      	str	r3, [r7, #64]	; 0x40
 80092a2:	4613      	mov	r3, r2
 80092a4:	eb42 0303 	adc.w	r3, r2, r3
 80092a8:	647b      	str	r3, [r7, #68]	; 0x44
 80092aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092b2:	f7f6 fff5 	bl	80002a0 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	4b3b      	ldr	r3, [pc, #236]	; (80093ac <UART_SetConfig+0x2d4>)
 80092be:	fba3 2301 	umull	r2, r3, r3, r1
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	2264      	movs	r2, #100	; 0x64
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	1acb      	subs	r3, r1, r3
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092d2:	4b36      	ldr	r3, [pc, #216]	; (80093ac <UART_SetConfig+0x2d4>)
 80092d4:	fba3 2302 	umull	r2, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092e0:	441c      	add	r4, r3
 80092e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80092fc:	415b      	adcs	r3, r3
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009304:	4641      	mov	r1, r8
 8009306:	1851      	adds	r1, r2, r1
 8009308:	6339      	str	r1, [r7, #48]	; 0x30
 800930a:	4649      	mov	r1, r9
 800930c:	414b      	adcs	r3, r1
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800931c:	4659      	mov	r1, fp
 800931e:	00cb      	lsls	r3, r1, #3
 8009320:	4651      	mov	r1, sl
 8009322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009326:	4651      	mov	r1, sl
 8009328:	00ca      	lsls	r2, r1, #3
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	4603      	mov	r3, r0
 8009330:	4642      	mov	r2, r8
 8009332:	189b      	adds	r3, r3, r2
 8009334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009338:	464b      	mov	r3, r9
 800933a:	460a      	mov	r2, r1
 800933c:	eb42 0303 	adc.w	r3, r2, r3
 8009340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009358:	460b      	mov	r3, r1
 800935a:	18db      	adds	r3, r3, r3
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	eb42 0303 	adc.w	r3, r2, r3
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800936a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800936e:	f7f6 ff97 	bl	80002a0 <__aeabi_uldivmod>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <UART_SetConfig+0x2d4>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	3332      	adds	r3, #50	; 0x32
 800938a:	4a08      	ldr	r2, [pc, #32]	; (80093ac <UART_SetConfig+0x2d4>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f003 0207 	and.w	r2, r3, #7
 8009396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4422      	add	r2, r4
 800939e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093a0:	e106      	b.n	80095b0 <UART_SetConfig+0x4d8>
 80093a2:	bf00      	nop
 80093a4:	40011000 	.word	0x40011000
 80093a8:	40011400 	.word	0x40011400
 80093ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093c2:	4642      	mov	r2, r8
 80093c4:	464b      	mov	r3, r9
 80093c6:	1891      	adds	r1, r2, r2
 80093c8:	6239      	str	r1, [r7, #32]
 80093ca:	415b      	adcs	r3, r3
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
 80093ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093d2:	4641      	mov	r1, r8
 80093d4:	1854      	adds	r4, r2, r1
 80093d6:	4649      	mov	r1, r9
 80093d8:	eb43 0501 	adc.w	r5, r3, r1
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	00eb      	lsls	r3, r5, #3
 80093e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ea:	00e2      	lsls	r2, r4, #3
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	4643      	mov	r3, r8
 80093f2:	18e3      	adds	r3, r4, r3
 80093f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093f8:	464b      	mov	r3, r9
 80093fa:	eb45 0303 	adc.w	r3, r5, r3
 80093fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800940e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800941e:	4629      	mov	r1, r5
 8009420:	008b      	lsls	r3, r1, #2
 8009422:	4621      	mov	r1, r4
 8009424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009428:	4621      	mov	r1, r4
 800942a:	008a      	lsls	r2, r1, #2
 800942c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009430:	f7f6 ff36 	bl	80002a0 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b60      	ldr	r3, [pc, #384]	; (80095bc <UART_SetConfig+0x4e4>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011c      	lsls	r4, r3, #4
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800944c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	61b9      	str	r1, [r7, #24]
 800945c:	415b      	adcs	r3, r3
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009464:	4641      	mov	r1, r8
 8009466:	1851      	adds	r1, r2, r1
 8009468:	6139      	str	r1, [r7, #16]
 800946a:	4649      	mov	r1, r9
 800946c:	414b      	adcs	r3, r1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800947c:	4659      	mov	r1, fp
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4651      	mov	r1, sl
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4642      	mov	r2, r8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009498:	464b      	mov	r3, r9
 800949a:	460a      	mov	r2, r1
 800949c:	eb42 0303 	adc.w	r3, r2, r3
 80094a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80094ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094bc:	4649      	mov	r1, r9
 80094be:	008b      	lsls	r3, r1, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c6:	4641      	mov	r1, r8
 80094c8:	008a      	lsls	r2, r1, #2
 80094ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094ce:	f7f6 fee7 	bl	80002a0 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	4b38      	ldr	r3, [pc, #224]	; (80095bc <UART_SetConfig+0x4e4>)
 80094da:	fba3 2301 	umull	r2, r3, r3, r1
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2264      	movs	r2, #100	; 0x64
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	1acb      	subs	r3, r1, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	; 0x32
 80094ec:	4a33      	ldr	r2, [pc, #204]	; (80095bc <UART_SetConfig+0x4e4>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f8:	441c      	add	r4, r3
 80094fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fe:	2200      	movs	r2, #0
 8009500:	673b      	str	r3, [r7, #112]	; 0x70
 8009502:	677a      	str	r2, [r7, #116]	; 0x74
 8009504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	415b      	adcs	r3, r3
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009518:	4641      	mov	r1, r8
 800951a:	1851      	adds	r1, r2, r1
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	4649      	mov	r1, r9
 8009520:	414b      	adcs	r3, r1
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009530:	4659      	mov	r1, fp
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4651      	mov	r1, sl
 8009536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953a:	4651      	mov	r1, sl
 800953c:	00ca      	lsls	r2, r1, #3
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	4603      	mov	r3, r0
 8009544:	4642      	mov	r2, r8
 8009546:	189b      	adds	r3, r3, r2
 8009548:	66bb      	str	r3, [r7, #104]	; 0x68
 800954a:	464b      	mov	r3, r9
 800954c:	460a      	mov	r2, r1
 800954e:	eb42 0303 	adc.w	r3, r2, r3
 8009552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	663b      	str	r3, [r7, #96]	; 0x60
 800955e:	667a      	str	r2, [r7, #100]	; 0x64
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800956c:	4649      	mov	r1, r9
 800956e:	008b      	lsls	r3, r1, #2
 8009570:	4641      	mov	r1, r8
 8009572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009576:	4641      	mov	r1, r8
 8009578:	008a      	lsls	r2, r1, #2
 800957a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800957e:	f7f6 fe8f 	bl	80002a0 <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <UART_SetConfig+0x4e4>)
 8009588:	fba3 1302 	umull	r1, r3, r3, r2
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	2164      	movs	r1, #100	; 0x64
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	3332      	adds	r3, #50	; 0x32
 800959a:	4a08      	ldr	r2, [pc, #32]	; (80095bc <UART_SetConfig+0x4e4>)
 800959c:	fba2 2303 	umull	r2, r3, r2, r3
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4422      	add	r2, r4
 80095ae:	609a      	str	r2, [r3, #8]
}
 80095b0:	bf00      	nop
 80095b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095b6:	46bd      	mov	sp, r7
 80095b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095bc:	51eb851f 	.word	0x51eb851f

080095c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095c0:	b084      	sub	sp, #16
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	f107 001c 	add.w	r0, r7, #28
 80095ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d122      	bne.n	800961e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d105      	bne.n	8009612 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 faa2 	bl	8009b5c <USB_CoreReset>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
 800961c:	e01a      	b.n	8009654 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa96 	bl	8009b5c <USB_CoreReset>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	639a      	str	r2, [r3, #56]	; 0x38
 8009646:	e005      	b.n	8009654 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b01      	cmp	r3, #1
 8009658:	d10b      	bne.n	8009672 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f043 0206 	orr.w	r2, r3, #6
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f043 0220 	orr.w	r2, r3, #32
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800967e:	b004      	add	sp, #16
 8009680:	4770      	bx	lr

08009682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f023 0201 	bic.w	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d115      	bne.n	80096f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096d2:	2001      	movs	r0, #1
 80096d4:	f7f9 f9dc 	bl	8002a90 <HAL_Delay>
      ms++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fa2e 	bl	8009b40 <USB_GetMode>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d01e      	beq.n	8009728 <USB_SetCurrentMode+0x84>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b31      	cmp	r3, #49	; 0x31
 80096ee:	d9f0      	bls.n	80096d2 <USB_SetCurrentMode+0x2e>
 80096f0:	e01a      	b.n	8009728 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009704:	2001      	movs	r0, #1
 8009706:	f7f9 f9c3 	bl	8002a90 <HAL_Delay>
      ms++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa15 	bl	8009b40 <USB_GetMode>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <USB_SetCurrentMode+0x84>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b31      	cmp	r3, #49	; 0x31
 8009720:	d9f0      	bls.n	8009704 <USB_SetCurrentMode+0x60>
 8009722:	e001      	b.n	8009728 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e005      	b.n	8009734 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b32      	cmp	r3, #50	; 0x32
 800972c:	d101      	bne.n	8009732 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800973c:	b084      	sub	sp, #16
 800973e:	b580      	push	{r7, lr}
 8009740:	b086      	sub	sp, #24
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800974a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009756:	2300      	movs	r3, #0
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	e009      	b.n	8009770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3340      	adds	r3, #64	; 0x40
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b0e      	cmp	r3, #14
 8009774:	d9f2      	bls.n	800975c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d11c      	bne.n	80097b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800978a:	f043 0302 	orr.w	r3, r3, #2
 800978e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
 80097b4:	e00b      	b.n	80097ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097d4:	461a      	mov	r2, r3
 80097d6:	2300      	movs	r3, #0
 80097d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e0:	4619      	mov	r1, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e8:	461a      	mov	r2, r3
 80097ea:	680b      	ldr	r3, [r1, #0]
 80097ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d10c      	bne.n	800980e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f965 	bl	8009acc <USB_SetDevSpeed>
 8009802:	e008      	b.n	8009816 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009804:	2101      	movs	r1, #1
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f960 	bl	8009acc <USB_SetDevSpeed>
 800980c:	e003      	b.n	8009816 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800980e:	2103      	movs	r1, #3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f95b 	bl	8009acc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009816:	2110      	movs	r1, #16
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f8f3 	bl	8009a04 <USB_FlushTxFifo>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f91f 	bl	8009a6c <USB_FlushRxFifo>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	461a      	mov	r2, r3
 8009840:	2300      	movs	r3, #0
 8009842:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984a:	461a      	mov	r2, r3
 800984c:	2300      	movs	r3, #0
 800984e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009856:	461a      	mov	r2, r3
 8009858:	2300      	movs	r3, #0
 800985a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	e043      	b.n	80098ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009878:	d118      	bne.n	80098ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	461a      	mov	r2, r3
 800988e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e013      	b.n	80098be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	461a      	mov	r2, r3
 80098a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e008      	b.n	80098be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b8:	461a      	mov	r2, r3
 80098ba:	2300      	movs	r3, #0
 80098bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ca:	461a      	mov	r2, r3
 80098cc:	2300      	movs	r3, #0
 80098ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	461a      	mov	r2, r3
 80098de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	3301      	adds	r3, #1
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d3b7      	bcc.n	8009862 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	e043      	b.n	8009980 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800990e:	d118      	bne.n	8009942 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009922:	461a      	mov	r2, r3
 8009924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	e013      	b.n	8009954 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	461a      	mov	r2, r3
 800993a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	e008      	b.n	8009954 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	461a      	mov	r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	461a      	mov	r2, r3
 8009974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	3301      	adds	r3, #1
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	d3b7      	bcc.n	80098f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800999a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d105      	bne.n	80099bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f043 0210 	orr.w	r2, r3, #16
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <USB_DevInit+0x2c4>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d005      	beq.n	80099da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f043 0208 	orr.w	r2, r3, #8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d107      	bne.n	80099f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099e8:	f043 0304 	orr.w	r3, r3, #4
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099fc:	b004      	add	sp, #16
 80099fe:	4770      	bx	lr
 8009a00:	803c3800 	.word	0x803c3800

08009a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a13      	ldr	r2, [pc, #76]	; (8009a68 <USB_FlushTxFifo+0x64>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e01b      	b.n	8009a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	daf2      	bge.n	8009a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	019b      	lsls	r3, r3, #6
 8009a34:	f043 0220 	orr.w	r2, r3, #32
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <USB_FlushTxFifo+0x64>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d901      	bls.n	8009a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e006      	b.n	8009a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d0f0      	beq.n	8009a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	00030d40 	.word	0x00030d40

08009a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4a11      	ldr	r2, [pc, #68]	; (8009ac8 <USB_FlushRxFifo+0x5c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d901      	bls.n	8009a8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e018      	b.n	8009abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	daf2      	bge.n	8009a78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2210      	movs	r2, #16
 8009a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a08      	ldr	r2, [pc, #32]	; (8009ac8 <USB_FlushRxFifo+0x5c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d901      	bls.n	8009aae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e006      	b.n	8009abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d0f0      	beq.n	8009a9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	00030d40 	.word	0x00030d40

08009acc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aec:	4313      	orrs	r3, r2
 8009aee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4a13      	ldr	r2, [pc, #76]	; (8009bc0 <USB_CoreReset+0x64>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d901      	bls.n	8009b7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e01b      	b.n	8009bb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	daf2      	bge.n	8009b68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f043 0201 	orr.w	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <USB_CoreReset+0x64>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e006      	b.n	8009bb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d0f0      	beq.n	8009b92 <USB_CoreReset+0x36>

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	00030d40 	.word	0x00030d40

08009bc4 <std>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	e9c0 3300 	strd	r3, r3, [r0]
 8009bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd2:	6083      	str	r3, [r0, #8]
 8009bd4:	8181      	strh	r1, [r0, #12]
 8009bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bd8:	81c2      	strh	r2, [r0, #14]
 8009bda:	6183      	str	r3, [r0, #24]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	2208      	movs	r2, #8
 8009be0:	305c      	adds	r0, #92	; 0x5c
 8009be2:	f000 fa4b 	bl	800a07c <memset>
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <std+0x58>)
 8009be8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bea:	4b0d      	ldr	r3, [pc, #52]	; (8009c20 <std+0x5c>)
 8009bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bee:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <std+0x60>)
 8009bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <std+0x64>)
 8009bf4:	6323      	str	r3, [r4, #48]	; 0x30
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <std+0x68>)
 8009bf8:	6224      	str	r4, [r4, #32]
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d006      	beq.n	8009c0c <std+0x48>
 8009bfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c02:	4294      	cmp	r4, r2
 8009c04:	d002      	beq.n	8009c0c <std+0x48>
 8009c06:	33d0      	adds	r3, #208	; 0xd0
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d105      	bne.n	8009c18 <std+0x54>
 8009c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f000 baaa 	b.w	800a16c <__retarget_lock_init_recursive>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08009ecd 	.word	0x08009ecd
 8009c20:	08009eef 	.word	0x08009eef
 8009c24:	08009f27 	.word	0x08009f27
 8009c28:	08009f4b 	.word	0x08009f4b
 8009c2c:	20000db4 	.word	0x20000db4

08009c30 <stdio_exit_handler>:
 8009c30:	4a02      	ldr	r2, [pc, #8]	; (8009c3c <stdio_exit_handler+0xc>)
 8009c32:	4903      	ldr	r1, [pc, #12]	; (8009c40 <stdio_exit_handler+0x10>)
 8009c34:	4803      	ldr	r0, [pc, #12]	; (8009c44 <stdio_exit_handler+0x14>)
 8009c36:	f000 b869 	b.w	8009d0c <_fwalk_sglue>
 8009c3a:	bf00      	nop
 8009c3c:	200002ec 	.word	0x200002ec
 8009c40:	0800acc9 	.word	0x0800acc9
 8009c44:	200002f8 	.word	0x200002f8

08009c48 <cleanup_stdio>:
 8009c48:	6841      	ldr	r1, [r0, #4]
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <cleanup_stdio+0x34>)
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	d001      	beq.n	8009c58 <cleanup_stdio+0x10>
 8009c54:	f001 f838 	bl	800acc8 <_fflush_r>
 8009c58:	68a1      	ldr	r1, [r4, #8]
 8009c5a:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <cleanup_stdio+0x38>)
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <cleanup_stdio+0x1e>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f001 f831 	bl	800acc8 <_fflush_r>
 8009c66:	68e1      	ldr	r1, [r4, #12]
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <cleanup_stdio+0x3c>)
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d004      	beq.n	8009c78 <cleanup_stdio+0x30>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f001 b828 	b.w	800acc8 <_fflush_r>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000db4 	.word	0x20000db4
 8009c80:	20000e1c 	.word	0x20000e1c
 8009c84:	20000e84 	.word	0x20000e84

08009c88 <global_stdio_init.part.0>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <global_stdio_init.part.0+0x30>)
 8009c8c:	4c0b      	ldr	r4, [pc, #44]	; (8009cbc <global_stdio_init.part.0+0x34>)
 8009c8e:	4a0c      	ldr	r2, [pc, #48]	; (8009cc0 <global_stdio_init.part.0+0x38>)
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	4620      	mov	r0, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	2104      	movs	r1, #4
 8009c98:	f7ff ff94 	bl	8009bc4 <std>
 8009c9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2109      	movs	r1, #9
 8009ca4:	f7ff ff8e 	bl	8009bc4 <std>
 8009ca8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009cac:	2202      	movs	r2, #2
 8009cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb2:	2112      	movs	r1, #18
 8009cb4:	f7ff bf86 	b.w	8009bc4 <std>
 8009cb8:	20000eec 	.word	0x20000eec
 8009cbc:	20000db4 	.word	0x20000db4
 8009cc0:	08009c31 	.word	0x08009c31

08009cc4 <__sfp_lock_acquire>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__sfp_lock_acquire+0x8>)
 8009cc6:	f000 ba52 	b.w	800a16e <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20000ef5 	.word	0x20000ef5

08009cd0 <__sfp_lock_release>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__sfp_lock_release+0x8>)
 8009cd2:	f000 ba4d 	b.w	800a170 <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20000ef5 	.word	0x20000ef5

08009cdc <__sinit>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7ff fff0 	bl	8009cc4 <__sfp_lock_acquire>
 8009ce4:	6a23      	ldr	r3, [r4, #32]
 8009ce6:	b11b      	cbz	r3, 8009cf0 <__sinit+0x14>
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f7ff bff0 	b.w	8009cd0 <__sfp_lock_release>
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <__sinit+0x28>)
 8009cf2:	6223      	str	r3, [r4, #32]
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <__sinit+0x2c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f5      	bne.n	8009ce8 <__sinit+0xc>
 8009cfc:	f7ff ffc4 	bl	8009c88 <global_stdio_init.part.0>
 8009d00:	e7f2      	b.n	8009ce8 <__sinit+0xc>
 8009d02:	bf00      	nop
 8009d04:	08009c49 	.word	0x08009c49
 8009d08:	20000eec 	.word	0x20000eec

08009d0c <_fwalk_sglue>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	4607      	mov	r7, r0
 8009d12:	4688      	mov	r8, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	2600      	movs	r6, #0
 8009d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d20:	d505      	bpl.n	8009d2e <_fwalk_sglue+0x22>
 8009d22:	6824      	ldr	r4, [r4, #0]
 8009d24:	2c00      	cmp	r4, #0
 8009d26:	d1f7      	bne.n	8009d18 <_fwalk_sglue+0xc>
 8009d28:	4630      	mov	r0, r6
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d907      	bls.n	8009d44 <_fwalk_sglue+0x38>
 8009d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	d003      	beq.n	8009d44 <_fwalk_sglue+0x38>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4638      	mov	r0, r7
 8009d40:	47c0      	blx	r8
 8009d42:	4306      	orrs	r6, r0
 8009d44:	3568      	adds	r5, #104	; 0x68
 8009d46:	e7e9      	b.n	8009d1c <_fwalk_sglue+0x10>

08009d48 <iprintf>:
 8009d48:	b40f      	push	{r0, r1, r2, r3}
 8009d4a:	b507      	push	{r0, r1, r2, lr}
 8009d4c:	4906      	ldr	r1, [pc, #24]	; (8009d68 <iprintf+0x20>)
 8009d4e:	ab04      	add	r3, sp, #16
 8009d50:	6808      	ldr	r0, [r1, #0]
 8009d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d56:	6881      	ldr	r1, [r0, #8]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f000 fc85 	bl	800a668 <_vfiprintf_r>
 8009d5e:	b003      	add	sp, #12
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	b004      	add	sp, #16
 8009d66:	4770      	bx	lr
 8009d68:	20000344 	.word	0x20000344

08009d6c <_puts_r>:
 8009d6c:	6a03      	ldr	r3, [r0, #32]
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	6884      	ldr	r4, [r0, #8]
 8009d72:	4605      	mov	r5, r0
 8009d74:	460e      	mov	r6, r1
 8009d76:	b90b      	cbnz	r3, 8009d7c <_puts_r+0x10>
 8009d78:	f7ff ffb0 	bl	8009cdc <__sinit>
 8009d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d7e:	07db      	lsls	r3, r3, #31
 8009d80:	d405      	bmi.n	8009d8e <_puts_r+0x22>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	0598      	lsls	r0, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <_puts_r+0x22>
 8009d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8a:	f000 f9f0 	bl	800a16e <__retarget_lock_acquire_recursive>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	0719      	lsls	r1, r3, #28
 8009d92:	d513      	bpl.n	8009dbc <_puts_r+0x50>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	b18b      	cbz	r3, 8009dbc <_puts_r+0x50>
 8009d98:	3e01      	subs	r6, #1
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009da0:	3b01      	subs	r3, #1
 8009da2:	60a3      	str	r3, [r4, #8]
 8009da4:	b9e9      	cbnz	r1, 8009de2 <_puts_r+0x76>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	da2e      	bge.n	8009e08 <_puts_r+0x9c>
 8009daa:	4622      	mov	r2, r4
 8009dac:	210a      	movs	r1, #10
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f8cf 	bl	8009f52 <__swbuf_r>
 8009db4:	3001      	adds	r0, #1
 8009db6:	d007      	beq.n	8009dc8 <_puts_r+0x5c>
 8009db8:	250a      	movs	r5, #10
 8009dba:	e007      	b.n	8009dcc <_puts_r+0x60>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 f904 	bl	8009fcc <__swsetup_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d0e7      	beq.n	8009d98 <_puts_r+0x2c>
 8009dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8009dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dce:	07da      	lsls	r2, r3, #31
 8009dd0:	d405      	bmi.n	8009dde <_puts_r+0x72>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	059b      	lsls	r3, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_puts_r+0x72>
 8009dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dda:	f000 f9c9 	bl	800a170 <__retarget_lock_release_recursive>
 8009dde:	4628      	mov	r0, r5
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da04      	bge.n	8009df0 <_puts_r+0x84>
 8009de6:	69a2      	ldr	r2, [r4, #24]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	dc06      	bgt.n	8009dfa <_puts_r+0x8e>
 8009dec:	290a      	cmp	r1, #10
 8009dee:	d004      	beq.n	8009dfa <_puts_r+0x8e>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	7019      	strb	r1, [r3, #0]
 8009df8:	e7cf      	b.n	8009d9a <_puts_r+0x2e>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f000 f8a8 	bl	8009f52 <__swbuf_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	d1c9      	bne.n	8009d9a <_puts_r+0x2e>
 8009e06:	e7df      	b.n	8009dc8 <_puts_r+0x5c>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	250a      	movs	r5, #10
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	701d      	strb	r5, [r3, #0]
 8009e12:	e7db      	b.n	8009dcc <_puts_r+0x60>

08009e14 <puts>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <puts+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfa7 	b.w	8009d6c <_puts_r>
 8009e1e:	bf00      	nop
 8009e20:	20000344 	.word	0x20000344

08009e24 <sniprintf>:
 8009e24:	b40c      	push	{r2, r3}
 8009e26:	b530      	push	{r4, r5, lr}
 8009e28:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <sniprintf+0x64>)
 8009e2a:	1e0c      	subs	r4, r1, #0
 8009e2c:	681d      	ldr	r5, [r3, #0]
 8009e2e:	b09d      	sub	sp, #116	; 0x74
 8009e30:	da08      	bge.n	8009e44 <sniprintf+0x20>
 8009e32:	238b      	movs	r3, #139	; 0x8b
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b01d      	add	sp, #116	; 0x74
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	b002      	add	sp, #8
 8009e42:	4770      	bx	lr
 8009e44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e4c:	bf14      	ite	ne
 8009e4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e52:	4623      	moveq	r3, r4
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e66:	ab21      	add	r3, sp, #132	; 0x84
 8009e68:	a902      	add	r1, sp, #8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f000 fad3 	bl	800a418 <_svfiprintf_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	bfbc      	itt	lt
 8009e76:	238b      	movlt	r3, #139	; 0x8b
 8009e78:	602b      	strlt	r3, [r5, #0]
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	d0dd      	beq.n	8009e3a <sniprintf+0x16>
 8009e7e:	9b02      	ldr	r3, [sp, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e7d9      	b.n	8009e3a <sniprintf+0x16>
 8009e86:	bf00      	nop
 8009e88:	20000344 	.word	0x20000344

08009e8c <siprintf>:
 8009e8c:	b40e      	push	{r1, r2, r3}
 8009e8e:	b500      	push	{lr}
 8009e90:	b09c      	sub	sp, #112	; 0x70
 8009e92:	ab1d      	add	r3, sp, #116	; 0x74
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e9c:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <siprintf+0x38>)
 8009e9e:	9107      	str	r1, [sp, #28]
 8009ea0:	9104      	str	r1, [sp, #16]
 8009ea2:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <siprintf+0x3c>)
 8009ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea8:	9105      	str	r1, [sp, #20]
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	a902      	add	r1, sp, #8
 8009eb0:	f000 fab2 	bl	800a418 <_svfiprintf_r>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	b01c      	add	sp, #112	; 0x70
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	20000344 	.word	0x20000344
 8009ec8:	ffff0208 	.word	0xffff0208

08009ecc <__sread>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed4:	f000 f8fc 	bl	800a0d0 <_read_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	bfab      	itete	ge
 8009edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ede:	89a3      	ldrhlt	r3, [r4, #12]
 8009ee0:	181b      	addge	r3, r3, r0
 8009ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ee6:	bfac      	ite	ge
 8009ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eea:	81a3      	strhlt	r3, [r4, #12]
 8009eec:	bd10      	pop	{r4, pc}

08009eee <__swrite>:
 8009eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	898b      	ldrh	r3, [r1, #12]
 8009ef6:	05db      	lsls	r3, r3, #23
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	4616      	mov	r6, r2
 8009efe:	d505      	bpl.n	8009f0c <__swrite+0x1e>
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	2302      	movs	r3, #2
 8009f06:	2200      	movs	r2, #0
 8009f08:	f000 f8d0 	bl	800a0ac <_lseek_r>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	4632      	mov	r2, r6
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f22:	f000 b8e7 	b.w	800a0f4 <_write_r>

08009f26 <__sseek>:
 8009f26:	b510      	push	{r4, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2e:	f000 f8bd 	bl	800a0ac <_lseek_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	bf15      	itete	ne
 8009f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f42:	81a3      	strheq	r3, [r4, #12]
 8009f44:	bf18      	it	ne
 8009f46:	81a3      	strhne	r3, [r4, #12]
 8009f48:	bd10      	pop	{r4, pc}

08009f4a <__sclose>:
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f000 b89d 	b.w	800a08c <_close_r>

08009f52 <__swbuf_r>:
 8009f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f54:	460e      	mov	r6, r1
 8009f56:	4614      	mov	r4, r2
 8009f58:	4605      	mov	r5, r0
 8009f5a:	b118      	cbz	r0, 8009f64 <__swbuf_r+0x12>
 8009f5c:	6a03      	ldr	r3, [r0, #32]
 8009f5e:	b90b      	cbnz	r3, 8009f64 <__swbuf_r+0x12>
 8009f60:	f7ff febc 	bl	8009cdc <__sinit>
 8009f64:	69a3      	ldr	r3, [r4, #24]
 8009f66:	60a3      	str	r3, [r4, #8]
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	071a      	lsls	r2, r3, #28
 8009f6c:	d525      	bpl.n	8009fba <__swbuf_r+0x68>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b31b      	cbz	r3, 8009fba <__swbuf_r+0x68>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	1a98      	subs	r0, r3, r2
 8009f78:	6963      	ldr	r3, [r4, #20]
 8009f7a:	b2f6      	uxtb	r6, r6
 8009f7c:	4283      	cmp	r3, r0
 8009f7e:	4637      	mov	r7, r6
 8009f80:	dc04      	bgt.n	8009f8c <__swbuf_r+0x3a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 fe9f 	bl	800acc8 <_fflush_r>
 8009f8a:	b9e0      	cbnz	r0, 8009fc6 <__swbuf_r+0x74>
 8009f8c:	68a3      	ldr	r3, [r4, #8]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	60a3      	str	r3, [r4, #8]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	701e      	strb	r6, [r3, #0]
 8009f9a:	6962      	ldr	r2, [r4, #20]
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d004      	beq.n	8009fac <__swbuf_r+0x5a>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	07db      	lsls	r3, r3, #31
 8009fa6:	d506      	bpl.n	8009fb6 <__swbuf_r+0x64>
 8009fa8:	2e0a      	cmp	r6, #10
 8009faa:	d104      	bne.n	8009fb6 <__swbuf_r+0x64>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 fe8a 	bl	800acc8 <_fflush_r>
 8009fb4:	b938      	cbnz	r0, 8009fc6 <__swbuf_r+0x74>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f000 f805 	bl	8009fcc <__swsetup_r>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d0d5      	beq.n	8009f72 <__swbuf_r+0x20>
 8009fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8009fca:	e7f4      	b.n	8009fb6 <__swbuf_r+0x64>

08009fcc <__swsetup_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <__swsetup_r+0xac>)
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	b118      	cbz	r0, 8009fe0 <__swsetup_r+0x14>
 8009fd8:	6a03      	ldr	r3, [r0, #32]
 8009fda:	b90b      	cbnz	r3, 8009fe0 <__swsetup_r+0x14>
 8009fdc:	f7ff fe7e 	bl	8009cdc <__sinit>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe6:	0718      	lsls	r0, r3, #28
 8009fe8:	d422      	bmi.n	800a030 <__swsetup_r+0x64>
 8009fea:	06d9      	lsls	r1, r3, #27
 8009fec:	d407      	bmi.n	8009ffe <__swsetup_r+0x32>
 8009fee:	2309      	movs	r3, #9
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	e034      	b.n	800a068 <__swsetup_r+0x9c>
 8009ffe:	0758      	lsls	r0, r3, #29
 800a000:	d512      	bpl.n	800a028 <__swsetup_r+0x5c>
 800a002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a004:	b141      	cbz	r1, 800a018 <__swsetup_r+0x4c>
 800a006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a00a:	4299      	cmp	r1, r3
 800a00c:	d002      	beq.n	800a014 <__swsetup_r+0x48>
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 f8b0 	bl	800a174 <_free_r>
 800a014:	2300      	movs	r3, #0
 800a016:	6363      	str	r3, [r4, #52]	; 0x34
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	2300      	movs	r3, #0
 800a022:	6063      	str	r3, [r4, #4]
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	f043 0308 	orr.w	r3, r3, #8
 800a02e:	81a3      	strh	r3, [r4, #12]
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	b94b      	cbnz	r3, 800a048 <__swsetup_r+0x7c>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a03a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03e:	d003      	beq.n	800a048 <__swsetup_r+0x7c>
 800a040:	4621      	mov	r1, r4
 800a042:	4628      	mov	r0, r5
 800a044:	f000 fe8e 	bl	800ad64 <__smakebuf_r>
 800a048:	89a0      	ldrh	r0, [r4, #12]
 800a04a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a04e:	f010 0301 	ands.w	r3, r0, #1
 800a052:	d00a      	beq.n	800a06a <__swsetup_r+0x9e>
 800a054:	2300      	movs	r3, #0
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	6963      	ldr	r3, [r4, #20]
 800a05a:	425b      	negs	r3, r3
 800a05c:	61a3      	str	r3, [r4, #24]
 800a05e:	6923      	ldr	r3, [r4, #16]
 800a060:	b943      	cbnz	r3, 800a074 <__swsetup_r+0xa8>
 800a062:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a066:	d1c4      	bne.n	8009ff2 <__swsetup_r+0x26>
 800a068:	bd38      	pop	{r3, r4, r5, pc}
 800a06a:	0781      	lsls	r1, r0, #30
 800a06c:	bf58      	it	pl
 800a06e:	6963      	ldrpl	r3, [r4, #20]
 800a070:	60a3      	str	r3, [r4, #8]
 800a072:	e7f4      	b.n	800a05e <__swsetup_r+0x92>
 800a074:	2000      	movs	r0, #0
 800a076:	e7f7      	b.n	800a068 <__swsetup_r+0x9c>
 800a078:	20000344 	.word	0x20000344

0800a07c <memset>:
 800a07c:	4402      	add	r2, r0
 800a07e:	4603      	mov	r3, r0
 800a080:	4293      	cmp	r3, r2
 800a082:	d100      	bne.n	800a086 <memset+0xa>
 800a084:	4770      	bx	lr
 800a086:	f803 1b01 	strb.w	r1, [r3], #1
 800a08a:	e7f9      	b.n	800a080 <memset+0x4>

0800a08c <_close_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d06      	ldr	r5, [pc, #24]	; (800a0a8 <_close_r+0x1c>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	f7f8 fbe1 	bl	800285e <_close>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_close_r+0x1a>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_close_r+0x1a>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20000ef0 	.word	0x20000ef0

0800a0ac <_lseek_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d07      	ldr	r5, [pc, #28]	; (800a0cc <_lseek_r+0x20>)
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	4608      	mov	r0, r1
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	602a      	str	r2, [r5, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f7f8 fbf6 	bl	80028ac <_lseek>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_lseek_r+0x1e>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_lseek_r+0x1e>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20000ef0 	.word	0x20000ef0

0800a0d0 <_read_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_read_r+0x20>)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f8 fba0 	bl	8002824 <_read>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_read_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_read_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000ef0 	.word	0x20000ef0

0800a0f4 <_write_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_write_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f7 f92c 	bl	8001360 <_write>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_write_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_write_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000ef0 	.word	0x20000ef0

0800a118 <__errno>:
 800a118:	4b01      	ldr	r3, [pc, #4]	; (800a120 <__errno+0x8>)
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	20000344 	.word	0x20000344

0800a124 <__libc_init_array>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4d0d      	ldr	r5, [pc, #52]	; (800a15c <__libc_init_array+0x38>)
 800a128:	4c0d      	ldr	r4, [pc, #52]	; (800a160 <__libc_init_array+0x3c>)
 800a12a:	1b64      	subs	r4, r4, r5
 800a12c:	10a4      	asrs	r4, r4, #2
 800a12e:	2600      	movs	r6, #0
 800a130:	42a6      	cmp	r6, r4
 800a132:	d109      	bne.n	800a148 <__libc_init_array+0x24>
 800a134:	4d0b      	ldr	r5, [pc, #44]	; (800a164 <__libc_init_array+0x40>)
 800a136:	4c0c      	ldr	r4, [pc, #48]	; (800a168 <__libc_init_array+0x44>)
 800a138:	f000 fee2 	bl	800af00 <_init>
 800a13c:	1b64      	subs	r4, r4, r5
 800a13e:	10a4      	asrs	r4, r4, #2
 800a140:	2600      	movs	r6, #0
 800a142:	42a6      	cmp	r6, r4
 800a144:	d105      	bne.n	800a152 <__libc_init_array+0x2e>
 800a146:	bd70      	pop	{r4, r5, r6, pc}
 800a148:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14c:	4798      	blx	r3
 800a14e:	3601      	adds	r6, #1
 800a150:	e7ee      	b.n	800a130 <__libc_init_array+0xc>
 800a152:	f855 3b04 	ldr.w	r3, [r5], #4
 800a156:	4798      	blx	r3
 800a158:	3601      	adds	r6, #1
 800a15a:	e7f2      	b.n	800a142 <__libc_init_array+0x1e>
 800a15c:	0800b304 	.word	0x0800b304
 800a160:	0800b304 	.word	0x0800b304
 800a164:	0800b304 	.word	0x0800b304
 800a168:	0800b308 	.word	0x0800b308

0800a16c <__retarget_lock_init_recursive>:
 800a16c:	4770      	bx	lr

0800a16e <__retarget_lock_acquire_recursive>:
 800a16e:	4770      	bx	lr

0800a170 <__retarget_lock_release_recursive>:
 800a170:	4770      	bx	lr
	...

0800a174 <_free_r>:
 800a174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a176:	2900      	cmp	r1, #0
 800a178:	d044      	beq.n	800a204 <_free_r+0x90>
 800a17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17e:	9001      	str	r0, [sp, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f1a1 0404 	sub.w	r4, r1, #4
 800a186:	bfb8      	it	lt
 800a188:	18e4      	addlt	r4, r4, r3
 800a18a:	f000 f8df 	bl	800a34c <__malloc_lock>
 800a18e:	4a1e      	ldr	r2, [pc, #120]	; (800a208 <_free_r+0x94>)
 800a190:	9801      	ldr	r0, [sp, #4]
 800a192:	6813      	ldr	r3, [r2, #0]
 800a194:	b933      	cbnz	r3, 800a1a4 <_free_r+0x30>
 800a196:	6063      	str	r3, [r4, #4]
 800a198:	6014      	str	r4, [r2, #0]
 800a19a:	b003      	add	sp, #12
 800a19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1a0:	f000 b8da 	b.w	800a358 <__malloc_unlock>
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	d908      	bls.n	800a1ba <_free_r+0x46>
 800a1a8:	6825      	ldr	r5, [r4, #0]
 800a1aa:	1961      	adds	r1, r4, r5
 800a1ac:	428b      	cmp	r3, r1
 800a1ae:	bf01      	itttt	eq
 800a1b0:	6819      	ldreq	r1, [r3, #0]
 800a1b2:	685b      	ldreq	r3, [r3, #4]
 800a1b4:	1949      	addeq	r1, r1, r5
 800a1b6:	6021      	streq	r1, [r4, #0]
 800a1b8:	e7ed      	b.n	800a196 <_free_r+0x22>
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	b10b      	cbz	r3, 800a1c4 <_free_r+0x50>
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d9fa      	bls.n	800a1ba <_free_r+0x46>
 800a1c4:	6811      	ldr	r1, [r2, #0]
 800a1c6:	1855      	adds	r5, r2, r1
 800a1c8:	42a5      	cmp	r5, r4
 800a1ca:	d10b      	bne.n	800a1e4 <_free_r+0x70>
 800a1cc:	6824      	ldr	r4, [r4, #0]
 800a1ce:	4421      	add	r1, r4
 800a1d0:	1854      	adds	r4, r2, r1
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	d1e0      	bne.n	800a19a <_free_r+0x26>
 800a1d8:	681c      	ldr	r4, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	6053      	str	r3, [r2, #4]
 800a1de:	440c      	add	r4, r1
 800a1e0:	6014      	str	r4, [r2, #0]
 800a1e2:	e7da      	b.n	800a19a <_free_r+0x26>
 800a1e4:	d902      	bls.n	800a1ec <_free_r+0x78>
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	e7d6      	b.n	800a19a <_free_r+0x26>
 800a1ec:	6825      	ldr	r5, [r4, #0]
 800a1ee:	1961      	adds	r1, r4, r5
 800a1f0:	428b      	cmp	r3, r1
 800a1f2:	bf04      	itt	eq
 800a1f4:	6819      	ldreq	r1, [r3, #0]
 800a1f6:	685b      	ldreq	r3, [r3, #4]
 800a1f8:	6063      	str	r3, [r4, #4]
 800a1fa:	bf04      	itt	eq
 800a1fc:	1949      	addeq	r1, r1, r5
 800a1fe:	6021      	streq	r1, [r4, #0]
 800a200:	6054      	str	r4, [r2, #4]
 800a202:	e7ca      	b.n	800a19a <_free_r+0x26>
 800a204:	b003      	add	sp, #12
 800a206:	bd30      	pop	{r4, r5, pc}
 800a208:	20000ef8 	.word	0x20000ef8

0800a20c <sbrk_aligned>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4e0e      	ldr	r6, [pc, #56]	; (800a248 <sbrk_aligned+0x3c>)
 800a210:	460c      	mov	r4, r1
 800a212:	6831      	ldr	r1, [r6, #0]
 800a214:	4605      	mov	r5, r0
 800a216:	b911      	cbnz	r1, 800a21e <sbrk_aligned+0x12>
 800a218:	f000 fe1c 	bl	800ae54 <_sbrk_r>
 800a21c:	6030      	str	r0, [r6, #0]
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 fe17 	bl	800ae54 <_sbrk_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d00a      	beq.n	800a240 <sbrk_aligned+0x34>
 800a22a:	1cc4      	adds	r4, r0, #3
 800a22c:	f024 0403 	bic.w	r4, r4, #3
 800a230:	42a0      	cmp	r0, r4
 800a232:	d007      	beq.n	800a244 <sbrk_aligned+0x38>
 800a234:	1a21      	subs	r1, r4, r0
 800a236:	4628      	mov	r0, r5
 800a238:	f000 fe0c 	bl	800ae54 <_sbrk_r>
 800a23c:	3001      	adds	r0, #1
 800a23e:	d101      	bne.n	800a244 <sbrk_aligned+0x38>
 800a240:	f04f 34ff 	mov.w	r4, #4294967295
 800a244:	4620      	mov	r0, r4
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	20000efc 	.word	0x20000efc

0800a24c <_malloc_r>:
 800a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a250:	1ccd      	adds	r5, r1, #3
 800a252:	f025 0503 	bic.w	r5, r5, #3
 800a256:	3508      	adds	r5, #8
 800a258:	2d0c      	cmp	r5, #12
 800a25a:	bf38      	it	cc
 800a25c:	250c      	movcc	r5, #12
 800a25e:	2d00      	cmp	r5, #0
 800a260:	4607      	mov	r7, r0
 800a262:	db01      	blt.n	800a268 <_malloc_r+0x1c>
 800a264:	42a9      	cmp	r1, r5
 800a266:	d905      	bls.n	800a274 <_malloc_r+0x28>
 800a268:	230c      	movs	r3, #12
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	2600      	movs	r6, #0
 800a26e:	4630      	mov	r0, r6
 800a270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a348 <_malloc_r+0xfc>
 800a278:	f000 f868 	bl	800a34c <__malloc_lock>
 800a27c:	f8d8 3000 	ldr.w	r3, [r8]
 800a280:	461c      	mov	r4, r3
 800a282:	bb5c      	cbnz	r4, 800a2dc <_malloc_r+0x90>
 800a284:	4629      	mov	r1, r5
 800a286:	4638      	mov	r0, r7
 800a288:	f7ff ffc0 	bl	800a20c <sbrk_aligned>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	4604      	mov	r4, r0
 800a290:	d155      	bne.n	800a33e <_malloc_r+0xf2>
 800a292:	f8d8 4000 	ldr.w	r4, [r8]
 800a296:	4626      	mov	r6, r4
 800a298:	2e00      	cmp	r6, #0
 800a29a:	d145      	bne.n	800a328 <_malloc_r+0xdc>
 800a29c:	2c00      	cmp	r4, #0
 800a29e:	d048      	beq.n	800a332 <_malloc_r+0xe6>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	eb04 0903 	add.w	r9, r4, r3
 800a2aa:	f000 fdd3 	bl	800ae54 <_sbrk_r>
 800a2ae:	4581      	cmp	r9, r0
 800a2b0:	d13f      	bne.n	800a332 <_malloc_r+0xe6>
 800a2b2:	6821      	ldr	r1, [r4, #0]
 800a2b4:	1a6d      	subs	r5, r5, r1
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff ffa7 	bl	800a20c <sbrk_aligned>
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d037      	beq.n	800a332 <_malloc_r+0xe6>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	442b      	add	r3, r5
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d038      	beq.n	800a342 <_malloc_r+0xf6>
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	42a2      	cmp	r2, r4
 800a2d4:	d12b      	bne.n	800a32e <_malloc_r+0xe2>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	605a      	str	r2, [r3, #4]
 800a2da:	e00f      	b.n	800a2fc <_malloc_r+0xb0>
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	1b52      	subs	r2, r2, r5
 800a2e0:	d41f      	bmi.n	800a322 <_malloc_r+0xd6>
 800a2e2:	2a0b      	cmp	r2, #11
 800a2e4:	d917      	bls.n	800a316 <_malloc_r+0xca>
 800a2e6:	1961      	adds	r1, r4, r5
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	6025      	str	r5, [r4, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	6059      	strne	r1, [r3, #4]
 800a2f0:	6863      	ldr	r3, [r4, #4]
 800a2f2:	bf08      	it	eq
 800a2f4:	f8c8 1000 	streq.w	r1, [r8]
 800a2f8:	5162      	str	r2, [r4, r5]
 800a2fa:	604b      	str	r3, [r1, #4]
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f104 060b 	add.w	r6, r4, #11
 800a302:	f000 f829 	bl	800a358 <__malloc_unlock>
 800a306:	f026 0607 	bic.w	r6, r6, #7
 800a30a:	1d23      	adds	r3, r4, #4
 800a30c:	1af2      	subs	r2, r6, r3
 800a30e:	d0ae      	beq.n	800a26e <_malloc_r+0x22>
 800a310:	1b9b      	subs	r3, r3, r6
 800a312:	50a3      	str	r3, [r4, r2]
 800a314:	e7ab      	b.n	800a26e <_malloc_r+0x22>
 800a316:	42a3      	cmp	r3, r4
 800a318:	6862      	ldr	r2, [r4, #4]
 800a31a:	d1dd      	bne.n	800a2d8 <_malloc_r+0x8c>
 800a31c:	f8c8 2000 	str.w	r2, [r8]
 800a320:	e7ec      	b.n	800a2fc <_malloc_r+0xb0>
 800a322:	4623      	mov	r3, r4
 800a324:	6864      	ldr	r4, [r4, #4]
 800a326:	e7ac      	b.n	800a282 <_malloc_r+0x36>
 800a328:	4634      	mov	r4, r6
 800a32a:	6876      	ldr	r6, [r6, #4]
 800a32c:	e7b4      	b.n	800a298 <_malloc_r+0x4c>
 800a32e:	4613      	mov	r3, r2
 800a330:	e7cc      	b.n	800a2cc <_malloc_r+0x80>
 800a332:	230c      	movs	r3, #12
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	4638      	mov	r0, r7
 800a338:	f000 f80e 	bl	800a358 <__malloc_unlock>
 800a33c:	e797      	b.n	800a26e <_malloc_r+0x22>
 800a33e:	6025      	str	r5, [r4, #0]
 800a340:	e7dc      	b.n	800a2fc <_malloc_r+0xb0>
 800a342:	605b      	str	r3, [r3, #4]
 800a344:	deff      	udf	#255	; 0xff
 800a346:	bf00      	nop
 800a348:	20000ef8 	.word	0x20000ef8

0800a34c <__malloc_lock>:
 800a34c:	4801      	ldr	r0, [pc, #4]	; (800a354 <__malloc_lock+0x8>)
 800a34e:	f7ff bf0e 	b.w	800a16e <__retarget_lock_acquire_recursive>
 800a352:	bf00      	nop
 800a354:	20000ef4 	.word	0x20000ef4

0800a358 <__malloc_unlock>:
 800a358:	4801      	ldr	r0, [pc, #4]	; (800a360 <__malloc_unlock+0x8>)
 800a35a:	f7ff bf09 	b.w	800a170 <__retarget_lock_release_recursive>
 800a35e:	bf00      	nop
 800a360:	20000ef4 	.word	0x20000ef4

0800a364 <__ssputs_r>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	688e      	ldr	r6, [r1, #8]
 800a36a:	461f      	mov	r7, r3
 800a36c:	42be      	cmp	r6, r7
 800a36e:	680b      	ldr	r3, [r1, #0]
 800a370:	4682      	mov	sl, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4690      	mov	r8, r2
 800a376:	d82c      	bhi.n	800a3d2 <__ssputs_r+0x6e>
 800a378:	898a      	ldrh	r2, [r1, #12]
 800a37a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a37e:	d026      	beq.n	800a3ce <__ssputs_r+0x6a>
 800a380:	6965      	ldr	r5, [r4, #20]
 800a382:	6909      	ldr	r1, [r1, #16]
 800a384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a388:	eba3 0901 	sub.w	r9, r3, r1
 800a38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a390:	1c7b      	adds	r3, r7, #1
 800a392:	444b      	add	r3, r9
 800a394:	106d      	asrs	r5, r5, #1
 800a396:	429d      	cmp	r5, r3
 800a398:	bf38      	it	cc
 800a39a:	461d      	movcc	r5, r3
 800a39c:	0553      	lsls	r3, r2, #21
 800a39e:	d527      	bpl.n	800a3f0 <__ssputs_r+0x8c>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7ff ff53 	bl	800a24c <_malloc_r>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	b360      	cbz	r0, 800a404 <__ssputs_r+0xa0>
 800a3aa:	6921      	ldr	r1, [r4, #16]
 800a3ac:	464a      	mov	r2, r9
 800a3ae:	f000 fd61 	bl	800ae74 <memcpy>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6126      	str	r6, [r4, #16]
 800a3c0:	6165      	str	r5, [r4, #20]
 800a3c2:	444e      	add	r6, r9
 800a3c4:	eba5 0509 	sub.w	r5, r5, r9
 800a3c8:	6026      	str	r6, [r4, #0]
 800a3ca:	60a5      	str	r5, [r4, #8]
 800a3cc:	463e      	mov	r6, r7
 800a3ce:	42be      	cmp	r6, r7
 800a3d0:	d900      	bls.n	800a3d4 <__ssputs_r+0x70>
 800a3d2:	463e      	mov	r6, r7
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	4641      	mov	r1, r8
 800a3da:	f000 fcff 	bl	800addc <memmove>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	60a3      	str	r3, [r4, #8]
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	4433      	add	r3, r6
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	f000 fd4d 	bl	800ae90 <_realloc_r>
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d1e0      	bne.n	800a3be <__ssputs_r+0x5a>
 800a3fc:	6921      	ldr	r1, [r4, #16]
 800a3fe:	4650      	mov	r0, sl
 800a400:	f7ff feb8 	bl	800a174 <_free_r>
 800a404:	230c      	movs	r3, #12
 800a406:	f8ca 3000 	str.w	r3, [sl]
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	f04f 30ff 	mov.w	r0, #4294967295
 800a416:	e7e9      	b.n	800a3ec <__ssputs_r+0x88>

0800a418 <_svfiprintf_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4698      	mov	r8, r3
 800a41e:	898b      	ldrh	r3, [r1, #12]
 800a420:	061b      	lsls	r3, r3, #24
 800a422:	b09d      	sub	sp, #116	; 0x74
 800a424:	4607      	mov	r7, r0
 800a426:	460d      	mov	r5, r1
 800a428:	4614      	mov	r4, r2
 800a42a:	d50e      	bpl.n	800a44a <_svfiprintf_r+0x32>
 800a42c:	690b      	ldr	r3, [r1, #16]
 800a42e:	b963      	cbnz	r3, 800a44a <_svfiprintf_r+0x32>
 800a430:	2140      	movs	r1, #64	; 0x40
 800a432:	f7ff ff0b 	bl	800a24c <_malloc_r>
 800a436:	6028      	str	r0, [r5, #0]
 800a438:	6128      	str	r0, [r5, #16]
 800a43a:	b920      	cbnz	r0, 800a446 <_svfiprintf_r+0x2e>
 800a43c:	230c      	movs	r3, #12
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295
 800a444:	e0d0      	b.n	800a5e8 <_svfiprintf_r+0x1d0>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	616b      	str	r3, [r5, #20]
 800a44a:	2300      	movs	r3, #0
 800a44c:	9309      	str	r3, [sp, #36]	; 0x24
 800a44e:	2320      	movs	r3, #32
 800a450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a454:	f8cd 800c 	str.w	r8, [sp, #12]
 800a458:	2330      	movs	r3, #48	; 0x30
 800a45a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a600 <_svfiprintf_r+0x1e8>
 800a45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a462:	f04f 0901 	mov.w	r9, #1
 800a466:	4623      	mov	r3, r4
 800a468:	469a      	mov	sl, r3
 800a46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a46e:	b10a      	cbz	r2, 800a474 <_svfiprintf_r+0x5c>
 800a470:	2a25      	cmp	r2, #37	; 0x25
 800a472:	d1f9      	bne.n	800a468 <_svfiprintf_r+0x50>
 800a474:	ebba 0b04 	subs.w	fp, sl, r4
 800a478:	d00b      	beq.n	800a492 <_svfiprintf_r+0x7a>
 800a47a:	465b      	mov	r3, fp
 800a47c:	4622      	mov	r2, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff ff6f 	bl	800a364 <__ssputs_r>
 800a486:	3001      	adds	r0, #1
 800a488:	f000 80a9 	beq.w	800a5de <_svfiprintf_r+0x1c6>
 800a48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a48e:	445a      	add	r2, fp
 800a490:	9209      	str	r2, [sp, #36]	; 0x24
 800a492:	f89a 3000 	ldrb.w	r3, [sl]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 80a1 	beq.w	800a5de <_svfiprintf_r+0x1c6>
 800a49c:	2300      	movs	r3, #0
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a6:	f10a 0a01 	add.w	sl, sl, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	9307      	str	r3, [sp, #28]
 800a4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b4:	4654      	mov	r4, sl
 800a4b6:	2205      	movs	r2, #5
 800a4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4bc:	4850      	ldr	r0, [pc, #320]	; (800a600 <_svfiprintf_r+0x1e8>)
 800a4be:	f7f5 fe9f 	bl	8000200 <memchr>
 800a4c2:	9a04      	ldr	r2, [sp, #16]
 800a4c4:	b9d8      	cbnz	r0, 800a4fe <_svfiprintf_r+0xe6>
 800a4c6:	06d0      	lsls	r0, r2, #27
 800a4c8:	bf44      	itt	mi
 800a4ca:	2320      	movmi	r3, #32
 800a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d0:	0711      	lsls	r1, r2, #28
 800a4d2:	bf44      	itt	mi
 800a4d4:	232b      	movmi	r3, #43	; 0x2b
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	f89a 3000 	ldrb.w	r3, [sl]
 800a4de:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e0:	d015      	beq.n	800a50e <_svfiprintf_r+0xf6>
 800a4e2:	9a07      	ldr	r2, [sp, #28]
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f04f 0c0a 	mov.w	ip, #10
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f2:	3b30      	subs	r3, #48	; 0x30
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d94d      	bls.n	800a594 <_svfiprintf_r+0x17c>
 800a4f8:	b1b0      	cbz	r0, 800a528 <_svfiprintf_r+0x110>
 800a4fa:	9207      	str	r2, [sp, #28]
 800a4fc:	e014      	b.n	800a528 <_svfiprintf_r+0x110>
 800a4fe:	eba0 0308 	sub.w	r3, r0, r8
 800a502:	fa09 f303 	lsl.w	r3, r9, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	46a2      	mov	sl, r4
 800a50c:	e7d2      	b.n	800a4b4 <_svfiprintf_r+0x9c>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	1d19      	adds	r1, r3, #4
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	9103      	str	r1, [sp, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfbb      	ittet	lt
 800a51a:	425b      	neglt	r3, r3
 800a51c:	f042 0202 	orrlt.w	r2, r2, #2
 800a520:	9307      	strge	r3, [sp, #28]
 800a522:	9307      	strlt	r3, [sp, #28]
 800a524:	bfb8      	it	lt
 800a526:	9204      	strlt	r2, [sp, #16]
 800a528:	7823      	ldrb	r3, [r4, #0]
 800a52a:	2b2e      	cmp	r3, #46	; 0x2e
 800a52c:	d10c      	bne.n	800a548 <_svfiprintf_r+0x130>
 800a52e:	7863      	ldrb	r3, [r4, #1]
 800a530:	2b2a      	cmp	r3, #42	; 0x2a
 800a532:	d134      	bne.n	800a59e <_svfiprintf_r+0x186>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	9203      	str	r2, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfb8      	it	lt
 800a540:	f04f 33ff 	movlt.w	r3, #4294967295
 800a544:	3402      	adds	r4, #2
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a610 <_svfiprintf_r+0x1f8>
 800a54c:	7821      	ldrb	r1, [r4, #0]
 800a54e:	2203      	movs	r2, #3
 800a550:	4650      	mov	r0, sl
 800a552:	f7f5 fe55 	bl	8000200 <memchr>
 800a556:	b138      	cbz	r0, 800a568 <_svfiprintf_r+0x150>
 800a558:	9b04      	ldr	r3, [sp, #16]
 800a55a:	eba0 000a 	sub.w	r0, r0, sl
 800a55e:	2240      	movs	r2, #64	; 0x40
 800a560:	4082      	lsls	r2, r0
 800a562:	4313      	orrs	r3, r2
 800a564:	3401      	adds	r4, #1
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56c:	4825      	ldr	r0, [pc, #148]	; (800a604 <_svfiprintf_r+0x1ec>)
 800a56e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a572:	2206      	movs	r2, #6
 800a574:	f7f5 fe44 	bl	8000200 <memchr>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d038      	beq.n	800a5ee <_svfiprintf_r+0x1d6>
 800a57c:	4b22      	ldr	r3, [pc, #136]	; (800a608 <_svfiprintf_r+0x1f0>)
 800a57e:	bb1b      	cbnz	r3, 800a5c8 <_svfiprintf_r+0x1b0>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	3307      	adds	r3, #7
 800a584:	f023 0307 	bic.w	r3, r3, #7
 800a588:	3308      	adds	r3, #8
 800a58a:	9303      	str	r3, [sp, #12]
 800a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58e:	4433      	add	r3, r6
 800a590:	9309      	str	r3, [sp, #36]	; 0x24
 800a592:	e768      	b.n	800a466 <_svfiprintf_r+0x4e>
 800a594:	fb0c 3202 	mla	r2, ip, r2, r3
 800a598:	460c      	mov	r4, r1
 800a59a:	2001      	movs	r0, #1
 800a59c:	e7a6      	b.n	800a4ec <_svfiprintf_r+0xd4>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	3401      	adds	r4, #1
 800a5a2:	9305      	str	r3, [sp, #20]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f04f 0c0a 	mov.w	ip, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b0:	3a30      	subs	r2, #48	; 0x30
 800a5b2:	2a09      	cmp	r2, #9
 800a5b4:	d903      	bls.n	800a5be <_svfiprintf_r+0x1a6>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0c6      	beq.n	800a548 <_svfiprintf_r+0x130>
 800a5ba:	9105      	str	r1, [sp, #20]
 800a5bc:	e7c4      	b.n	800a548 <_svfiprintf_r+0x130>
 800a5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e7f0      	b.n	800a5aa <_svfiprintf_r+0x192>
 800a5c8:	ab03      	add	r3, sp, #12
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <_svfiprintf_r+0x1f4>)
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	1c42      	adds	r2, r0, #1
 800a5da:	4606      	mov	r6, r0
 800a5dc:	d1d6      	bne.n	800a58c <_svfiprintf_r+0x174>
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	065b      	lsls	r3, r3, #25
 800a5e2:	f53f af2d 	bmi.w	800a440 <_svfiprintf_r+0x28>
 800a5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e8:	b01d      	add	sp, #116	; 0x74
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4b05      	ldr	r3, [pc, #20]	; (800a60c <_svfiprintf_r+0x1f4>)
 800a5f6:	a904      	add	r1, sp, #16
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f000 f9bd 	bl	800a978 <_printf_i>
 800a5fe:	e7eb      	b.n	800a5d8 <_svfiprintf_r+0x1c0>
 800a600:	0800b2c8 	.word	0x0800b2c8
 800a604:	0800b2d2 	.word	0x0800b2d2
 800a608:	00000000 	.word	0x00000000
 800a60c:	0800a365 	.word	0x0800a365
 800a610:	0800b2ce 	.word	0x0800b2ce

0800a614 <__sfputc_r>:
 800a614:	6893      	ldr	r3, [r2, #8]
 800a616:	3b01      	subs	r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	b410      	push	{r4}
 800a61c:	6093      	str	r3, [r2, #8]
 800a61e:	da08      	bge.n	800a632 <__sfputc_r+0x1e>
 800a620:	6994      	ldr	r4, [r2, #24]
 800a622:	42a3      	cmp	r3, r4
 800a624:	db01      	blt.n	800a62a <__sfputc_r+0x16>
 800a626:	290a      	cmp	r1, #10
 800a628:	d103      	bne.n	800a632 <__sfputc_r+0x1e>
 800a62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a62e:	f7ff bc90 	b.w	8009f52 <__swbuf_r>
 800a632:	6813      	ldr	r3, [r2, #0]
 800a634:	1c58      	adds	r0, r3, #1
 800a636:	6010      	str	r0, [r2, #0]
 800a638:	7019      	strb	r1, [r3, #0]
 800a63a:	4608      	mov	r0, r1
 800a63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <__sfputs_r>:
 800a642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a644:	4606      	mov	r6, r0
 800a646:	460f      	mov	r7, r1
 800a648:	4614      	mov	r4, r2
 800a64a:	18d5      	adds	r5, r2, r3
 800a64c:	42ac      	cmp	r4, r5
 800a64e:	d101      	bne.n	800a654 <__sfputs_r+0x12>
 800a650:	2000      	movs	r0, #0
 800a652:	e007      	b.n	800a664 <__sfputs_r+0x22>
 800a654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a658:	463a      	mov	r2, r7
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ffda 	bl	800a614 <__sfputc_r>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d1f3      	bne.n	800a64c <__sfputs_r+0xa>
 800a664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a668 <_vfiprintf_r>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	460d      	mov	r5, r1
 800a66e:	b09d      	sub	sp, #116	; 0x74
 800a670:	4614      	mov	r4, r2
 800a672:	4698      	mov	r8, r3
 800a674:	4606      	mov	r6, r0
 800a676:	b118      	cbz	r0, 800a680 <_vfiprintf_r+0x18>
 800a678:	6a03      	ldr	r3, [r0, #32]
 800a67a:	b90b      	cbnz	r3, 800a680 <_vfiprintf_r+0x18>
 800a67c:	f7ff fb2e 	bl	8009cdc <__sinit>
 800a680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d405      	bmi.n	800a692 <_vfiprintf_r+0x2a>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	059a      	lsls	r2, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_vfiprintf_r+0x2a>
 800a68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68e:	f7ff fd6e 	bl	800a16e <__retarget_lock_acquire_recursive>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	071b      	lsls	r3, r3, #28
 800a696:	d501      	bpl.n	800a69c <_vfiprintf_r+0x34>
 800a698:	692b      	ldr	r3, [r5, #16]
 800a69a:	b99b      	cbnz	r3, 800a6c4 <_vfiprintf_r+0x5c>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff fc94 	bl	8009fcc <__swsetup_r>
 800a6a4:	b170      	cbz	r0, 800a6c4 <_vfiprintf_r+0x5c>
 800a6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a8:	07dc      	lsls	r4, r3, #31
 800a6aa:	d504      	bpl.n	800a6b6 <_vfiprintf_r+0x4e>
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	b01d      	add	sp, #116	; 0x74
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	0598      	lsls	r0, r3, #22
 800a6ba:	d4f7      	bmi.n	800a6ac <_vfiprintf_r+0x44>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6be:	f7ff fd57 	bl	800a170 <__retarget_lock_release_recursive>
 800a6c2:	e7f3      	b.n	800a6ac <_vfiprintf_r+0x44>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d2:	2330      	movs	r3, #48	; 0x30
 800a6d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a888 <_vfiprintf_r+0x220>
 800a6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6dc:	f04f 0901 	mov.w	r9, #1
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	469a      	mov	sl, r3
 800a6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e8:	b10a      	cbz	r2, 800a6ee <_vfiprintf_r+0x86>
 800a6ea:	2a25      	cmp	r2, #37	; 0x25
 800a6ec:	d1f9      	bne.n	800a6e2 <_vfiprintf_r+0x7a>
 800a6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f2:	d00b      	beq.n	800a70c <_vfiprintf_r+0xa4>
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7ff ffa1 	bl	800a642 <__sfputs_r>
 800a700:	3001      	adds	r0, #1
 800a702:	f000 80a9 	beq.w	800a858 <_vfiprintf_r+0x1f0>
 800a706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a708:	445a      	add	r2, fp
 800a70a:	9209      	str	r2, [sp, #36]	; 0x24
 800a70c:	f89a 3000 	ldrb.w	r3, [sl]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80a1 	beq.w	800a858 <_vfiprintf_r+0x1f0>
 800a716:	2300      	movs	r3, #0
 800a718:	f04f 32ff 	mov.w	r2, #4294967295
 800a71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a720:	f10a 0a01 	add.w	sl, sl, #1
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	9307      	str	r3, [sp, #28]
 800a728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72c:	931a      	str	r3, [sp, #104]	; 0x68
 800a72e:	4654      	mov	r4, sl
 800a730:	2205      	movs	r2, #5
 800a732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a736:	4854      	ldr	r0, [pc, #336]	; (800a888 <_vfiprintf_r+0x220>)
 800a738:	f7f5 fd62 	bl	8000200 <memchr>
 800a73c:	9a04      	ldr	r2, [sp, #16]
 800a73e:	b9d8      	cbnz	r0, 800a778 <_vfiprintf_r+0x110>
 800a740:	06d1      	lsls	r1, r2, #27
 800a742:	bf44      	itt	mi
 800a744:	2320      	movmi	r3, #32
 800a746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74a:	0713      	lsls	r3, r2, #28
 800a74c:	bf44      	itt	mi
 800a74e:	232b      	movmi	r3, #43	; 0x2b
 800a750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b2a      	cmp	r3, #42	; 0x2a
 800a75a:	d015      	beq.n	800a788 <_vfiprintf_r+0x120>
 800a75c:	9a07      	ldr	r2, [sp, #28]
 800a75e:	4654      	mov	r4, sl
 800a760:	2000      	movs	r0, #0
 800a762:	f04f 0c0a 	mov.w	ip, #10
 800a766:	4621      	mov	r1, r4
 800a768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76c:	3b30      	subs	r3, #48	; 0x30
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d94d      	bls.n	800a80e <_vfiprintf_r+0x1a6>
 800a772:	b1b0      	cbz	r0, 800a7a2 <_vfiprintf_r+0x13a>
 800a774:	9207      	str	r2, [sp, #28]
 800a776:	e014      	b.n	800a7a2 <_vfiprintf_r+0x13a>
 800a778:	eba0 0308 	sub.w	r3, r0, r8
 800a77c:	fa09 f303 	lsl.w	r3, r9, r3
 800a780:	4313      	orrs	r3, r2
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	46a2      	mov	sl, r4
 800a786:	e7d2      	b.n	800a72e <_vfiprintf_r+0xc6>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d19      	adds	r1, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9103      	str	r1, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfbb      	ittet	lt
 800a794:	425b      	neglt	r3, r3
 800a796:	f042 0202 	orrlt.w	r2, r2, #2
 800a79a:	9307      	strge	r3, [sp, #28]
 800a79c:	9307      	strlt	r3, [sp, #28]
 800a79e:	bfb8      	it	lt
 800a7a0:	9204      	strlt	r2, [sp, #16]
 800a7a2:	7823      	ldrb	r3, [r4, #0]
 800a7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a6:	d10c      	bne.n	800a7c2 <_vfiprintf_r+0x15a>
 800a7a8:	7863      	ldrb	r3, [r4, #1]
 800a7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ac:	d134      	bne.n	800a818 <_vfiprintf_r+0x1b0>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	1d1a      	adds	r2, r3, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	9203      	str	r2, [sp, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bfb8      	it	lt
 800a7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7be:	3402      	adds	r4, #2
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a898 <_vfiprintf_r+0x230>
 800a7c6:	7821      	ldrb	r1, [r4, #0]
 800a7c8:	2203      	movs	r2, #3
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	f7f5 fd18 	bl	8000200 <memchr>
 800a7d0:	b138      	cbz	r0, 800a7e2 <_vfiprintf_r+0x17a>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	eba0 000a 	sub.w	r0, r0, sl
 800a7d8:	2240      	movs	r2, #64	; 0x40
 800a7da:	4082      	lsls	r2, r0
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	3401      	adds	r4, #1
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e6:	4829      	ldr	r0, [pc, #164]	; (800a88c <_vfiprintf_r+0x224>)
 800a7e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ec:	2206      	movs	r2, #6
 800a7ee:	f7f5 fd07 	bl	8000200 <memchr>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d03f      	beq.n	800a876 <_vfiprintf_r+0x20e>
 800a7f6:	4b26      	ldr	r3, [pc, #152]	; (800a890 <_vfiprintf_r+0x228>)
 800a7f8:	bb1b      	cbnz	r3, 800a842 <_vfiprintf_r+0x1da>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	3307      	adds	r3, #7
 800a7fe:	f023 0307 	bic.w	r3, r3, #7
 800a802:	3308      	adds	r3, #8
 800a804:	9303      	str	r3, [sp, #12]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	443b      	add	r3, r7
 800a80a:	9309      	str	r3, [sp, #36]	; 0x24
 800a80c:	e768      	b.n	800a6e0 <_vfiprintf_r+0x78>
 800a80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a812:	460c      	mov	r4, r1
 800a814:	2001      	movs	r0, #1
 800a816:	e7a6      	b.n	800a766 <_vfiprintf_r+0xfe>
 800a818:	2300      	movs	r3, #0
 800a81a:	3401      	adds	r4, #1
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	4619      	mov	r1, r3
 800a820:	f04f 0c0a 	mov.w	ip, #10
 800a824:	4620      	mov	r0, r4
 800a826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a82a:	3a30      	subs	r2, #48	; 0x30
 800a82c:	2a09      	cmp	r2, #9
 800a82e:	d903      	bls.n	800a838 <_vfiprintf_r+0x1d0>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0c6      	beq.n	800a7c2 <_vfiprintf_r+0x15a>
 800a834:	9105      	str	r1, [sp, #20]
 800a836:	e7c4      	b.n	800a7c2 <_vfiprintf_r+0x15a>
 800a838:	fb0c 2101 	mla	r1, ip, r1, r2
 800a83c:	4604      	mov	r4, r0
 800a83e:	2301      	movs	r3, #1
 800a840:	e7f0      	b.n	800a824 <_vfiprintf_r+0x1bc>
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b12      	ldr	r3, [pc, #72]	; (800a894 <_vfiprintf_r+0x22c>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4630      	mov	r0, r6
 800a84e:	f3af 8000 	nop.w
 800a852:	4607      	mov	r7, r0
 800a854:	1c78      	adds	r0, r7, #1
 800a856:	d1d6      	bne.n	800a806 <_vfiprintf_r+0x19e>
 800a858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_vfiprintf_r+0x202>
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	059a      	lsls	r2, r3, #22
 800a862:	d402      	bmi.n	800a86a <_vfiprintf_r+0x202>
 800a864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a866:	f7ff fc83 	bl	800a170 <__retarget_lock_release_recursive>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	065b      	lsls	r3, r3, #25
 800a86e:	f53f af1d 	bmi.w	800a6ac <_vfiprintf_r+0x44>
 800a872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a874:	e71c      	b.n	800a6b0 <_vfiprintf_r+0x48>
 800a876:	ab03      	add	r3, sp, #12
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	462a      	mov	r2, r5
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <_vfiprintf_r+0x22c>)
 800a87e:	a904      	add	r1, sp, #16
 800a880:	4630      	mov	r0, r6
 800a882:	f000 f879 	bl	800a978 <_printf_i>
 800a886:	e7e4      	b.n	800a852 <_vfiprintf_r+0x1ea>
 800a888:	0800b2c8 	.word	0x0800b2c8
 800a88c:	0800b2d2 	.word	0x0800b2d2
 800a890:	00000000 	.word	0x00000000
 800a894:	0800a643 	.word	0x0800a643
 800a898:	0800b2ce 	.word	0x0800b2ce

0800a89c <_printf_common>:
 800a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	4699      	mov	r9, r3
 800a8a4:	688a      	ldr	r2, [r1, #8]
 800a8a6:	690b      	ldr	r3, [r1, #16]
 800a8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	bfb8      	it	lt
 800a8b0:	4613      	movlt	r3, r2
 800a8b2:	6033      	str	r3, [r6, #0]
 800a8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	b10a      	cbz	r2, 800a8c2 <_printf_common+0x26>
 800a8be:	3301      	adds	r3, #1
 800a8c0:	6033      	str	r3, [r6, #0]
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	0699      	lsls	r1, r3, #26
 800a8c6:	bf42      	ittt	mi
 800a8c8:	6833      	ldrmi	r3, [r6, #0]
 800a8ca:	3302      	addmi	r3, #2
 800a8cc:	6033      	strmi	r3, [r6, #0]
 800a8ce:	6825      	ldr	r5, [r4, #0]
 800a8d0:	f015 0506 	ands.w	r5, r5, #6
 800a8d4:	d106      	bne.n	800a8e4 <_printf_common+0x48>
 800a8d6:	f104 0a19 	add.w	sl, r4, #25
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	6832      	ldr	r2, [r6, #0]
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	dc26      	bgt.n	800a932 <_printf_common+0x96>
 800a8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8e8:	1e13      	subs	r3, r2, #0
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	bf18      	it	ne
 800a8ee:	2301      	movne	r3, #1
 800a8f0:	0692      	lsls	r2, r2, #26
 800a8f2:	d42b      	bmi.n	800a94c <_printf_common+0xb0>
 800a8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	47c0      	blx	r8
 800a8fe:	3001      	adds	r0, #1
 800a900:	d01e      	beq.n	800a940 <_printf_common+0xa4>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	6922      	ldr	r2, [r4, #16]
 800a906:	f003 0306 	and.w	r3, r3, #6
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	bf02      	ittt	eq
 800a90e:	68e5      	ldreq	r5, [r4, #12]
 800a910:	6833      	ldreq	r3, [r6, #0]
 800a912:	1aed      	subeq	r5, r5, r3
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	bf0c      	ite	eq
 800a918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a91c:	2500      	movne	r5, #0
 800a91e:	4293      	cmp	r3, r2
 800a920:	bfc4      	itt	gt
 800a922:	1a9b      	subgt	r3, r3, r2
 800a924:	18ed      	addgt	r5, r5, r3
 800a926:	2600      	movs	r6, #0
 800a928:	341a      	adds	r4, #26
 800a92a:	42b5      	cmp	r5, r6
 800a92c:	d11a      	bne.n	800a964 <_printf_common+0xc8>
 800a92e:	2000      	movs	r0, #0
 800a930:	e008      	b.n	800a944 <_printf_common+0xa8>
 800a932:	2301      	movs	r3, #1
 800a934:	4652      	mov	r2, sl
 800a936:	4649      	mov	r1, r9
 800a938:	4638      	mov	r0, r7
 800a93a:	47c0      	blx	r8
 800a93c:	3001      	adds	r0, #1
 800a93e:	d103      	bne.n	800a948 <_printf_common+0xac>
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a948:	3501      	adds	r5, #1
 800a94a:	e7c6      	b.n	800a8da <_printf_common+0x3e>
 800a94c:	18e1      	adds	r1, r4, r3
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	2030      	movs	r0, #48	; 0x30
 800a952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a956:	4422      	add	r2, r4
 800a958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a960:	3302      	adds	r3, #2
 800a962:	e7c7      	b.n	800a8f4 <_printf_common+0x58>
 800a964:	2301      	movs	r3, #1
 800a966:	4622      	mov	r2, r4
 800a968:	4649      	mov	r1, r9
 800a96a:	4638      	mov	r0, r7
 800a96c:	47c0      	blx	r8
 800a96e:	3001      	adds	r0, #1
 800a970:	d0e6      	beq.n	800a940 <_printf_common+0xa4>
 800a972:	3601      	adds	r6, #1
 800a974:	e7d9      	b.n	800a92a <_printf_common+0x8e>
	...

0800a978 <_printf_i>:
 800a978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	7e0f      	ldrb	r7, [r1, #24]
 800a97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a980:	2f78      	cmp	r7, #120	; 0x78
 800a982:	4691      	mov	r9, r2
 800a984:	4680      	mov	r8, r0
 800a986:	460c      	mov	r4, r1
 800a988:	469a      	mov	sl, r3
 800a98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a98e:	d807      	bhi.n	800a9a0 <_printf_i+0x28>
 800a990:	2f62      	cmp	r7, #98	; 0x62
 800a992:	d80a      	bhi.n	800a9aa <_printf_i+0x32>
 800a994:	2f00      	cmp	r7, #0
 800a996:	f000 80d4 	beq.w	800ab42 <_printf_i+0x1ca>
 800a99a:	2f58      	cmp	r7, #88	; 0x58
 800a99c:	f000 80c0 	beq.w	800ab20 <_printf_i+0x1a8>
 800a9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9a8:	e03a      	b.n	800aa20 <_printf_i+0xa8>
 800a9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ae:	2b15      	cmp	r3, #21
 800a9b0:	d8f6      	bhi.n	800a9a0 <_printf_i+0x28>
 800a9b2:	a101      	add	r1, pc, #4	; (adr r1, 800a9b8 <_printf_i+0x40>)
 800a9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9b8:	0800aa11 	.word	0x0800aa11
 800a9bc:	0800aa25 	.word	0x0800aa25
 800a9c0:	0800a9a1 	.word	0x0800a9a1
 800a9c4:	0800a9a1 	.word	0x0800a9a1
 800a9c8:	0800a9a1 	.word	0x0800a9a1
 800a9cc:	0800a9a1 	.word	0x0800a9a1
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800a9a1 	.word	0x0800a9a1
 800a9d8:	0800a9a1 	.word	0x0800a9a1
 800a9dc:	0800a9a1 	.word	0x0800a9a1
 800a9e0:	0800a9a1 	.word	0x0800a9a1
 800a9e4:	0800ab29 	.word	0x0800ab29
 800a9e8:	0800aa51 	.word	0x0800aa51
 800a9ec:	0800aae3 	.word	0x0800aae3
 800a9f0:	0800a9a1 	.word	0x0800a9a1
 800a9f4:	0800a9a1 	.word	0x0800a9a1
 800a9f8:	0800ab4b 	.word	0x0800ab4b
 800a9fc:	0800a9a1 	.word	0x0800a9a1
 800aa00:	0800aa51 	.word	0x0800aa51
 800aa04:	0800a9a1 	.word	0x0800a9a1
 800aa08:	0800a9a1 	.word	0x0800a9a1
 800aa0c:	0800aaeb 	.word	0x0800aaeb
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	1d1a      	adds	r2, r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	602a      	str	r2, [r5, #0]
 800aa18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa20:	2301      	movs	r3, #1
 800aa22:	e09f      	b.n	800ab64 <_printf_i+0x1ec>
 800aa24:	6820      	ldr	r0, [r4, #0]
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	0607      	lsls	r7, r0, #24
 800aa2a:	f103 0104 	add.w	r1, r3, #4
 800aa2e:	6029      	str	r1, [r5, #0]
 800aa30:	d501      	bpl.n	800aa36 <_printf_i+0xbe>
 800aa32:	681e      	ldr	r6, [r3, #0]
 800aa34:	e003      	b.n	800aa3e <_printf_i+0xc6>
 800aa36:	0646      	lsls	r6, r0, #25
 800aa38:	d5fb      	bpl.n	800aa32 <_printf_i+0xba>
 800aa3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	da03      	bge.n	800aa4a <_printf_i+0xd2>
 800aa42:	232d      	movs	r3, #45	; 0x2d
 800aa44:	4276      	negs	r6, r6
 800aa46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa4a:	485a      	ldr	r0, [pc, #360]	; (800abb4 <_printf_i+0x23c>)
 800aa4c:	230a      	movs	r3, #10
 800aa4e:	e012      	b.n	800aa76 <_printf_i+0xfe>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	6820      	ldr	r0, [r4, #0]
 800aa54:	1d19      	adds	r1, r3, #4
 800aa56:	6029      	str	r1, [r5, #0]
 800aa58:	0605      	lsls	r5, r0, #24
 800aa5a:	d501      	bpl.n	800aa60 <_printf_i+0xe8>
 800aa5c:	681e      	ldr	r6, [r3, #0]
 800aa5e:	e002      	b.n	800aa66 <_printf_i+0xee>
 800aa60:	0641      	lsls	r1, r0, #25
 800aa62:	d5fb      	bpl.n	800aa5c <_printf_i+0xe4>
 800aa64:	881e      	ldrh	r6, [r3, #0]
 800aa66:	4853      	ldr	r0, [pc, #332]	; (800abb4 <_printf_i+0x23c>)
 800aa68:	2f6f      	cmp	r7, #111	; 0x6f
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2308      	moveq	r3, #8
 800aa6e:	230a      	movne	r3, #10
 800aa70:	2100      	movs	r1, #0
 800aa72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa76:	6865      	ldr	r5, [r4, #4]
 800aa78:	60a5      	str	r5, [r4, #8]
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	bfa2      	ittt	ge
 800aa7e:	6821      	ldrge	r1, [r4, #0]
 800aa80:	f021 0104 	bicge.w	r1, r1, #4
 800aa84:	6021      	strge	r1, [r4, #0]
 800aa86:	b90e      	cbnz	r6, 800aa8c <_printf_i+0x114>
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	d04b      	beq.n	800ab24 <_printf_i+0x1ac>
 800aa8c:	4615      	mov	r5, r2
 800aa8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa92:	fb03 6711 	mls	r7, r3, r1, r6
 800aa96:	5dc7      	ldrb	r7, [r0, r7]
 800aa98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa9c:	4637      	mov	r7, r6
 800aa9e:	42bb      	cmp	r3, r7
 800aaa0:	460e      	mov	r6, r1
 800aaa2:	d9f4      	bls.n	800aa8e <_printf_i+0x116>
 800aaa4:	2b08      	cmp	r3, #8
 800aaa6:	d10b      	bne.n	800aac0 <_printf_i+0x148>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	07de      	lsls	r6, r3, #31
 800aaac:	d508      	bpl.n	800aac0 <_printf_i+0x148>
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	6861      	ldr	r1, [r4, #4]
 800aab2:	4299      	cmp	r1, r3
 800aab4:	bfde      	ittt	le
 800aab6:	2330      	movle	r3, #48	; 0x30
 800aab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aabc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aac0:	1b52      	subs	r2, r2, r5
 800aac2:	6122      	str	r2, [r4, #16]
 800aac4:	f8cd a000 	str.w	sl, [sp]
 800aac8:	464b      	mov	r3, r9
 800aaca:	aa03      	add	r2, sp, #12
 800aacc:	4621      	mov	r1, r4
 800aace:	4640      	mov	r0, r8
 800aad0:	f7ff fee4 	bl	800a89c <_printf_common>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d14a      	bne.n	800ab6e <_printf_i+0x1f6>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	b004      	add	sp, #16
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	f043 0320 	orr.w	r3, r3, #32
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	4833      	ldr	r0, [pc, #204]	; (800abb8 <_printf_i+0x240>)
 800aaec:	2778      	movs	r7, #120	; 0x78
 800aaee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	061f      	lsls	r7, r3, #24
 800aaf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aafc:	d402      	bmi.n	800ab04 <_printf_i+0x18c>
 800aafe:	065f      	lsls	r7, r3, #25
 800ab00:	bf48      	it	mi
 800ab02:	b2b6      	uxthmi	r6, r6
 800ab04:	07df      	lsls	r7, r3, #31
 800ab06:	bf48      	it	mi
 800ab08:	f043 0320 	orrmi.w	r3, r3, #32
 800ab0c:	6029      	str	r1, [r5, #0]
 800ab0e:	bf48      	it	mi
 800ab10:	6023      	strmi	r3, [r4, #0]
 800ab12:	b91e      	cbnz	r6, 800ab1c <_printf_i+0x1a4>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	f023 0320 	bic.w	r3, r3, #32
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	e7a7      	b.n	800aa70 <_printf_i+0xf8>
 800ab20:	4824      	ldr	r0, [pc, #144]	; (800abb4 <_printf_i+0x23c>)
 800ab22:	e7e4      	b.n	800aaee <_printf_i+0x176>
 800ab24:	4615      	mov	r5, r2
 800ab26:	e7bd      	b.n	800aaa4 <_printf_i+0x12c>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	6826      	ldr	r6, [r4, #0]
 800ab2c:	6961      	ldr	r1, [r4, #20]
 800ab2e:	1d18      	adds	r0, r3, #4
 800ab30:	6028      	str	r0, [r5, #0]
 800ab32:	0635      	lsls	r5, r6, #24
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	d501      	bpl.n	800ab3c <_printf_i+0x1c4>
 800ab38:	6019      	str	r1, [r3, #0]
 800ab3a:	e002      	b.n	800ab42 <_printf_i+0x1ca>
 800ab3c:	0670      	lsls	r0, r6, #25
 800ab3e:	d5fb      	bpl.n	800ab38 <_printf_i+0x1c0>
 800ab40:	8019      	strh	r1, [r3, #0]
 800ab42:	2300      	movs	r3, #0
 800ab44:	6123      	str	r3, [r4, #16]
 800ab46:	4615      	mov	r5, r2
 800ab48:	e7bc      	b.n	800aac4 <_printf_i+0x14c>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	1d1a      	adds	r2, r3, #4
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	681d      	ldr	r5, [r3, #0]
 800ab52:	6862      	ldr	r2, [r4, #4]
 800ab54:	2100      	movs	r1, #0
 800ab56:	4628      	mov	r0, r5
 800ab58:	f7f5 fb52 	bl	8000200 <memchr>
 800ab5c:	b108      	cbz	r0, 800ab62 <_printf_i+0x1ea>
 800ab5e:	1b40      	subs	r0, r0, r5
 800ab60:	6060      	str	r0, [r4, #4]
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	6123      	str	r3, [r4, #16]
 800ab66:	2300      	movs	r3, #0
 800ab68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab6c:	e7aa      	b.n	800aac4 <_printf_i+0x14c>
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4649      	mov	r1, r9
 800ab74:	4640      	mov	r0, r8
 800ab76:	47d0      	blx	sl
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d0ad      	beq.n	800aad8 <_printf_i+0x160>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	079b      	lsls	r3, r3, #30
 800ab80:	d413      	bmi.n	800abaa <_printf_i+0x232>
 800ab82:	68e0      	ldr	r0, [r4, #12]
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	4298      	cmp	r0, r3
 800ab88:	bfb8      	it	lt
 800ab8a:	4618      	movlt	r0, r3
 800ab8c:	e7a6      	b.n	800aadc <_printf_i+0x164>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4632      	mov	r2, r6
 800ab92:	4649      	mov	r1, r9
 800ab94:	4640      	mov	r0, r8
 800ab96:	47d0      	blx	sl
 800ab98:	3001      	adds	r0, #1
 800ab9a:	d09d      	beq.n	800aad8 <_printf_i+0x160>
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	68e3      	ldr	r3, [r4, #12]
 800aba0:	9903      	ldr	r1, [sp, #12]
 800aba2:	1a5b      	subs	r3, r3, r1
 800aba4:	42ab      	cmp	r3, r5
 800aba6:	dcf2      	bgt.n	800ab8e <_printf_i+0x216>
 800aba8:	e7eb      	b.n	800ab82 <_printf_i+0x20a>
 800abaa:	2500      	movs	r5, #0
 800abac:	f104 0619 	add.w	r6, r4, #25
 800abb0:	e7f5      	b.n	800ab9e <_printf_i+0x226>
 800abb2:	bf00      	nop
 800abb4:	0800b2d9 	.word	0x0800b2d9
 800abb8:	0800b2ea 	.word	0x0800b2ea

0800abbc <__sflush_r>:
 800abbc:	898a      	ldrh	r2, [r1, #12]
 800abbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc2:	4605      	mov	r5, r0
 800abc4:	0710      	lsls	r0, r2, #28
 800abc6:	460c      	mov	r4, r1
 800abc8:	d458      	bmi.n	800ac7c <__sflush_r+0xc0>
 800abca:	684b      	ldr	r3, [r1, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	dc05      	bgt.n	800abdc <__sflush_r+0x20>
 800abd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dc02      	bgt.n	800abdc <__sflush_r+0x20>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abde:	2e00      	cmp	r6, #0
 800abe0:	d0f9      	beq.n	800abd6 <__sflush_r+0x1a>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abe8:	682f      	ldr	r7, [r5, #0]
 800abea:	6a21      	ldr	r1, [r4, #32]
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	d032      	beq.n	800ac56 <__sflush_r+0x9a>
 800abf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	075a      	lsls	r2, r3, #29
 800abf6:	d505      	bpl.n	800ac04 <__sflush_r+0x48>
 800abf8:	6863      	ldr	r3, [r4, #4]
 800abfa:	1ac0      	subs	r0, r0, r3
 800abfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abfe:	b10b      	cbz	r3, 800ac04 <__sflush_r+0x48>
 800ac00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac02:	1ac0      	subs	r0, r0, r3
 800ac04:	2300      	movs	r3, #0
 800ac06:	4602      	mov	r2, r0
 800ac08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac0a:	6a21      	ldr	r1, [r4, #32]
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b0      	blx	r6
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	d106      	bne.n	800ac24 <__sflush_r+0x68>
 800ac16:	6829      	ldr	r1, [r5, #0]
 800ac18:	291d      	cmp	r1, #29
 800ac1a:	d82b      	bhi.n	800ac74 <__sflush_r+0xb8>
 800ac1c:	4a29      	ldr	r2, [pc, #164]	; (800acc4 <__sflush_r+0x108>)
 800ac1e:	410a      	asrs	r2, r1
 800ac20:	07d6      	lsls	r6, r2, #31
 800ac22:	d427      	bmi.n	800ac74 <__sflush_r+0xb8>
 800ac24:	2200      	movs	r2, #0
 800ac26:	6062      	str	r2, [r4, #4]
 800ac28:	04d9      	lsls	r1, r3, #19
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	6022      	str	r2, [r4, #0]
 800ac2e:	d504      	bpl.n	800ac3a <__sflush_r+0x7e>
 800ac30:	1c42      	adds	r2, r0, #1
 800ac32:	d101      	bne.n	800ac38 <__sflush_r+0x7c>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b903      	cbnz	r3, 800ac3a <__sflush_r+0x7e>
 800ac38:	6560      	str	r0, [r4, #84]	; 0x54
 800ac3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac3c:	602f      	str	r7, [r5, #0]
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d0c9      	beq.n	800abd6 <__sflush_r+0x1a>
 800ac42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d002      	beq.n	800ac50 <__sflush_r+0x94>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7ff fa92 	bl	800a174 <_free_r>
 800ac50:	2000      	movs	r0, #0
 800ac52:	6360      	str	r0, [r4, #52]	; 0x34
 800ac54:	e7c0      	b.n	800abd8 <__sflush_r+0x1c>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4628      	mov	r0, r5
 800ac5a:	47b0      	blx	r6
 800ac5c:	1c41      	adds	r1, r0, #1
 800ac5e:	d1c8      	bne.n	800abf2 <__sflush_r+0x36>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0c5      	beq.n	800abf2 <__sflush_r+0x36>
 800ac66:	2b1d      	cmp	r3, #29
 800ac68:	d001      	beq.n	800ac6e <__sflush_r+0xb2>
 800ac6a:	2b16      	cmp	r3, #22
 800ac6c:	d101      	bne.n	800ac72 <__sflush_r+0xb6>
 800ac6e:	602f      	str	r7, [r5, #0]
 800ac70:	e7b1      	b.n	800abd6 <__sflush_r+0x1a>
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	e7ad      	b.n	800abd8 <__sflush_r+0x1c>
 800ac7c:	690f      	ldr	r7, [r1, #16]
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	d0a9      	beq.n	800abd6 <__sflush_r+0x1a>
 800ac82:	0793      	lsls	r3, r2, #30
 800ac84:	680e      	ldr	r6, [r1, #0]
 800ac86:	bf08      	it	eq
 800ac88:	694b      	ldreq	r3, [r1, #20]
 800ac8a:	600f      	str	r7, [r1, #0]
 800ac8c:	bf18      	it	ne
 800ac8e:	2300      	movne	r3, #0
 800ac90:	eba6 0807 	sub.w	r8, r6, r7
 800ac94:	608b      	str	r3, [r1, #8]
 800ac96:	f1b8 0f00 	cmp.w	r8, #0
 800ac9a:	dd9c      	ble.n	800abd6 <__sflush_r+0x1a>
 800ac9c:	6a21      	ldr	r1, [r4, #32]
 800ac9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aca0:	4643      	mov	r3, r8
 800aca2:	463a      	mov	r2, r7
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b0      	blx	r6
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dc06      	bgt.n	800acba <__sflush_r+0xfe>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e78e      	b.n	800abd8 <__sflush_r+0x1c>
 800acba:	4407      	add	r7, r0
 800acbc:	eba8 0800 	sub.w	r8, r8, r0
 800acc0:	e7e9      	b.n	800ac96 <__sflush_r+0xda>
 800acc2:	bf00      	nop
 800acc4:	dfbffffe 	.word	0xdfbffffe

0800acc8 <_fflush_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	690b      	ldr	r3, [r1, #16]
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	b913      	cbnz	r3, 800acd8 <_fflush_r+0x10>
 800acd2:	2500      	movs	r5, #0
 800acd4:	4628      	mov	r0, r5
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	b118      	cbz	r0, 800ace2 <_fflush_r+0x1a>
 800acda:	6a03      	ldr	r3, [r0, #32]
 800acdc:	b90b      	cbnz	r3, 800ace2 <_fflush_r+0x1a>
 800acde:	f7fe fffd 	bl	8009cdc <__sinit>
 800ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0f3      	beq.n	800acd2 <_fflush_r+0xa>
 800acea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acec:	07d0      	lsls	r0, r2, #31
 800acee:	d404      	bmi.n	800acfa <_fflush_r+0x32>
 800acf0:	0599      	lsls	r1, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_fflush_r+0x32>
 800acf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acf6:	f7ff fa3a 	bl	800a16e <__retarget_lock_acquire_recursive>
 800acfa:	4628      	mov	r0, r5
 800acfc:	4621      	mov	r1, r4
 800acfe:	f7ff ff5d 	bl	800abbc <__sflush_r>
 800ad02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad04:	07da      	lsls	r2, r3, #31
 800ad06:	4605      	mov	r5, r0
 800ad08:	d4e4      	bmi.n	800acd4 <_fflush_r+0xc>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	059b      	lsls	r3, r3, #22
 800ad0e:	d4e1      	bmi.n	800acd4 <_fflush_r+0xc>
 800ad10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad12:	f7ff fa2d 	bl	800a170 <__retarget_lock_release_recursive>
 800ad16:	e7dd      	b.n	800acd4 <_fflush_r+0xc>

0800ad18 <__swhatbuf_r>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	2900      	cmp	r1, #0
 800ad22:	b096      	sub	sp, #88	; 0x58
 800ad24:	4615      	mov	r5, r2
 800ad26:	461e      	mov	r6, r3
 800ad28:	da0d      	bge.n	800ad46 <__swhatbuf_r+0x2e>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad30:	f04f 0100 	mov.w	r1, #0
 800ad34:	bf0c      	ite	eq
 800ad36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad3a:	2340      	movne	r3, #64	; 0x40
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	6031      	str	r1, [r6, #0]
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	b016      	add	sp, #88	; 0x58
 800ad44:	bd70      	pop	{r4, r5, r6, pc}
 800ad46:	466a      	mov	r2, sp
 800ad48:	f000 f862 	bl	800ae10 <_fstat_r>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	dbec      	blt.n	800ad2a <__swhatbuf_r+0x12>
 800ad50:	9901      	ldr	r1, [sp, #4]
 800ad52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad5a:	4259      	negs	r1, r3
 800ad5c:	4159      	adcs	r1, r3
 800ad5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad62:	e7eb      	b.n	800ad3c <__swhatbuf_r+0x24>

0800ad64 <__smakebuf_r>:
 800ad64:	898b      	ldrh	r3, [r1, #12]
 800ad66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad68:	079d      	lsls	r5, r3, #30
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	d507      	bpl.n	800ad80 <__smakebuf_r+0x1c>
 800ad70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	6123      	str	r3, [r4, #16]
 800ad78:	2301      	movs	r3, #1
 800ad7a:	6163      	str	r3, [r4, #20]
 800ad7c:	b002      	add	sp, #8
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	ab01      	add	r3, sp, #4
 800ad82:	466a      	mov	r2, sp
 800ad84:	f7ff ffc8 	bl	800ad18 <__swhatbuf_r>
 800ad88:	9900      	ldr	r1, [sp, #0]
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff fa5d 	bl	800a24c <_malloc_r>
 800ad92:	b948      	cbnz	r0, 800ada8 <__smakebuf_r+0x44>
 800ad94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad98:	059a      	lsls	r2, r3, #22
 800ad9a:	d4ef      	bmi.n	800ad7c <__smakebuf_r+0x18>
 800ad9c:	f023 0303 	bic.w	r3, r3, #3
 800ada0:	f043 0302 	orr.w	r3, r3, #2
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	e7e3      	b.n	800ad70 <__smakebuf_r+0xc>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	6020      	str	r0, [r4, #0]
 800adac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	9b00      	ldr	r3, [sp, #0]
 800adb4:	6163      	str	r3, [r4, #20]
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	6120      	str	r0, [r4, #16]
 800adba:	b15b      	cbz	r3, 800add4 <__smakebuf_r+0x70>
 800adbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc0:	4630      	mov	r0, r6
 800adc2:	f000 f837 	bl	800ae34 <_isatty_r>
 800adc6:	b128      	cbz	r0, 800add4 <__smakebuf_r+0x70>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f023 0303 	bic.w	r3, r3, #3
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	431d      	orrs	r5, r3
 800add8:	81a5      	strh	r5, [r4, #12]
 800adda:	e7cf      	b.n	800ad7c <__smakebuf_r+0x18>

0800addc <memmove>:
 800addc:	4288      	cmp	r0, r1
 800adde:	b510      	push	{r4, lr}
 800ade0:	eb01 0402 	add.w	r4, r1, r2
 800ade4:	d902      	bls.n	800adec <memmove+0x10>
 800ade6:	4284      	cmp	r4, r0
 800ade8:	4623      	mov	r3, r4
 800adea:	d807      	bhi.n	800adfc <memmove+0x20>
 800adec:	1e43      	subs	r3, r0, #1
 800adee:	42a1      	cmp	r1, r4
 800adf0:	d008      	beq.n	800ae04 <memmove+0x28>
 800adf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adfa:	e7f8      	b.n	800adee <memmove+0x12>
 800adfc:	4402      	add	r2, r0
 800adfe:	4601      	mov	r1, r0
 800ae00:	428a      	cmp	r2, r1
 800ae02:	d100      	bne.n	800ae06 <memmove+0x2a>
 800ae04:	bd10      	pop	{r4, pc}
 800ae06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae0e:	e7f7      	b.n	800ae00 <memmove+0x24>

0800ae10 <_fstat_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	; (800ae30 <_fstat_r+0x20>)
 800ae14:	2300      	movs	r3, #0
 800ae16:	4604      	mov	r4, r0
 800ae18:	4608      	mov	r0, r1
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	f7f7 fd2a 	bl	8002876 <_fstat>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	d102      	bne.n	800ae2c <_fstat_r+0x1c>
 800ae26:	682b      	ldr	r3, [r5, #0]
 800ae28:	b103      	cbz	r3, 800ae2c <_fstat_r+0x1c>
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000ef0 	.word	0x20000ef0

0800ae34 <_isatty_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d06      	ldr	r5, [pc, #24]	; (800ae50 <_isatty_r+0x1c>)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	f7f7 fd29 	bl	8002896 <_isatty>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_isatty_r+0x1a>
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_isatty_r+0x1a>
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	20000ef0 	.word	0x20000ef0

0800ae54 <_sbrk_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d06      	ldr	r5, [pc, #24]	; (800ae70 <_sbrk_r+0x1c>)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	f7f7 fd32 	bl	80028c8 <_sbrk>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d102      	bne.n	800ae6e <_sbrk_r+0x1a>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	b103      	cbz	r3, 800ae6e <_sbrk_r+0x1a>
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	20000ef0 	.word	0x20000ef0

0800ae74 <memcpy>:
 800ae74:	440a      	add	r2, r1
 800ae76:	4291      	cmp	r1, r2
 800ae78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae7c:	d100      	bne.n	800ae80 <memcpy+0xc>
 800ae7e:	4770      	bx	lr
 800ae80:	b510      	push	{r4, lr}
 800ae82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8a:	4291      	cmp	r1, r2
 800ae8c:	d1f9      	bne.n	800ae82 <memcpy+0xe>
 800ae8e:	bd10      	pop	{r4, pc}

0800ae90 <_realloc_r>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	4680      	mov	r8, r0
 800ae96:	4614      	mov	r4, r2
 800ae98:	460e      	mov	r6, r1
 800ae9a:	b921      	cbnz	r1, 800aea6 <_realloc_r+0x16>
 800ae9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea0:	4611      	mov	r1, r2
 800aea2:	f7ff b9d3 	b.w	800a24c <_malloc_r>
 800aea6:	b92a      	cbnz	r2, 800aeb4 <_realloc_r+0x24>
 800aea8:	f7ff f964 	bl	800a174 <_free_r>
 800aeac:	4625      	mov	r5, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	f000 f81b 	bl	800aeee <_malloc_usable_size_r>
 800aeb8:	4284      	cmp	r4, r0
 800aeba:	4607      	mov	r7, r0
 800aebc:	d802      	bhi.n	800aec4 <_realloc_r+0x34>
 800aebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aec2:	d812      	bhi.n	800aeea <_realloc_r+0x5a>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7ff f9c0 	bl	800a24c <_malloc_r>
 800aecc:	4605      	mov	r5, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0ed      	beq.n	800aeae <_realloc_r+0x1e>
 800aed2:	42bc      	cmp	r4, r7
 800aed4:	4622      	mov	r2, r4
 800aed6:	4631      	mov	r1, r6
 800aed8:	bf28      	it	cs
 800aeda:	463a      	movcs	r2, r7
 800aedc:	f7ff ffca 	bl	800ae74 <memcpy>
 800aee0:	4631      	mov	r1, r6
 800aee2:	4640      	mov	r0, r8
 800aee4:	f7ff f946 	bl	800a174 <_free_r>
 800aee8:	e7e1      	b.n	800aeae <_realloc_r+0x1e>
 800aeea:	4635      	mov	r5, r6
 800aeec:	e7df      	b.n	800aeae <_realloc_r+0x1e>

0800aeee <_malloc_usable_size_r>:
 800aeee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef2:	1f18      	subs	r0, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfbc      	itt	lt
 800aef8:	580b      	ldrlt	r3, [r1, r0]
 800aefa:	18c0      	addlt	r0, r0, r3
 800aefc:	4770      	bx	lr
	...

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
