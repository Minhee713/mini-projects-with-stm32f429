
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099dc  080099dc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e4  080099e4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080099ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000af8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b74  20000b74  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d201  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d78  00000000  00000000  0003d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  00041068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001460  00000000  00000000  00042a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029776  00000000  00000000  00043eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa40  00000000  00000000  0006d62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000faa4d  00000000  00000000  0008d06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000797c  00000000  00000000  00187abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0018f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009780 	.word	0x08009780

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009780 	.word	0x08009780

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f006 fc6f 	bl	8006eb2 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 f96d 	bl	80048c8 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f008 f84d 	bl	80086a4 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f006 fc48 	bl	8006eb2 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f006 fc40 	bl	8006eb2 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f006 fc30 	bl	8006eb2 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080097a8 	.word	0x080097a8
 8000660:	20000424 	.word	0x20000424
 8000664:	20000368 	.word	0x20000368
 8000668:	08009798 	.word	0x08009798
 800066c:	080097a0 	.word	0x080097a0
 8000670:	080097a4 	.word	0x080097a4

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 f919 	bl	80048c8 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 ffe2 	bl	80046cc <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fbdd 	bl	8001ecc <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000368 	.word	0x20000368

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
enum CLOCK_BUTTON joyStick_btn_chk();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f006 fb57 	bl	8006eb2 <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000424 	.word	0x20000424

08000814 <get_RTC_time>:

RTC_DateTypeDef sDate;
RTC_TimeTypeDef RTC_Time;		// 0

void get_RTC_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8

	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	491c      	ldr	r1, [pc, #112]	; (8000890 <get_RTC_time+0x7c>)
 800081e:	481d      	ldr	r0, [pc, #116]	; (8000894 <get_RTC_time+0x80>)
 8000820:	f005 fc8a 	bl	8006138 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	491c      	ldr	r1, [pc, #112]	; (8000898 <get_RTC_time+0x84>)
 8000828:	481a      	ldr	r0, [pc, #104]	; (8000894 <get_RTC_time+0x80>)
 800082a:	f005 fd67 	bl	80062fc <HAL_RTC_GetDate>

	//	ctime.hours = RTC_Time.Hours;
	//	ctime.minutes = RTC_Time.Minutes;
	//	ctime.seconds = RTC_Time.Seconds;

	RTC_Time.Hours -= 1;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <get_RTC_time+0x7c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3b01      	subs	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <get_RTC_time+0x7c>)
 8000838:	701a      	strb	r2, [r3, #0]

	//	printf("%s %02d:%02d:%02d\t\r\n", ampm[sTime.TimeFormat>>6],sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf((char*) temp_time_buf, "%s %02d:%02d:%02d",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <get_RTC_time+0x7c>)
 800083c:	78db      	ldrb	r3, [r3, #3]
 800083e:	461a      	mov	r2, r3
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <get_RTC_time+0x88>)
 8000848:	441a      	add	r2, r3
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <get_RTC_time+0x7c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d:%02d:%02d",
 800084e:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <get_RTC_time+0x7c>)
 8000852:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d:%02d:%02d",
 8000854:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <get_RTC_time+0x7c>)
 8000858:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d:%02d:%02d",
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9100      	str	r1, [sp, #0]
 800085e:	4603      	mov	r3, r0
 8000860:	490f      	ldr	r1, [pc, #60]	; (80008a0 <get_RTC_time+0x8c>)
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <get_RTC_time+0x90>)
 8000864:	f007 ff52 	bl	800870c <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	204e      	movs	r0, #78	; 0x4e
 800086c:	f7ff ff58 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 8000870:	490d      	ldr	r1, [pc, #52]	; (80008a8 <get_RTC_time+0x94>)
 8000872:	204e      	movs	r0, #78	; 0x4e
 8000874:	f7ff ff95 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000878:	21c0      	movs	r1, #192	; 0xc0
 800087a:	204e      	movs	r0, #78	; 0x4e
 800087c:	f7ff ff50 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 8000880:	4908      	ldr	r1, [pc, #32]	; (80008a4 <get_RTC_time+0x90>)
 8000882:	204e      	movs	r0, #78	; 0x4e
 8000884:	f7ff ff8d 	bl	80007a2 <LCD_SendString>
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200009e0 	.word	0x200009e0
 8000894:	200003bc 	.word	0x200003bc
 8000898:	200009dc 	.word	0x200009dc
 800089c:	2000000c 	.word	0x2000000c
 80008a0:	080097c0 	.word	0x080097c0
 80008a4:	200009bc 	.word	0x200009bc
 80008a8:	080097d4 	.word	0x080097d4

080008ac <lcd_clear>:

void lcd_clear() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00000001);
 80008b0:	2101      	movs	r1, #1
 80008b2:	204e      	movs	r0, #78	; 0x4e
 80008b4:	f7ff ff34 	bl	8000720 <LCD_SendCommand>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <update_nvitems>:

HAL_StatusTypeDef update_nvitems(void) {
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();
 80008c8:	f003 f8fa 	bl	8003ac0 <HAL_FLASH_Unlock>

	FirstSector = ADDR_FLASH_SECTOR_22;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <update_nvitems+0xbc>)
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FirstSector;
 80008dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008de:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	60fb      	str	r3, [r7, #12]
//	printf("\r\n--------------erase-----------\r\n");
	//error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK) {
 80008e4:	f107 0214 	add.w	r2, r7, #20
 80008e8:	463b      	mov	r3, r7
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fa59 	bl	8003da4 <HAL_FLASHEx_Erase>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d107      	bne.n	8000908 <update_nvitems+0x4c>

		printf("\r\n--------------erase complete-----------\r\n");
 80008f8:	4820      	ldr	r0, [pc, #128]	; (800097c <update_nvitems+0xc0>)
 80008fa:	f007 fecb 	bl	8008694 <puts>
	{
		printf("\r\n--------------erase error-----------\r\n");
		return error;
	}
//
	ptr = (uint8_t*) &default_nvitem;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <update_nvitems+0xc4>)
 8000900:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
 8000906:	e02d      	b.n	8000964 <update_nvitems+0xa8>
		printf("\r\n--------------erase error-----------\r\n");
 8000908:	481e      	ldr	r0, [pc, #120]	; (8000984 <update_nvitems+0xc8>)
 800090a:	f007 fec3 	bl	8008694 <puts>
		return error;
 800090e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000912:	e02c      	b.n	800096e <update_nvitems+0xb2>
		Address = (uint8_t*) nv_items + i;
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 800091a:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 800091e:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*) ptr + i);
 8000920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2200      	movs	r2, #0
 800092c:	461c      	mov	r4, r3
 800092e:	4615      	mov	r5, r2
 8000930:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
 8000934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000938:	6a39      	ldr	r1, [r7, #32]
 800093a:	2000      	movs	r0, #0
 800093c:	f003 f86c 	bl	8003a18 <HAL_FLASH_Program>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		printf("DATA: %ld\r\n", Data);
 8000946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <update_nvitems+0xcc>)
 800094c:	f007 fe3c 	bl	80085c8 <iprintf>
		if (error != HAL_OK) {
 8000950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <update_nvitems+0xa2>
//			printf("\r\n--------------overwrite error-----------\r\n");
			return error;
 8000958:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800095c:	e007      	b.n	800096e <update_nvitems+0xb2>
	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 800095e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000960:	3301      	adds	r3, #1
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
 8000964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000966:	2b0b      	cmp	r3, #11
 8000968:	d9d4      	bls.n	8000914 <update_nvitems+0x58>
		}
	}
//	printf("\r\n--------------overwrite complete-----------\r\n");
	HAL_FLASH_Lock();
 800096a:	f003 f8cb 	bl	8003b04 <HAL_FLASH_Lock>
}
 800096e:	4618      	mov	r0, r3
 8000970:	3738      	adds	r7, #56	; 0x38
 8000972:	46bd      	mov	sp, r7
 8000974:	bdb0      	pop	{r4, r5, r7, pc}
 8000976:	bf00      	nop
 8000978:	081c0000 	.word	0x081c0000
 800097c:	080097e4 	.word	0x080097e4
 8000980:	20000000 	.word	0x20000000
 8000984:	08009810 	.word	0x08009810
 8000988:	08009838 	.word	0x08009838

0800098c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
	}

}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <timeDisplay>:
	LCD_SendCommand(LCD_ADDR, 0b11000000);
	LCD_SendString(LCD_ADDR, temp_time_buf);

}

void timeDisplay() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	//printf("\r\n--------------%d-----------\r\n", current_state.mode);
	if (current_state.mode == TIME_SETTING) {
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <timeDisplay+0xb0>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d114      	bne.n	80009d8 <timeDisplay+0x38>
//		printf("\r\n--------------%d-----------\r\n", 0);
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	204e      	movs	r0, #78	; 0x4e
 80009b2:	f7ff feb5 	bl	8000720 <LCD_SendCommand>
//		printf("\r\n--------------%d-----------\r\n", 1);
		LCD_SendString(LCD_ADDR, "Time Setting");
 80009b6:	4927      	ldr	r1, [pc, #156]	; (8000a54 <timeDisplay+0xb4>)
 80009b8:	204e      	movs	r0, #78	; 0x4e
 80009ba:	f7ff fef2 	bl	80007a2 <LCD_SendString>
//		printf("\r\n--------------%d-----------\r\n", 2);

		hours = stime.hours;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <timeDisplay+0xb8>)
 80009c0:	f993 3000 	ldrsb.w	r3, [r3]
 80009c4:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <timeDisplay+0xb8>)
 80009c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009cc:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <timeDisplay+0xb8>)
 80009d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80009d4:	717b      	strb	r3, [r7, #5]
 80009d6:	e017      	b.n	8000a08 <timeDisplay+0x68>
//		printf("\r\n--------------%d-----------\r\n", 3);
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <timeDisplay+0xb0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d113      	bne.n	8000a08 <timeDisplay+0x68>
	 LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	204e      	movs	r0, #78	; 0x4e
 80009e4:	f7ff fe9c 	bl	8000720 <LCD_SendCommand>
	 LCD_SendString(LCD_ADDR, "Alarm Setting");
 80009e8:	491c      	ldr	r1, [pc, #112]	; (8000a5c <timeDisplay+0xbc>)
 80009ea:	204e      	movs	r0, #78	; 0x4e
 80009ec:	f7ff fed9 	bl	80007a2 <LCD_SendString>

	 hours = atime.hours;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <timeDisplay+0xc0>)
 80009f2:	f993 3000 	ldrsb.w	r3, [r3]
 80009f6:	71fb      	strb	r3, [r7, #7]
	 minutes = atime.minutes;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <timeDisplay+0xc0>)
 80009fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009fe:	71bb      	strb	r3, [r7, #6]
	 seconds = atime.seconds;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <timeDisplay+0xc0>)
 8000a02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a06:	717b      	strb	r3, [r7, #5]
	 }

	if (hours >= 12) {
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b0b      	cmp	r3, #11
 8000a0c:	d90b      	bls.n	8000a26 <timeDisplay+0x86>
		sprintf(timeStr, "PM %02d:%02d:%02d", hours - 12, minutes, seconds);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f1a3 020c 	sub.w	r2, r3, #12
 8000a14:	79b9      	ldrb	r1, [r7, #6]
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4911      	ldr	r1, [pc, #68]	; (8000a64 <timeDisplay+0xc4>)
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <timeDisplay+0xc8>)
 8000a20:	f007 fe74 	bl	800870c <siprintf>
 8000a24:	e008      	b.n	8000a38 <timeDisplay+0x98>
	} else {
		sprintf(timeStr, "AM %02d:%02d:%02d", hours, minutes, seconds);
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	79b9      	ldrb	r1, [r7, #6]
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	490e      	ldr	r1, [pc, #56]	; (8000a6c <timeDisplay+0xcc>)
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <timeDisplay+0xc8>)
 8000a34:	f007 fe6a 	bl	800870c <siprintf>
	}

//		lcd_clear();

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a38:	21c0      	movs	r1, #192	; 0xc0
 8000a3a:	204e      	movs	r0, #78	; 0x4e
 8000a3c:	f7ff fe70 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 8000a40:	4909      	ldr	r1, [pc, #36]	; (8000a68 <timeDisplay+0xc8>)
 8000a42:	204e      	movs	r0, #78	; 0x4e
 8000a44:	f7ff fead 	bl	80007a2 <LCD_SendString>
//	printf("\r\n--------------%d-----------\r\n", 4);
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000098c 	.word	0x2000098c
 8000a54:	08009858 	.word	0x08009858
 8000a58:	200009b4 	.word	0x200009b4
 8000a5c:	08009868 	.word	0x08009868
 8000a60:	200009b8 	.word	0x200009b8
 8000a64:	08009878 	.word	0x08009878
 8000a68:	20000990 	.word	0x20000990
 8000a6c:	0800988c 	.word	0x0800988c

08000a70 <joyStick_btn_chk>:

enum CLOCK_BUTTON joyStick_btn_chk() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	//	printf("Get in joystick check!!\r\n");
	//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);

	if (xy[1] > 4000) {
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <joyStick_btn_chk+0x58>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a7c:	d904      	bls.n	8000a88 <joyStick_btn_chk+0x18>
		printf("up\r\n");
 8000a7e:	4813      	ldr	r0, [pc, #76]	; (8000acc <joyStick_btn_chk+0x5c>)
 8000a80:	f007 fe08 	bl	8008694 <puts>
		return UP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e01d      	b.n	8000ac4 <joyStick_btn_chk+0x54>
	}
	if (xy[0] > 4000) {
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <joyStick_btn_chk+0x58>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a90:	d904      	bls.n	8000a9c <joyStick_btn_chk+0x2c>
		printf("left\r\n");
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <joyStick_btn_chk+0x60>)
 8000a94:	f007 fdfe 	bl	8008694 <puts>
		return LEFT;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	e013      	b.n	8000ac4 <joyStick_btn_chk+0x54>
	}
	if (xy[0] < 500) {
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <joyStick_btn_chk+0x58>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa4:	d204      	bcs.n	8000ab0 <joyStick_btn_chk+0x40>
		printf("right\r\n");
 8000aa6:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <joyStick_btn_chk+0x64>)
 8000aa8:	f007 fdf4 	bl	8008694 <puts>
		return RIGHT;
 8000aac:	2303      	movs	r3, #3
 8000aae:	e009      	b.n	8000ac4 <joyStick_btn_chk+0x54>
	}
	if (xy[1] < 500) {
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <joyStick_btn_chk+0x58>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ab8:	d204      	bcs.n	8000ac4 <joyStick_btn_chk+0x54>
		printf("down\r\n");
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <joyStick_btn_chk+0x68>)
 8000abc:	f007 fdea 	bl	8008694 <puts>
		return DOWN;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e7ff      	b.n	8000ac4 <joyStick_btn_chk+0x54>
	}

}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000974 	.word	0x20000974
 8000acc:	080098a0 	.word	0x080098a0
 8000ad0:	080098a4 	.word	0x080098a4
 8000ad4:	080098ac 	.word	0x080098ac
 8000ad8:	080098b4 	.word	0x080098b4

08000adc <time_set_mode>:

int t_position = 0;

void time_set_mode() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

	//	printf("time set mode!! \r\n");

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
 8000ae2:	f7ff ffc5 	bl	8000a70 <joyStick_btn_chk>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]

	if (t_position == 0) {
 8000aea:	4ba5      	ldr	r3, [pc, #660]	; (8000d80 <time_set_mode+0x2a4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d12e      	bne.n	8000b50 <time_set_mode+0x74>
		printf("t_position 0 \r\n");
 8000af2:	48a4      	ldr	r0, [pc, #656]	; (8000d84 <time_set_mode+0x2a8>)
 8000af4:	f007 fdce 	bl	8008694 <puts>
		switch (t_button) {
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d024      	beq.n	8000b48 <time_set_mode+0x6c>
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	f300 8128 	bgt.w	8000d54 <time_set_mode+0x278>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d002      	beq.n	8000b0e <time_set_mode+0x32>
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d019      	beq.n	8000b40 <time_set_mode+0x64>
			break;
		case LEFT:
			t_position = 3;
			break;
		default:
			break;
 8000b0c:	e122      	b.n	8000d54 <time_set_mode+0x278>
			if (stime.hours >= 12) {
 8000b0e:	4b9e      	ldr	r3, [pc, #632]	; (8000d88 <time_set_mode+0x2ac>)
 8000b10:	f993 3000 	ldrsb.w	r3, [r3]
 8000b14:	2b0b      	cmp	r3, #11
 8000b16:	dd09      	ble.n	8000b2c <time_set_mode+0x50>
				stime.hours -= 12;
 8000b18:	4b9b      	ldr	r3, [pc, #620]	; (8000d88 <time_set_mode+0x2ac>)
 8000b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	3b0c      	subs	r3, #12
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	4b98      	ldr	r3, [pc, #608]	; (8000d88 <time_set_mode+0x2ac>)
 8000b28:	701a      	strb	r2, [r3, #0]
			break;
 8000b2a:	e122      	b.n	8000d72 <time_set_mode+0x296>
				stime.hours += 12;
 8000b2c:	4b96      	ldr	r3, [pc, #600]	; (8000d88 <time_set_mode+0x2ac>)
 8000b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	330c      	adds	r3, #12
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	4b93      	ldr	r3, [pc, #588]	; (8000d88 <time_set_mode+0x2ac>)
 8000b3c:	701a      	strb	r2, [r3, #0]
			break;
 8000b3e:	e118      	b.n	8000d72 <time_set_mode+0x296>
			t_position = 1;
 8000b40:	4b8f      	ldr	r3, [pc, #572]	; (8000d80 <time_set_mode+0x2a4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
			break;
 8000b46:	e114      	b.n	8000d72 <time_set_mode+0x296>
			t_position = 3;
 8000b48:	4b8d      	ldr	r3, [pc, #564]	; (8000d80 <time_set_mode+0x2a4>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	601a      	str	r2, [r3, #0]
			break;
 8000b4e:	e110      	b.n	8000d72 <time_set_mode+0x296>
		}
	} else if (t_position == 1) {
 8000b50:	4b8b      	ldr	r3, [pc, #556]	; (8000d80 <time_set_mode+0x2a4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d141      	bne.n	8000bdc <time_set_mode+0x100>
		printf("t_position 1 \r\n");
 8000b58:	488c      	ldr	r0, [pc, #560]	; (8000d8c <time_set_mode+0x2b0>)
 8000b5a:	f007 fd9b 	bl	8008694 <puts>
		switch (t_button) {
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	f200 80f8 	bhi.w	8000d58 <time_set_mode+0x27c>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <time_set_mode+0x94>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000bb7 	.word	0x08000bb7
 8000b78:	08000b81 	.word	0x08000b81
 8000b7c:	08000b89 	.word	0x08000b89
		case RIGHT:
			t_position = 2;
 8000b80:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <time_set_mode+0x2a4>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	601a      	str	r2, [r3, #0]
			break;
 8000b86:	e0f4      	b.n	8000d72 <time_set_mode+0x296>
		case LEFT:
			t_position = 0;
 8000b88:	4b7d      	ldr	r3, [pc, #500]	; (8000d80 <time_set_mode+0x2a4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
			break;
 8000b8e:	e0f0      	b.n	8000d72 <time_set_mode+0x296>
		case UP:
			stime.hours++;
 8000b90:	4b7d      	ldr	r3, [pc, #500]	; (8000d88 <time_set_mode+0x2ac>)
 8000b92:	f993 3000 	ldrsb.w	r3, [r3]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <time_set_mode+0x2ac>)
 8000ba0:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <time_set_mode+0x2ac>)
 8000ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba8:	2b0b      	cmp	r3, #11
 8000baa:	f340 80d7 	ble.w	8000d5c <time_set_mode+0x280>
				stime.hours = 0;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <time_set_mode+0x2ac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bb4:	e0d2      	b.n	8000d5c <time_set_mode+0x280>
		case DOWN:
			stime.hours--;
 8000bb6:	4b74      	ldr	r3, [pc, #464]	; (8000d88 <time_set_mode+0x2ac>)
 8000bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	b25a      	sxtb	r2, r3
 8000bc4:	4b70      	ldr	r3, [pc, #448]	; (8000d88 <time_set_mode+0x2ac>)
 8000bc6:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <time_set_mode+0x2ac>)
 8000bca:	f993 3000 	ldrsb.w	r3, [r3]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f280 80c2 	bge.w	8000d58 <time_set_mode+0x27c>
				stime.hours = 11;
 8000bd4:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <time_set_mode+0x2ac>)
 8000bd6:	220b      	movs	r2, #11
 8000bd8:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000bda:	e0bd      	b.n	8000d58 <time_set_mode+0x27c>
		}

	} else if (t_position == 2) {
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <time_set_mode+0x2a4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d140      	bne.n	8000c66 <time_set_mode+0x18a>
		printf("t_position 2 \r\n");
 8000be4:	486a      	ldr	r0, [pc, #424]	; (8000d90 <time_set_mode+0x2b4>)
 8000be6:	f007 fd55 	bl	8008694 <puts>
		switch (t_button) {
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	f200 80b6 	bhi.w	8000d60 <time_set_mode+0x284>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <time_set_mode+0x120>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c1b 	.word	0x08000c1b
 8000c00:	08000c41 	.word	0x08000c41
 8000c04:	08000c0d 	.word	0x08000c0d
 8000c08:	08000c15 	.word	0x08000c15
		case RIGHT:
			t_position = 3;
 8000c0c:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <time_set_mode+0x2a4>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	601a      	str	r2, [r3, #0]
			break;
 8000c12:	e0ae      	b.n	8000d72 <time_set_mode+0x296>
		case LEFT:
			t_position = 1;
 8000c14:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <time_set_mode+0x2a4>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
		case UP:
			stime.minutes++;
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <time_set_mode+0x2ac>)
 8000c1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <time_set_mode+0x2ac>)
 8000c2a:	705a      	strb	r2, [r3, #1]
			if (stime.minutes >= 60) {
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <time_set_mode+0x2ac>)
 8000c2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c32:	2b3b      	cmp	r3, #59	; 0x3b
 8000c34:	f340 8096 	ble.w	8000d64 <time_set_mode+0x288>
				stime.minutes = 0;
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <time_set_mode+0x2ac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000c3e:	e091      	b.n	8000d64 <time_set_mode+0x288>
		case DOWN:
			stime.minutes--;
 8000c40:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <time_set_mode+0x2ac>)
 8000c42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <time_set_mode+0x2ac>)
 8000c50:	705a      	strb	r2, [r3, #1]
			if (stime.minutes < 0) {
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <time_set_mode+0x2ac>)
 8000c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f280 8081 	bge.w	8000d60 <time_set_mode+0x284>
				stime.minutes = 59;
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <time_set_mode+0x2ac>)
 8000c60:	223b      	movs	r2, #59	; 0x3b
 8000c62:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 8000c64:	e07c      	b.n	8000d60 <time_set_mode+0x284>
		}
	} else if (t_position == 3) {
 8000c66:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <time_set_mode+0x2a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	f040 8081 	bne.w	8000d72 <time_set_mode+0x296>
		printf("t_position 3 \r\n");
 8000c70:	4848      	ldr	r0, [pc, #288]	; (8000d94 <time_set_mode+0x2b8>)
 8000c72:	f007 fd0f 	bl	8008694 <puts>
		switch (t_button) {
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d874      	bhi.n	8000d68 <time_set_mode+0x28c>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <time_set_mode+0x1a8>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000d0d 	.word	0x08000d0d
 8000c88:	08000d31 	.word	0x08000d31
 8000c8c:	08000c95 	.word	0x08000c95
 8000c90:	08000d05 	.word	0x08000d05
		case RIGHT:
			ctime.hours = stime.hours;
 8000c94:	4b3c      	ldr	r3, [pc, #240]	; (8000d88 <time_set_mode+0x2ac>)
 8000c96:	f993 2000 	ldrsb.w	r2, [r3]
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <time_set_mode+0x2bc>)
 8000c9c:	701a      	strb	r2, [r3, #0]
			ctime.minutes = stime.minutes;
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <time_set_mode+0x2ac>)
 8000ca0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <time_set_mode+0x2bc>)
 8000ca6:	705a      	strb	r2, [r3, #1]
			ctime.seconds = stime.seconds;
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <time_set_mode+0x2ac>)
 8000caa:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000cae:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <time_set_mode+0x2bc>)
 8000cb0:	709a      	strb	r2, [r3, #2]

			default_nvitem.setting_time.hours = stime.hours;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <time_set_mode+0x2ac>)
 8000cb4:	f993 2000 	ldrsb.w	r2, [r3]
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <time_set_mode+0x2c0>)
 8000cba:	711a      	strb	r2, [r3, #4]
			default_nvitem.setting_time.minutes = stime.minutes;
 8000cbc:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <time_set_mode+0x2ac>)
 8000cbe:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <time_set_mode+0x2c0>)
 8000cc4:	715a      	strb	r2, [r3, #5]
			default_nvitem.setting_time.seconds = stime.seconds;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <time_set_mode+0x2ac>)
 8000cc8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <time_set_mode+0x2c0>)
 8000cce:	719a      	strb	r2, [r3, #6]

			RTC_Time.Hours = ctime.hours;
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <time_set_mode+0x2bc>)
 8000cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <time_set_mode+0x2c4>)
 8000cda:	701a      	strb	r2, [r3, #0]
			RTC_Time.Minutes = ctime.minutes;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <time_set_mode+0x2bc>)
 8000cde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <time_set_mode+0x2c4>)
 8000ce6:	705a      	strb	r2, [r3, #1]
			RTC_Time.Seconds = ctime.seconds;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <time_set_mode+0x2bc>)
 8000cea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <time_set_mode+0x2c4>)
 8000cf2:	709a      	strb	r2, [r3, #2]
			update_nvitems();
 8000cf4:	f7ff fde2 	bl	80008bc <update_nvitems>
						lcd_clear();
 8000cf8:	f7ff fdd8 	bl	80008ac <lcd_clear>
//			printf("\r\n--------------%d-----------\r\n", 6);
			current_state.mode = NORMAL_STATE;
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <time_set_mode+0x2c8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
			break;
 8000d02:	e036      	b.n	8000d72 <time_set_mode+0x296>
		case LEFT:
			t_position = 2;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <time_set_mode+0x2a4>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	601a      	str	r2, [r3, #0]
			break;
 8000d0a:	e032      	b.n	8000d72 <time_set_mode+0x296>
		case UP:
			stime.seconds++;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <time_set_mode+0x2ac>)
 8000d0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <time_set_mode+0x2ac>)
 8000d1c:	709a      	strb	r2, [r3, #2]
			if (stime.seconds >= 60) {
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <time_set_mode+0x2ac>)
 8000d20:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d24:	2b3b      	cmp	r3, #59	; 0x3b
 8000d26:	dd21      	ble.n	8000d6c <time_set_mode+0x290>
				stime.seconds = 0;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <time_set_mode+0x2ac>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000d2e:	e01d      	b.n	8000d6c <time_set_mode+0x290>
		case DOWN:
			stime.seconds--;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <time_set_mode+0x2ac>)
 8000d32:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <time_set_mode+0x2ac>)
 8000d40:	709a      	strb	r2, [r3, #2]
			if (stime.seconds < 0) {
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <time_set_mode+0x2ac>)
 8000d44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da11      	bge.n	8000d70 <time_set_mode+0x294>
				stime.seconds = 59;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <time_set_mode+0x2ac>)
 8000d4e:	223b      	movs	r2, #59	; 0x3b
 8000d50:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000d52:	e00d      	b.n	8000d70 <time_set_mode+0x294>
			break;
 8000d54:	bf00      	nop
 8000d56:	e00c      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d58:	bf00      	nop
 8000d5a:	e00a      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d5c:	bf00      	nop
 8000d5e:	e008      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d60:	bf00      	nop
 8000d62:	e006      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d64:	bf00      	nop
 8000d66:	e004      	b.n	8000d72 <time_set_mode+0x296>
		default:
			//			t_position = 0;
			break;
 8000d68:	bf00      	nop
 8000d6a:	e002      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e000      	b.n	8000d72 <time_set_mode+0x296>
			break;
 8000d70:	bf00      	nop

		}
	}
	timeDisplay();
 8000d72:	f7ff fe15 	bl	80009a0 <timeDisplay>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200009f4 	.word	0x200009f4
 8000d84:	080098bc 	.word	0x080098bc
 8000d88:	200009b4 	.word	0x200009b4
 8000d8c:	080098cc 	.word	0x080098cc
 8000d90:	080098dc 	.word	0x080098dc
 8000d94:	080098ec 	.word	0x080098ec
 8000d98:	200009b0 	.word	0x200009b0
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	200009e0 	.word	0x200009e0
 8000da4:	2000098c 	.word	0x2000098c

08000da8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dae:	f001 f81b 	bl	8001de8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000db2:	f000 f841 	bl	8000e38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000db6:	f000 fadf 	bl	8001378 <MX_GPIO_Init>
	MX_DMA_Init();
 8000dba:	f000 fabd 	bl	8001338 <MX_DMA_Init>
	MX_ETH_Init();
 8000dbe:	f000 f92b 	bl	8001018 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000dc2:	f000 fa61 	bl	8001288 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dc6:	f000 fa89 	bl	80012dc <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000dca:	f000 f8c5 	bl	8000f58 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000dce:	f000 f971 	bl	80010b4 <MX_I2C1_Init>
	MX_RTC_Init();
 8000dd2:	f000 f9af 	bl	8001134 <MX_RTC_Init>
	MX_TIM3_Init();
 8000dd6:	f000 fa09 	bl	80011ec <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000dda:	f000 f899 	bl	8000f10 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000dde:	2202      	movs	r2, #2
 8000de0:	490f      	ldr	r1, [pc, #60]	; (8000e20 <main+0x78>)
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <main+0x7c>)
 8000de4:	f001 f9ea 	bl	80021bc <HAL_ADC_Start_DMA>
	//	HAL_ADC_Start_IT(&hadc1);
	HAL_TIM_Base_Start_IT(&htim3);
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <main+0x80>)
 8000dea:	f005 fbe3 	bl	80065b4 <HAL_TIM_Base_Start_IT>
	init();
 8000dee:	f7ff fcf2 	bl	80007d6 <init>

	current_state.mode = NORMAL_STATE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <main+0x84>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
		//	 HAL_Delay(500);
		//		 joystick xy test OK
		//		printf("%d %d \r\n", (unsigned int)xy[0], (unsigned int)xy[1]);
		//		HAL_Delay(1000);
#if 1
		if (current_state.mode == NORMAL_STATE) {\
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <main+0x84>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <main+0x5e>
//			printf("\r\n--------------%d-----------\r\n", 5);
			get_RTC_time();
 8000e00:	f7ff fd08 	bl	8000814 <get_RTC_time>
 8000e04:	e7f8      	b.n	8000df8 <main+0x50>
			//			showCurrentTime();
		} else if (current_state.mode == TIME_SETTING) {
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <main+0x84>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d1f4      	bne.n	8000df8 <main+0x50>
			time_set_mode();
 8000e0e:	f7ff fe65 	bl	8000adc <time_set_mode>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4906      	ldr	r1, [pc, #24]	; (8000e30 <main+0x88>)
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <main+0x8c>)
 8000e18:	f005 f8f4 	bl	8006004 <HAL_RTC_SetTime>
		if (current_state.mode == NORMAL_STATE) {\
 8000e1c:	e7ec      	b.n	8000df8 <main+0x50>
 8000e1e:	bf00      	nop
 8000e20:	20000974 	.word	0x20000974
 8000e24:	20000210 	.word	0x20000210
 8000e28:	200003dc 	.word	0x200003dc
 8000e2c:	2000098c 	.word	0x2000098c
 8000e30:	200009e0 	.word	0x200009e0
 8000e34:	200003bc 	.word	0x200003bc

08000e38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2230      	movs	r2, #48	; 0x30
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fd58 	bl	80088fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <SystemClock_Config+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <SystemClock_Config+0xd4>)
 8000e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <SystemClock_Config+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000e94:	2305      	movs	r3, #5
 8000e96:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb0:	23a8      	movs	r3, #168	; 0xa8
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f9d1 	bl	8005268 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x98>
		Error_Handler();
 8000ecc:	f000 fba8 	bl	8001620 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000edc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2105      	movs	r1, #5
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fc32 	bl	8005758 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xc6>
		Error_Handler();
 8000efa:	f000 fb91 	bl	8001620 <Error_Handler>
	}
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2027      	movs	r0, #39	; 0x27
 8000f1a:	f001 fe1c 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f1e:	2027      	movs	r0, #39	; 0x27
 8000f20:	f001 fe35 	bl	8002b8e <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f001 fe14 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f001 fe2d 	bl	8002b8e <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f001 fe0c 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f3e:	201d      	movs	r0, #29
 8000f40:	f001 fe25 	bl	8002b8e <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2012      	movs	r0, #18
 8000f4a:	f001 fe04 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f4e:	2012      	movs	r0, #18
 8000f50:	f001 fe1d 	bl	8002b8e <HAL_NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <MX_ADC1_Init+0xbc>)
 8000f6e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f76:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fbc:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fbe:	f000 ffa9 	bl	8001f14 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x74>
		Error_Handler();
 8000fc8:	f000 fb2a 	bl	8001620 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000fcc:	230a      	movs	r3, #10
 8000fce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fde:	f001 fa25 	bl	800242c <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x94>
		Error_Handler();
 8000fe8:	f000 fb1a 	bl	8001620 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000fec:	230d      	movs	r3, #13
 8000fee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000ffa:	f001 fa17 	bl	800242c <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0xb0>
		Error_Handler();
 8001004:	f000 fb0c 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000210 	.word	0x20000210
 8001014:	40012000 	.word	0x40012000

08001018 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_ETH_Init+0x84>)
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <MX_ETH_Init+0x88>)
 8001020:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ETH_Init+0x8c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ETH_Init+0x8c>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ETH_Init+0x8c>)
 8001030:	22e1      	movs	r2, #225	; 0xe1
 8001032:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ETH_Init+0x8c>)
 8001036:	2200      	movs	r2, #0
 8001038:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ETH_Init+0x8c>)
 800103c:	2200      	movs	r2, #0
 800103e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ETH_Init+0x8c>)
 8001042:	2200      	movs	r2, #0
 8001044:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_ETH_Init+0x84>)
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <MX_ETH_Init+0x8c>)
 800104a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_ETH_Init+0x84>)
 800104e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001052:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_ETH_Init+0x84>)
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <MX_ETH_Init+0x90>)
 8001058:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_ETH_Init+0x84>)
 800105c:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_ETH_Init+0x94>)
 800105e:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_ETH_Init+0x84>)
 8001062:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001066:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_ETH_Init+0x84>)
 800106a:	f002 f9ad 	bl	80033c8 <HAL_ETH_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ETH_Init+0x60>
		Error_Handler();
 8001074:	f000 fad4 	bl	8001620 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001078:	2238      	movs	r2, #56	; 0x38
 800107a:	2100      	movs	r1, #0
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_ETH_Init+0x98>)
 800107e:	f007 fc3d 	bl	80088fc <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_ETH_Init+0x98>)
 8001084:	2221      	movs	r2, #33	; 0x21
 8001086:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_ETH_Init+0x98>)
 800108a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800108e:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_ETH_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	40028000 	.word	0x40028000
 80010a4:	200009f8 	.word	0x200009f8
 80010a8:	20000170 	.word	0x20000170
 80010ac:	200000d0 	.word	0x200000d0
 80010b0:	20000098 	.word	0x20000098

080010b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C1_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_I2C1_Init+0x74>)
 80010f2:	f003 f9a7 	bl	8004444 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010fc:	f000 fa90 	bl	8001620 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001100:	2100      	movs	r1, #0
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C1_Init+0x74>)
 8001104:	f003 ff17 	bl	8004f36 <HAL_I2CEx_ConfigAnalogFilter>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800110e:	f000 fa87 	bl	8001620 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001112:	2100      	movs	r1, #0
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_I2C1_Init+0x74>)
 8001116:	f003 ff4a 	bl	8004fae <HAL_I2CEx_ConfigDigitalFilter>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x70>
		Error_Handler();
 8001120:	f000 fa7e 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000368 	.word	0x20000368
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_RTC_Init+0xb0>)
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <MX_RTC_Init+0xb4>)
 8001150:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_RTC_Init+0xb0>)
 8001154:	2240      	movs	r2, #64	; 0x40
 8001156:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_RTC_Init+0xb0>)
 800115a:	227f      	movs	r2, #127	; 0x7f
 800115c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_RTC_Init+0xb0>)
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_RTC_Init+0xb0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_RTC_Init+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_RTC_Init+0xb0>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <MX_RTC_Init+0xb0>)
 8001178:	f004 fece 	bl	8005f18 <HAL_RTC_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_RTC_Init+0x52>
		Error_Handler();
 8001182:	f000 fa4d 	bl	8001620 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800118a:	2300      	movs	r3, #0
 800118c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800118e:	2300      	movs	r3, #0
 8001190:	71bb      	strb	r3, [r7, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <MX_RTC_Init+0xb0>)
 80011a6:	f004 ff2d 	bl	8006004 <HAL_RTC_SetTime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_RTC_Init+0x80>
		Error_Handler();
 80011b0:	f000 fa36 	bl	8001620 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80011b4:	2305      	movs	r3, #5
 80011b6:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 80011b8:	2311      	movs	r3, #17
 80011ba:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 80011bc:	2310      	movs	r3, #16
 80011be:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 80011c0:	2323      	movs	r3, #35	; 0x23
 80011c2:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80011c4:	463b      	mov	r3, r7
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_RTC_Init+0xb0>)
 80011cc:	f005 f812 	bl	80061f4 <HAL_RTC_SetDate>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_RTC_Init+0xa6>
		Error_Handler();
 80011d6:	f000 fa23 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200003bc 	.word	0x200003bc
 80011e8:	40002800 	.word	0x40002800

080011ec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_TIM3_Init+0x94>)
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_TIM3_Init+0x98>)
 800120c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM3_Init+0x94>)
 8001210:	f242 7210 	movw	r2, #10000	; 0x2710
 8001214:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM3_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 900;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_TIM3_Init+0x94>)
 800121e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001222:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_TIM3_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_TIM3_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_TIM3_Init+0x94>)
 8001232:	f005 f96f 	bl	8006514 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x54>
		Error_Handler();
 800123c:	f000 f9f0 	bl	8001620 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_TIM3_Init+0x94>)
 800124e:	f005 fb29 	bl	80068a4 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM3_Init+0x70>
		Error_Handler();
 8001258:	f000 f9e2 	bl	8001620 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800125c:	2320      	movs	r3, #32
 800125e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_TIM3_Init+0x94>)
 800126a:	f005 fd45 	bl	8006cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001274:	f000 f9d4 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200003dc 	.word	0x200003dc
 8001284:	40000400 	.word	0x40000400

08001288 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART3_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART3_UART_Init+0x4c>)
 80012c0:	f005 fdaa 	bl	8006e18 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80012ca:	f000 f9a9 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000424 	.word	0x20000424
 80012d8:	40004800 	.word	0x40004800

080012dc <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012e6:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2201      	movs	r2, #1
 8001304:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	2201      	movs	r2, #1
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001320:	f003 fe84 	bl	800502c <HAL_PCD_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800132a:	f000 f979 	bl	8001620 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000468 	.word	0x20000468

08001338 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <MX_DMA_Init+0x3c>)
 8001348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_DMA_Init+0x3c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2038      	movs	r0, #56	; 0x38
 8001360:	f001 fbf9 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001364:	2038      	movs	r0, #56	; 0x38
 8001366:	f001 fc12 	bl	8002b8e <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <MX_GPIO_Init+0x190>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a5c      	ldr	r2, [pc, #368]	; (8001508 <MX_GPIO_Init+0x190>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <MX_GPIO_Init+0x190>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <MX_GPIO_Init+0x190>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a55      	ldr	r2, [pc, #340]	; (8001508 <MX_GPIO_Init+0x190>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <MX_GPIO_Init+0x190>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <MX_GPIO_Init+0x190>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <MX_GPIO_Init+0x190>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <MX_GPIO_Init+0x190>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <MX_GPIO_Init+0x190>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <MX_GPIO_Init+0x190>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <MX_GPIO_Init+0x190>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <MX_GPIO_Init+0x190>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a40      	ldr	r2, [pc, #256]	; (8001508 <MX_GPIO_Init+0x190>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <MX_GPIO_Init+0x190>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <MX_GPIO_Init+0x190>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <MX_GPIO_Init+0x190>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <MX_GPIO_Init+0x190>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <MX_GPIO_Init+0x190>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a32      	ldr	r2, [pc, #200]	; (8001508 <MX_GPIO_Init+0x190>)
 8001440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <MX_GPIO_Init+0x190>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f244 0181 	movw	r1, #16513	; 0x4081
 8001458:	482c      	ldr	r0, [pc, #176]	; (800150c <MX_GPIO_Init+0x194>)
 800145a:	f002 ffa7 	bl	80043ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800145e:	2200      	movs	r2, #0
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	482b      	ldr	r0, [pc, #172]	; (8001510 <MX_GPIO_Init+0x198>)
 8001464:	f002 ffa2 	bl	80043ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4825      	ldr	r0, [pc, #148]	; (8001514 <MX_GPIO_Init+0x19c>)
 8001480:	f002 fdd0 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pin : Joy_btn_Pin */
	GPIO_InitStruct.Pin = Joy_btn_Pin;
 8001484:	2308      	movs	r3, #8
 8001486:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001488:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800148c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	481f      	ldr	r0, [pc, #124]	; (8001518 <MX_GPIO_Init+0x1a0>)
 800149a:	f002 fdc3 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800149e:	f244 0381 	movw	r3, #16513	; 0x4081
 80014a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4815      	ldr	r0, [pc, #84]	; (800150c <MX_GPIO_Init+0x194>)
 80014b8:	f002 fdb4 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	480f      	ldr	r0, [pc, #60]	; (8001510 <MX_GPIO_Init+0x198>)
 80014d4:	f002 fda6 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4809      	ldr	r0, [pc, #36]	; (8001510 <MX_GPIO_Init+0x198>)
 80014ec:	f002 fd9a 	bl	8004024 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2009      	movs	r0, #9
 80014f6:	f001 fb2e 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014fa:	2009      	movs	r0, #9
 80014fc:	f001 fb47 	bl	8002b8e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001500:	bf00      	nop
 8001502:	3730      	adds	r7, #48	; 0x30
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40020400 	.word	0x40020400
 8001510:	40021800 	.word	0x40021800
 8001514:	40020800 	.word	0x40020800
 8001518:	40021400 	.word	0x40021400

0800151c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d161      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0xd4>
		// joystick sw test OK!
		//	  btn_cnt++;
		//	  printf("cnt = %d\r\n", btn_cnt);
		//		printf("test interval=%d\r\n", interval);
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800152c:	2101      	movs	r1, #1
 800152e:	4832      	ldr	r0, [pc, #200]	; (80015f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001530:	f002 ff55 	bl	80043de <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 8001534:	f000 fcbe 	bl	8001eb4 <HAL_GetTick>
 8001538:	4603      	mov	r3, r0
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 800153c:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 800154a:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001552:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 8001554:	2108      	movs	r1, #8
 8001556:	482c      	ldr	r0, [pc, #176]	; (8001608 <HAL_GPIO_EXTI_Callback+0xec>)
 8001558:	f002 ff10 	bl	800437c <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d146      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0xd4>
			if (interval < 130) {
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b81      	cmp	r3, #129	; 0x81
 8001568:	d805      	bhi.n	8001576 <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3303      	adds	r3, #3
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e02a      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0xb0>
			} else if (interval >= 130 && interval < 200) {
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b81      	cmp	r3, #129	; 0x81
 800157c:	d910      	bls.n	80015a0 <HAL_GPIO_EXTI_Callback+0x84>
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2bc7      	cmp	r3, #199	; 0xc7
 8001584:	d80c      	bhi.n	80015a0 <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4820      	ldr	r0, [pc, #128]	; (8001610 <HAL_GPIO_EXTI_Callback+0xf4>)
 800158e:	f007 f81b 	bl	80085c8 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_GPIO_EXTI_Callback+0xf8>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e015      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0xb0>
				//				time_set_mode();
			} else if (interval >= 300 && interval <= 1000) {
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015a8:	d310      	bcc.n	80015cc <HAL_GPIO_EXTI_Callback+0xb0>
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b2:	d80b      	bhi.n	80015cc <HAL_GPIO_EXTI_Callback+0xb0>
				printf("Long click!!  interval = %u\r\n",
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <HAL_GPIO_EXTI_Callback+0xfc>)
 80015bc:	f007 f804 	bl	80085c8 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015c8:	2202      	movs	r2, #2
 80015ca:	701a      	strb	r2, [r3, #0]
				//				alarm_set_mode();
			}
			if (btn_cnt >= 5) {
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	dd0d      	ble.n	80015f0 <HAL_GPIO_EXTI_Callback+0xd4>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <HAL_GPIO_EXTI_Callback+0x100>)
 80015e0:	f006 fff2 	bl	80085c8 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015ec:	2203      	movs	r2, #3
 80015ee:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020400 	.word	0x40020400
 80015fc:	20000980 	.word	0x20000980
 8001600:	20000984 	.word	0x20000984
 8001604:	20000988 	.word	0x20000988
 8001608:	40021400 	.word	0x40021400
 800160c:	2000097c 	.word	0x2000097c
 8001610:	080098fc 	.word	0x080098fc
 8001614:	2000098c 	.word	0x2000098c
 8001618:	0800991c 	.word	0x0800991c
 800161c:	0800993c 	.word	0x0800993c

08001620 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_MspInit+0x4c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3c      	ldr	r2, [pc, #240]	; (800178c <HAL_ADC_MspInit+0x110>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d171      	bne.n	8001782 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_ADC_MspInit+0x114>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016f2:	2309      	movs	r3, #9
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4823      	ldr	r0, [pc, #140]	; (8001794 <HAL_ADC_MspInit+0x118>)
 8001706:	f002 fc8d 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800170a:	2308      	movs	r3, #8
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170e:	2303      	movs	r3, #3
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <HAL_ADC_MspInit+0x11c>)
 800171e:	f002 fc81 	bl	8004024 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001724:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_ADC_MspInit+0x124>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_ADC_MspInit+0x120>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_MspInit+0x120>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001748:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_ADC_MspInit+0x120>)
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001758:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_ADC_MspInit+0x120>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <HAL_ADC_MspInit+0x120>)
 8001768:	f001 fa2c 	bl	8002bc4 <HAL_DMA_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001772:	f7ff ff55 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_ADC_MspInit+0x120>)
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_ADC_MspInit+0x120>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40012000 	.word	0x40012000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	20000258 	.word	0x20000258
 80017a0:	40026410 	.word	0x40026410

080017a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_ETH_MspInit+0x174>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 80a4 	bne.w	8001910 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_ETH_MspInit+0x178>)
 800180a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_ETH_MspInit+0x178>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_ETH_MspInit+0x178>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a36      	ldr	r2, [pc, #216]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_ETH_MspInit+0x178>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_ETH_MspInit+0x178>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_ETH_MspInit+0x178>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_ETH_MspInit+0x178>)
 800187a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800188c:	2332      	movs	r3, #50	; 0x32
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800189c:	230b      	movs	r3, #11
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	481e      	ldr	r0, [pc, #120]	; (8001920 <HAL_ETH_MspInit+0x17c>)
 80018a8:	f002 fbbc 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018ac:	2386      	movs	r3, #134	; 0x86
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018bc:	230b      	movs	r3, #11
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <HAL_ETH_MspInit+0x180>)
 80018c8:	f002 fbac 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018de:	230b      	movs	r3, #11
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <HAL_ETH_MspInit+0x184>)
 80018ea:	f002 fb9b 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <HAL_ETH_MspInit+0x188>)
 800190c:	f002 fb8a 	bl	8004024 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3738      	adds	r7, #56	; 0x38
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40028000 	.word	0x40028000
 800191c:	40023800 	.word	0x40023800
 8001920:	40020800 	.word	0x40020800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40021800 	.word	0x40021800

08001930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_I2C_MspInit+0x84>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12c      	bne.n	80019ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800196e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001980:	2304      	movs	r3, #4
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <HAL_I2C_MspInit+0x8c>)
 800198c:	f002 fb4a 	bl	8004024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 800199a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_I2C_MspInit+0x88>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40005400 	.word	0x40005400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	; 0x38
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	2230      	movs	r2, #48	; 0x30
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 ff93 	bl	80088fc <memset>
  if(hrtc->Instance==RTC)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_RTC_MspInit+0x4c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019e0:	2320      	movs	r3, #32
 80019e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f8d2 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80019fa:	f7ff fe11 	bl	8001620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_RTC_MspInit+0x50>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40002800 	.word	0x40002800
 8001a10:	42470e3c 	.word	0x42470e3c

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10d      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_Base_MspInit+0x40>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x40>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_TIM_Base_MspInit+0x40>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_UART_MspInit+0x84>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_MspInit+0x8c>)
 8001ad0:	f002 faa8 	bl	8004024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020c00 	.word	0x40020c00

08001ae8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b08:	d13f      	bne.n	8001b8a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b26:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4815      	ldr	r0, [pc, #84]	; (8001b98 <HAL_PCD_MspInit+0xb0>)
 8001b44:	f002 fa6e 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480e      	ldr	r0, [pc, #56]	; (8001b98 <HAL_PCD_MspInit+0xb0>)
 8001b5e:	f002 fa61 	bl	8004024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_PCD_MspInit+0xac>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f950 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f002 fc0d 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <ADC_IRQHandler+0x10>)
 8001c06:	f000 f9c8 	bl	8001f9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000210 	.word	0x20000210

08001c14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM3_IRQHandler+0x10>)
 8001c1a:	f004 fd3b 	bl	8006694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200003dc 	.word	0x200003dc

08001c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <USART3_IRQHandler+0x10>)
 8001c2e:	f005 f9d3 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000424 	.word	0x20000424

08001c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c44:	f002 fbe6 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream0_IRQHandler+0x10>)
 8001c52:	f001 f94f 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000258 	.word	0x20000258

08001c60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e00a      	b.n	8001c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c72:	f3af 8000 	nop.w
 8001c76:	4601      	mov	r1, r0
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	b2ca      	uxtb	r2, r1
 8001c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf0      	blt.n	8001c72 <_read+0x12>
  }

  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 fe30 	bl	8008998 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20030000 	.word	0x20030000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000a00 	.word	0x20000a00
 8001d6c:	20000b78 	.word	0x20000b78

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff ffd7 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 fdef 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7fe ffef 	bl	8000da8 <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001dd8:	080099ec 	.word	0x080099ec
  ldr r2, =_sbss
 8001ddc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001de0:	20000b74 	.word	0x20000b74

08001de4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <CAN1_RX0_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fe95 	bl	8002b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fc06 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fead 	bl	8002baa <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 fe75 	bl	8002b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000014 	.word	0x20000014
 8001e84:	2000001c 	.word	0x2000001c
 8001e88:	20000018 	.word	0x20000018

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	20000a04 	.word	0x20000a04

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000a04 	.word	0x20000a04

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000001c 	.word	0x2000001c

08001f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e033      	b.n	8001f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fba2 	bl	800167c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f5a:	f023 0302 	bic.w	r3, r3, #2
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fb92 	bl	8002690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
 8001f82:	e001      	b.n	8001f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d049      	beq.n	8002064 <HAL_ADC_IRQHandler+0xca>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d046      	beq.n	8002064 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d12b      	bne.n	8002054 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d127      	bne.n	8002054 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800201c:	2b00      	cmp	r3, #0
 800201e:	d119      	bne.n	8002054 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0220 	bic.w	r2, r2, #32
 800202e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f9c1 	bl	80023dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0212 	mvn.w	r2, #18
 8002062:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d057      	beq.n	800212a <HAL_ADC_IRQHandler+0x190>
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d054      	beq.n	800212a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d139      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d12b      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d124      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11d      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fc36 	bl	800298c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 020c 	mvn.w	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_ADC_IRQHandler+0x1d6>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d014      	beq.n	8002170 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10d      	bne.n	8002170 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f94f 	bl	8002404 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0201 	mvn.w	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800217e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x218>
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f043 0202 	orr.w	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0220 	mvn.w	r2, #32
 80021a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f938 	bl	8002418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0220 	mvn.w	r2, #32
 80021b0:	601a      	str	r2, [r3, #0]
  }
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0e9      	b.n	80023ae <HAL_ADC_Start_DMA+0x1f2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d018      	beq.n	8002222 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_ADC_Start_DMA+0x1fc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_ADC_Start_DMA+0x200>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9a      	lsrs	r2, r3, #18
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3b01      	subs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002230:	d107      	bne.n	8002242 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	f040 80a1 	bne.w	8002394 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800227c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f023 0206 	bic.w	r2, r3, #6
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
 800229e:	e002      	b.n	80022a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 80022b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4a43      	ldr	r2, [pc, #268]	; (80023c4 <HAL_ADC_Start_DMA+0x208>)
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_ADC_Start_DMA+0x20c>)
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a41      	ldr	r2, [pc, #260]	; (80023cc <HAL_ADC_Start_DMA+0x210>)
 80022c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	334c      	adds	r3, #76	; 0x4c
 80022fe:	4619      	mov	r1, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f000 fd0c 	bl	8002d20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d12a      	bne.n	800236a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <HAL_ADC_Start_DMA+0x214>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d015      	beq.n	800234a <HAL_ADC_Start_DMA+0x18e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <HAL_ADC_Start_DMA+0x218>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d105      	bne.n	8002334 <HAL_ADC_Start_DMA+0x178>
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_ADC_Start_DMA+0x21c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d136      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d130      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d129      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e020      	b.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_ADC_Start_DMA+0x214>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d11b      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d114      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	e00b      	b.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000014 	.word	0x20000014
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	40012300 	.word	0x40012300
 80023c4:	08002889 	.word	0x08002889
 80023c8:	08002943 	.word	0x08002943
 80023cc:	0800295f 	.word	0x0800295f
 80023d0:	40012000 	.word	0x40012000
 80023d4:	40012100 	.word	0x40012100
 80023d8:	40012200 	.word	0x40012200

080023dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1c>
 8002444:	2302      	movs	r3, #2
 8002446:	e113      	b.n	8002670 <HAL_ADC_ConfigChannel+0x244>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b09      	cmp	r3, #9
 8002456:	d925      	bls.n	80024a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68d9      	ldr	r1, [r3, #12]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43da      	mvns	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	400a      	ands	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	4603      	mov	r3, r0
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4403      	add	r3, r0
 8002496:	3b1e      	subs	r3, #30
 8002498:	409a      	lsls	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	e022      	b.n	80024ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6919      	ldr	r1, [r3, #16]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	2207      	movs	r2, #7
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	400a      	ands	r2, r1
 80024c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4403      	add	r3, r0
 80024e0:	409a      	lsls	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d824      	bhi.n	800253c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b05      	subs	r3, #5
 8002504:	221f      	movs	r2, #31
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	400a      	ands	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b05      	subs	r3, #5
 800252e:	fa00 f203 	lsl.w	r2, r0, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
 800253a:	e04c      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d824      	bhi.n	800258e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b23      	subs	r3, #35	; 0x23
 8002556:	221f      	movs	r2, #31
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43da      	mvns	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	400a      	ands	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b23      	subs	r3, #35	; 0x23
 8002580:	fa00 f203 	lsl.w	r2, r0, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
 800258c:	e023      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	3b41      	subs	r3, #65	; 0x41
 80025a0:	221f      	movs	r2, #31
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	3b41      	subs	r3, #65	; 0x41
 80025ca:	fa00 f203 	lsl.w	r2, r0, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_ADC_ConfigChannel+0x250>)
 80025d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_ADC_ConfigChannel+0x254>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10f      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d8>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d10b      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_ADC_ConfigChannel+0x254>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12b      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x23a>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_ADC_ConfigChannel+0x258>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x1f4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b11      	cmp	r3, #17
 800261e:	d122      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_ADC_ConfigChannel+0x258>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d111      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_ADC_ConfigChannel+0x25c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x260>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	0c9a      	lsrs	r2, r3, #18
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002658:	e002      	b.n	8002660 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40012300 	.word	0x40012300
 8002680:	40012000 	.word	0x40012000
 8002684:	10000012 	.word	0x10000012
 8002688:	20000014 	.word	0x20000014
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002698:	4b79      	ldr	r3, [pc, #484]	; (8002880 <ADC_Init+0x1f0>)
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4a58      	ldr	r2, [pc, #352]	; (8002884 <ADC_Init+0x1f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e00f      	b.n	800278e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800278c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0202 	bic.w	r2, r2, #2
 800279c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7e1b      	ldrb	r3, [r3, #24]
 80027a8:	005a      	lsls	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	3b01      	subs	r3, #1
 80027e8:	035a      	lsls	r2, r3, #13
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e007      	b.n	8002804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	3b01      	subs	r3, #1
 8002820:	051a      	lsls	r2, r3, #20
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002846:	025a      	lsls	r2, r3, #9
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	029a      	lsls	r2, r3, #10
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40012300 	.word	0x40012300
 8002884:	0f000001 	.word	0x0f000001

08002888 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13c      	bne.n	800291c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12b      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d127      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d119      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0220 	bic.w	r2, r2, #32
 80028ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff fd61 	bl	80023dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800291a:	e00e      	b.n	800293a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fd75 	bl	8002418 <HAL_ADC_ErrorCallback>
}
 800292e:	e004      	b.n	800293a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fd4d 	bl	80023f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fd4a 	bl	8002418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029bc:	4013      	ands	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60d3      	str	r3, [r2, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <__NVIC_GetPriorityGrouping+0x18>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	f003 0307 	and.w	r3, r3, #7
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	db0b      	blt.n	8002a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <__NVIC_EnableIRQ+0x38>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2001      	movs	r0, #1
 8002a26:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0c:	d301      	bcc.n	8002b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00f      	b.n	8002b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <SysTick_Config+0x40>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f7ff ff8e 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <SysTick_Config+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SysTick_Config+0x40>)
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff29 	bl	80029a0 <__NVIC_SetPriorityGrouping>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b68:	f7ff ff3e 	bl	80029e8 <__NVIC_GetPriorityGrouping>
 8002b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7ff ff8e 	bl	8002a94 <NVIC_EncodePriority>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff5d 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff31 	bl	8002a04 <__NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffa2 	bl	8002afc <SysTick_Config>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff f970 	bl	8001eb4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e099      	b.n	8002d14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c00:	e00f      	b.n	8002c22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c02:	f7ff f957 	bl	8001eb4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d908      	bls.n	8002c22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e078      	b.n	8002d14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e8      	bne.n	8002c02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_DMA_Init+0x158>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d107      	bne.n	8002c8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4313      	orrs	r3, r2
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 0307 	bic.w	r3, r3, #7
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d117      	bne.n	8002ce6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fb01 	bl	80032d0 <DMA_CheckFifoParam>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e016      	b.n	8002d14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fab8 	bl	8003264 <DMA_CalcBaseAndBitshift>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	223f      	movs	r2, #63	; 0x3f
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	f010803f 	.word	0xf010803f

08002d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_DMA_Start_IT+0x26>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e040      	b.n	8002dc8 <HAL_DMA_Start_IT+0xa8>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d12f      	bne.n	8002dba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa4a 	bl	8003208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	223f      	movs	r2, #63	; 0x3f
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0216 	orr.w	r2, r2, #22
 8002d8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0208 	orr.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e005      	b.n	8002dc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dde:	f7ff f869 	bl	8001eb4 <HAL_GetTick>
 8002de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e052      	b.n	8002ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0216 	bic.w	r2, r2, #22
 8002e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_DMA_Abort+0x62>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0208 	bic.w	r2, r2, #8
 8002e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e52:	e013      	b.n	8002e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e54:	f7ff f82e 	bl	8001eb4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d90c      	bls.n	8002e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e015      	b.n	8002ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e4      	bne.n	8002e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	223f      	movs	r2, #63	; 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00c      	b.n	8002ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f00:	4b8e      	ldr	r3, [pc, #568]	; (800313c <HAL_DMA_IRQHandler+0x248>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a8e      	ldr	r2, [pc, #568]	; (8003140 <HAL_DMA_IRQHandler+0x24c>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2208      	movs	r2, #8
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2204      	movs	r2, #4
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d043      	beq.n	8003064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d03c      	beq.n	8003064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	2210      	movs	r2, #16
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d024      	beq.n	8003064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4798      	blx	r3
 8003022:	e01f      	b.n	8003064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e016      	b.n	8003064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0208 	bic.w	r2, r2, #8
 8003052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2220      	movs	r2, #32
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 808f 	beq.w	8003194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8087 	beq.w	8003194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2220      	movs	r2, #32
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b05      	cmp	r3, #5
 800309c:	d136      	bne.n	800310c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0216 	bic.w	r2, r2, #22
 80030ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_DMA_IRQHandler+0x1da>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0208 	bic.w	r2, r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	223f      	movs	r2, #63	; 0x3f
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d07e      	beq.n	8003200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
        }
        return;
 800310a:	e079      	b.n	8003200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01d      	beq.n	8003156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	2b00      	cmp	r3, #0
 800312e:	d031      	beq.n	8003194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
 8003138:	e02c      	b.n	8003194 <HAL_DMA_IRQHandler+0x2a0>
 800313a:	bf00      	nop
 800313c:	20000014 	.word	0x20000014
 8003140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
 8003154:	e01e      	b.n	8003194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10f      	bne.n	8003184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0210 	bic.w	r2, r2, #16
 8003172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d032      	beq.n	8003202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2205      	movs	r2, #5
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d307      	bcc.n	80031dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f2      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x2cc>
 80031da:	e000      	b.n	80031de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003200:	bf00      	nop
    }
  }
}
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d108      	bne.n	8003248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003246:	e007      	b.n	8003258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3b10      	subs	r3, #16
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800327e:	4a13      	ldr	r2, [pc, #76]	; (80032cc <DMA_CalcBaseAndBitshift+0x68>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d909      	bls.n	80032a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58
 80032a4:	e007      	b.n	80032b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	aaaaaaab 	.word	0xaaaaaaab
 80032cc:	080099a0 	.word	0x080099a0

080032d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11f      	bne.n	800332a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d856      	bhi.n	800339e <DMA_CheckFifoParam+0xce>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <DMA_CheckFifoParam+0x28>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800331b 	.word	0x0800331b
 8003300:	08003309 	.word	0x08003309
 8003304:	0800339f 	.word	0x0800339f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d046      	beq.n	80033a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e043      	b.n	80033a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003322:	d140      	bne.n	80033a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003328:	e03d      	b.n	80033a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003332:	d121      	bne.n	8003378 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d837      	bhi.n	80033aa <DMA_CheckFifoParam+0xda>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <DMA_CheckFifoParam+0x70>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003351 	.word	0x08003351
 8003344:	08003357 	.word	0x08003357
 8003348:	08003351 	.word	0x08003351
 800334c:	08003369 	.word	0x08003369
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e030      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d025      	beq.n	80033ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003366:	e022      	b.n	80033ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003370:	d11f      	bne.n	80033b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003376:	e01c      	b.n	80033b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d903      	bls.n	8003386 <DMA_CheckFifoParam+0xb6>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d003      	beq.n	800338c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003384:	e018      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      break;
 800338a:	e015      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e00b      	b.n	80033b6 <DMA_CheckFifoParam+0xe6>
      break;
 800339e:	bf00      	nop
 80033a0:	e00a      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;
 80033a2:	bf00      	nop
 80033a4:	e008      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
 80033a8:	e006      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;
 80033aa:	bf00      	nop
 80033ac:	e004      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <DMA_CheckFifoParam+0xe8>
      break;
 80033b6:	bf00      	nop
    }
  } 
  
  return status; 
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop

080033c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06c      	b.n	80034b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2223      	movs	r2, #35	; 0x23
 80033e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fe f9d9 	bl	80017a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_ETH_Init+0xf4>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a30      	ldr	r2, [pc, #192]	; (80034bc <HAL_ETH_Init+0xf4>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_ETH_Init+0xf4>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_ETH_Init+0xf8>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <HAL_ETH_Init+0xf8>)
 8003414:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003418:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800341a:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_ETH_Init+0xf8>)
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	4927      	ldr	r1, [pc, #156]	; (80034c0 <HAL_ETH_Init+0xf8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_ETH_Init+0xf8>)
 800342a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7fe fd36 	bl	8001eb4 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800344a:	e011      	b.n	8003470 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800344c:	f7fe fd32 	bl	8001eb4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800345a:	d909      	bls.n	8003470 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2204      	movs	r2, #4
 8003460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	22e0      	movs	r2, #224	; 0xe0
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e021      	b.n	80034b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e4      	bne.n	800344c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f958 	bl	8003738 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f9ff 	bl	800388c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa55 	bl	800393e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	461a      	mov	r2, r3
 800349a:	2100      	movs	r1, #0
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f9bd 	bl	800381c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800

080034c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4b51      	ldr	r3, [pc, #324]	; (8003620 <ETH_SetMACConfig+0x15c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	7c1b      	ldrb	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <ETH_SetMACConfig+0x28>
 80034e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034ea:	e000      	b.n	80034ee <ETH_SetMACConfig+0x2a>
 80034ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	7c5b      	ldrb	r3, [r3, #17]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <ETH_SetMACConfig+0x38>
 80034f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034fa:	e000      	b.n	80034fe <ETH_SetMACConfig+0x3a>
 80034fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	7fdb      	ldrb	r3, [r3, #31]
 800350a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800350c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003512:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	7f92      	ldrb	r2, [r2, #30]
 8003518:	2a00      	cmp	r2, #0
 800351a:	d102      	bne.n	8003522 <ETH_SetMACConfig+0x5e>
 800351c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003520:	e000      	b.n	8003524 <ETH_SetMACConfig+0x60>
 8003522:	2200      	movs	r2, #0
                        macconf->Speed |
 8003524:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7f1b      	ldrb	r3, [r3, #28]
 800352a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800352c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003532:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	791b      	ldrb	r3, [r3, #4]
 8003538:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800353a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003542:	2a00      	cmp	r2, #0
 8003544:	d102      	bne.n	800354c <ETH_SetMACConfig+0x88>
 8003546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354a:	e000      	b.n	800354e <ETH_SetMACConfig+0x8a>
 800354c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800354e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	7bdb      	ldrb	r3, [r3, #15]
 8003554:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003556:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800355c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003564:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003566:	4313      	orrs	r3, r2
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800357e:	2001      	movs	r0, #1
 8003580:	f7fe fca4 	bl	8001ecc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f64f 7341 	movw	r3, #65345	; 0xff41
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	d101      	bne.n	80035b2 <ETH_SetMACConfig+0xee>
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	e000      	b.n	80035b4 <ETH_SetMACConfig+0xf0>
 80035b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80035c2:	2a01      	cmp	r2, #1
 80035c4:	d101      	bne.n	80035ca <ETH_SetMACConfig+0x106>
 80035c6:	2208      	movs	r2, #8
 80035c8:	e000      	b.n	80035cc <ETH_SetMACConfig+0x108>
 80035ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80035cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80035d4:	2a01      	cmp	r2, #1
 80035d6:	d101      	bne.n	80035dc <ETH_SetMACConfig+0x118>
 80035d8:	2204      	movs	r2, #4
 80035da:	e000      	b.n	80035de <ETH_SetMACConfig+0x11a>
 80035dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80035e6:	2a01      	cmp	r2, #1
 80035e8:	d101      	bne.n	80035ee <ETH_SetMACConfig+0x12a>
 80035ea:	2202      	movs	r2, #2
 80035ec:	e000      	b.n	80035f0 <ETH_SetMACConfig+0x12c>
 80035ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035f0:	4313      	orrs	r3, r2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003608:	2001      	movs	r0, #1
 800360a:	f7fe fc5f 	bl	8001ecc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	ff20810f 	.word	0xff20810f

08003624 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <ETH_SetDMAConfig+0x110>)
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7b1b      	ldrb	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <ETH_SetDMAConfig+0x2c>
 800364a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800364e:	e000      	b.n	8003652 <ETH_SetDMAConfig+0x2e>
 8003650:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7b5b      	ldrb	r3, [r3, #13]
 8003656:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003658:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	7f52      	ldrb	r2, [r2, #29]
 800365e:	2a00      	cmp	r2, #0
 8003660:	d102      	bne.n	8003668 <ETH_SetDMAConfig+0x44>
 8003662:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003666:	e000      	b.n	800366a <ETH_SetDMAConfig+0x46>
 8003668:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800366a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	7b9b      	ldrb	r3, [r3, #14]
 8003670:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003672:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	7f1b      	ldrb	r3, [r3, #28]
 800367e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003680:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	7f9b      	ldrb	r3, [r3, #30]
 8003686:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003688:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800368e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003696:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003698:	4313      	orrs	r3, r2
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a8:	461a      	mov	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7fe fc06 	bl	8001ecc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	461a      	mov	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	791b      	ldrb	r3, [r3, #4]
 80036d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80036de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80036ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800370a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003718:	2001      	movs	r0, #1
 800371a:	f7fe fbd7 	bl	8001ecc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	f8de3f23 	.word	0xf8de3f23

08003738 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0a6      	sub	sp, #152	; 0x98
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800374c:	2300      	movs	r3, #0
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003774:	2300      	movs	r3, #0
 8003776:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800377e:	2300      	movs	r3, #0
 8003780:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800379a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe86 	bl	80034c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80037bc:	2301      	movs	r3, #1
 80037be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003800:	2300      	movs	r3, #0
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff08 	bl	8003624 <ETH_SetDMAConfig>
}
 8003814:	bf00      	nop
 8003816:	3798      	adds	r7, #152	; 0x98
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3305      	adds	r3, #5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	3204      	adds	r2, #4
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <ETH_MACAddressConfig+0x68>)
 800383e:	4413      	add	r3, r2
 8003840:	461a      	mov	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3303      	adds	r3, #3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	061a      	lsls	r2, r3, #24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3302      	adds	r3, #2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <ETH_MACAddressConfig+0x6c>)
 800386e:	4413      	add	r3, r2
 8003870:	461a      	mov	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	6013      	str	r3, [r2, #0]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40028040 	.word	0x40028040
 8003888:	40028044 	.word	0x40028044

0800388c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e03e      	b.n	8003918 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	3206      	adds	r2, #6
 80038cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d80c      	bhi.n	80038fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68d9      	ldr	r1, [r3, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e004      	b.n	8003906 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d9bd      	bls.n	800389a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003930:	611a      	str	r2, [r3, #16]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e046      	b.n	80039da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6919      	ldr	r1, [r3, #16]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003988:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003990:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	3212      	adds	r2, #18
 80039a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d80c      	bhi.n	80039ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6919      	ldr	r1, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e004      	b.n	80039d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d9b5      	bls.n	800394c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	60da      	str	r2, [r3, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_FLASH_Program+0xa0>)
 8003a2c:	7e1b      	ldrb	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_FLASH_Program+0x1e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e03b      	b.n	8003aae <HAL_FLASH_Program+0x96>
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_FLASH_Program+0xa0>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a40:	f000 f870 	bl	8003b24 <FLASH_WaitForLastOperation>
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d12b      	bne.n	8003aa6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a54:	783b      	ldrb	r3, [r7, #0]
 8003a56:	4619      	mov	r1, r3
 8003a58:	68b8      	ldr	r0, [r7, #8]
 8003a5a:	f000 f91b 	bl	8003c94 <FLASH_Program_Byte>
 8003a5e:	e016      	b.n	8003a8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a66:	883b      	ldrh	r3, [r7, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	f000 f8ee 	bl	8003c4c <FLASH_Program_HalfWord>
 8003a70:	e00d      	b.n	8003a8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d105      	bne.n	8003a84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f000 f8c3 	bl	8003c08 <FLASH_Program_Word>
 8003a82:	e004      	b.n	8003a8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a88:	68b8      	ldr	r0, [r7, #8]
 8003a8a:	f000 f88b 	bl	8003ba4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a92:	f000 f847 	bl	8003b24 <FLASH_WaitForLastOperation>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <HAL_FLASH_Program+0xa4>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <HAL_FLASH_Program+0xa4>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <HAL_FLASH_Program+0xa0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000a08 	.word	0x20000a08
 8003abc:	40023c00 	.word	0x40023c00

08003ac0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_FLASH_Unlock+0x38>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0b      	bge.n	8003aea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_FLASH_Unlock+0x38>)
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_FLASH_Unlock+0x3c>)
 8003ad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_FLASH_Unlock+0x38>)
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_FLASH_Unlock+0x40>)
 8003adc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_FLASH_Unlock+0x38>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da01      	bge.n	8003aea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003aea:	79fb      	ldrb	r3, [r7, #7]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40023c00 	.word	0x40023c00
 8003afc:	45670123 	.word	0x45670123
 8003b00:	cdef89ab 	.word	0xcdef89ab

08003b04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_FLASH_Lock+0x1c>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_FLASH_Lock+0x1c>)
 8003b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <FLASH_WaitForLastOperation+0x78>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b36:	f7fe f9bd 	bl	8001eb4 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b3c:	e010      	b.n	8003b60 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d00c      	beq.n	8003b60 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <FLASH_WaitForLastOperation+0x38>
 8003b4c:	f7fe f9b2 	bl	8001eb4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d201      	bcs.n	8003b60 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e019      	b.n	8003b94 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <FLASH_WaitForLastOperation+0x7c>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e8      	bne.n	8003b3e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <FLASH_WaitForLastOperation+0x7c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <FLASH_WaitForLastOperation+0x7c>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <FLASH_WaitForLastOperation+0x7c>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b8a:	f000 f8a5 	bl	8003cd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
  
}  
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000a08 	.word	0x20000a08
 8003ba0:	40023c00 	.word	0x40023c00

08003ba4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bc2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <FLASH_Program_DoubleWord+0x60>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003bda:	f3bf 8f6f 	isb	sy
}
 8003bde:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	000a      	movs	r2, r1
 8003bee:	2300      	movs	r3, #0
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	3104      	adds	r1, #4
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <FLASH_Program_Word+0x40>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40023c00 	.word	0x40023c00

08003c4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <FLASH_Program_HalfWord+0x44>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	801a      	strh	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40023c00 	.word	0x40023c00

08003c94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <FLASH_Program_Byte+0x40>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	701a      	strb	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023c00 	.word	0x40023c00

08003cd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f043 0310 	orr.w	r3, r3, #16
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003cf2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f043 0308 	orr.w	r3, r3, #8
 8003d0e:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d12:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d14:	2220      	movs	r2, #32
 8003d16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d72:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f043 0320 	orr.w	r3, r3, #32
 8003d88:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <FLASH_SetErrorCode+0xc8>)
 8003d8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <FLASH_SetErrorCode+0xc4>)
 8003d8e:	2202      	movs	r2, #2
 8003d90:	60da      	str	r2, [r3, #12]
  }
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40023c00 	.word	0x40023c00
 8003da0:	20000a08 	.word	0x20000a08

08003da4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_FLASHEx_Erase+0xdc>)
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_FLASHEx_Erase+0x1e>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e05a      	b.n	8003e78 <HAL_FLASHEx_Erase+0xd4>
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_FLASHEx_Erase+0xdc>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dcc:	f7ff feaa 	bl	8003b24 <FLASH_WaitForLastOperation>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d14a      	bne.n	8003e70 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d117      	bne.n	8003e1a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 f846 	bl	8003e88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e00:	f7ff fe90 	bl	8003b24 <FLASH_WaitForLastOperation>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_FLASHEx_Erase+0xe0>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_FLASHEx_Erase+0xe0>)
 8003e0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	6113      	str	r3, [r2, #16]
 8003e18:	e028      	b.n	8003e6c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	e01c      	b.n	8003e5c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4619      	mov	r1, r3
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f000 f866 	bl	8003efc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e34:	f7ff fe76 	bl	8003b24 <FLASH_WaitForLastOperation>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_FLASHEx_Erase+0xe0>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <HAL_FLASHEx_Erase+0xe0>)
 8003e42:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003e46:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	601a      	str	r2, [r3, #0]
          break;
 8003e54:	e00a      	b.n	8003e6c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3da      	bcc.n	8003e22 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e6c:	f000 f894 	bl	8003f98 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_FLASHEx_Erase+0xdc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	761a      	strb	r2, [r3, #24]

  return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000a08 	.word	0x20000a08
 8003e84:	40023c00 	.word	0x40023c00

08003e88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d108      	bne.n	8003eb8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6113      	str	r3, [r2, #16]
 8003eb6:	e00f      	b.n	8003ed8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d106      	bne.n	8003ecc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	6113      	str	r3, [r2, #16]
 8003eca:	e005      	b.n	8003ed8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <FLASH_MassErase+0x70>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6113      	str	r3, [r2, #16]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023c00 	.word	0x40023c00

08003efc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e010      	b.n	8003f3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d103      	bne.n	8003f26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e009      	b.n	8003f3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d103      	bne.n	8003f34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e002      	b.n	8003f3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b0b      	cmp	r3, #11
 8003f3e:	d902      	bls.n	8003f46 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	490f      	ldr	r1, [pc, #60]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <FLASH_Erase_Sector+0x98>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	6113      	str	r3, [r2, #16]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40023c00 	.word	0x40023c00

08003f98 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d017      	beq.n	8004014 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003ff6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <FLASH_FlushCaches+0x88>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <FLASH_FlushCaches+0x88>)
 8004002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004006:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <FLASH_FlushCaches+0x88>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <FLASH_FlushCaches+0x88>)
 800400e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004012:	6013      	str	r3, [r2, #0]
  }
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e177      	b.n	8004330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	f040 8166 	bne.w	800432a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d005      	beq.n	8004076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004072:	2b02      	cmp	r3, #2
 8004074:	d130      	bne.n	80040d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ac:	2201      	movs	r2, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0201 	and.w	r2, r3, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d017      	beq.n	8004114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d123      	bne.n	8004168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80c0 	beq.w	800432a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	4b66      	ldr	r3, [pc, #408]	; (8004348 <HAL_GPIO_Init+0x324>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4a65      	ldr	r2, [pc, #404]	; (8004348 <HAL_GPIO_Init+0x324>)
 80041b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ba:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_GPIO_Init+0x324>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041c6:	4a61      	ldr	r2, [pc, #388]	; (800434c <HAL_GPIO_Init+0x328>)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	3302      	adds	r3, #2
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_GPIO_Init+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d037      	beq.n	8004262 <HAL_GPIO_Init+0x23e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a57      	ldr	r2, [pc, #348]	; (8004354 <HAL_GPIO_Init+0x330>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d031      	beq.n	800425e <HAL_GPIO_Init+0x23a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a56      	ldr	r2, [pc, #344]	; (8004358 <HAL_GPIO_Init+0x334>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d02b      	beq.n	800425a <HAL_GPIO_Init+0x236>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a55      	ldr	r2, [pc, #340]	; (800435c <HAL_GPIO_Init+0x338>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d025      	beq.n	8004256 <HAL_GPIO_Init+0x232>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a54      	ldr	r2, [pc, #336]	; (8004360 <HAL_GPIO_Init+0x33c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01f      	beq.n	8004252 <HAL_GPIO_Init+0x22e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a53      	ldr	r2, [pc, #332]	; (8004364 <HAL_GPIO_Init+0x340>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d019      	beq.n	800424e <HAL_GPIO_Init+0x22a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_GPIO_Init+0x344>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_GPIO_Init+0x226>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_GPIO_Init+0x348>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00d      	beq.n	8004246 <HAL_GPIO_Init+0x222>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a50      	ldr	r2, [pc, #320]	; (8004370 <HAL_GPIO_Init+0x34c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d007      	beq.n	8004242 <HAL_GPIO_Init+0x21e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a4f      	ldr	r2, [pc, #316]	; (8004374 <HAL_GPIO_Init+0x350>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_GPIO_Init+0x21a>
 800423a:	2309      	movs	r3, #9
 800423c:	e012      	b.n	8004264 <HAL_GPIO_Init+0x240>
 800423e:	230a      	movs	r3, #10
 8004240:	e010      	b.n	8004264 <HAL_GPIO_Init+0x240>
 8004242:	2308      	movs	r3, #8
 8004244:	e00e      	b.n	8004264 <HAL_GPIO_Init+0x240>
 8004246:	2307      	movs	r3, #7
 8004248:	e00c      	b.n	8004264 <HAL_GPIO_Init+0x240>
 800424a:	2306      	movs	r3, #6
 800424c:	e00a      	b.n	8004264 <HAL_GPIO_Init+0x240>
 800424e:	2305      	movs	r3, #5
 8004250:	e008      	b.n	8004264 <HAL_GPIO_Init+0x240>
 8004252:	2304      	movs	r3, #4
 8004254:	e006      	b.n	8004264 <HAL_GPIO_Init+0x240>
 8004256:	2303      	movs	r3, #3
 8004258:	e004      	b.n	8004264 <HAL_GPIO_Init+0x240>
 800425a:	2302      	movs	r3, #2
 800425c:	e002      	b.n	8004264 <HAL_GPIO_Init+0x240>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_GPIO_Init+0x240>
 8004262:	2300      	movs	r3, #0
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	f002 0203 	and.w	r2, r2, #3
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	4093      	lsls	r3, r2
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004274:	4935      	ldr	r1, [pc, #212]	; (800434c <HAL_GPIO_Init+0x328>)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	3302      	adds	r3, #2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004282:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_GPIO_Init+0x354>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042a6:	4a34      	ldr	r2, [pc, #208]	; (8004378 <HAL_GPIO_Init+0x354>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <HAL_GPIO_Init+0x354>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d0:	4a29      	ldr	r2, [pc, #164]	; (8004378 <HAL_GPIO_Init+0x354>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042d6:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_GPIO_Init+0x354>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_GPIO_Init+0x354>)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_GPIO_Init+0x354>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <HAL_GPIO_Init+0x354>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3301      	adds	r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	f67f ae84 	bls.w	8004040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	40013800 	.word	0x40013800
 8004350:	40020000 	.word	0x40020000
 8004354:	40020400 	.word	0x40020400
 8004358:	40020800 	.word	0x40020800
 800435c:	40020c00 	.word	0x40020c00
 8004360:	40021000 	.word	0x40021000
 8004364:	40021400 	.word	0x40021400
 8004368:	40021800 	.word	0x40021800
 800436c:	40021c00 	.word	0x40021c00
 8004370:	40022000 	.word	0x40022000
 8004374:	40022400 	.word	0x40022400
 8004378:	40013c00 	.word	0x40013c00

0800437c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e001      	b.n	800439e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
 80043b8:	4613      	mov	r3, r2
 80043ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043bc:	787b      	ldrb	r3, [r7, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043c8:	e003      	b.n	80043d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	041a      	lsls	r2, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	619a      	str	r2, [r3, #24]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4013      	ands	r3, r2
 80043f6:	041a      	lsls	r2, r3, #16
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	43d9      	mvns	r1, r3
 80043fc:	887b      	ldrh	r3, [r7, #2]
 80043fe:	400b      	ands	r3, r1
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd f872 	bl	800151c <HAL_GPIO_EXTI_Callback>
  }
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013c00 	.word	0x40013c00

08004444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e12b      	b.n	80046ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd fa60 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a8:	f001 fb4e 	bl	8005b48 <HAL_RCC_GetPCLK1Freq>
 80044ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a81      	ldr	r2, [pc, #516]	; (80046b8 <HAL_I2C_Init+0x274>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d807      	bhi.n	80044c8 <HAL_I2C_Init+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a80      	ldr	r2, [pc, #512]	; (80046bc <HAL_I2C_Init+0x278>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	bf94      	ite	ls
 80044c0:	2301      	movls	r3, #1
 80044c2:	2300      	movhi	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e006      	b.n	80044d6 <HAL_I2C_Init+0x92>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a7d      	ldr	r2, [pc, #500]	; (80046c0 <HAL_I2C_Init+0x27c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0e7      	b.n	80046ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a78      	ldr	r2, [pc, #480]	; (80046c4 <HAL_I2C_Init+0x280>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a6a      	ldr	r2, [pc, #424]	; (80046b8 <HAL_I2C_Init+0x274>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d802      	bhi.n	8004518 <HAL_I2C_Init+0xd4>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3301      	adds	r3, #1
 8004516:	e009      	b.n	800452c <HAL_I2C_Init+0xe8>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <HAL_I2C_Init+0x284>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	3301      	adds	r3, #1
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800453e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	495c      	ldr	r1, [pc, #368]	; (80046b8 <HAL_I2C_Init+0x274>)
 8004548:	428b      	cmp	r3, r1
 800454a:	d819      	bhi.n	8004580 <HAL_I2C_Init+0x13c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e59      	subs	r1, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fbb1 f3f3 	udiv	r3, r1, r3
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004560:	400b      	ands	r3, r1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_I2C_Init+0x138>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e59      	subs	r1, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fbb1 f3f3 	udiv	r3, r1, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	e051      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 800457c:	2304      	movs	r3, #4
 800457e:	e04f      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d111      	bne.n	80045ac <HAL_I2C_Init+0x168>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1e58      	subs	r0, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	440b      	add	r3, r1
 8004596:	fbb0 f3f3 	udiv	r3, r0, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e012      	b.n	80045d2 <HAL_I2C_Init+0x18e>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e58      	subs	r0, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	0099      	lsls	r1, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Init+0x196>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e022      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <HAL_I2C_Init+0x1bc>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1e58      	subs	r0, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	440b      	add	r3, r1
 80045f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	e00f      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	0099      	lsls	r1, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	fbb0 f3f3 	udiv	r3, r0, r3
 8004616:	3301      	adds	r3, #1
 8004618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6809      	ldr	r1, [r1, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800464e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6911      	ldr	r1, [r2, #16]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68d2      	ldr	r2, [r2, #12]
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	000186a0 	.word	0x000186a0
 80046bc:	001e847f 	.word	0x001e847f
 80046c0:	003d08ff 	.word	0x003d08ff
 80046c4:	431bde83 	.word	0x431bde83
 80046c8:	10624dd3 	.word	0x10624dd3

080046cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	461a      	mov	r2, r3
 80046d8:	460b      	mov	r3, r1
 80046da:	817b      	strh	r3, [r7, #10]
 80046dc:	4613      	mov	r3, r2
 80046de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7fd fbe8 	bl	8001eb4 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	f040 80e0 	bne.w	80048b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2319      	movs	r3, #25
 80046fa:	2201      	movs	r2, #1
 80046fc:	4970      	ldr	r1, [pc, #448]	; (80048c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fa92 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	e0d3      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_I2C_Master_Transmit+0x50>
 8004718:	2302      	movs	r3, #2
 800471a:	e0cc      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d007      	beq.n	8004742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2210      	movs	r2, #16
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	893a      	ldrh	r2, [r7, #8]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a50      	ldr	r2, [pc, #320]	; (80048c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004784:	8979      	ldrh	r1, [r7, #10]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f9ca 	bl	8004b24 <I2C_MasterRequestWrite>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e08d      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047b0:	e066      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	6a39      	ldr	r1, [r7, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb0c 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d107      	bne.n	80047da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06b      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b04      	cmp	r3, #4
 800481a:	d11b      	bne.n	8004854 <HAL_I2C_Master_Transmit+0x188>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	d017      	beq.n	8004854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	6a39      	ldr	r1, [r7, #32]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fafc 	bl	8004e56 <I2C_WaitOnBTFFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b04      	cmp	r3, #4
 800486a:	d107      	bne.n	800487c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e01a      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d194      	bne.n	80047b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	00100002 	.word	0x00100002
 80048c4:	ffff0000 	.word	0xffff0000

080048c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7fd faec 	bl	8001eb4 <HAL_GetTick>
 80048dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 8111 	bne.w	8004b12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2319      	movs	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	4988      	ldr	r1, [pc, #544]	; (8004b1c <HAL_I2C_IsDeviceReady+0x254>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f994 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
 8004908:	e104      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_IsDeviceReady+0x50>
 8004914:	2302      	movs	r3, #2
 8004916:	e0fd      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d007      	beq.n	800493e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2224      	movs	r2, #36	; 0x24
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a70      	ldr	r2, [pc, #448]	; (8004b20 <HAL_I2C_IsDeviceReady+0x258>)
 8004960:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004970:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2200      	movs	r2, #0
 800497a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f952 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004998:	d103      	bne.n	80049a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0b6      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd fa7d 	bl	8001eb4 <HAL_GetTick>
 80049ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049ea:	e025      	b.n	8004a38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd fa62 	bl	8001eb4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <HAL_I2C_IsDeviceReady+0x13a>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	22a0      	movs	r2, #160	; 0xa0
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2ba0      	cmp	r3, #160	; 0xa0
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_IsDeviceReady+0x188>
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <HAL_I2C_IsDeviceReady+0x188>
 8004a4a:	7dbb      	ldrb	r3, [r7, #22]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0cd      	beq.n	80049ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d129      	bne.n	8004aba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2319      	movs	r3, #25
 8004a92:	2201      	movs	r2, #1
 8004a94:	4921      	ldr	r1, [pc, #132]	; (8004b1c <HAL_I2C_IsDeviceReady+0x254>)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f8c6 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e036      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e02c      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2319      	movs	r3, #25
 8004ada:	2201      	movs	r2, #1
 8004adc:	490f      	ldr	r1, [pc, #60]	; (8004b1c <HAL_I2C_IsDeviceReady+0x254>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f8a2 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e012      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3301      	adds	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	f4ff af32 	bcc.w	8004962 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	00100002 	.word	0x00100002
 8004b20:	ffff0000 	.word	0xffff0000

08004b24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	460b      	mov	r3, r1
 8004b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d006      	beq.n	8004b4e <I2C_MasterRequestWrite+0x2a>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d003      	beq.n	8004b4e <I2C_MasterRequestWrite+0x2a>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4c:	d108      	bne.n	8004b60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e00b      	b.n	8004b78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	2b12      	cmp	r3, #18
 8004b66:	d107      	bne.n	8004b78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f84f 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	d103      	bne.n	8004ba8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e035      	b.n	8004c18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d108      	bne.n	8004bc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	e01b      	b.n	8004c00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bc8:	897b      	ldrh	r3, [r7, #10]
 8004bca:	11db      	asrs	r3, r3, #7
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 0306 	and.w	r3, r3, #6
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f063 030f 	orn	r3, r3, #15
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	490e      	ldr	r1, [pc, #56]	; (8004c20 <I2C_MasterRequestWrite+0xfc>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f875 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e010      	b.n	8004c18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4907      	ldr	r1, [pc, #28]	; (8004c24 <I2C_MasterRequestWrite+0x100>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f865 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	00010008 	.word	0x00010008
 8004c24:	00010002 	.word	0x00010002

08004c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c38:	e025      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d021      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fd f937 	bl	8001eb4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e023      	b.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10d      	bne.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	e00c      	b.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b6      	beq.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce4:	e051      	b.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d123      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e046      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d021      	beq.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fd f8b5 	bl	8001eb4 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e020      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d10c      	bne.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e00b      	b.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d18d      	bne.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de0:	e02d      	b.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f878 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02d      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d021      	beq.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd f85b 	bl	8001eb4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d116      	bne.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d1ca      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e62:	e02d      	b.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f837 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e02d      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d021      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7fd f81a 	bl	8001eb4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d116      	bne.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d1ca      	bne.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d11b      	bne.n	8004f28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	f043 0204 	orr.w	r2, r3, #4
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d129      	bne.n	8004fa0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0210 	bic.w	r2, r2, #16
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d12a      	bne.n	800501e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
 8004fea:	f023 030f 	bic.w	r3, r3, #15
 8004fee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	89fa      	ldrh	r2, [r7, #14]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502e:	b08f      	sub	sp, #60	; 0x3c
 8005030:	af0a      	add	r7, sp, #40	; 0x28
 8005032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e10f      	b.n	800525e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc fd45 	bl	8001ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f002 ff40 	bl	8007f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	687e      	ldr	r6, [r7, #4]
 800508a:	466d      	mov	r5, sp
 800508c:	f106 0410 	add.w	r4, r6, #16
 8005090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800509c:	e885 0003 	stmia.w	r5, {r0, r1}
 80050a0:	1d33      	adds	r3, r6, #4
 80050a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a4:	6838      	ldr	r0, [r7, #0]
 80050a6:	f002 fecb 	bl	8007e40 <USB_CoreInit>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0d0      	b.n	800525e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f002 ff2e 	bl	8007f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
 80050cc:	e04a      	b.n	8005164 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	333d      	adds	r3, #61	; 0x3d
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	333c      	adds	r3, #60	; 0x3c
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	b298      	uxth	r0, r3
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3344      	adds	r3, #68	; 0x44
 800510a:	4602      	mov	r2, r0
 800510c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3340      	adds	r3, #64	; 0x40
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3348      	adds	r3, #72	; 0x48
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005136:	7bfa      	ldrb	r2, [r7, #15]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	334c      	adds	r3, #76	; 0x4c
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3354      	adds	r3, #84	; 0x54
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	3301      	adds	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3af      	bcc.n	80050ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
 8005172:	e044      	b.n	80051fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800519c:	7bfa      	ldrb	r2, [r7, #15]
 800519e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	3301      	adds	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
 80051fe:	7bfa      	ldrb	r2, [r7, #15]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3b5      	bcc.n	8005174 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	687e      	ldr	r6, [r7, #4]
 8005210:	466d      	mov	r5, sp
 8005212:	f106 0410 	add.w	r4, r6, #16
 8005216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800521a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800521c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800521e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005222:	e885 0003 	stmia.w	r5, {r0, r1}
 8005226:	1d33      	adds	r3, r6, #4
 8005228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522a:	6838      	ldr	r0, [r7, #0]
 800522c:	f002 fec6 	bl	8007fbc <USB_DevInit>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e00d      	b.n	800525e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f003 f891 	bl	800837e <USB_DevDisconnect>

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e267      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005286:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00c      	beq.n	80052ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b85      	ldr	r3, [pc, #532]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529a:	2b08      	cmp	r3, #8
 800529c:	d112      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529e:	4b82      	ldr	r3, [pc, #520]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	4b7e      	ldr	r3, [pc, #504]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05b      	beq.n	8005370 <HAL_RCC_OscConfig+0x108>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d157      	bne.n	8005370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e242      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a75      	ldr	r2, [pc, #468]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e01d      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6f      	ldr	r2, [pc, #444]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b6d      	ldr	r3, [pc, #436]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6c      	ldr	r2, [pc, #432]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 8005300:	4b69      	ldr	r3, [pc, #420]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a68      	ldr	r2, [pc, #416]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a65      	ldr	r2, [pc, #404]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fc fdc8 	bl	8001eb4 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005328:	f7fc fdc4 	bl	8001eb4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e207      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0xc0>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fc fdb4 	bl	8001eb4 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7fc fdb0 	bl	8001eb4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e1f3      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0xe8>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d063      	beq.n	8005446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005392:	2b08      	cmp	r3, #8
 8005394:	d11c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005396:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d116      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e1c7      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ba:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4937      	ldr	r1, [pc, #220]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	e03a      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d020      	beq.n	800541a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x244>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fc fd69 	bl	8001eb4 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fc fd65 	bl	8001eb4 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e1a8      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4925      	ldr	r1, [pc, #148]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	e015      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCC_OscConfig+0x244>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fc fd48 	bl	8001eb4 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005428:	f7fc fd44 	bl	8001eb4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e187      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d036      	beq.n	80054c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <HAL_RCC_OscConfig+0x248>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fc fd28 	bl	8001eb4 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005468:	f7fc fd24 	bl	8001eb4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e167      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x200>
 8005486:	e01b      	b.n	80054c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <HAL_RCC_OscConfig+0x248>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548e:	f7fc fd11 	bl	8001eb4 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005494:	e00e      	b.n	80054b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005496:	f7fc fd0d 	bl	8001eb4 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d907      	bls.n	80054b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e150      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470000 	.word	0x42470000
 80054b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ea      	bne.n	8005496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8097 	beq.w	80055fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d2:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ec:	6413      	str	r3, [r2, #64]	; 0x40
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fe:	4b77      	ldr	r3, [pc, #476]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d118      	bne.n	800553c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550a:	4b74      	ldr	r3, [pc, #464]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a73      	ldr	r2, [pc, #460]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005516:	f7fc fccd 	bl	8001eb4 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551e:	f7fc fcc9 	bl	8001eb4 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e10c      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x2ea>
 8005544:	4b64      	ldr	r3, [pc, #400]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a63      	ldr	r2, [pc, #396]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	e01c      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b05      	cmp	r3, #5
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x30c>
 800555a:	4b5f      	ldr	r3, [pc, #380]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a5e      	ldr	r2, [pc, #376]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005574:	4b58      	ldr	r3, [pc, #352]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a57      	ldr	r2, [pc, #348]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a54      	ldr	r2, [pc, #336]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fc fc8e 	bl	8001eb4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fc fc8a 	bl	8001eb4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0cb      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	4b49      	ldr	r3, [pc, #292]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <HAL_RCC_OscConfig+0x334>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fc fc78 	bl	8001eb4 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c6:	e00a      	b.n	80055de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c8:	f7fc fc74 	bl	8001eb4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0b5      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055de:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ee      	bne.n	80055c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80a1 	beq.w	8005748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b08      	cmp	r3, #8
 8005610:	d05c      	beq.n	80056cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d141      	bne.n	800569e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fc fc48 	bl	8001eb4 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7fc fc44 	bl	8001eb4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e087      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005676:	f7fc fc1d 	bl	8001eb4 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567e:	f7fc fc19 	bl	8001eb4 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e05c      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x416>
 800569c:	e054      	b.n	8005748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fc fc06 	bl	8001eb4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fc fc02 	bl	8001eb4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e045      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x444>
 80056ca:	e03d      	b.n	8005748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e038      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40007000 	.word	0x40007000
 80056e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x4ec>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d028      	beq.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d121      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d11a      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800571a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800571c:	4293      	cmp	r3, r2
 800571e:	d111      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	3b01      	subs	r3, #1
 800572e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d107      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800

08005758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0cc      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800576c:	4b68      	ldr	r3, [pc, #416]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d90c      	bls.n	8005794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b65      	ldr	r3, [pc, #404]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0b8      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057ac:	4b59      	ldr	r3, [pc, #356]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a58      	ldr	r2, [pc, #352]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c4:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a52      	ldr	r2, [pc, #328]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	494d      	ldr	r1, [pc, #308]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d044      	beq.n	8005878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d119      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d003      	beq.n	8005816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005812:	2b03      	cmp	r3, #3
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e06f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	4b3b      	ldr	r3, [pc, #236]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e067      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 0203 	bic.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4934      	ldr	r1, [pc, #208]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005848:	f7fc fb34 	bl	8001eb4 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fc fb30 	bl	8001eb4 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e04f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d1eb      	bne.n	8005850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d20c      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b22      	ldr	r3, [pc, #136]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b20      	ldr	r3, [pc, #128]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e032      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4916      	ldr	r1, [pc, #88]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	490e      	ldr	r1, [pc, #56]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058de:	f000 f821 	bl	8005924 <HAL_RCC_GetSysClockFreq>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	490a      	ldr	r1, [pc, #40]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 80058f0:	5ccb      	ldrb	r3, [r1, r3]
 80058f2:	fa22 f303 	lsr.w	r3, r2, r3
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fc fa94 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023c00 	.word	0x40023c00
 8005914:	40023800 	.word	0x40023800
 8005918:	08009988 	.word	0x08009988
 800591c:	20000014 	.word	0x20000014
 8005920:	20000018 	.word	0x20000018

08005924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005928:	b094      	sub	sp, #80	; 0x50
 800592a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	647b      	str	r3, [r7, #68]	; 0x44
 8005930:	2300      	movs	r3, #0
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005934:	2300      	movs	r3, #0
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800593c:	4b79      	ldr	r3, [pc, #484]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
 8005944:	2b08      	cmp	r3, #8
 8005946:	d00d      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x40>
 8005948:	2b08      	cmp	r3, #8
 800594a:	f200 80e1 	bhi.w	8005b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x34>
 8005952:	2b04      	cmp	r3, #4
 8005954:	d003      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0x3a>
 8005956:	e0db      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b73      	ldr	r3, [pc, #460]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800595a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800595c:	e0db      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595e:	4b73      	ldr	r3, [pc, #460]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005962:	e0d8      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005964:	4b6f      	ldr	r3, [pc, #444]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800596c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596e:	4b6d      	ldr	r3, [pc, #436]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d063      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597a:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	099b      	lsrs	r3, r3, #6
 8005980:	2200      	movs	r2, #0
 8005982:	63bb      	str	r3, [r7, #56]	; 0x38
 8005984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	2300      	movs	r3, #0
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
 8005992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f04f 0000 	mov.w	r0, #0
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	0159      	lsls	r1, r3, #5
 80059a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a8:	0150      	lsls	r0, r2, #5
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4621      	mov	r1, r4
 80059b0:	1a51      	subs	r1, r2, r1
 80059b2:	6139      	str	r1, [r7, #16]
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059c8:	4659      	mov	r1, fp
 80059ca:	018b      	lsls	r3, r1, #6
 80059cc:	4651      	mov	r1, sl
 80059ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059d2:	4651      	mov	r1, sl
 80059d4:	018a      	lsls	r2, r1, #6
 80059d6:	4651      	mov	r1, sl
 80059d8:	ebb2 0801 	subs.w	r8, r2, r1
 80059dc:	4659      	mov	r1, fp
 80059de:	eb63 0901 	sbc.w	r9, r3, r1
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f6:	4690      	mov	r8, r2
 80059f8:	4699      	mov	r9, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	eb18 0303 	adds.w	r3, r8, r3
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	462b      	mov	r3, r5
 8005a04:	eb49 0303 	adc.w	r3, r9, r3
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a16:	4629      	mov	r1, r5
 8005a18:	024b      	lsls	r3, r1, #9
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a20:	4621      	mov	r1, r4
 8005a22:	024a      	lsls	r2, r1, #9
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a34:	f7fa fc34 	bl	80002a0 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a40:	e058      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a42:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
 8005a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	f04f 0000 	mov.w	r0, #0
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6e:	0150      	lsls	r0, r2, #5
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4641      	mov	r1, r8
 8005a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a94:	ebb2 040a 	subs.w	r4, r2, sl
 8005a98:	eb63 050b 	sbc.w	r5, r3, fp
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	eb45 0303 	adc.w	r3, r5, r3
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aca:	4629      	mov	r1, r5
 8005acc:	028b      	lsls	r3, r1, #10
 8005ace:	4621      	mov	r1, r4
 8005ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	028a      	lsls	r2, r1, #10
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	61fa      	str	r2, [r7, #28]
 8005ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae8:	f7fa fbda 	bl	80002a0 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4613      	mov	r3, r2
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	3301      	adds	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3750      	adds	r7, #80	; 0x50
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800
 8005b28:	00f42400 	.word	0x00f42400
 8005b2c:	007a1200 	.word	0x007a1200

08005b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b34:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b36:	681b      	ldr	r3, [r3, #0]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000014 	.word	0x20000014

08005b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b4c:	f7ff fff0 	bl	8005b30 <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	0a9b      	lsrs	r3, r3, #10
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4903      	ldr	r1, [pc, #12]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	08009998 	.word	0x08009998

08005b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b74:	f7ff ffdc 	bl	8005b30 <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	0b5b      	lsrs	r3, r3, #13
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4903      	ldr	r1, [pc, #12]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40023800 	.word	0x40023800
 8005b94:	08009998 	.word	0x08009998

08005b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d075      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bcc:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bd2:	f7fc f96f 	bl	8001eb4 <HAL_GetTick>
 8005bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bd8:	e008      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bda:	f7fc f96b 	bl	8001eb4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e189      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bec:	4b8a      	ldr	r3, [pc, #552]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f0      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	019a      	lsls	r2, r3, #6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	071b      	lsls	r3, r3, #28
 8005c10:	4981      	ldr	r1, [pc, #516]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c24:	4b7c      	ldr	r3, [pc, #496]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2a:	0f1b      	lsrs	r3, r3, #28
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	019a      	lsls	r2, r3, #6
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	071b      	lsls	r3, r3, #28
 8005c44:	4974      	ldr	r1, [pc, #464]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c4c:	4b72      	ldr	r3, [pc, #456]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c52:	f023 021f 	bic.w	r2, r3, #31
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	496e      	ldr	r1, [pc, #440]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00d      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	019a      	lsls	r2, r3, #6
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	071b      	lsls	r3, r3, #28
 8005c84:	4964      	ldr	r1, [pc, #400]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c8c:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c92:	f7fc f90f 	bl	8001eb4 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fc f90b 	bl	8001eb4 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e129      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cac:	4b5a      	ldr	r3, [pc, #360]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d079      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cd0:	4b52      	ldr	r3, [pc, #328]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd6:	f7fc f8ed 	bl	8001eb4 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cde:	f7fc f8e9 	bl	8001eb4 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e107      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cf0:	4b49      	ldr	r3, [pc, #292]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfc:	d0ef      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d0a:	4b43      	ldr	r3, [pc, #268]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	0f1b      	lsrs	r3, r3, #28
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	019a      	lsls	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	431a      	orrs	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	493b      	ldr	r1, [pc, #236]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d32:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	4934      	ldr	r1, [pc, #208]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01e      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d58:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	0e1b      	lsrs	r3, r3, #24
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	019a      	lsls	r2, r3, #6
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	071b      	lsls	r3, r3, #28
 8005d78:	4927      	ldr	r1, [pc, #156]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	4922      	ldr	r1, [pc, #136]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d96:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9c:	f7fc f88a 	bl	8001eb4 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005da4:	f7fc f886 	bl	8001eb4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e0a4      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc2:	d1ef      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 808b 	beq.w	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4a0f      	ldr	r2, [pc, #60]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	; 0x40
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dfa:	f7fc f85b 	bl	8001eb4 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e00:	e010      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fc f857 	bl	8001eb4 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d909      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e075      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005e14:	42470068 	.word	0x42470068
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	42470070 	.word	0x42470070
 8005e20:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e24:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0e8      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e30:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02f      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d028      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e5e:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e6a:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d114      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e76:	f7fc f81d 	bl	8001eb4 <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fc f819 	bl	8001eb4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e035      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e94:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ee      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eac:	d10d      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec2:	4912      	ldr	r1, [pc, #72]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	608b      	str	r3, [r1, #8]
 8005ec8:	e005      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ed4:	6093      	str	r3, [r2, #8]
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee2:	490a      	ldr	r1, [pc, #40]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005efc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	42470e40 	.word	0x42470e40
 8005f14:	424711e0 	.word	0x424711e0

08005f18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e066      	b.n	8005ffc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7f5b      	ldrb	r3, [r3, #29]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fd3e 	bl	80019c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	22ca      	movs	r2, #202	; 0xca
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2253      	movs	r2, #83	; 0x53
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa45 	bl	80063ea <RTC_EnterInitMode>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d12c      	bne.n	8005fc4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6899      	ldr	r1, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68d2      	ldr	r2, [r2, #12]
 8005fa4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6919      	ldr	r1, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	041a      	lsls	r2, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa4c 	bl	8006458 <RTC_ExitInitMode>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d113      	bne.n	8005ff2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	7f1b      	ldrb	r3, [r3, #28]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_RTC_SetTime+0x1c>
 800601c:	2302      	movs	r3, #2
 800601e:	e087      	b.n	8006130 <HAL_RTC_SetTime+0x12c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2202      	movs	r2, #2
 800602a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d126      	bne.n	8006080 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fa29 	bl	80064a2 <RTC_ByteToBcd2>
 8006050:	4603      	mov	r3, r0
 8006052:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fa22 	bl	80064a2 <RTC_ByteToBcd2>
 800605e:	4603      	mov	r3, r0
 8006060:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006062:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	789b      	ldrb	r3, [r3, #2]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fa1a 	bl	80064a2 <RTC_ByteToBcd2>
 800606e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006070:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e018      	b.n	80060b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060a0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	78db      	ldrb	r3, [r3, #3]
 80060ac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ca      	movs	r2, #202	; 0xca
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2253      	movs	r2, #83	; 0x53
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f991 	bl	80063ea <RTC_EnterInitMode>
 80060c8:	4603      	mov	r3, r0
 80060ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060cc:	7cfb      	ldrb	r3, [r7, #19]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d120      	bne.n	8006114 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6899      	ldr	r1, [r3, #8]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f9a4 	bl	8006458 <RTC_ExitInitMode>
 8006110:	4603      	mov	r3, r0
 8006112:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	22ff      	movs	r2, #255	; 0xff
 8006126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	771a      	strb	r2, [r3, #28]

  return status;
 800612e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}

08006138 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800616a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800616e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	0d9b      	lsrs	r3, r3, #22
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11a      	bne.n	80061ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f98f 	bl	80064dc <RTC_Bcd2ToByte>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f986 	bl	80064dc <RTC_Bcd2ToByte>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	789b      	ldrb	r3, [r3, #2]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 f97d 	bl	80064dc <RTC_Bcd2ToByte>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	7f1b      	ldrb	r3, [r3, #28]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_RTC_SetDate+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e071      	b.n	80062f4 <HAL_RTC_SetDate+0x100>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10e      	bne.n	8006240 <HAL_RTC_SetDate+0x4c>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b00      	cmp	r3, #0
 800622c:	d008      	beq.n	8006240 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	f023 0310 	bic.w	r3, r3, #16
 8006236:	b2db      	uxtb	r3, r3
 8006238:	330a      	adds	r3, #10
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11c      	bne.n	8006280 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	78db      	ldrb	r3, [r3, #3]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f929 	bl	80064a2 <RTC_ByteToBcd2>
 8006250:	4603      	mov	r3, r0
 8006252:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f922 	bl	80064a2 <RTC_ByteToBcd2>
 800625e:	4603      	mov	r3, r0
 8006260:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006262:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	789b      	ldrb	r3, [r3, #2]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f91a 	bl	80064a2 <RTC_ByteToBcd2>
 800626e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006270:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e00e      	b.n	800629e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800628c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006292:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	22ca      	movs	r2, #202	; 0xca
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2253      	movs	r2, #83	; 0x53
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f89b 	bl	80063ea <RTC_EnterInitMode>
 80062b4:	4603      	mov	r3, r0
 80062b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10c      	bne.n	80062d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f8c2 	bl	8006458 <RTC_ExitInitMode>
 80062d4:	4603      	mov	r3, r0
 80062d6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062d8:	7cfb      	ldrb	r3, [r7, #19]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	771a      	strb	r2, [r3, #28]

  return status;
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd90      	pop	{r4, r7, pc}

080062fc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006316:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800631a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	0c1b      	lsrs	r3, r3, #16
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	0b5b      	lsrs	r3, r3, #13
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11a      	bne.n	8006390 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f8bc 	bl	80064dc <RTC_Bcd2ToByte>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f8b3 	bl	80064dc <RTC_Bcd2ToByte>
 8006376:	4603      	mov	r3, r0
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f8aa 	bl	80064dc <RTC_Bcd2ToByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063b4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063b6:	f7fb fd7d 	bl	8001eb4 <HAL_GetTick>
 80063ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063bc:	e009      	b.n	80063d2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063be:	f7fb fd79 	bl	8001eb4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063cc:	d901      	bls.n	80063d2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e007      	b.n	80063e2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ee      	beq.n	80063be <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d122      	bne.n	800644e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006416:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006418:	f7fb fd4c 	bl	8001eb4 <HAL_GetTick>
 800641c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800641e:	e00c      	b.n	800643a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006420:	f7fb fd48 	bl	8001eb4 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642e:	d904      	bls.n	800643a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <RTC_EnterInitMode+0x64>
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d1e8      	bne.n	8006420 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006472:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff ff89 	bl	800639a <HAL_RTC_WaitForSynchro>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2204      	movs	r2, #4
 8006492:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80064b0:	e005      	b.n	80064be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3301      	adds	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	3b0a      	subs	r3, #10
 80064bc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	d8f6      	bhi.n	80064b2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b2db      	uxtb	r3, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	0092      	lsls	r2, r2, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	b2da      	uxtb	r2, r3
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	4413      	add	r3, r2
 8006506:	b2db      	uxtb	r3, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e041      	b.n	80065aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb fa6a 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f000 fa96 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e04e      	b.n	800666a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a23      	ldr	r2, [pc, #140]	; (8006678 <HAL_TIM_Base_Start_IT+0xc4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f6:	d01d      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <HAL_TIM_Base_Start_IT+0xc8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1e      	ldr	r2, [pc, #120]	; (8006680 <HAL_TIM_Base_Start_IT+0xcc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <HAL_TIM_Base_Start_IT+0xd0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1b      	ldr	r2, [pc, #108]	; (8006688 <HAL_TIM_Base_Start_IT+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a19      	ldr	r2, [pc, #100]	; (800668c <HAL_TIM_Base_Start_IT+0xd8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_TIM_Base_Start_IT+0xdc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d111      	bne.n	8006658 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b06      	cmp	r3, #6
 8006644:	d010      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	e007      	b.n	8006668 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40010400 	.word	0x40010400
 800668c:	40014000 	.word	0x40014000
 8006690:	40001800 	.word	0x40001800

08006694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0202 	mvn.w	r2, #2
 80066c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9b5 	bl	8006a46 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f9a7 	bl	8006a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f9b8 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0204 	mvn.w	r2, #4
 8006714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f98b 	bl	8006a46 <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f97d 	bl	8006a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f98e 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0208 	mvn.w	r2, #8
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f961 	bl	8006a46 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f953 	bl	8006a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f964 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0210 	mvn.w	r2, #16
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2208      	movs	r2, #8
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f937 	bl	8006a46 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f929 	bl	8006a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f93a 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0201 	mvn.w	r2, #1
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fa f8ba 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fae0 	bl	8006e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8ff 	bl	8006a6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b20      	cmp	r3, #32
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0220 	mvn.w	r2, #32
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 faaa 	bl	8006df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIM_ConfigClockSource+0x1c>
 80068bc:	2302      	movs	r3, #2
 80068be:	e0b4      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x186>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f8:	d03e      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0xd4>
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fe:	f200 8087 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006906:	f000 8086 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x172>
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d87f      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006910:	2b70      	cmp	r3, #112	; 0x70
 8006912:	d01a      	beq.n	800694a <HAL_TIM_ConfigClockSource+0xa6>
 8006914:	2b70      	cmp	r3, #112	; 0x70
 8006916:	d87b      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d050      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x11a>
 800691c:	2b60      	cmp	r3, #96	; 0x60
 800691e:	d877      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d03c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0xfa>
 8006924:	2b50      	cmp	r3, #80	; 0x50
 8006926:	d873      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d058      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x13a>
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d86f      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d064      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x15a>
 8006934:	2b30      	cmp	r3, #48	; 0x30
 8006936:	d86b      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d060      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x15a>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d867      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d05c      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x15a>
 8006944:	2b10      	cmp	r3, #16
 8006946:	d05a      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x15a>
 8006948:	e062      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6899      	ldr	r1, [r3, #8]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f000 f9ad 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800696c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	609a      	str	r2, [r3, #8]
      break;
 8006976:	e04f      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	6899      	ldr	r1, [r3, #8]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f000 f996 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800699a:	609a      	str	r2, [r3, #8]
      break;
 800699c:	e03c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6859      	ldr	r1, [r3, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f000 f90a 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2150      	movs	r1, #80	; 0x50
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f963 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80069bc:	e02c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6859      	ldr	r1, [r3, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f000 f929 	bl	8006c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2160      	movs	r1, #96	; 0x60
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f953 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80069dc:	e01c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6859      	ldr	r1, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f000 f8ea 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2140      	movs	r1, #64	; 0x40
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f943 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80069fc:	e00c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f000 f93a 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006a0e:	e003      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
      break;
 8006a14:	e000      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa2:	d00f      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3b      	ldr	r2, [pc, #236]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a3a      	ldr	r2, [pc, #232]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d108      	bne.n	8006ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d02b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d027      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2c      	ldr	r2, [pc, #176]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d023      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01f      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a29      	ldr	r2, [pc, #164]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d017      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <TIM_Base_SetConfig+0x128>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <TIM_Base_SetConfig+0x12c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00f      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <TIM_Base_SetConfig+0x130>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a25      	ldr	r2, [pc, #148]	; (8006bb8 <TIM_Base_SetConfig+0x134>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d007      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <TIM_Base_SetConfig+0x138>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d003      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a23      	ldr	r2, [pc, #140]	; (8006bc0 <TIM_Base_SetConfig+0x13c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d108      	bne.n	8006b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a0c      	ldr	r2, [pc, #48]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d103      	bne.n	8006b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	615a      	str	r2, [r3, #20]
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40010400 	.word	0x40010400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800
 8006bb8:	40001800 	.word	0x40001800
 8006bbc:	40001c00 	.word	0x40001c00
 8006bc0:	40002000 	.word	0x40002000

08006bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 030a 	bic.w	r3, r3, #10
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f043 0307 	orr.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e05a      	b.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d01d      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a15      	ldr	r2, [pc, #84]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d10c      	bne.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40000c00 	.word	0x40000c00
 8006de4:	40010400 	.word	0x40010400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40001800 	.word	0x40001800

08006df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e03f      	b.n	8006eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fa fe0a 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2224      	movs	r2, #36	; 0x24
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fd7b 	bl	8007958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	; 0x28
 8006eb6:	af02      	add	r7, sp, #8
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d17c      	bne.n	8006fcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_UART_Transmit+0x2c>
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e075      	b.n	8006fce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Transmit+0x3e>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e06e      	b.n	8006fce <HAL_UART_Transmit+0x11c>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2221      	movs	r2, #33	; 0x21
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f06:	f7fa ffd5 	bl	8001eb4 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d108      	bne.n	8006f34 <HAL_UART_Transmit+0x82>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	e003      	b.n	8006f3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f44:	e02a      	b.n	8006f9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 faf9 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e036      	b.n	8006fce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	3302      	adds	r3, #2
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e007      	b.n	8006f8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1cf      	bne.n	8006f46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2140      	movs	r1, #64	; 0x40
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fac9 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e006      	b.n	8006fce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e000      	b.n	8006fce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
  }
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b0ba      	sub	sp, #232	; 0xe8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007004:	2300      	movs	r3, #0
 8007006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10f      	bne.n	800703e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <HAL_UART_IRQHandler+0x66>
 800702a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fbd3 	bl	80077e2 <UART_Receive_IT>
      return;
 800703c:	e256      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800703e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80de 	beq.w	8007204 <HAL_UART_IRQHandler+0x22c>
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80d1 	beq.w	8007204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HAL_UART_IRQHandler+0xae>
 800706e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <HAL_UART_IRQHandler+0xd2>
 8007092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f043 0202 	orr.w	r2, r3, #2
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <HAL_UART_IRQHandler+0xf6>
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f043 0204 	orr.w	r2, r3, #4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <HAL_UART_IRQHandler+0x126>
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d105      	bne.n	80070f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f043 0208 	orr.w	r2, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 81ed 	beq.w	80074e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_UART_IRQHandler+0x14e>
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb5e 	bl	80077e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <HAL_UART_IRQHandler+0x17a>
 800714a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04f      	beq.n	80071f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa66 	bl	8007624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d141      	bne.n	80071ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800717c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3314      	adds	r3, #20
 800718e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800719e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1d9      	bne.n	8007166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d013      	beq.n	80071e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4a7d      	ldr	r2, [pc, #500]	; (80073b4 <HAL_UART_IRQHandler+0x3dc>)
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fb fe72 	bl	8002eb0 <HAL_DMA_Abort_IT>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d016      	beq.n	8007200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e0:	e00e      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f99a 	bl	800751c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e00a      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f996 	bl	800751c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f0:	e006      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f992 	bl	800751c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071fe:	e170      	b.n	80074e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	bf00      	nop
    return;
 8007202:	e16e      	b.n	80074e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	2b01      	cmp	r3, #1
 800720a:	f040 814a 	bne.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8143 	beq.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 813c 	beq.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	f040 80b4 	bne.w	80073b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800725c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8140 	beq.w	80074e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800726a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800726e:	429a      	cmp	r2, r3
 8007270:	f080 8139 	bcs.w	80074e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800727a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	f000 8088 	beq.w	800739a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d9      	bne.n	800728a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3314      	adds	r3, #20
 80072f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e1      	bne.n	80072d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3314      	adds	r3, #20
 8007332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800733c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e3      	bne.n	8007312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800737c:	65ba      	str	r2, [r7, #88]	; 0x58
 800737e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800738a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e3      	bne.n	8007358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	4618      	mov	r0, r3
 8007396:	f7fb fd1b 	bl	8002dd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f8c0 	bl	8007530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073b0:	e099      	b.n	80074e6 <HAL_UART_IRQHandler+0x50e>
 80073b2:	bf00      	nop
 80073b4:	080076eb 	.word	0x080076eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 808b 	beq.w	80074ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8086 	beq.w	80074ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007402:	647a      	str	r2, [r7, #68]	; 0x44
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e3      	bne.n	80073de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	623b      	str	r3, [r7, #32]
   return(result);
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3314      	adds	r3, #20
 8007436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800743a:	633a      	str	r2, [r7, #48]	; 0x30
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330c      	adds	r3, #12
 8007462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60fb      	str	r3, [r7, #12]
   return(result);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007480:	61fa      	str	r2, [r7, #28]
 8007482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69b9      	ldr	r1, [r7, #24]
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	617b      	str	r3, [r7, #20]
   return(result);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e3      	bne.n	800745c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f848 	bl	8007530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074a0:	e023      	b.n	80074ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_UART_IRQHandler+0x4ea>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f929 	bl	8007712 <UART_Transmit_IT>
    return;
 80074c0:	e014      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00e      	beq.n	80074ec <HAL_UART_IRQHandler+0x514>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f969 	bl	80077b2 <UART_EndTransmit_IT>
    return;
 80074e0:	e004      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
    return;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
      return;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
      return;
 80074ea:	bf00      	nop
  }
}
 80074ec:	37e8      	adds	r7, #232	; 0xe8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop

080074f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b090      	sub	sp, #64	; 0x40
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007558:	e050      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d04c      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x30>
 8007568:	f7fa fca4 	bl	8001eb4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007574:	429a      	cmp	r2, r3
 8007576:	d241      	bcs.n	80075fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007598:	637a      	str	r2, [r7, #52]	; 0x34
 800759a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800759e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	613b      	str	r3, [r7, #16]
   return(result);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075cc:	623a      	str	r2, [r7, #32]
 80075ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e00f      	b.n	800761c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	429a      	cmp	r2, r3
 8007618:	d09f      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3740      	adds	r7, #64	; 0x40
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b095      	sub	sp, #84	; 0x54
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800764c:	643a      	str	r2, [r7, #64]	; 0x40
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3314      	adds	r3, #20
 8007666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	64bb      	str	r3, [r7, #72]	; 0x48
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d119      	bne.n	80076d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076bc:	61ba      	str	r2, [r7, #24]
 80076be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	613b      	str	r3, [r7, #16]
   return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076de:	bf00      	nop
 80076e0:	3754      	adds	r7, #84	; 0x54
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff ff09 	bl	800751c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b21      	cmp	r3, #33	; 0x21
 8007724:	d13e      	bne.n	80077a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d114      	bne.n	800775a <UART_Transmit_IT+0x48>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d110      	bne.n	800775a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800774c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]
 8007758:	e008      	b.n	800776c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	1c59      	adds	r1, r3, #1
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6211      	str	r1, [r2, #32]
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	4619      	mov	r1, r3
 800777a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10f      	bne.n	80077a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800778e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800779e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fe8e 	bl	80074f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b08c      	sub	sp, #48	; 0x30
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b22      	cmp	r3, #34	; 0x22
 80077f4:	f040 80ab 	bne.w	800794e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007800:	d117      	bne.n	8007832 <UART_Receive_IT+0x50>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d113      	bne.n	8007832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	b29a      	uxth	r2, r3
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	1c9a      	adds	r2, r3, #2
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
 8007830:	e026      	b.n	8007880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007844:	d007      	beq.n	8007856 <UART_Receive_IT+0x74>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <UART_Receive_IT+0x82>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e008      	b.n	8007876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	b2da      	uxtb	r2, r3
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29b      	uxth	r3, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007890:	2b00      	cmp	r3, #0
 8007892:	d15a      	bne.n	800794a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0220 	bic.w	r2, r2, #32
 80078a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d135      	bne.n	8007940 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f023 0310 	bic.w	r3, r3, #16
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	623a      	str	r2, [r7, #32]
 80078fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	69f9      	ldr	r1, [r7, #28]
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	61bb      	str	r3, [r7, #24]
   return(result);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b10      	cmp	r3, #16
 800791a:	d10a      	bne.n	8007932 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fdf9 	bl	8007530 <HAL_UARTEx_RxEventCallback>
 800793e:	e002      	b.n	8007946 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fde1 	bl	8007508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e002      	b.n	8007950 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3730      	adds	r7, #48	; 0x30
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b0c0      	sub	sp, #256	; 0x100
 800795e:	af00      	add	r7, sp, #0
 8007960:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	68d9      	ldr	r1, [r3, #12]
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	ea40 0301 	orr.w	r3, r0, r1
 8007980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	431a      	orrs	r2, r3
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	431a      	orrs	r2, r3
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079b0:	f021 010c 	bic.w	r1, r1, #12
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079be:	430b      	orrs	r3, r1
 80079c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	6999      	ldr	r1, [r3, #24]
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	ea40 0301 	orr.w	r3, r0, r1
 80079de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b8f      	ldr	r3, [pc, #572]	; (8007c24 <UART_SetConfig+0x2cc>)
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d005      	beq.n	80079f8 <UART_SetConfig+0xa0>
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b8d      	ldr	r3, [pc, #564]	; (8007c28 <UART_SetConfig+0x2d0>)
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d104      	bne.n	8007a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fe f8ba 	bl	8005b70 <HAL_RCC_GetPCLK2Freq>
 80079fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a00:	e003      	b.n	8007a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a02:	f7fe f8a1 	bl	8005b48 <HAL_RCC_GetPCLK1Freq>
 8007a06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	f040 810c 	bne.w	8007c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	1891      	adds	r1, r2, r2
 8007a30:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a32:	415b      	adcs	r3, r3
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	eb12 0801 	adds.w	r8, r2, r1
 8007a40:	4629      	mov	r1, r5
 8007a42:	eb43 0901 	adc.w	r9, r3, r1
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a5a:	4690      	mov	r8, r2
 8007a5c:	4699      	mov	r9, r3
 8007a5e:	4623      	mov	r3, r4
 8007a60:	eb18 0303 	adds.w	r3, r8, r3
 8007a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a68:	462b      	mov	r3, r5
 8007a6a:	eb49 0303 	adc.w	r3, r9, r3
 8007a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a86:	460b      	mov	r3, r1
 8007a88:	18db      	adds	r3, r3, r3
 8007a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	eb42 0303 	adc.w	r3, r2, r3
 8007a92:	657b      	str	r3, [r7, #84]	; 0x54
 8007a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a9c:	f7f8 fc00 	bl	80002a0 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4b61      	ldr	r3, [pc, #388]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	011c      	lsls	r4, r3, #4
 8007aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	1891      	adds	r1, r2, r2
 8007ac6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ac8:	415b      	adcs	r3, r3
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af0:	4692      	mov	sl, r2
 8007af2:	469b      	mov	fp, r3
 8007af4:	4643      	mov	r3, r8
 8007af6:	eb1a 0303 	adds.w	r3, sl, r3
 8007afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afe:	464b      	mov	r3, r9
 8007b00:	eb4b 0303 	adc.w	r3, fp, r3
 8007b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	18db      	adds	r3, r3, r3
 8007b20:	643b      	str	r3, [r7, #64]	; 0x40
 8007b22:	4613      	mov	r3, r2
 8007b24:	eb42 0303 	adc.w	r3, r2, r3
 8007b28:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b32:	f7f8 fbb5 	bl	80002a0 <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	2264      	movs	r2, #100	; 0x64
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	1acb      	subs	r3, r1, r3
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b52:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007b54:	fba3 2302 	umull	r2, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b60:	441c      	add	r4, r3
 8007b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	1891      	adds	r1, r2, r2
 8007b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b7c:	415b      	adcs	r3, r3
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b84:	4641      	mov	r1, r8
 8007b86:	1851      	adds	r1, r2, r1
 8007b88:	6339      	str	r1, [r7, #48]	; 0x30
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	414b      	adcs	r3, r1
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	00cb      	lsls	r3, r1, #3
 8007ba0:	4651      	mov	r1, sl
 8007ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ba6:	4651      	mov	r1, sl
 8007ba8:	00ca      	lsls	r2, r1, #3
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bb8:	464b      	mov	r3, r9
 8007bba:	460a      	mov	r2, r1
 8007bbc:	eb42 0303 	adc.w	r3, r2, r3
 8007bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bd8:	460b      	mov	r3, r1
 8007bda:	18db      	adds	r3, r3, r3
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bde:	4613      	mov	r3, r2
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bee:	f7f8 fb57 	bl	80002a0 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	2164      	movs	r1, #100	; 0x64
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	3332      	adds	r3, #50	; 0x32
 8007c0a:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	f003 0207 	and.w	r2, r3, #7
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4422      	add	r2, r4
 8007c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c20:	e106      	b.n	8007e30 <UART_SetConfig+0x4d8>
 8007c22:	bf00      	nop
 8007c24:	40011000 	.word	0x40011000
 8007c28:	40011400 	.word	0x40011400
 8007c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	6239      	str	r1, [r7, #32]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c52:	4641      	mov	r1, r8
 8007c54:	1854      	adds	r4, r2, r1
 8007c56:	4649      	mov	r1, r9
 8007c58:	eb43 0501 	adc.w	r5, r3, r1
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	00eb      	lsls	r3, r5, #3
 8007c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c6a:	00e2      	lsls	r2, r4, #3
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	461d      	mov	r5, r3
 8007c70:	4643      	mov	r3, r8
 8007c72:	18e3      	adds	r3, r4, r3
 8007c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c78:	464b      	mov	r3, r9
 8007c7a:	eb45 0303 	adc.w	r3, r5, r3
 8007c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	008b      	lsls	r3, r1, #2
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca8:	4621      	mov	r1, r4
 8007caa:	008a      	lsls	r2, r1, #2
 8007cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cb0:	f7f8 faf6 	bl	80002a0 <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4b60      	ldr	r3, [pc, #384]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007cba:	fba3 2302 	umull	r2, r3, r3, r2
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	011c      	lsls	r4, r3, #4
 8007cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ccc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	61b9      	str	r1, [r7, #24]
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	1851      	adds	r1, r2, r1
 8007ce8:	6139      	str	r1, [r7, #16]
 8007cea:	4649      	mov	r1, r9
 8007cec:	414b      	adcs	r3, r1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	00cb      	lsls	r3, r1, #3
 8007d00:	4651      	mov	r1, sl
 8007d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d06:	4651      	mov	r1, sl
 8007d08:	00ca      	lsls	r2, r1, #3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4642      	mov	r2, r8
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d18:	464b      	mov	r3, r9
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	eb42 0303 	adc.w	r3, r2, r3
 8007d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	008b      	lsls	r3, r1, #2
 8007d40:	4641      	mov	r1, r8
 8007d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d46:	4641      	mov	r1, r8
 8007d48:	008a      	lsls	r2, r1, #2
 8007d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d4e:	f7f8 faa7 	bl	80002a0 <__aeabi_uldivmod>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4611      	mov	r1, r2
 8007d58:	4b38      	ldr	r3, [pc, #224]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	2264      	movs	r2, #100	; 0x64
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	1acb      	subs	r3, r1, r3
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	3332      	adds	r3, #50	; 0x32
 8007d6c:	4a33      	ldr	r2, [pc, #204]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d78:	441c      	add	r4, r3
 8007d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7e:	2200      	movs	r2, #0
 8007d80:	673b      	str	r3, [r7, #112]	; 0x70
 8007d82:	677a      	str	r2, [r7, #116]	; 0x74
 8007d84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	1891      	adds	r1, r2, r2
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	415b      	adcs	r3, r3
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d98:	4641      	mov	r1, r8
 8007d9a:	1851      	adds	r1, r2, r1
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	4649      	mov	r1, r9
 8007da0:	414b      	adcs	r3, r1
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007db0:	4659      	mov	r1, fp
 8007db2:	00cb      	lsls	r3, r1, #3
 8007db4:	4651      	mov	r1, sl
 8007db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dba:	4651      	mov	r1, sl
 8007dbc:	00ca      	lsls	r2, r1, #3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dca:	464b      	mov	r3, r9
 8007dcc:	460a      	mov	r2, r1
 8007dce:	eb42 0303 	adc.w	r3, r2, r3
 8007dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dde:	667a      	str	r2, [r7, #100]	; 0x64
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dec:	4649      	mov	r1, r9
 8007dee:	008b      	lsls	r3, r1, #2
 8007df0:	4641      	mov	r1, r8
 8007df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df6:	4641      	mov	r1, r8
 8007df8:	008a      	lsls	r2, r1, #2
 8007dfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dfe:	f7f8 fa4f 	bl	80002a0 <__aeabi_uldivmod>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007e08:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2164      	movs	r1, #100	; 0x64
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	3332      	adds	r3, #50	; 0x32
 8007e1a:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4422      	add	r2, r4
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e36:	46bd      	mov	sp, r7
 8007e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e3c:	51eb851f 	.word	0x51eb851f

08007e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e40:	b084      	sub	sp, #16
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	f107 001c 	add.w	r0, r7, #28
 8007e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d122      	bne.n	8007e9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d105      	bne.n	8007e92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 faa2 	bl	80083dc <USB_CoreReset>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	e01a      	b.n	8007ed4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa96 	bl	80083dc <USB_CoreReset>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ec6:	e005      	b.n	8007ed4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10b      	bne.n	8007ef2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f043 0206 	orr.w	r2, r3, #6
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007efe:	b004      	add	sp, #16
 8007f00:	4770      	bx	lr

08007f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f023 0201 	bic.w	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d115      	bne.n	8007f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f52:	2001      	movs	r0, #1
 8007f54:	f7f9 ffba 	bl	8001ecc <HAL_Delay>
      ms++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa2e 	bl	80083c0 <USB_GetMode>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d01e      	beq.n	8007fa8 <USB_SetCurrentMode+0x84>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b31      	cmp	r3, #49	; 0x31
 8007f6e:	d9f0      	bls.n	8007f52 <USB_SetCurrentMode+0x2e>
 8007f70:	e01a      	b.n	8007fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d115      	bne.n	8007fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7f9 ffa1 	bl	8001ecc <HAL_Delay>
      ms++;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa15 	bl	80083c0 <USB_GetMode>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <USB_SetCurrentMode+0x84>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b31      	cmp	r3, #49	; 0x31
 8007fa0:	d9f0      	bls.n	8007f84 <USB_SetCurrentMode+0x60>
 8007fa2:	e001      	b.n	8007fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e005      	b.n	8007fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b32      	cmp	r3, #50	; 0x32
 8007fac:	d101      	bne.n	8007fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b086      	sub	sp, #24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	e009      	b.n	8007ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3340      	adds	r3, #64	; 0x40
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3301      	adds	r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b0e      	cmp	r3, #14
 8007ff4:	d9f2      	bls.n	8007fdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11c      	bne.n	8008036 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800800a:	f043 0302 	orr.w	r3, r3, #2
 800800e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	639a      	str	r2, [r3, #56]	; 0x38
 8008034:	e00b      	b.n	800804e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008054:	461a      	mov	r2, r3
 8008056:	2300      	movs	r3, #0
 8008058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008060:	4619      	mov	r1, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008068:	461a      	mov	r2, r3
 800806a:	680b      	ldr	r3, [r1, #0]
 800806c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	2b01      	cmp	r3, #1
 8008072:	d10c      	bne.n	800808e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800807a:	2100      	movs	r1, #0
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f965 	bl	800834c <USB_SetDevSpeed>
 8008082:	e008      	b.n	8008096 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008084:	2101      	movs	r1, #1
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f960 	bl	800834c <USB_SetDevSpeed>
 800808c:	e003      	b.n	8008096 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800808e:	2103      	movs	r1, #3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f95b 	bl	800834c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008096:	2110      	movs	r1, #16
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8f3 	bl	8008284 <USB_FlushTxFifo>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f91f 	bl	80082ec <USB_FlushRxFifo>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	461a      	mov	r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ca:	461a      	mov	r2, r3
 80080cc:	2300      	movs	r3, #0
 80080ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	e043      	b.n	800816a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f8:	d118      	bne.n	800812c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810c:	461a      	mov	r2, r3
 800810e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	e013      	b.n	800813e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008122:	461a      	mov	r2, r3
 8008124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e008      	b.n	800813e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	461a      	mov	r2, r3
 800813a:	2300      	movs	r3, #0
 800813c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	461a      	mov	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	461a      	mov	r2, r3
 800815e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3301      	adds	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d3b7      	bcc.n	80080e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	e043      	b.n	8008200 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800818a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800818e:	d118      	bne.n	80081c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a2:	461a      	mov	r2, r3
 80081a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	e013      	b.n	80081d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b8:	461a      	mov	r2, r3
 80081ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	e008      	b.n	80081d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	461a      	mov	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	461a      	mov	r2, r3
 80081f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3301      	adds	r3, #1
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	429a      	cmp	r2, r3
 8008206:	d3b7      	bcc.n	8008178 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800821a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	f043 0210 	orr.w	r2, r3, #16
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <USB_DevInit+0x2c4>)
 8008242:	4313      	orrs	r3, r2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f043 0208 	orr.w	r2, r3, #8
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800825a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d107      	bne.n	8008270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008268:	f043 0304 	orr.w	r3, r3, #4
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr
 8008280:	803c3800 	.word	0x803c3800

08008284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <USB_FlushTxFifo+0x64>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d901      	bls.n	80082a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e01b      	b.n	80082dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	daf2      	bge.n	8008292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	019b      	lsls	r3, r3, #6
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <USB_FlushTxFifo+0x64>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d901      	bls.n	80082ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e006      	b.n	80082dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d0f0      	beq.n	80082bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	00030d40 	.word	0x00030d40

080082ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a11      	ldr	r2, [pc, #68]	; (8008348 <USB_FlushRxFifo+0x5c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e018      	b.n	800833c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	daf2      	bge.n	80082f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2210      	movs	r2, #16
 800831a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a08      	ldr	r2, [pc, #32]	; (8008348 <USB_FlushRxFifo+0x5c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e006      	b.n	800833c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b10      	cmp	r3, #16
 8008338:	d0f0      	beq.n	800831c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	00030d40 	.word	0x00030d40

0800834c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	68f9      	ldr	r1, [r7, #12]
 8008368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800836c:	4313      	orrs	r3, r2
 800836e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800837e:	b480      	push	{r7}
 8008380:	b085      	sub	sp, #20
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008398:	f023 0303 	bic.w	r3, r3, #3
 800839c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ac:	f043 0302 	orr.w	r3, r3, #2
 80083b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	f003 0301 	and.w	r3, r3, #1
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4a13      	ldr	r2, [pc, #76]	; (8008440 <USB_CoreReset+0x64>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e01b      	b.n	8008432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	daf2      	bge.n	80083e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f043 0201 	orr.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a09      	ldr	r2, [pc, #36]	; (8008440 <USB_CoreReset+0x64>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d901      	bls.n	8008424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e006      	b.n	8008432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d0f0      	beq.n	8008412 <USB_CoreReset+0x36>

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	00030d40 	.word	0x00030d40

08008444 <std>:
 8008444:	2300      	movs	r3, #0
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
 800844a:	e9c0 3300 	strd	r3, r3, [r0]
 800844e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008452:	6083      	str	r3, [r0, #8]
 8008454:	8181      	strh	r1, [r0, #12]
 8008456:	6643      	str	r3, [r0, #100]	; 0x64
 8008458:	81c2      	strh	r2, [r0, #14]
 800845a:	6183      	str	r3, [r0, #24]
 800845c:	4619      	mov	r1, r3
 800845e:	2208      	movs	r2, #8
 8008460:	305c      	adds	r0, #92	; 0x5c
 8008462:	f000 fa4b 	bl	80088fc <memset>
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <std+0x58>)
 8008468:	6263      	str	r3, [r4, #36]	; 0x24
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <std+0x5c>)
 800846c:	62a3      	str	r3, [r4, #40]	; 0x28
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <std+0x60>)
 8008470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <std+0x64>)
 8008474:	6323      	str	r3, [r4, #48]	; 0x30
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <std+0x68>)
 8008478:	6224      	str	r4, [r4, #32]
 800847a:	429c      	cmp	r4, r3
 800847c:	d006      	beq.n	800848c <std+0x48>
 800847e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008482:	4294      	cmp	r4, r2
 8008484:	d002      	beq.n	800848c <std+0x48>
 8008486:	33d0      	adds	r3, #208	; 0xd0
 8008488:	429c      	cmp	r4, r3
 800848a:	d105      	bne.n	8008498 <std+0x54>
 800848c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008494:	f000 baaa 	b.w	80089ec <__retarget_lock_init_recursive>
 8008498:	bd10      	pop	{r4, pc}
 800849a:	bf00      	nop
 800849c:	0800874d 	.word	0x0800874d
 80084a0:	0800876f 	.word	0x0800876f
 80084a4:	080087a7 	.word	0x080087a7
 80084a8:	080087cb 	.word	0x080087cb
 80084ac:	20000a28 	.word	0x20000a28

080084b0 <stdio_exit_handler>:
 80084b0:	4a02      	ldr	r2, [pc, #8]	; (80084bc <stdio_exit_handler+0xc>)
 80084b2:	4903      	ldr	r1, [pc, #12]	; (80084c0 <stdio_exit_handler+0x10>)
 80084b4:	4803      	ldr	r0, [pc, #12]	; (80084c4 <stdio_exit_handler+0x14>)
 80084b6:	f000 b869 	b.w	800858c <_fwalk_sglue>
 80084ba:	bf00      	nop
 80084bc:	20000020 	.word	0x20000020
 80084c0:	08009549 	.word	0x08009549
 80084c4:	2000002c 	.word	0x2000002c

080084c8 <cleanup_stdio>:
 80084c8:	6841      	ldr	r1, [r0, #4]
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <cleanup_stdio+0x34>)
 80084cc:	4299      	cmp	r1, r3
 80084ce:	b510      	push	{r4, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	d001      	beq.n	80084d8 <cleanup_stdio+0x10>
 80084d4:	f001 f838 	bl	8009548 <_fflush_r>
 80084d8:	68a1      	ldr	r1, [r4, #8]
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <cleanup_stdio+0x38>)
 80084dc:	4299      	cmp	r1, r3
 80084de:	d002      	beq.n	80084e6 <cleanup_stdio+0x1e>
 80084e0:	4620      	mov	r0, r4
 80084e2:	f001 f831 	bl	8009548 <_fflush_r>
 80084e6:	68e1      	ldr	r1, [r4, #12]
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <cleanup_stdio+0x3c>)
 80084ea:	4299      	cmp	r1, r3
 80084ec:	d004      	beq.n	80084f8 <cleanup_stdio+0x30>
 80084ee:	4620      	mov	r0, r4
 80084f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f4:	f001 b828 	b.w	8009548 <_fflush_r>
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	bf00      	nop
 80084fc:	20000a28 	.word	0x20000a28
 8008500:	20000a90 	.word	0x20000a90
 8008504:	20000af8 	.word	0x20000af8

08008508 <global_stdio_init.part.0>:
 8008508:	b510      	push	{r4, lr}
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <global_stdio_init.part.0+0x30>)
 800850c:	4c0b      	ldr	r4, [pc, #44]	; (800853c <global_stdio_init.part.0+0x34>)
 800850e:	4a0c      	ldr	r2, [pc, #48]	; (8008540 <global_stdio_init.part.0+0x38>)
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	4620      	mov	r0, r4
 8008514:	2200      	movs	r2, #0
 8008516:	2104      	movs	r1, #4
 8008518:	f7ff ff94 	bl	8008444 <std>
 800851c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008520:	2201      	movs	r2, #1
 8008522:	2109      	movs	r1, #9
 8008524:	f7ff ff8e 	bl	8008444 <std>
 8008528:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800852c:	2202      	movs	r2, #2
 800852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008532:	2112      	movs	r1, #18
 8008534:	f7ff bf86 	b.w	8008444 <std>
 8008538:	20000b60 	.word	0x20000b60
 800853c:	20000a28 	.word	0x20000a28
 8008540:	080084b1 	.word	0x080084b1

08008544 <__sfp_lock_acquire>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sfp_lock_acquire+0x8>)
 8008546:	f000 ba52 	b.w	80089ee <__retarget_lock_acquire_recursive>
 800854a:	bf00      	nop
 800854c:	20000b69 	.word	0x20000b69

08008550 <__sfp_lock_release>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sfp_lock_release+0x8>)
 8008552:	f000 ba4d 	b.w	80089f0 <__retarget_lock_release_recursive>
 8008556:	bf00      	nop
 8008558:	20000b69 	.word	0x20000b69

0800855c <__sinit>:
 800855c:	b510      	push	{r4, lr}
 800855e:	4604      	mov	r4, r0
 8008560:	f7ff fff0 	bl	8008544 <__sfp_lock_acquire>
 8008564:	6a23      	ldr	r3, [r4, #32]
 8008566:	b11b      	cbz	r3, 8008570 <__sinit+0x14>
 8008568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856c:	f7ff bff0 	b.w	8008550 <__sfp_lock_release>
 8008570:	4b04      	ldr	r3, [pc, #16]	; (8008584 <__sinit+0x28>)
 8008572:	6223      	str	r3, [r4, #32]
 8008574:	4b04      	ldr	r3, [pc, #16]	; (8008588 <__sinit+0x2c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1f5      	bne.n	8008568 <__sinit+0xc>
 800857c:	f7ff ffc4 	bl	8008508 <global_stdio_init.part.0>
 8008580:	e7f2      	b.n	8008568 <__sinit+0xc>
 8008582:	bf00      	nop
 8008584:	080084c9 	.word	0x080084c9
 8008588:	20000b60 	.word	0x20000b60

0800858c <_fwalk_sglue>:
 800858c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008590:	4607      	mov	r7, r0
 8008592:	4688      	mov	r8, r1
 8008594:	4614      	mov	r4, r2
 8008596:	2600      	movs	r6, #0
 8008598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800859c:	f1b9 0901 	subs.w	r9, r9, #1
 80085a0:	d505      	bpl.n	80085ae <_fwalk_sglue+0x22>
 80085a2:	6824      	ldr	r4, [r4, #0]
 80085a4:	2c00      	cmp	r4, #0
 80085a6:	d1f7      	bne.n	8008598 <_fwalk_sglue+0xc>
 80085a8:	4630      	mov	r0, r6
 80085aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d907      	bls.n	80085c4 <_fwalk_sglue+0x38>
 80085b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085b8:	3301      	adds	r3, #1
 80085ba:	d003      	beq.n	80085c4 <_fwalk_sglue+0x38>
 80085bc:	4629      	mov	r1, r5
 80085be:	4638      	mov	r0, r7
 80085c0:	47c0      	blx	r8
 80085c2:	4306      	orrs	r6, r0
 80085c4:	3568      	adds	r5, #104	; 0x68
 80085c6:	e7e9      	b.n	800859c <_fwalk_sglue+0x10>

080085c8 <iprintf>:
 80085c8:	b40f      	push	{r0, r1, r2, r3}
 80085ca:	b507      	push	{r0, r1, r2, lr}
 80085cc:	4906      	ldr	r1, [pc, #24]	; (80085e8 <iprintf+0x20>)
 80085ce:	ab04      	add	r3, sp, #16
 80085d0:	6808      	ldr	r0, [r1, #0]
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	6881      	ldr	r1, [r0, #8]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f000 fc85 	bl	8008ee8 <_vfiprintf_r>
 80085de:	b003      	add	sp, #12
 80085e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e4:	b004      	add	sp, #16
 80085e6:	4770      	bx	lr
 80085e8:	20000078 	.word	0x20000078

080085ec <_puts_r>:
 80085ec:	6a03      	ldr	r3, [r0, #32]
 80085ee:	b570      	push	{r4, r5, r6, lr}
 80085f0:	6884      	ldr	r4, [r0, #8]
 80085f2:	4605      	mov	r5, r0
 80085f4:	460e      	mov	r6, r1
 80085f6:	b90b      	cbnz	r3, 80085fc <_puts_r+0x10>
 80085f8:	f7ff ffb0 	bl	800855c <__sinit>
 80085fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d405      	bmi.n	800860e <_puts_r+0x22>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	0598      	lsls	r0, r3, #22
 8008606:	d402      	bmi.n	800860e <_puts_r+0x22>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f000 f9f0 	bl	80089ee <__retarget_lock_acquire_recursive>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d513      	bpl.n	800863c <_puts_r+0x50>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b18b      	cbz	r3, 800863c <_puts_r+0x50>
 8008618:	3e01      	subs	r6, #1
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	b9e9      	cbnz	r1, 8008662 <_puts_r+0x76>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da2e      	bge.n	8008688 <_puts_r+0x9c>
 800862a:	4622      	mov	r2, r4
 800862c:	210a      	movs	r1, #10
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f8cf 	bl	80087d2 <__swbuf_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d007      	beq.n	8008648 <_puts_r+0x5c>
 8008638:	250a      	movs	r5, #10
 800863a:	e007      	b.n	800864c <_puts_r+0x60>
 800863c:	4621      	mov	r1, r4
 800863e:	4628      	mov	r0, r5
 8008640:	f000 f904 	bl	800884c <__swsetup_r>
 8008644:	2800      	cmp	r0, #0
 8008646:	d0e7      	beq.n	8008618 <_puts_r+0x2c>
 8008648:	f04f 35ff 	mov.w	r5, #4294967295
 800864c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864e:	07da      	lsls	r2, r3, #31
 8008650:	d405      	bmi.n	800865e <_puts_r+0x72>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d402      	bmi.n	800865e <_puts_r+0x72>
 8008658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865a:	f000 f9c9 	bl	80089f0 <__retarget_lock_release_recursive>
 800865e:	4628      	mov	r0, r5
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	2b00      	cmp	r3, #0
 8008664:	da04      	bge.n	8008670 <_puts_r+0x84>
 8008666:	69a2      	ldr	r2, [r4, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	dc06      	bgt.n	800867a <_puts_r+0x8e>
 800866c:	290a      	cmp	r1, #10
 800866e:	d004      	beq.n	800867a <_puts_r+0x8e>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	7019      	strb	r1, [r3, #0]
 8008678:	e7cf      	b.n	800861a <_puts_r+0x2e>
 800867a:	4622      	mov	r2, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 f8a8 	bl	80087d2 <__swbuf_r>
 8008682:	3001      	adds	r0, #1
 8008684:	d1c9      	bne.n	800861a <_puts_r+0x2e>
 8008686:	e7df      	b.n	8008648 <_puts_r+0x5c>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	250a      	movs	r5, #10
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	701d      	strb	r5, [r3, #0]
 8008692:	e7db      	b.n	800864c <_puts_r+0x60>

08008694 <puts>:
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <puts+0xc>)
 8008696:	4601      	mov	r1, r0
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	f7ff bfa7 	b.w	80085ec <_puts_r>
 800869e:	bf00      	nop
 80086a0:	20000078 	.word	0x20000078

080086a4 <sniprintf>:
 80086a4:	b40c      	push	{r2, r3}
 80086a6:	b530      	push	{r4, r5, lr}
 80086a8:	4b17      	ldr	r3, [pc, #92]	; (8008708 <sniprintf+0x64>)
 80086aa:	1e0c      	subs	r4, r1, #0
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	b09d      	sub	sp, #116	; 0x74
 80086b0:	da08      	bge.n	80086c4 <sniprintf+0x20>
 80086b2:	238b      	movs	r3, #139	; 0x8b
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ba:	b01d      	add	sp, #116	; 0x74
 80086bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c0:	b002      	add	sp, #8
 80086c2:	4770      	bx	lr
 80086c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086cc:	bf14      	ite	ne
 80086ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086d2:	4623      	moveq	r3, r4
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	9307      	str	r3, [sp, #28]
 80086d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	9006      	str	r0, [sp, #24]
 80086e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086e6:	ab21      	add	r3, sp, #132	; 0x84
 80086e8:	a902      	add	r1, sp, #8
 80086ea:	4628      	mov	r0, r5
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	f000 fad3 	bl	8008c98 <_svfiprintf_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	bfbc      	itt	lt
 80086f6:	238b      	movlt	r3, #139	; 0x8b
 80086f8:	602b      	strlt	r3, [r5, #0]
 80086fa:	2c00      	cmp	r4, #0
 80086fc:	d0dd      	beq.n	80086ba <sniprintf+0x16>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e7d9      	b.n	80086ba <sniprintf+0x16>
 8008706:	bf00      	nop
 8008708:	20000078 	.word	0x20000078

0800870c <siprintf>:
 800870c:	b40e      	push	{r1, r2, r3}
 800870e:	b500      	push	{lr}
 8008710:	b09c      	sub	sp, #112	; 0x70
 8008712:	ab1d      	add	r3, sp, #116	; 0x74
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	9006      	str	r0, [sp, #24]
 8008718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <siprintf+0x38>)
 800871e:	9107      	str	r1, [sp, #28]
 8008720:	9104      	str	r1, [sp, #16]
 8008722:	4909      	ldr	r1, [pc, #36]	; (8008748 <siprintf+0x3c>)
 8008724:	f853 2b04 	ldr.w	r2, [r3], #4
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	a902      	add	r1, sp, #8
 8008730:	f000 fab2 	bl	8008c98 <_svfiprintf_r>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	b01c      	add	sp, #112	; 0x70
 800873c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008740:	b003      	add	sp, #12
 8008742:	4770      	bx	lr
 8008744:	20000078 	.word	0x20000078
 8008748:	ffff0208 	.word	0xffff0208

0800874c <__sread>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	f000 f8fc 	bl	8008950 <_read_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	bfab      	itete	ge
 800875c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875e:	89a3      	ldrhlt	r3, [r4, #12]
 8008760:	181b      	addge	r3, r3, r0
 8008762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008766:	bfac      	ite	ge
 8008768:	6563      	strge	r3, [r4, #84]	; 0x54
 800876a:	81a3      	strhlt	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__swrite>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	461f      	mov	r7, r3
 8008774:	898b      	ldrh	r3, [r1, #12]
 8008776:	05db      	lsls	r3, r3, #23
 8008778:	4605      	mov	r5, r0
 800877a:	460c      	mov	r4, r1
 800877c:	4616      	mov	r6, r2
 800877e:	d505      	bpl.n	800878c <__swrite+0x1e>
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2302      	movs	r3, #2
 8008786:	2200      	movs	r2, #0
 8008788:	f000 f8d0 	bl	800892c <_lseek_r>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4628      	mov	r0, r5
 800879e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	f000 b8e7 	b.w	8008974 <_write_r>

080087a6 <__sseek>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 f8bd 	bl	800892c <_lseek_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	bf15      	itete	ne
 80087b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strheq	r3, [r4, #12]
 80087c4:	bf18      	it	ne
 80087c6:	81a3      	strhne	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__sclose>:
 80087ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ce:	f000 b89d 	b.w	800890c <_close_r>

080087d2 <__swbuf_r>:
 80087d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d4:	460e      	mov	r6, r1
 80087d6:	4614      	mov	r4, r2
 80087d8:	4605      	mov	r5, r0
 80087da:	b118      	cbz	r0, 80087e4 <__swbuf_r+0x12>
 80087dc:	6a03      	ldr	r3, [r0, #32]
 80087de:	b90b      	cbnz	r3, 80087e4 <__swbuf_r+0x12>
 80087e0:	f7ff febc 	bl	800855c <__sinit>
 80087e4:	69a3      	ldr	r3, [r4, #24]
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	071a      	lsls	r2, r3, #28
 80087ec:	d525      	bpl.n	800883a <__swbuf_r+0x68>
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b31b      	cbz	r3, 800883a <__swbuf_r+0x68>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	1a98      	subs	r0, r3, r2
 80087f8:	6963      	ldr	r3, [r4, #20]
 80087fa:	b2f6      	uxtb	r6, r6
 80087fc:	4283      	cmp	r3, r0
 80087fe:	4637      	mov	r7, r6
 8008800:	dc04      	bgt.n	800880c <__swbuf_r+0x3a>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 fe9f 	bl	8009548 <_fflush_r>
 800880a:	b9e0      	cbnz	r0, 8008846 <__swbuf_r+0x74>
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	3b01      	subs	r3, #1
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	701e      	strb	r6, [r3, #0]
 800881a:	6962      	ldr	r2, [r4, #20]
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	429a      	cmp	r2, r3
 8008820:	d004      	beq.n	800882c <__swbuf_r+0x5a>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	07db      	lsls	r3, r3, #31
 8008826:	d506      	bpl.n	8008836 <__swbuf_r+0x64>
 8008828:	2e0a      	cmp	r6, #10
 800882a:	d104      	bne.n	8008836 <__swbuf_r+0x64>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 fe8a 	bl	8009548 <_fflush_r>
 8008834:	b938      	cbnz	r0, 8008846 <__swbuf_r+0x74>
 8008836:	4638      	mov	r0, r7
 8008838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883a:	4621      	mov	r1, r4
 800883c:	4628      	mov	r0, r5
 800883e:	f000 f805 	bl	800884c <__swsetup_r>
 8008842:	2800      	cmp	r0, #0
 8008844:	d0d5      	beq.n	80087f2 <__swbuf_r+0x20>
 8008846:	f04f 37ff 	mov.w	r7, #4294967295
 800884a:	e7f4      	b.n	8008836 <__swbuf_r+0x64>

0800884c <__swsetup_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4b2a      	ldr	r3, [pc, #168]	; (80088f8 <__swsetup_r+0xac>)
 8008850:	4605      	mov	r5, r0
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	460c      	mov	r4, r1
 8008856:	b118      	cbz	r0, 8008860 <__swsetup_r+0x14>
 8008858:	6a03      	ldr	r3, [r0, #32]
 800885a:	b90b      	cbnz	r3, 8008860 <__swsetup_r+0x14>
 800885c:	f7ff fe7e 	bl	800855c <__sinit>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008866:	0718      	lsls	r0, r3, #28
 8008868:	d422      	bmi.n	80088b0 <__swsetup_r+0x64>
 800886a:	06d9      	lsls	r1, r3, #27
 800886c:	d407      	bmi.n	800887e <__swsetup_r+0x32>
 800886e:	2309      	movs	r3, #9
 8008870:	602b      	str	r3, [r5, #0]
 8008872:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	e034      	b.n	80088e8 <__swsetup_r+0x9c>
 800887e:	0758      	lsls	r0, r3, #29
 8008880:	d512      	bpl.n	80088a8 <__swsetup_r+0x5c>
 8008882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008884:	b141      	cbz	r1, 8008898 <__swsetup_r+0x4c>
 8008886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888a:	4299      	cmp	r1, r3
 800888c:	d002      	beq.n	8008894 <__swsetup_r+0x48>
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f8b0 	bl	80089f4 <_free_r>
 8008894:	2300      	movs	r3, #0
 8008896:	6363      	str	r3, [r4, #52]	; 0x34
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	2300      	movs	r3, #0
 80088a2:	6063      	str	r3, [r4, #4]
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f043 0308 	orr.w	r3, r3, #8
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b94b      	cbnz	r3, 80088c8 <__swsetup_r+0x7c>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088be:	d003      	beq.n	80088c8 <__swsetup_r+0x7c>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 fe8e 	bl	80095e4 <__smakebuf_r>
 80088c8:	89a0      	ldrh	r0, [r4, #12]
 80088ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088ce:	f010 0301 	ands.w	r3, r0, #1
 80088d2:	d00a      	beq.n	80088ea <__swsetup_r+0x9e>
 80088d4:	2300      	movs	r3, #0
 80088d6:	60a3      	str	r3, [r4, #8]
 80088d8:	6963      	ldr	r3, [r4, #20]
 80088da:	425b      	negs	r3, r3
 80088dc:	61a3      	str	r3, [r4, #24]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	b943      	cbnz	r3, 80088f4 <__swsetup_r+0xa8>
 80088e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088e6:	d1c4      	bne.n	8008872 <__swsetup_r+0x26>
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	0781      	lsls	r1, r0, #30
 80088ec:	bf58      	it	pl
 80088ee:	6963      	ldrpl	r3, [r4, #20]
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	e7f4      	b.n	80088de <__swsetup_r+0x92>
 80088f4:	2000      	movs	r0, #0
 80088f6:	e7f7      	b.n	80088e8 <__swsetup_r+0x9c>
 80088f8:	20000078 	.word	0x20000078

080088fc <memset>:
 80088fc:	4402      	add	r2, r0
 80088fe:	4603      	mov	r3, r0
 8008900:	4293      	cmp	r3, r2
 8008902:	d100      	bne.n	8008906 <memset+0xa>
 8008904:	4770      	bx	lr
 8008906:	f803 1b01 	strb.w	r1, [r3], #1
 800890a:	e7f9      	b.n	8008900 <memset+0x4>

0800890c <_close_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d06      	ldr	r5, [pc, #24]	; (8008928 <_close_r+0x1c>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7f9 f9bf 	bl	8001c9a <_close>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_close_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_close_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20000b64 	.word	0x20000b64

0800892c <_lseek_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_lseek_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f9 f9d4 	bl	8001ce8 <_lseek>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_lseek_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_lseek_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20000b64 	.word	0x20000b64

08008950 <_read_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d07      	ldr	r5, [pc, #28]	; (8008970 <_read_r+0x20>)
 8008954:	4604      	mov	r4, r0
 8008956:	4608      	mov	r0, r1
 8008958:	4611      	mov	r1, r2
 800895a:	2200      	movs	r2, #0
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	f7f9 f97e 	bl	8001c60 <_read>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_read_r+0x1e>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_read_r+0x1e>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	20000b64 	.word	0x20000b64

08008974 <_write_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_write_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f7 ff30 	bl	80007e8 <_write>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_write_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_write_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000b64 	.word	0x20000b64

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000078 	.word	0x20000078

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	; (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	; (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	; (80089e8 <__libc_init_array+0x44>)
 80089b8:	f000 fee2 	bl	8009780 <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	080099e4 	.word	0x080099e4
 80089e0:	080099e4 	.word	0x080099e4
 80089e4:	080099e4 	.word	0x080099e4
 80089e8:	080099e8 	.word	0x080099e8

080089ec <__retarget_lock_init_recursive>:
 80089ec:	4770      	bx	lr

080089ee <__retarget_lock_acquire_recursive>:
 80089ee:	4770      	bx	lr

080089f0 <__retarget_lock_release_recursive>:
 80089f0:	4770      	bx	lr
	...

080089f4 <_free_r>:
 80089f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089f6:	2900      	cmp	r1, #0
 80089f8:	d044      	beq.n	8008a84 <_free_r+0x90>
 80089fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089fe:	9001      	str	r0, [sp, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f1a1 0404 	sub.w	r4, r1, #4
 8008a06:	bfb8      	it	lt
 8008a08:	18e4      	addlt	r4, r4, r3
 8008a0a:	f000 f8df 	bl	8008bcc <__malloc_lock>
 8008a0e:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <_free_r+0x94>)
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	6813      	ldr	r3, [r2, #0]
 8008a14:	b933      	cbnz	r3, 8008a24 <_free_r+0x30>
 8008a16:	6063      	str	r3, [r4, #4]
 8008a18:	6014      	str	r4, [r2, #0]
 8008a1a:	b003      	add	sp, #12
 8008a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a20:	f000 b8da 	b.w	8008bd8 <__malloc_unlock>
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d908      	bls.n	8008a3a <_free_r+0x46>
 8008a28:	6825      	ldr	r5, [r4, #0]
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	bf01      	itttt	eq
 8008a30:	6819      	ldreq	r1, [r3, #0]
 8008a32:	685b      	ldreq	r3, [r3, #4]
 8008a34:	1949      	addeq	r1, r1, r5
 8008a36:	6021      	streq	r1, [r4, #0]
 8008a38:	e7ed      	b.n	8008a16 <_free_r+0x22>
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b10b      	cbz	r3, 8008a44 <_free_r+0x50>
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	d9fa      	bls.n	8008a3a <_free_r+0x46>
 8008a44:	6811      	ldr	r1, [r2, #0]
 8008a46:	1855      	adds	r5, r2, r1
 8008a48:	42a5      	cmp	r5, r4
 8008a4a:	d10b      	bne.n	8008a64 <_free_r+0x70>
 8008a4c:	6824      	ldr	r4, [r4, #0]
 8008a4e:	4421      	add	r1, r4
 8008a50:	1854      	adds	r4, r2, r1
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	d1e0      	bne.n	8008a1a <_free_r+0x26>
 8008a58:	681c      	ldr	r4, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	6053      	str	r3, [r2, #4]
 8008a5e:	440c      	add	r4, r1
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	e7da      	b.n	8008a1a <_free_r+0x26>
 8008a64:	d902      	bls.n	8008a6c <_free_r+0x78>
 8008a66:	230c      	movs	r3, #12
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	e7d6      	b.n	8008a1a <_free_r+0x26>
 8008a6c:	6825      	ldr	r5, [r4, #0]
 8008a6e:	1961      	adds	r1, r4, r5
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf04      	itt	eq
 8008a74:	6819      	ldreq	r1, [r3, #0]
 8008a76:	685b      	ldreq	r3, [r3, #4]
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	bf04      	itt	eq
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	6054      	str	r4, [r2, #4]
 8008a82:	e7ca      	b.n	8008a1a <_free_r+0x26>
 8008a84:	b003      	add	sp, #12
 8008a86:	bd30      	pop	{r4, r5, pc}
 8008a88:	20000b6c 	.word	0x20000b6c

08008a8c <sbrk_aligned>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	4e0e      	ldr	r6, [pc, #56]	; (8008ac8 <sbrk_aligned+0x3c>)
 8008a90:	460c      	mov	r4, r1
 8008a92:	6831      	ldr	r1, [r6, #0]
 8008a94:	4605      	mov	r5, r0
 8008a96:	b911      	cbnz	r1, 8008a9e <sbrk_aligned+0x12>
 8008a98:	f000 fe1c 	bl	80096d4 <_sbrk_r>
 8008a9c:	6030      	str	r0, [r6, #0]
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 fe17 	bl	80096d4 <_sbrk_r>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	d00a      	beq.n	8008ac0 <sbrk_aligned+0x34>
 8008aaa:	1cc4      	adds	r4, r0, #3
 8008aac:	f024 0403 	bic.w	r4, r4, #3
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	d007      	beq.n	8008ac4 <sbrk_aligned+0x38>
 8008ab4:	1a21      	subs	r1, r4, r0
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 fe0c 	bl	80096d4 <_sbrk_r>
 8008abc:	3001      	adds	r0, #1
 8008abe:	d101      	bne.n	8008ac4 <sbrk_aligned+0x38>
 8008ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	20000b70 	.word	0x20000b70

08008acc <_malloc_r>:
 8008acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	1ccd      	adds	r5, r1, #3
 8008ad2:	f025 0503 	bic.w	r5, r5, #3
 8008ad6:	3508      	adds	r5, #8
 8008ad8:	2d0c      	cmp	r5, #12
 8008ada:	bf38      	it	cc
 8008adc:	250c      	movcc	r5, #12
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	db01      	blt.n	8008ae8 <_malloc_r+0x1c>
 8008ae4:	42a9      	cmp	r1, r5
 8008ae6:	d905      	bls.n	8008af4 <_malloc_r+0x28>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	2600      	movs	r6, #0
 8008aee:	4630      	mov	r0, r6
 8008af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bc8 <_malloc_r+0xfc>
 8008af8:	f000 f868 	bl	8008bcc <__malloc_lock>
 8008afc:	f8d8 3000 	ldr.w	r3, [r8]
 8008b00:	461c      	mov	r4, r3
 8008b02:	bb5c      	cbnz	r4, 8008b5c <_malloc_r+0x90>
 8008b04:	4629      	mov	r1, r5
 8008b06:	4638      	mov	r0, r7
 8008b08:	f7ff ffc0 	bl	8008a8c <sbrk_aligned>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	4604      	mov	r4, r0
 8008b10:	d155      	bne.n	8008bbe <_malloc_r+0xf2>
 8008b12:	f8d8 4000 	ldr.w	r4, [r8]
 8008b16:	4626      	mov	r6, r4
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	d145      	bne.n	8008ba8 <_malloc_r+0xdc>
 8008b1c:	2c00      	cmp	r4, #0
 8008b1e:	d048      	beq.n	8008bb2 <_malloc_r+0xe6>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	4631      	mov	r1, r6
 8008b24:	4638      	mov	r0, r7
 8008b26:	eb04 0903 	add.w	r9, r4, r3
 8008b2a:	f000 fdd3 	bl	80096d4 <_sbrk_r>
 8008b2e:	4581      	cmp	r9, r0
 8008b30:	d13f      	bne.n	8008bb2 <_malloc_r+0xe6>
 8008b32:	6821      	ldr	r1, [r4, #0]
 8008b34:	1a6d      	subs	r5, r5, r1
 8008b36:	4629      	mov	r1, r5
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ffa7 	bl	8008a8c <sbrk_aligned>
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d037      	beq.n	8008bb2 <_malloc_r+0xe6>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	442b      	add	r3, r5
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	f8d8 3000 	ldr.w	r3, [r8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d038      	beq.n	8008bc2 <_malloc_r+0xf6>
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	42a2      	cmp	r2, r4
 8008b54:	d12b      	bne.n	8008bae <_malloc_r+0xe2>
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
 8008b5a:	e00f      	b.n	8008b7c <_malloc_r+0xb0>
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	1b52      	subs	r2, r2, r5
 8008b60:	d41f      	bmi.n	8008ba2 <_malloc_r+0xd6>
 8008b62:	2a0b      	cmp	r2, #11
 8008b64:	d917      	bls.n	8008b96 <_malloc_r+0xca>
 8008b66:	1961      	adds	r1, r4, r5
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	6025      	str	r5, [r4, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	6059      	strne	r1, [r3, #4]
 8008b70:	6863      	ldr	r3, [r4, #4]
 8008b72:	bf08      	it	eq
 8008b74:	f8c8 1000 	streq.w	r1, [r8]
 8008b78:	5162      	str	r2, [r4, r5]
 8008b7a:	604b      	str	r3, [r1, #4]
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f104 060b 	add.w	r6, r4, #11
 8008b82:	f000 f829 	bl	8008bd8 <__malloc_unlock>
 8008b86:	f026 0607 	bic.w	r6, r6, #7
 8008b8a:	1d23      	adds	r3, r4, #4
 8008b8c:	1af2      	subs	r2, r6, r3
 8008b8e:	d0ae      	beq.n	8008aee <_malloc_r+0x22>
 8008b90:	1b9b      	subs	r3, r3, r6
 8008b92:	50a3      	str	r3, [r4, r2]
 8008b94:	e7ab      	b.n	8008aee <_malloc_r+0x22>
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	6862      	ldr	r2, [r4, #4]
 8008b9a:	d1dd      	bne.n	8008b58 <_malloc_r+0x8c>
 8008b9c:	f8c8 2000 	str.w	r2, [r8]
 8008ba0:	e7ec      	b.n	8008b7c <_malloc_r+0xb0>
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	6864      	ldr	r4, [r4, #4]
 8008ba6:	e7ac      	b.n	8008b02 <_malloc_r+0x36>
 8008ba8:	4634      	mov	r4, r6
 8008baa:	6876      	ldr	r6, [r6, #4]
 8008bac:	e7b4      	b.n	8008b18 <_malloc_r+0x4c>
 8008bae:	4613      	mov	r3, r2
 8008bb0:	e7cc      	b.n	8008b4c <_malloc_r+0x80>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f000 f80e 	bl	8008bd8 <__malloc_unlock>
 8008bbc:	e797      	b.n	8008aee <_malloc_r+0x22>
 8008bbe:	6025      	str	r5, [r4, #0]
 8008bc0:	e7dc      	b.n	8008b7c <_malloc_r+0xb0>
 8008bc2:	605b      	str	r3, [r3, #4]
 8008bc4:	deff      	udf	#255	; 0xff
 8008bc6:	bf00      	nop
 8008bc8:	20000b6c 	.word	0x20000b6c

08008bcc <__malloc_lock>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__malloc_lock+0x8>)
 8008bce:	f7ff bf0e 	b.w	80089ee <__retarget_lock_acquire_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20000b68 	.word	0x20000b68

08008bd8 <__malloc_unlock>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__malloc_unlock+0x8>)
 8008bda:	f7ff bf09 	b.w	80089f0 <__retarget_lock_release_recursive>
 8008bde:	bf00      	nop
 8008be0:	20000b68 	.word	0x20000b68

08008be4 <__ssputs_r>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	688e      	ldr	r6, [r1, #8]
 8008bea:	461f      	mov	r7, r3
 8008bec:	42be      	cmp	r6, r7
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	4682      	mov	sl, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	d82c      	bhi.n	8008c52 <__ssputs_r+0x6e>
 8008bf8:	898a      	ldrh	r2, [r1, #12]
 8008bfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bfe:	d026      	beq.n	8008c4e <__ssputs_r+0x6a>
 8008c00:	6965      	ldr	r5, [r4, #20]
 8008c02:	6909      	ldr	r1, [r1, #16]
 8008c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c08:	eba3 0901 	sub.w	r9, r3, r1
 8008c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c10:	1c7b      	adds	r3, r7, #1
 8008c12:	444b      	add	r3, r9
 8008c14:	106d      	asrs	r5, r5, #1
 8008c16:	429d      	cmp	r5, r3
 8008c18:	bf38      	it	cc
 8008c1a:	461d      	movcc	r5, r3
 8008c1c:	0553      	lsls	r3, r2, #21
 8008c1e:	d527      	bpl.n	8008c70 <__ssputs_r+0x8c>
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7ff ff53 	bl	8008acc <_malloc_r>
 8008c26:	4606      	mov	r6, r0
 8008c28:	b360      	cbz	r0, 8008c84 <__ssputs_r+0xa0>
 8008c2a:	6921      	ldr	r1, [r4, #16]
 8008c2c:	464a      	mov	r2, r9
 8008c2e:	f000 fd61 	bl	80096f4 <memcpy>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	6126      	str	r6, [r4, #16]
 8008c40:	6165      	str	r5, [r4, #20]
 8008c42:	444e      	add	r6, r9
 8008c44:	eba5 0509 	sub.w	r5, r5, r9
 8008c48:	6026      	str	r6, [r4, #0]
 8008c4a:	60a5      	str	r5, [r4, #8]
 8008c4c:	463e      	mov	r6, r7
 8008c4e:	42be      	cmp	r6, r7
 8008c50:	d900      	bls.n	8008c54 <__ssputs_r+0x70>
 8008c52:	463e      	mov	r6, r7
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	4632      	mov	r2, r6
 8008c58:	4641      	mov	r1, r8
 8008c5a:	f000 fcff 	bl	800965c <memmove>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	1b9b      	subs	r3, r3, r6
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	4433      	add	r3, r6
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	462a      	mov	r2, r5
 8008c72:	f000 fd4d 	bl	8009710 <_realloc_r>
 8008c76:	4606      	mov	r6, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1e0      	bne.n	8008c3e <__ssputs_r+0x5a>
 8008c7c:	6921      	ldr	r1, [r4, #16]
 8008c7e:	4650      	mov	r0, sl
 8008c80:	f7ff feb8 	bl	80089f4 <_free_r>
 8008c84:	230c      	movs	r3, #12
 8008c86:	f8ca 3000 	str.w	r3, [sl]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	f04f 30ff 	mov.w	r0, #4294967295
 8008c96:	e7e9      	b.n	8008c6c <__ssputs_r+0x88>

08008c98 <_svfiprintf_r>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4698      	mov	r8, r3
 8008c9e:	898b      	ldrh	r3, [r1, #12]
 8008ca0:	061b      	lsls	r3, r3, #24
 8008ca2:	b09d      	sub	sp, #116	; 0x74
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	4614      	mov	r4, r2
 8008caa:	d50e      	bpl.n	8008cca <_svfiprintf_r+0x32>
 8008cac:	690b      	ldr	r3, [r1, #16]
 8008cae:	b963      	cbnz	r3, 8008cca <_svfiprintf_r+0x32>
 8008cb0:	2140      	movs	r1, #64	; 0x40
 8008cb2:	f7ff ff0b 	bl	8008acc <_malloc_r>
 8008cb6:	6028      	str	r0, [r5, #0]
 8008cb8:	6128      	str	r0, [r5, #16]
 8008cba:	b920      	cbnz	r0, 8008cc6 <_svfiprintf_r+0x2e>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e0d0      	b.n	8008e68 <_svfiprintf_r+0x1d0>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	616b      	str	r3, [r5, #20]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cce:	2320      	movs	r3, #32
 8008cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd8:	2330      	movs	r3, #48	; 0x30
 8008cda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e80 <_svfiprintf_r+0x1e8>
 8008cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce2:	f04f 0901 	mov.w	r9, #1
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	469a      	mov	sl, r3
 8008cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cee:	b10a      	cbz	r2, 8008cf4 <_svfiprintf_r+0x5c>
 8008cf0:	2a25      	cmp	r2, #37	; 0x25
 8008cf2:	d1f9      	bne.n	8008ce8 <_svfiprintf_r+0x50>
 8008cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf8:	d00b      	beq.n	8008d12 <_svfiprintf_r+0x7a>
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ff6f 	bl	8008be4 <__ssputs_r>
 8008d06:	3001      	adds	r0, #1
 8008d08:	f000 80a9 	beq.w	8008e5e <_svfiprintf_r+0x1c6>
 8008d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0e:	445a      	add	r2, fp
 8008d10:	9209      	str	r2, [sp, #36]	; 0x24
 8008d12:	f89a 3000 	ldrb.w	r3, [sl]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 80a1 	beq.w	8008e5e <_svfiprintf_r+0x1c6>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d26:	f10a 0a01 	add.w	sl, sl, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d32:	931a      	str	r3, [sp, #104]	; 0x68
 8008d34:	4654      	mov	r4, sl
 8008d36:	2205      	movs	r2, #5
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	4850      	ldr	r0, [pc, #320]	; (8008e80 <_svfiprintf_r+0x1e8>)
 8008d3e:	f7f7 fa5f 	bl	8000200 <memchr>
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	b9d8      	cbnz	r0, 8008d7e <_svfiprintf_r+0xe6>
 8008d46:	06d0      	lsls	r0, r2, #27
 8008d48:	bf44      	itt	mi
 8008d4a:	2320      	movmi	r3, #32
 8008d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d50:	0711      	lsls	r1, r2, #28
 8008d52:	bf44      	itt	mi
 8008d54:	232b      	movmi	r3, #43	; 0x2b
 8008d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d60:	d015      	beq.n	8008d8e <_svfiprintf_r+0xf6>
 8008d62:	9a07      	ldr	r2, [sp, #28]
 8008d64:	4654      	mov	r4, sl
 8008d66:	2000      	movs	r0, #0
 8008d68:	f04f 0c0a 	mov.w	ip, #10
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d72:	3b30      	subs	r3, #48	; 0x30
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d94d      	bls.n	8008e14 <_svfiprintf_r+0x17c>
 8008d78:	b1b0      	cbz	r0, 8008da8 <_svfiprintf_r+0x110>
 8008d7a:	9207      	str	r2, [sp, #28]
 8008d7c:	e014      	b.n	8008da8 <_svfiprintf_r+0x110>
 8008d7e:	eba0 0308 	sub.w	r3, r0, r8
 8008d82:	fa09 f303 	lsl.w	r3, r9, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	46a2      	mov	sl, r4
 8008d8c:	e7d2      	b.n	8008d34 <_svfiprintf_r+0x9c>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d19      	adds	r1, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9103      	str	r1, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfbb      	ittet	lt
 8008d9a:	425b      	neglt	r3, r3
 8008d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008da0:	9307      	strge	r3, [sp, #28]
 8008da2:	9307      	strlt	r3, [sp, #28]
 8008da4:	bfb8      	it	lt
 8008da6:	9204      	strlt	r2, [sp, #16]
 8008da8:	7823      	ldrb	r3, [r4, #0]
 8008daa:	2b2e      	cmp	r3, #46	; 0x2e
 8008dac:	d10c      	bne.n	8008dc8 <_svfiprintf_r+0x130>
 8008dae:	7863      	ldrb	r3, [r4, #1]
 8008db0:	2b2a      	cmp	r3, #42	; 0x2a
 8008db2:	d134      	bne.n	8008e1e <_svfiprintf_r+0x186>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9203      	str	r2, [sp, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	bfb8      	it	lt
 8008dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dc4:	3402      	adds	r4, #2
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e90 <_svfiprintf_r+0x1f8>
 8008dcc:	7821      	ldrb	r1, [r4, #0]
 8008dce:	2203      	movs	r2, #3
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	f7f7 fa15 	bl	8000200 <memchr>
 8008dd6:	b138      	cbz	r0, 8008de8 <_svfiprintf_r+0x150>
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	eba0 000a 	sub.w	r0, r0, sl
 8008dde:	2240      	movs	r2, #64	; 0x40
 8008de0:	4082      	lsls	r2, r0
 8008de2:	4313      	orrs	r3, r2
 8008de4:	3401      	adds	r4, #1
 8008de6:	9304      	str	r3, [sp, #16]
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	4825      	ldr	r0, [pc, #148]	; (8008e84 <_svfiprintf_r+0x1ec>)
 8008dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df2:	2206      	movs	r2, #6
 8008df4:	f7f7 fa04 	bl	8000200 <memchr>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d038      	beq.n	8008e6e <_svfiprintf_r+0x1d6>
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <_svfiprintf_r+0x1f0>)
 8008dfe:	bb1b      	cbnz	r3, 8008e48 <_svfiprintf_r+0x1b0>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	3307      	adds	r3, #7
 8008e04:	f023 0307 	bic.w	r3, r3, #7
 8008e08:	3308      	adds	r3, #8
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0e:	4433      	add	r3, r6
 8008e10:	9309      	str	r3, [sp, #36]	; 0x24
 8008e12:	e768      	b.n	8008ce6 <_svfiprintf_r+0x4e>
 8008e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e18:	460c      	mov	r4, r1
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e7a6      	b.n	8008d6c <_svfiprintf_r+0xd4>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	3401      	adds	r4, #1
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f04f 0c0a 	mov.w	ip, #10
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e30:	3a30      	subs	r2, #48	; 0x30
 8008e32:	2a09      	cmp	r2, #9
 8008e34:	d903      	bls.n	8008e3e <_svfiprintf_r+0x1a6>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0c6      	beq.n	8008dc8 <_svfiprintf_r+0x130>
 8008e3a:	9105      	str	r1, [sp, #20]
 8008e3c:	e7c4      	b.n	8008dc8 <_svfiprintf_r+0x130>
 8008e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e42:	4604      	mov	r4, r0
 8008e44:	2301      	movs	r3, #1
 8008e46:	e7f0      	b.n	8008e2a <_svfiprintf_r+0x192>
 8008e48:	ab03      	add	r3, sp, #12
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <_svfiprintf_r+0x1f4>)
 8008e50:	a904      	add	r1, sp, #16
 8008e52:	4638      	mov	r0, r7
 8008e54:	f3af 8000 	nop.w
 8008e58:	1c42      	adds	r2, r0, #1
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	d1d6      	bne.n	8008e0c <_svfiprintf_r+0x174>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	065b      	lsls	r3, r3, #25
 8008e62:	f53f af2d 	bmi.w	8008cc0 <_svfiprintf_r+0x28>
 8008e66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e68:	b01d      	add	sp, #116	; 0x74
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	ab03      	add	r3, sp, #12
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	462a      	mov	r2, r5
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <_svfiprintf_r+0x1f4>)
 8008e76:	a904      	add	r1, sp, #16
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f000 f9bd 	bl	80091f8 <_printf_i>
 8008e7e:	e7eb      	b.n	8008e58 <_svfiprintf_r+0x1c0>
 8008e80:	080099a8 	.word	0x080099a8
 8008e84:	080099b2 	.word	0x080099b2
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008be5 	.word	0x08008be5
 8008e90:	080099ae 	.word	0x080099ae

08008e94 <__sfputc_r>:
 8008e94:	6893      	ldr	r3, [r2, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	b410      	push	{r4}
 8008e9c:	6093      	str	r3, [r2, #8]
 8008e9e:	da08      	bge.n	8008eb2 <__sfputc_r+0x1e>
 8008ea0:	6994      	ldr	r4, [r2, #24]
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	db01      	blt.n	8008eaa <__sfputc_r+0x16>
 8008ea6:	290a      	cmp	r1, #10
 8008ea8:	d103      	bne.n	8008eb2 <__sfputc_r+0x1e>
 8008eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eae:	f7ff bc90 	b.w	80087d2 <__swbuf_r>
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	1c58      	adds	r0, r3, #1
 8008eb6:	6010      	str	r0, [r2, #0]
 8008eb8:	7019      	strb	r1, [r3, #0]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <__sfputs_r>:
 8008ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	18d5      	adds	r5, r2, r3
 8008ecc:	42ac      	cmp	r4, r5
 8008ece:	d101      	bne.n	8008ed4 <__sfputs_r+0x12>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e007      	b.n	8008ee4 <__sfputs_r+0x22>
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	463a      	mov	r2, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ffda 	bl	8008e94 <__sfputc_r>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d1f3      	bne.n	8008ecc <__sfputs_r+0xa>
 8008ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee8 <_vfiprintf_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	460d      	mov	r5, r1
 8008eee:	b09d      	sub	sp, #116	; 0x74
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	4698      	mov	r8, r3
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	b118      	cbz	r0, 8008f00 <_vfiprintf_r+0x18>
 8008ef8:	6a03      	ldr	r3, [r0, #32]
 8008efa:	b90b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x18>
 8008efc:	f7ff fb2e 	bl	800855c <__sinit>
 8008f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f02:	07d9      	lsls	r1, r3, #31
 8008f04:	d405      	bmi.n	8008f12 <_vfiprintf_r+0x2a>
 8008f06:	89ab      	ldrh	r3, [r5, #12]
 8008f08:	059a      	lsls	r2, r3, #22
 8008f0a:	d402      	bmi.n	8008f12 <_vfiprintf_r+0x2a>
 8008f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f0e:	f7ff fd6e 	bl	80089ee <__retarget_lock_acquire_recursive>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	071b      	lsls	r3, r3, #28
 8008f16:	d501      	bpl.n	8008f1c <_vfiprintf_r+0x34>
 8008f18:	692b      	ldr	r3, [r5, #16]
 8008f1a:	b99b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x5c>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7ff fc94 	bl	800884c <__swsetup_r>
 8008f24:	b170      	cbz	r0, 8008f44 <_vfiprintf_r+0x5c>
 8008f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f28:	07dc      	lsls	r4, r3, #31
 8008f2a:	d504      	bpl.n	8008f36 <_vfiprintf_r+0x4e>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	b01d      	add	sp, #116	; 0x74
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	0598      	lsls	r0, r3, #22
 8008f3a:	d4f7      	bmi.n	8008f2c <_vfiprintf_r+0x44>
 8008f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3e:	f7ff fd57 	bl	80089f0 <__retarget_lock_release_recursive>
 8008f42:	e7f3      	b.n	8008f2c <_vfiprintf_r+0x44>
 8008f44:	2300      	movs	r3, #0
 8008f46:	9309      	str	r3, [sp, #36]	; 0x24
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f52:	2330      	movs	r3, #48	; 0x30
 8008f54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009108 <_vfiprintf_r+0x220>
 8008f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5c:	f04f 0901 	mov.w	r9, #1
 8008f60:	4623      	mov	r3, r4
 8008f62:	469a      	mov	sl, r3
 8008f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f68:	b10a      	cbz	r2, 8008f6e <_vfiprintf_r+0x86>
 8008f6a:	2a25      	cmp	r2, #37	; 0x25
 8008f6c:	d1f9      	bne.n	8008f62 <_vfiprintf_r+0x7a>
 8008f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f72:	d00b      	beq.n	8008f8c <_vfiprintf_r+0xa4>
 8008f74:	465b      	mov	r3, fp
 8008f76:	4622      	mov	r2, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ffa1 	bl	8008ec2 <__sfputs_r>
 8008f80:	3001      	adds	r0, #1
 8008f82:	f000 80a9 	beq.w	80090d8 <_vfiprintf_r+0x1f0>
 8008f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f88:	445a      	add	r2, fp
 8008f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a1 	beq.w	80090d8 <_vfiprintf_r+0x1f0>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa0:	f10a 0a01 	add.w	sl, sl, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fac:	931a      	str	r3, [sp, #104]	; 0x68
 8008fae:	4654      	mov	r4, sl
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4854      	ldr	r0, [pc, #336]	; (8009108 <_vfiprintf_r+0x220>)
 8008fb8:	f7f7 f922 	bl	8000200 <memchr>
 8008fbc:	9a04      	ldr	r2, [sp, #16]
 8008fbe:	b9d8      	cbnz	r0, 8008ff8 <_vfiprintf_r+0x110>
 8008fc0:	06d1      	lsls	r1, r2, #27
 8008fc2:	bf44      	itt	mi
 8008fc4:	2320      	movmi	r3, #32
 8008fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fca:	0713      	lsls	r3, r2, #28
 8008fcc:	bf44      	itt	mi
 8008fce:	232b      	movmi	r3, #43	; 0x2b
 8008fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fda:	d015      	beq.n	8009008 <_vfiprintf_r+0x120>
 8008fdc:	9a07      	ldr	r2, [sp, #28]
 8008fde:	4654      	mov	r4, sl
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f04f 0c0a 	mov.w	ip, #10
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fec:	3b30      	subs	r3, #48	; 0x30
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d94d      	bls.n	800908e <_vfiprintf_r+0x1a6>
 8008ff2:	b1b0      	cbz	r0, 8009022 <_vfiprintf_r+0x13a>
 8008ff4:	9207      	str	r2, [sp, #28]
 8008ff6:	e014      	b.n	8009022 <_vfiprintf_r+0x13a>
 8008ff8:	eba0 0308 	sub.w	r3, r0, r8
 8008ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	46a2      	mov	sl, r4
 8009006:	e7d2      	b.n	8008fae <_vfiprintf_r+0xc6>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d19      	adds	r1, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9103      	str	r1, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfbb      	ittet	lt
 8009014:	425b      	neglt	r3, r3
 8009016:	f042 0202 	orrlt.w	r2, r2, #2
 800901a:	9307      	strge	r3, [sp, #28]
 800901c:	9307      	strlt	r3, [sp, #28]
 800901e:	bfb8      	it	lt
 8009020:	9204      	strlt	r2, [sp, #16]
 8009022:	7823      	ldrb	r3, [r4, #0]
 8009024:	2b2e      	cmp	r3, #46	; 0x2e
 8009026:	d10c      	bne.n	8009042 <_vfiprintf_r+0x15a>
 8009028:	7863      	ldrb	r3, [r4, #1]
 800902a:	2b2a      	cmp	r3, #42	; 0x2a
 800902c:	d134      	bne.n	8009098 <_vfiprintf_r+0x1b0>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9203      	str	r2, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfb8      	it	lt
 800903a:	f04f 33ff 	movlt.w	r3, #4294967295
 800903e:	3402      	adds	r4, #2
 8009040:	9305      	str	r3, [sp, #20]
 8009042:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009118 <_vfiprintf_r+0x230>
 8009046:	7821      	ldrb	r1, [r4, #0]
 8009048:	2203      	movs	r2, #3
 800904a:	4650      	mov	r0, sl
 800904c:	f7f7 f8d8 	bl	8000200 <memchr>
 8009050:	b138      	cbz	r0, 8009062 <_vfiprintf_r+0x17a>
 8009052:	9b04      	ldr	r3, [sp, #16]
 8009054:	eba0 000a 	sub.w	r0, r0, sl
 8009058:	2240      	movs	r2, #64	; 0x40
 800905a:	4082      	lsls	r2, r0
 800905c:	4313      	orrs	r3, r2
 800905e:	3401      	adds	r4, #1
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4829      	ldr	r0, [pc, #164]	; (800910c <_vfiprintf_r+0x224>)
 8009068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906c:	2206      	movs	r2, #6
 800906e:	f7f7 f8c7 	bl	8000200 <memchr>
 8009072:	2800      	cmp	r0, #0
 8009074:	d03f      	beq.n	80090f6 <_vfiprintf_r+0x20e>
 8009076:	4b26      	ldr	r3, [pc, #152]	; (8009110 <_vfiprintf_r+0x228>)
 8009078:	bb1b      	cbnz	r3, 80090c2 <_vfiprintf_r+0x1da>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	3307      	adds	r3, #7
 800907e:	f023 0307 	bic.w	r3, r3, #7
 8009082:	3308      	adds	r3, #8
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	443b      	add	r3, r7
 800908a:	9309      	str	r3, [sp, #36]	; 0x24
 800908c:	e768      	b.n	8008f60 <_vfiprintf_r+0x78>
 800908e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009092:	460c      	mov	r4, r1
 8009094:	2001      	movs	r0, #1
 8009096:	e7a6      	b.n	8008fe6 <_vfiprintf_r+0xfe>
 8009098:	2300      	movs	r3, #0
 800909a:	3401      	adds	r4, #1
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	4619      	mov	r1, r3
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	4620      	mov	r0, r4
 80090a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090aa:	3a30      	subs	r2, #48	; 0x30
 80090ac:	2a09      	cmp	r2, #9
 80090ae:	d903      	bls.n	80090b8 <_vfiprintf_r+0x1d0>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0c6      	beq.n	8009042 <_vfiprintf_r+0x15a>
 80090b4:	9105      	str	r1, [sp, #20]
 80090b6:	e7c4      	b.n	8009042 <_vfiprintf_r+0x15a>
 80090b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090bc:	4604      	mov	r4, r0
 80090be:	2301      	movs	r3, #1
 80090c0:	e7f0      	b.n	80090a4 <_vfiprintf_r+0x1bc>
 80090c2:	ab03      	add	r3, sp, #12
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	462a      	mov	r2, r5
 80090c8:	4b12      	ldr	r3, [pc, #72]	; (8009114 <_vfiprintf_r+0x22c>)
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	4630      	mov	r0, r6
 80090ce:	f3af 8000 	nop.w
 80090d2:	4607      	mov	r7, r0
 80090d4:	1c78      	adds	r0, r7, #1
 80090d6:	d1d6      	bne.n	8009086 <_vfiprintf_r+0x19e>
 80090d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090da:	07d9      	lsls	r1, r3, #31
 80090dc:	d405      	bmi.n	80090ea <_vfiprintf_r+0x202>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	059a      	lsls	r2, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_vfiprintf_r+0x202>
 80090e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e6:	f7ff fc83 	bl	80089f0 <__retarget_lock_release_recursive>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	065b      	lsls	r3, r3, #25
 80090ee:	f53f af1d 	bmi.w	8008f2c <_vfiprintf_r+0x44>
 80090f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f4:	e71c      	b.n	8008f30 <_vfiprintf_r+0x48>
 80090f6:	ab03      	add	r3, sp, #12
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	462a      	mov	r2, r5
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <_vfiprintf_r+0x22c>)
 80090fe:	a904      	add	r1, sp, #16
 8009100:	4630      	mov	r0, r6
 8009102:	f000 f879 	bl	80091f8 <_printf_i>
 8009106:	e7e4      	b.n	80090d2 <_vfiprintf_r+0x1ea>
 8009108:	080099a8 	.word	0x080099a8
 800910c:	080099b2 	.word	0x080099b2
 8009110:	00000000 	.word	0x00000000
 8009114:	08008ec3 	.word	0x08008ec3
 8009118:	080099ae 	.word	0x080099ae

0800911c <_printf_common>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	4699      	mov	r9, r3
 8009124:	688a      	ldr	r2, [r1, #8]
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800912c:	4293      	cmp	r3, r2
 800912e:	bfb8      	it	lt
 8009130:	4613      	movlt	r3, r2
 8009132:	6033      	str	r3, [r6, #0]
 8009134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009138:	4607      	mov	r7, r0
 800913a:	460c      	mov	r4, r1
 800913c:	b10a      	cbz	r2, 8009142 <_printf_common+0x26>
 800913e:	3301      	adds	r3, #1
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	0699      	lsls	r1, r3, #26
 8009146:	bf42      	ittt	mi
 8009148:	6833      	ldrmi	r3, [r6, #0]
 800914a:	3302      	addmi	r3, #2
 800914c:	6033      	strmi	r3, [r6, #0]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d106      	bne.n	8009164 <_printf_common+0x48>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	6832      	ldr	r2, [r6, #0]
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc26      	bgt.n	80091b2 <_printf_common+0x96>
 8009164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009168:	1e13      	subs	r3, r2, #0
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	bf18      	it	ne
 800916e:	2301      	movne	r3, #1
 8009170:	0692      	lsls	r2, r2, #26
 8009172:	d42b      	bmi.n	80091cc <_printf_common+0xb0>
 8009174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009178:	4649      	mov	r1, r9
 800917a:	4638      	mov	r0, r7
 800917c:	47c0      	blx	r8
 800917e:	3001      	adds	r0, #1
 8009180:	d01e      	beq.n	80091c0 <_printf_common+0xa4>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	6922      	ldr	r2, [r4, #16]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	2b04      	cmp	r3, #4
 800918c:	bf02      	ittt	eq
 800918e:	68e5      	ldreq	r5, [r4, #12]
 8009190:	6833      	ldreq	r3, [r6, #0]
 8009192:	1aed      	subeq	r5, r5, r3
 8009194:	68a3      	ldr	r3, [r4, #8]
 8009196:	bf0c      	ite	eq
 8009198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800919c:	2500      	movne	r5, #0
 800919e:	4293      	cmp	r3, r2
 80091a0:	bfc4      	itt	gt
 80091a2:	1a9b      	subgt	r3, r3, r2
 80091a4:	18ed      	addgt	r5, r5, r3
 80091a6:	2600      	movs	r6, #0
 80091a8:	341a      	adds	r4, #26
 80091aa:	42b5      	cmp	r5, r6
 80091ac:	d11a      	bne.n	80091e4 <_printf_common+0xc8>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e008      	b.n	80091c4 <_printf_common+0xa8>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4652      	mov	r2, sl
 80091b6:	4649      	mov	r1, r9
 80091b8:	4638      	mov	r0, r7
 80091ba:	47c0      	blx	r8
 80091bc:	3001      	adds	r0, #1
 80091be:	d103      	bne.n	80091c8 <_printf_common+0xac>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	3501      	adds	r5, #1
 80091ca:	e7c6      	b.n	800915a <_printf_common+0x3e>
 80091cc:	18e1      	adds	r1, r4, r3
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	2030      	movs	r0, #48	; 0x30
 80091d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d6:	4422      	add	r2, r4
 80091d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e0:	3302      	adds	r3, #2
 80091e2:	e7c7      	b.n	8009174 <_printf_common+0x58>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4622      	mov	r2, r4
 80091e8:	4649      	mov	r1, r9
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c0      	blx	r8
 80091ee:	3001      	adds	r0, #1
 80091f0:	d0e6      	beq.n	80091c0 <_printf_common+0xa4>
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7d9      	b.n	80091aa <_printf_common+0x8e>
	...

080091f8 <_printf_i>:
 80091f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	7e0f      	ldrb	r7, [r1, #24]
 80091fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009200:	2f78      	cmp	r7, #120	; 0x78
 8009202:	4691      	mov	r9, r2
 8009204:	4680      	mov	r8, r0
 8009206:	460c      	mov	r4, r1
 8009208:	469a      	mov	sl, r3
 800920a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800920e:	d807      	bhi.n	8009220 <_printf_i+0x28>
 8009210:	2f62      	cmp	r7, #98	; 0x62
 8009212:	d80a      	bhi.n	800922a <_printf_i+0x32>
 8009214:	2f00      	cmp	r7, #0
 8009216:	f000 80d4 	beq.w	80093c2 <_printf_i+0x1ca>
 800921a:	2f58      	cmp	r7, #88	; 0x58
 800921c:	f000 80c0 	beq.w	80093a0 <_printf_i+0x1a8>
 8009220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009228:	e03a      	b.n	80092a0 <_printf_i+0xa8>
 800922a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800922e:	2b15      	cmp	r3, #21
 8009230:	d8f6      	bhi.n	8009220 <_printf_i+0x28>
 8009232:	a101      	add	r1, pc, #4	; (adr r1, 8009238 <_printf_i+0x40>)
 8009234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009238:	08009291 	.word	0x08009291
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009221 	.word	0x08009221
 8009244:	08009221 	.word	0x08009221
 8009248:	08009221 	.word	0x08009221
 800924c:	08009221 	.word	0x08009221
 8009250:	080092a5 	.word	0x080092a5
 8009254:	08009221 	.word	0x08009221
 8009258:	08009221 	.word	0x08009221
 800925c:	08009221 	.word	0x08009221
 8009260:	08009221 	.word	0x08009221
 8009264:	080093a9 	.word	0x080093a9
 8009268:	080092d1 	.word	0x080092d1
 800926c:	08009363 	.word	0x08009363
 8009270:	08009221 	.word	0x08009221
 8009274:	08009221 	.word	0x08009221
 8009278:	080093cb 	.word	0x080093cb
 800927c:	08009221 	.word	0x08009221
 8009280:	080092d1 	.word	0x080092d1
 8009284:	08009221 	.word	0x08009221
 8009288:	08009221 	.word	0x08009221
 800928c:	0800936b 	.word	0x0800936b
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	1d1a      	adds	r2, r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	602a      	str	r2, [r5, #0]
 8009298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800929c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a0:	2301      	movs	r3, #1
 80092a2:	e09f      	b.n	80093e4 <_printf_i+0x1ec>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	0607      	lsls	r7, r0, #24
 80092aa:	f103 0104 	add.w	r1, r3, #4
 80092ae:	6029      	str	r1, [r5, #0]
 80092b0:	d501      	bpl.n	80092b6 <_printf_i+0xbe>
 80092b2:	681e      	ldr	r6, [r3, #0]
 80092b4:	e003      	b.n	80092be <_printf_i+0xc6>
 80092b6:	0646      	lsls	r6, r0, #25
 80092b8:	d5fb      	bpl.n	80092b2 <_printf_i+0xba>
 80092ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092be:	2e00      	cmp	r6, #0
 80092c0:	da03      	bge.n	80092ca <_printf_i+0xd2>
 80092c2:	232d      	movs	r3, #45	; 0x2d
 80092c4:	4276      	negs	r6, r6
 80092c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ca:	485a      	ldr	r0, [pc, #360]	; (8009434 <_printf_i+0x23c>)
 80092cc:	230a      	movs	r3, #10
 80092ce:	e012      	b.n	80092f6 <_printf_i+0xfe>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	6029      	str	r1, [r5, #0]
 80092d8:	0605      	lsls	r5, r0, #24
 80092da:	d501      	bpl.n	80092e0 <_printf_i+0xe8>
 80092dc:	681e      	ldr	r6, [r3, #0]
 80092de:	e002      	b.n	80092e6 <_printf_i+0xee>
 80092e0:	0641      	lsls	r1, r0, #25
 80092e2:	d5fb      	bpl.n	80092dc <_printf_i+0xe4>
 80092e4:	881e      	ldrh	r6, [r3, #0]
 80092e6:	4853      	ldr	r0, [pc, #332]	; (8009434 <_printf_i+0x23c>)
 80092e8:	2f6f      	cmp	r7, #111	; 0x6f
 80092ea:	bf0c      	ite	eq
 80092ec:	2308      	moveq	r3, #8
 80092ee:	230a      	movne	r3, #10
 80092f0:	2100      	movs	r1, #0
 80092f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092f6:	6865      	ldr	r5, [r4, #4]
 80092f8:	60a5      	str	r5, [r4, #8]
 80092fa:	2d00      	cmp	r5, #0
 80092fc:	bfa2      	ittt	ge
 80092fe:	6821      	ldrge	r1, [r4, #0]
 8009300:	f021 0104 	bicge.w	r1, r1, #4
 8009304:	6021      	strge	r1, [r4, #0]
 8009306:	b90e      	cbnz	r6, 800930c <_printf_i+0x114>
 8009308:	2d00      	cmp	r5, #0
 800930a:	d04b      	beq.n	80093a4 <_printf_i+0x1ac>
 800930c:	4615      	mov	r5, r2
 800930e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009312:	fb03 6711 	mls	r7, r3, r1, r6
 8009316:	5dc7      	ldrb	r7, [r0, r7]
 8009318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800931c:	4637      	mov	r7, r6
 800931e:	42bb      	cmp	r3, r7
 8009320:	460e      	mov	r6, r1
 8009322:	d9f4      	bls.n	800930e <_printf_i+0x116>
 8009324:	2b08      	cmp	r3, #8
 8009326:	d10b      	bne.n	8009340 <_printf_i+0x148>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07de      	lsls	r6, r3, #31
 800932c:	d508      	bpl.n	8009340 <_printf_i+0x148>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4299      	cmp	r1, r3
 8009334:	bfde      	ittt	le
 8009336:	2330      	movle	r3, #48	; 0x30
 8009338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800933c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009340:	1b52      	subs	r2, r2, r5
 8009342:	6122      	str	r2, [r4, #16]
 8009344:	f8cd a000 	str.w	sl, [sp]
 8009348:	464b      	mov	r3, r9
 800934a:	aa03      	add	r2, sp, #12
 800934c:	4621      	mov	r1, r4
 800934e:	4640      	mov	r0, r8
 8009350:	f7ff fee4 	bl	800911c <_printf_common>
 8009354:	3001      	adds	r0, #1
 8009356:	d14a      	bne.n	80093ee <_printf_i+0x1f6>
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	b004      	add	sp, #16
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f043 0320 	orr.w	r3, r3, #32
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	4833      	ldr	r0, [pc, #204]	; (8009438 <_printf_i+0x240>)
 800936c:	2778      	movs	r7, #120	; 0x78
 800936e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	061f      	lsls	r7, r3, #24
 8009378:	f851 6b04 	ldr.w	r6, [r1], #4
 800937c:	d402      	bmi.n	8009384 <_printf_i+0x18c>
 800937e:	065f      	lsls	r7, r3, #25
 8009380:	bf48      	it	mi
 8009382:	b2b6      	uxthmi	r6, r6
 8009384:	07df      	lsls	r7, r3, #31
 8009386:	bf48      	it	mi
 8009388:	f043 0320 	orrmi.w	r3, r3, #32
 800938c:	6029      	str	r1, [r5, #0]
 800938e:	bf48      	it	mi
 8009390:	6023      	strmi	r3, [r4, #0]
 8009392:	b91e      	cbnz	r6, 800939c <_printf_i+0x1a4>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	f023 0320 	bic.w	r3, r3, #32
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	2310      	movs	r3, #16
 800939e:	e7a7      	b.n	80092f0 <_printf_i+0xf8>
 80093a0:	4824      	ldr	r0, [pc, #144]	; (8009434 <_printf_i+0x23c>)
 80093a2:	e7e4      	b.n	800936e <_printf_i+0x176>
 80093a4:	4615      	mov	r5, r2
 80093a6:	e7bd      	b.n	8009324 <_printf_i+0x12c>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	6826      	ldr	r6, [r4, #0]
 80093ac:	6961      	ldr	r1, [r4, #20]
 80093ae:	1d18      	adds	r0, r3, #4
 80093b0:	6028      	str	r0, [r5, #0]
 80093b2:	0635      	lsls	r5, r6, #24
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	d501      	bpl.n	80093bc <_printf_i+0x1c4>
 80093b8:	6019      	str	r1, [r3, #0]
 80093ba:	e002      	b.n	80093c2 <_printf_i+0x1ca>
 80093bc:	0670      	lsls	r0, r6, #25
 80093be:	d5fb      	bpl.n	80093b8 <_printf_i+0x1c0>
 80093c0:	8019      	strh	r1, [r3, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	4615      	mov	r5, r2
 80093c8:	e7bc      	b.n	8009344 <_printf_i+0x14c>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	602a      	str	r2, [r5, #0]
 80093d0:	681d      	ldr	r5, [r3, #0]
 80093d2:	6862      	ldr	r2, [r4, #4]
 80093d4:	2100      	movs	r1, #0
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7f6 ff12 	bl	8000200 <memchr>
 80093dc:	b108      	cbz	r0, 80093e2 <_printf_i+0x1ea>
 80093de:	1b40      	subs	r0, r0, r5
 80093e0:	6060      	str	r0, [r4, #4]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	6123      	str	r3, [r4, #16]
 80093e6:	2300      	movs	r3, #0
 80093e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ec:	e7aa      	b.n	8009344 <_printf_i+0x14c>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	462a      	mov	r2, r5
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0ad      	beq.n	8009358 <_printf_i+0x160>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	079b      	lsls	r3, r3, #30
 8009400:	d413      	bmi.n	800942a <_printf_i+0x232>
 8009402:	68e0      	ldr	r0, [r4, #12]
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	4298      	cmp	r0, r3
 8009408:	bfb8      	it	lt
 800940a:	4618      	movlt	r0, r3
 800940c:	e7a6      	b.n	800935c <_printf_i+0x164>
 800940e:	2301      	movs	r3, #1
 8009410:	4632      	mov	r2, r6
 8009412:	4649      	mov	r1, r9
 8009414:	4640      	mov	r0, r8
 8009416:	47d0      	blx	sl
 8009418:	3001      	adds	r0, #1
 800941a:	d09d      	beq.n	8009358 <_printf_i+0x160>
 800941c:	3501      	adds	r5, #1
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	9903      	ldr	r1, [sp, #12]
 8009422:	1a5b      	subs	r3, r3, r1
 8009424:	42ab      	cmp	r3, r5
 8009426:	dcf2      	bgt.n	800940e <_printf_i+0x216>
 8009428:	e7eb      	b.n	8009402 <_printf_i+0x20a>
 800942a:	2500      	movs	r5, #0
 800942c:	f104 0619 	add.w	r6, r4, #25
 8009430:	e7f5      	b.n	800941e <_printf_i+0x226>
 8009432:	bf00      	nop
 8009434:	080099b9 	.word	0x080099b9
 8009438:	080099ca 	.word	0x080099ca

0800943c <__sflush_r>:
 800943c:	898a      	ldrh	r2, [r1, #12]
 800943e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009442:	4605      	mov	r5, r0
 8009444:	0710      	lsls	r0, r2, #28
 8009446:	460c      	mov	r4, r1
 8009448:	d458      	bmi.n	80094fc <__sflush_r+0xc0>
 800944a:	684b      	ldr	r3, [r1, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dc05      	bgt.n	800945c <__sflush_r+0x20>
 8009450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	dc02      	bgt.n	800945c <__sflush_r+0x20>
 8009456:	2000      	movs	r0, #0
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800945e:	2e00      	cmp	r6, #0
 8009460:	d0f9      	beq.n	8009456 <__sflush_r+0x1a>
 8009462:	2300      	movs	r3, #0
 8009464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009468:	682f      	ldr	r7, [r5, #0]
 800946a:	6a21      	ldr	r1, [r4, #32]
 800946c:	602b      	str	r3, [r5, #0]
 800946e:	d032      	beq.n	80094d6 <__sflush_r+0x9a>
 8009470:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	075a      	lsls	r2, r3, #29
 8009476:	d505      	bpl.n	8009484 <__sflush_r+0x48>
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	1ac0      	subs	r0, r0, r3
 800947c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800947e:	b10b      	cbz	r3, 8009484 <__sflush_r+0x48>
 8009480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009482:	1ac0      	subs	r0, r0, r3
 8009484:	2300      	movs	r3, #0
 8009486:	4602      	mov	r2, r0
 8009488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800948a:	6a21      	ldr	r1, [r4, #32]
 800948c:	4628      	mov	r0, r5
 800948e:	47b0      	blx	r6
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	d106      	bne.n	80094a4 <__sflush_r+0x68>
 8009496:	6829      	ldr	r1, [r5, #0]
 8009498:	291d      	cmp	r1, #29
 800949a:	d82b      	bhi.n	80094f4 <__sflush_r+0xb8>
 800949c:	4a29      	ldr	r2, [pc, #164]	; (8009544 <__sflush_r+0x108>)
 800949e:	410a      	asrs	r2, r1
 80094a0:	07d6      	lsls	r6, r2, #31
 80094a2:	d427      	bmi.n	80094f4 <__sflush_r+0xb8>
 80094a4:	2200      	movs	r2, #0
 80094a6:	6062      	str	r2, [r4, #4]
 80094a8:	04d9      	lsls	r1, r3, #19
 80094aa:	6922      	ldr	r2, [r4, #16]
 80094ac:	6022      	str	r2, [r4, #0]
 80094ae:	d504      	bpl.n	80094ba <__sflush_r+0x7e>
 80094b0:	1c42      	adds	r2, r0, #1
 80094b2:	d101      	bne.n	80094b8 <__sflush_r+0x7c>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b903      	cbnz	r3, 80094ba <__sflush_r+0x7e>
 80094b8:	6560      	str	r0, [r4, #84]	; 0x54
 80094ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094bc:	602f      	str	r7, [r5, #0]
 80094be:	2900      	cmp	r1, #0
 80094c0:	d0c9      	beq.n	8009456 <__sflush_r+0x1a>
 80094c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c6:	4299      	cmp	r1, r3
 80094c8:	d002      	beq.n	80094d0 <__sflush_r+0x94>
 80094ca:	4628      	mov	r0, r5
 80094cc:	f7ff fa92 	bl	80089f4 <_free_r>
 80094d0:	2000      	movs	r0, #0
 80094d2:	6360      	str	r0, [r4, #52]	; 0x34
 80094d4:	e7c0      	b.n	8009458 <__sflush_r+0x1c>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	1c41      	adds	r1, r0, #1
 80094de:	d1c8      	bne.n	8009472 <__sflush_r+0x36>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0c5      	beq.n	8009472 <__sflush_r+0x36>
 80094e6:	2b1d      	cmp	r3, #29
 80094e8:	d001      	beq.n	80094ee <__sflush_r+0xb2>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	d101      	bne.n	80094f2 <__sflush_r+0xb6>
 80094ee:	602f      	str	r7, [r5, #0]
 80094f0:	e7b1      	b.n	8009456 <__sflush_r+0x1a>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7ad      	b.n	8009458 <__sflush_r+0x1c>
 80094fc:	690f      	ldr	r7, [r1, #16]
 80094fe:	2f00      	cmp	r7, #0
 8009500:	d0a9      	beq.n	8009456 <__sflush_r+0x1a>
 8009502:	0793      	lsls	r3, r2, #30
 8009504:	680e      	ldr	r6, [r1, #0]
 8009506:	bf08      	it	eq
 8009508:	694b      	ldreq	r3, [r1, #20]
 800950a:	600f      	str	r7, [r1, #0]
 800950c:	bf18      	it	ne
 800950e:	2300      	movne	r3, #0
 8009510:	eba6 0807 	sub.w	r8, r6, r7
 8009514:	608b      	str	r3, [r1, #8]
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	dd9c      	ble.n	8009456 <__sflush_r+0x1a>
 800951c:	6a21      	ldr	r1, [r4, #32]
 800951e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009520:	4643      	mov	r3, r8
 8009522:	463a      	mov	r2, r7
 8009524:	4628      	mov	r0, r5
 8009526:	47b0      	blx	r6
 8009528:	2800      	cmp	r0, #0
 800952a:	dc06      	bgt.n	800953a <__sflush_r+0xfe>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	f04f 30ff 	mov.w	r0, #4294967295
 8009538:	e78e      	b.n	8009458 <__sflush_r+0x1c>
 800953a:	4407      	add	r7, r0
 800953c:	eba8 0800 	sub.w	r8, r8, r0
 8009540:	e7e9      	b.n	8009516 <__sflush_r+0xda>
 8009542:	bf00      	nop
 8009544:	dfbffffe 	.word	0xdfbffffe

08009548 <_fflush_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	690b      	ldr	r3, [r1, #16]
 800954c:	4605      	mov	r5, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b913      	cbnz	r3, 8009558 <_fflush_r+0x10>
 8009552:	2500      	movs	r5, #0
 8009554:	4628      	mov	r0, r5
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	b118      	cbz	r0, 8009562 <_fflush_r+0x1a>
 800955a:	6a03      	ldr	r3, [r0, #32]
 800955c:	b90b      	cbnz	r3, 8009562 <_fflush_r+0x1a>
 800955e:	f7fe fffd 	bl	800855c <__sinit>
 8009562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0f3      	beq.n	8009552 <_fflush_r+0xa>
 800956a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800956c:	07d0      	lsls	r0, r2, #31
 800956e:	d404      	bmi.n	800957a <_fflush_r+0x32>
 8009570:	0599      	lsls	r1, r3, #22
 8009572:	d402      	bmi.n	800957a <_fflush_r+0x32>
 8009574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009576:	f7ff fa3a 	bl	80089ee <__retarget_lock_acquire_recursive>
 800957a:	4628      	mov	r0, r5
 800957c:	4621      	mov	r1, r4
 800957e:	f7ff ff5d 	bl	800943c <__sflush_r>
 8009582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009584:	07da      	lsls	r2, r3, #31
 8009586:	4605      	mov	r5, r0
 8009588:	d4e4      	bmi.n	8009554 <_fflush_r+0xc>
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	059b      	lsls	r3, r3, #22
 800958e:	d4e1      	bmi.n	8009554 <_fflush_r+0xc>
 8009590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009592:	f7ff fa2d 	bl	80089f0 <__retarget_lock_release_recursive>
 8009596:	e7dd      	b.n	8009554 <_fflush_r+0xc>

08009598 <__swhatbuf_r>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a0:	2900      	cmp	r1, #0
 80095a2:	b096      	sub	sp, #88	; 0x58
 80095a4:	4615      	mov	r5, r2
 80095a6:	461e      	mov	r6, r3
 80095a8:	da0d      	bge.n	80095c6 <__swhatbuf_r+0x2e>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	bf0c      	ite	eq
 80095b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095ba:	2340      	movne	r3, #64	; 0x40
 80095bc:	2000      	movs	r0, #0
 80095be:	6031      	str	r1, [r6, #0]
 80095c0:	602b      	str	r3, [r5, #0]
 80095c2:	b016      	add	sp, #88	; 0x58
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
 80095c6:	466a      	mov	r2, sp
 80095c8:	f000 f862 	bl	8009690 <_fstat_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	dbec      	blt.n	80095aa <__swhatbuf_r+0x12>
 80095d0:	9901      	ldr	r1, [sp, #4]
 80095d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095da:	4259      	negs	r1, r3
 80095dc:	4159      	adcs	r1, r3
 80095de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e2:	e7eb      	b.n	80095bc <__swhatbuf_r+0x24>

080095e4 <__smakebuf_r>:
 80095e4:	898b      	ldrh	r3, [r1, #12]
 80095e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095e8:	079d      	lsls	r5, r3, #30
 80095ea:	4606      	mov	r6, r0
 80095ec:	460c      	mov	r4, r1
 80095ee:	d507      	bpl.n	8009600 <__smakebuf_r+0x1c>
 80095f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	2301      	movs	r3, #1
 80095fa:	6163      	str	r3, [r4, #20]
 80095fc:	b002      	add	sp, #8
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	ab01      	add	r3, sp, #4
 8009602:	466a      	mov	r2, sp
 8009604:	f7ff ffc8 	bl	8009598 <__swhatbuf_r>
 8009608:	9900      	ldr	r1, [sp, #0]
 800960a:	4605      	mov	r5, r0
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff fa5d 	bl	8008acc <_malloc_r>
 8009612:	b948      	cbnz	r0, 8009628 <__smakebuf_r+0x44>
 8009614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009618:	059a      	lsls	r2, r3, #22
 800961a:	d4ef      	bmi.n	80095fc <__smakebuf_r+0x18>
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	f043 0302 	orr.w	r3, r3, #2
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	e7e3      	b.n	80095f0 <__smakebuf_r+0xc>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	6020      	str	r0, [r4, #0]
 800962c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009630:	81a3      	strh	r3, [r4, #12]
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	6163      	str	r3, [r4, #20]
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	6120      	str	r0, [r4, #16]
 800963a:	b15b      	cbz	r3, 8009654 <__smakebuf_r+0x70>
 800963c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f837 	bl	80096b4 <_isatty_r>
 8009646:	b128      	cbz	r0, 8009654 <__smakebuf_r+0x70>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	431d      	orrs	r5, r3
 8009658:	81a5      	strh	r5, [r4, #12]
 800965a:	e7cf      	b.n	80095fc <__smakebuf_r+0x18>

0800965c <memmove>:
 800965c:	4288      	cmp	r0, r1
 800965e:	b510      	push	{r4, lr}
 8009660:	eb01 0402 	add.w	r4, r1, r2
 8009664:	d902      	bls.n	800966c <memmove+0x10>
 8009666:	4284      	cmp	r4, r0
 8009668:	4623      	mov	r3, r4
 800966a:	d807      	bhi.n	800967c <memmove+0x20>
 800966c:	1e43      	subs	r3, r0, #1
 800966e:	42a1      	cmp	r1, r4
 8009670:	d008      	beq.n	8009684 <memmove+0x28>
 8009672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800967a:	e7f8      	b.n	800966e <memmove+0x12>
 800967c:	4402      	add	r2, r0
 800967e:	4601      	mov	r1, r0
 8009680:	428a      	cmp	r2, r1
 8009682:	d100      	bne.n	8009686 <memmove+0x2a>
 8009684:	bd10      	pop	{r4, pc}
 8009686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800968e:	e7f7      	b.n	8009680 <memmove+0x24>

08009690 <_fstat_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_fstat_r+0x20>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	4611      	mov	r1, r2
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	f7f8 fb08 	bl	8001cb2 <_fstat>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	d102      	bne.n	80096ac <_fstat_r+0x1c>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	b103      	cbz	r3, 80096ac <_fstat_r+0x1c>
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	bd38      	pop	{r3, r4, r5, pc}
 80096ae:	bf00      	nop
 80096b0:	20000b64 	.word	0x20000b64

080096b4 <_isatty_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_isatty_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f8 fb07 	bl	8001cd2 <_isatty>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_isatty_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_isatty_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20000b64 	.word	0x20000b64

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d06      	ldr	r5, [pc, #24]	; (80096f0 <_sbrk_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f8 fb10 	bl	8001d04 <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000b64 	.word	0x20000b64

080096f4 <memcpy>:
 80096f4:	440a      	add	r2, r1
 80096f6:	4291      	cmp	r1, r2
 80096f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096fc:	d100      	bne.n	8009700 <memcpy+0xc>
 80096fe:	4770      	bx	lr
 8009700:	b510      	push	{r4, lr}
 8009702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970a:	4291      	cmp	r1, r2
 800970c:	d1f9      	bne.n	8009702 <memcpy+0xe>
 800970e:	bd10      	pop	{r4, pc}

08009710 <_realloc_r>:
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	4680      	mov	r8, r0
 8009716:	4614      	mov	r4, r2
 8009718:	460e      	mov	r6, r1
 800971a:	b921      	cbnz	r1, 8009726 <_realloc_r+0x16>
 800971c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	4611      	mov	r1, r2
 8009722:	f7ff b9d3 	b.w	8008acc <_malloc_r>
 8009726:	b92a      	cbnz	r2, 8009734 <_realloc_r+0x24>
 8009728:	f7ff f964 	bl	80089f4 <_free_r>
 800972c:	4625      	mov	r5, r4
 800972e:	4628      	mov	r0, r5
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	f000 f81b 	bl	800976e <_malloc_usable_size_r>
 8009738:	4284      	cmp	r4, r0
 800973a:	4607      	mov	r7, r0
 800973c:	d802      	bhi.n	8009744 <_realloc_r+0x34>
 800973e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009742:	d812      	bhi.n	800976a <_realloc_r+0x5a>
 8009744:	4621      	mov	r1, r4
 8009746:	4640      	mov	r0, r8
 8009748:	f7ff f9c0 	bl	8008acc <_malloc_r>
 800974c:	4605      	mov	r5, r0
 800974e:	2800      	cmp	r0, #0
 8009750:	d0ed      	beq.n	800972e <_realloc_r+0x1e>
 8009752:	42bc      	cmp	r4, r7
 8009754:	4622      	mov	r2, r4
 8009756:	4631      	mov	r1, r6
 8009758:	bf28      	it	cs
 800975a:	463a      	movcs	r2, r7
 800975c:	f7ff ffca 	bl	80096f4 <memcpy>
 8009760:	4631      	mov	r1, r6
 8009762:	4640      	mov	r0, r8
 8009764:	f7ff f946 	bl	80089f4 <_free_r>
 8009768:	e7e1      	b.n	800972e <_realloc_r+0x1e>
 800976a:	4635      	mov	r5, r6
 800976c:	e7df      	b.n	800972e <_realloc_r+0x1e>

0800976e <_malloc_usable_size_r>:
 800976e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009772:	1f18      	subs	r0, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfbc      	itt	lt
 8009778:	580b      	ldrlt	r3, [r1, r0]
 800977a:	18c0      	addlt	r0, r0, r3
 800977c:	4770      	bx	lr
	...

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
