
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e0  080091e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e8  080091e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080091f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000ad8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b48  20000b48  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c41e  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003861  00000000  00000000  0003c501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001870  00000000  00000000  0003fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000133c  00000000  00000000  000415d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029224  00000000  00000000  00042914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dfd0  00000000  00000000  0006bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa4b7  00000000  00000000  00089b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007368  00000000  00000000  00183fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0018b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008fe4 	.word	0x08008fe4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08008fe4 	.word	0x08008fe4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f006 f8a1 	bl	8006716 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fd9f 	bl	800412c <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 fc7f 	bl	8007f08 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f006 f87a 	bl	8006716 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f006 f872 	bl	8006716 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f006 f862 	bl	8006716 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800900c 	.word	0x0800900c
 8000660:	20000418 	.word	0x20000418
 8000664:	2000035c 	.word	0x2000035c
 8000668:	08008ffc 	.word	0x08008ffc
 800066c:	08009004 	.word	0x08009004
 8000670:	08009008 	.word	0x08009008

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fd4b 	bl	800412c <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 fc14 	bl	8003f30 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fb15 	bl	8001d3c <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000035c 	.word	0x2000035c

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
HAL_StatusTypeDef update_nvitems(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f005 ff89 	bl	8006716 <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000418 	.word	0x20000418

08000814 <get_RTC_time>:

RTC_DateTypeDef sDate;
RTC_TimeTypeDef RTC_Time;
void get_RTC_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8

	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	4912      	ldr	r1, [pc, #72]	; (8000868 <get_RTC_time+0x54>)
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <get_RTC_time+0x58>)
 8000820:	f005 f8bc 	bl	800599c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	4912      	ldr	r1, [pc, #72]	; (8000870 <get_RTC_time+0x5c>)
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <get_RTC_time+0x58>)
 800082a:	f005 f999 	bl	8005b60 <HAL_RTC_GetDate>

//	printf("%s %02d:%02d:%02d\t\r\n", ampm[sTime.TimeFormat>>6],sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
			ampm[RTC_Time.TimeFormat >> 6], RTC_Time.Hours, RTC_Time.Minutes,
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <get_RTC_time+0x54>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	099b      	lsrs	r3, r3, #6
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <get_RTC_time+0x60>)
 8000840:	441a      	add	r2, r3
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <get_RTC_time+0x54>)
 8000844:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 8000846:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat >> 6], RTC_Time.Hours, RTC_Time.Minutes,
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <get_RTC_time+0x54>)
 800084a:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 800084c:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <get_RTC_time+0x54>)
 8000850:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9100      	str	r1, [sp, #0]
 8000856:	4603      	mov	r3, r0
 8000858:	4907      	ldr	r1, [pc, #28]	; (8000878 <get_RTC_time+0x64>)
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <get_RTC_time+0x68>)
 800085c:	f007 fb88 	bl	8007f70 <siprintf>
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200009d4 	.word	0x200009d4
 800086c:	200003b0 	.word	0x200003b0
 8000870:	200009d0 	.word	0x200009d0
 8000874:	20000000 	.word	0x20000000
 8000878:	08009024 	.word	0x08009024
 800087c:	20000974 	.word	0x20000974

08000880 <HAL_TIM_PeriodElapsedCallback>:
	HAL_FLASH_Lock();
}

uint32_t ADC_value;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
//		if (xy[0] <= 2900 && xy[0] <= 3500) {
//			current_state.button = NO_KEY;
//			printf("no key\r\n");
//		} else if (xy[0] )

}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <showCurrentTime>:

void showCurrentTime() {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af02      	add	r7, sp, #8

	RTC_Time.Hours;
	RTC_Time.Minutes;
	RTC_Time.Seconds;

	sprintf(temp_time_buf, "%02d: %02d: %02d", RTC_Time.Hours, RTC_Time.Minutes,
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <showCurrentTime+0x4c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <showCurrentTime+0x4c>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <showCurrentTime+0x4c>)
 80008a8:	789b      	ldrb	r3, [r3, #2]
	sprintf(temp_time_buf, "%02d: %02d: %02d", RTC_Time.Hours, RTC_Time.Minutes,
 80008aa:	4638      	mov	r0, r7
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	460b      	mov	r3, r1
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <showCurrentTime+0x50>)
 80008b2:	f007 fb5d 	bl	8007f70 <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	204e      	movs	r0, #78	; 0x4e
 80008ba:	f7ff ff31 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 80008be:	490a      	ldr	r1, [pc, #40]	; (80008e8 <showCurrentTime+0x54>)
 80008c0:	204e      	movs	r0, #78	; 0x4e
 80008c2:	f7ff ff6e 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80008c6:	21c0      	movs	r1, #192	; 0xc0
 80008c8:	204e      	movs	r0, #78	; 0x4e
 80008ca:	f7ff ff29 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	204e      	movs	r0, #78	; 0x4e
 80008d4:	f7ff ff65 	bl	80007a2 <LCD_SendString>

//	clearLCD();
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200009d4 	.word	0x200009d4
 80008e4:	08009038 	.word	0x08009038
 80008e8:	0800904c 	.word	0x0800904c

080008ec <timeDisplay>:
//	LCD_SendString(LCD_ADDR, "            ");
//	LCD_SendCommand(LCD_ADDR, 0b11000000);
//	LCD_SendString(LCD_ADDR, "            ");
//}

void timeDisplay() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == NORMAL_STATE) {
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <timeDisplay+0xe4>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d114      	bne.n	8000924 <timeDisplay+0x38>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	204e      	movs	r0, #78	; 0x4e
 80008fe:	f7ff ff0f 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Current Time");
 8000902:	4934      	ldr	r1, [pc, #208]	; (80009d4 <timeDisplay+0xe8>)
 8000904:	204e      	movs	r0, #78	; 0x4e
 8000906:	f7ff ff4c 	bl	80007a2 <LCD_SendString>

		hours = ctime.hours;
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <timeDisplay+0xec>)
 800090c:	f993 3000 	ldrsb.w	r3, [r3]
 8000910:	71fb      	strb	r3, [r7, #7]
		minutes = ctime.minutes;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <timeDisplay+0xec>)
 8000914:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000918:	71bb      	strb	r3, [r7, #6]
		seconds = ctime.seconds;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <timeDisplay+0xec>)
 800091c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000920:	717b      	strb	r3, [r7, #5]
 8000922:	e030      	b.n	8000986 <timeDisplay+0x9a>
	} else if (current_state.mode == TIME_SETTING) {
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <timeDisplay+0xe4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d114      	bne.n	8000956 <timeDisplay+0x6a>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	204e      	movs	r0, #78	; 0x4e
 8000930:	f7ff fef6 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting");
 8000934:	4929      	ldr	r1, [pc, #164]	; (80009dc <timeDisplay+0xf0>)
 8000936:	204e      	movs	r0, #78	; 0x4e
 8000938:	f7ff ff33 	bl	80007a2 <LCD_SendString>

		hours = stime.hours;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <timeDisplay+0xf4>)
 800093e:	f993 3000 	ldrsb.w	r3, [r3]
 8000942:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <timeDisplay+0xf4>)
 8000946:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800094a:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <timeDisplay+0xf4>)
 800094e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000952:	717b      	strb	r3, [r7, #5]
 8000954:	e017      	b.n	8000986 <timeDisplay+0x9a>
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <timeDisplay+0xe4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d113      	bne.n	8000986 <timeDisplay+0x9a>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	204e      	movs	r0, #78	; 0x4e
 8000962:	f7ff fedd 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 8000966:	491f      	ldr	r1, [pc, #124]	; (80009e4 <timeDisplay+0xf8>)
 8000968:	204e      	movs	r0, #78	; 0x4e
 800096a:	f7ff ff1a 	bl	80007a2 <LCD_SendString>

		hours = atime.hours;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <timeDisplay+0xfc>)
 8000970:	f993 3000 	ldrsb.w	r3, [r3]
 8000974:	71fb      	strb	r3, [r7, #7]
		minutes = atime.minutes;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <timeDisplay+0xfc>)
 8000978:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800097c:	71bb      	strb	r3, [r7, #6]
		seconds = atime.seconds;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <timeDisplay+0xfc>)
 8000980:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000984:	717b      	strb	r3, [r7, #5]
	}

	if (hours >= 12) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b0b      	cmp	r3, #11
 800098a:	d90b      	bls.n	80009a4 <timeDisplay+0xb8>
		sprintf(timeStr, "PM %02d:%02d:%02d", hours - 12, minutes, seconds);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f1a3 020c 	sub.w	r2, r3, #12
 8000992:	79b9      	ldrb	r1, [r7, #6]
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	460b      	mov	r3, r1
 800099a:	4914      	ldr	r1, [pc, #80]	; (80009ec <timeDisplay+0x100>)
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <timeDisplay+0x104>)
 800099e:	f007 fae7 	bl	8007f70 <siprintf>
 80009a2:	e008      	b.n	80009b6 <timeDisplay+0xca>
	} else {
		sprintf(timeStr, "AM %02d:%02d:%02d", hours, minutes, seconds);
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79b9      	ldrb	r1, [r7, #6]
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	4911      	ldr	r1, [pc, #68]	; (80009f4 <timeDisplay+0x108>)
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <timeDisplay+0x104>)
 80009b2:	f007 fadd 	bl	8007f70 <siprintf>
	}

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009b6:	21c0      	movs	r1, #192	; 0xc0
 80009b8:	204e      	movs	r0, #78	; 0x4e
 80009ba:	f7ff feb1 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 80009be:	490c      	ldr	r1, [pc, #48]	; (80009f0 <timeDisplay+0x104>)
 80009c0:	204e      	movs	r0, #78	; 0x4e
 80009c2:	f7ff feee 	bl	80007a2 <LCD_SendString>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200009a0 	.word	0x200009a0
 80009d4:	0800904c 	.word	0x0800904c
 80009d8:	200009c4 	.word	0x200009c4
 80009dc:	0800905c 	.word	0x0800905c
 80009e0:	200009c8 	.word	0x200009c8
 80009e4:	0800906c 	.word	0x0800906c
 80009e8:	200009cc 	.word	0x200009cc
 80009ec:	0800907c 	.word	0x0800907c
 80009f0:	200009a4 	.word	0x200009a4
 80009f4:	08009090 	.word	0x08009090

080009f8 <joyStick_btn_chk>:

int up, down, right, left = 0;

void joyStick_btn_chk() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
//	if (xy[0] > 2750 && xy[1] < 3000) {
//		current_state.button = NO_KEY;

//	printf("%d %d \r\n", xy[0], xy[1]);

	if (xy[0] < 50) {
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <joyStick_btn_chk+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b31      	cmp	r3, #49	; 0x31
 8000a02:	d806      	bhi.n	8000a12 <joyStick_btn_chk+0x1a>
		current_state.button = UP;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <joyStick_btn_chk+0x6c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	705a      	strb	r2, [r3, #1]
		printf("up\r\n");
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <joyStick_btn_chk+0x70>)
 8000a0c:	f007 fa74 	bl	8007ef8 <puts>
		printf("down\r\n");
//		down++;
	}

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
}
 8000a10:	e023      	b.n	8000a5a <joyStick_btn_chk+0x62>
	} else if (xy[1] < 50) {
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <joyStick_btn_chk+0x68>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b31      	cmp	r3, #49	; 0x31
 8000a18:	d806      	bhi.n	8000a28 <joyStick_btn_chk+0x30>
		current_state.button = LEFT;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <joyStick_btn_chk+0x6c>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	705a      	strb	r2, [r3, #1]
		printf("left\r\n");
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <joyStick_btn_chk+0x74>)
 8000a22:	f007 fa69 	bl	8007ef8 <puts>
}
 8000a26:	e018      	b.n	8000a5a <joyStick_btn_chk+0x62>
	} else if (xy[1] > 3000) {
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <joyStick_btn_chk+0x68>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d906      	bls.n	8000a42 <joyStick_btn_chk+0x4a>
		current_state.button = RIGHT;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <joyStick_btn_chk+0x6c>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	705a      	strb	r2, [r3, #1]
		printf("right\r\n");
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <joyStick_btn_chk+0x78>)
 8000a3c:	f007 fa5c 	bl	8007ef8 <puts>
}
 8000a40:	e00b      	b.n	8000a5a <joyStick_btn_chk+0x62>
	} else if (xy[0] > 3000) {
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <joyStick_btn_chk+0x68>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d905      	bls.n	8000a5a <joyStick_btn_chk+0x62>
		current_state.button = DOWN;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <joyStick_btn_chk+0x6c>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	705a      	strb	r2, [r3, #1]
		printf("down\r\n");
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <joyStick_btn_chk+0x7c>)
 8000a56:	f007 fa4f 	bl	8007ef8 <puts>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000968 	.word	0x20000968
 8000a64:	200009a0 	.word	0x200009a0
 8000a68:	080090a4 	.word	0x080090a4
 8000a6c:	080090a8 	.word	0x080090a8
 8000a70:	080090b0 	.word	0x080090b0
 8000a74:	080090b8 	.word	0x080090b8

08000a78 <time_set_mode>:

int t_position = 0;

void time_set_mode() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

//	printf("time set mode!! \r\n");

//int t_position = 0;

	joyStick_btn_chk();
 8000a7c:	f7ff ffbc 	bl	80009f8 <joyStick_btn_chk>

	if (t_position == 0) {
 8000a80:	4b63      	ldr	r3, [pc, #396]	; (8000c10 <time_set_mode+0x198>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d126      	bne.n	8000ad6 <time_set_mode+0x5e>
		printf("t_position 0 \r\n");
 8000a88:	4862      	ldr	r0, [pc, #392]	; (8000c14 <time_set_mode+0x19c>)
 8000a8a:	f007 fa35 	bl	8007ef8 <puts>
		switch (current_state.button) {
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <time_set_mode+0x1a0>)
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d002      	beq.n	8000a9c <time_set_mode+0x24>
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d019      	beq.n	8000ace <time_set_mode+0x56>
			break;
		case RIGHT:
			t_position = 1;
			break;
		default:
			break;
 8000a9a:	e0b4      	b.n	8000c06 <time_set_mode+0x18e>
			if (stime.hours >= 12) {
 8000a9c:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <time_set_mode+0x1a4>)
 8000a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000aa2:	2b0b      	cmp	r3, #11
 8000aa4:	dd09      	ble.n	8000aba <time_set_mode+0x42>
				stime.hours -= 12;
 8000aa6:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <time_set_mode+0x1a4>)
 8000aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	3b0c      	subs	r3, #12
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	b25a      	sxtb	r2, r3
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <time_set_mode+0x1a4>)
 8000ab6:	701a      	strb	r2, [r3, #0]
			break;
 8000ab8:	e0a5      	b.n	8000c06 <time_set_mode+0x18e>
				stime.hours += 12;
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <time_set_mode+0x1a4>)
 8000abc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	330c      	adds	r3, #12
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b25a      	sxtb	r2, r3
 8000ac8:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <time_set_mode+0x1a4>)
 8000aca:	701a      	strb	r2, [r3, #0]
			break;
 8000acc:	e09b      	b.n	8000c06 <time_set_mode+0x18e>
			t_position = 1;
 8000ace:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <time_set_mode+0x198>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
			break;
 8000ad4:	e097      	b.n	8000c06 <time_set_mode+0x18e>
		}
	} else if (t_position == 1) {
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <time_set_mode+0x198>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d13f      	bne.n	8000b5e <time_set_mode+0xe6>
		printf("t_position 1 \r\n");
 8000ade:	4850      	ldr	r0, [pc, #320]	; (8000c20 <time_set_mode+0x1a8>)
 8000ae0:	f007 fa0a 	bl	8007ef8 <puts>
		switch (current_state.button) {
 8000ae4:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <time_set_mode+0x1a0>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	f200 8084 	bhi.w	8000bf8 <time_set_mode+0x180>
 8000af0:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <time_set_mode+0x80>)
 8000af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af6:	bf00      	nop
 8000af8:	08000b17 	.word	0x08000b17
 8000afc:	08000b3b 	.word	0x08000b3b
 8000b00:	08000b09 	.word	0x08000b09
 8000b04:	08000b11 	.word	0x08000b11
		case RIGHT:
			t_position = 2;
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <time_set_mode+0x198>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	601a      	str	r2, [r3, #0]
			break;
 8000b0e:	e07a      	b.n	8000c06 <time_set_mode+0x18e>
		case LEFT:
			t_position = 0;
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <time_set_mode+0x198>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
		case UP:
			stime.hours++;
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <time_set_mode+0x1a4>)
 8000b18:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <time_set_mode+0x1a4>)
 8000b26:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <time_set_mode+0x1a4>)
 8000b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2e:	2b0b      	cmp	r3, #11
 8000b30:	dd64      	ble.n	8000bfc <time_set_mode+0x184>
				stime.hours = 0;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <time_set_mode+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b38:	e060      	b.n	8000bfc <time_set_mode+0x184>
		case DOWN:
			stime.hours--;
 8000b3a:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <time_set_mode+0x1a4>)
 8000b3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3b01      	subs	r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	b25a      	sxtb	r2, r3
 8000b48:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <time_set_mode+0x1a4>)
 8000b4a:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <time_set_mode+0x1a4>)
 8000b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da50      	bge.n	8000bf8 <time_set_mode+0x180>
				stime.hours = 11;
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <time_set_mode+0x1a4>)
 8000b58:	220b      	movs	r2, #11
 8000b5a:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000b5c:	e04c      	b.n	8000bf8 <time_set_mode+0x180>
		}

	} else if (t_position == 2) {
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <time_set_mode+0x198>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d13d      	bne.n	8000be2 <time_set_mode+0x16a>
		printf("t_position 2 \r\n");
 8000b66:	482f      	ldr	r0, [pc, #188]	; (8000c24 <time_set_mode+0x1ac>)
 8000b68:	f007 f9c6 	bl	8007ef8 <puts>
		switch (current_state.button) {
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <time_set_mode+0x1a0>)
 8000b6e:	785b      	ldrb	r3, [r3, #1]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d844      	bhi.n	8000c00 <time_set_mode+0x188>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <time_set_mode+0x104>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b9b 	.word	0x08000b9b
 8000b80:	08000bbf 	.word	0x08000bbf
 8000b84:	08000b8d 	.word	0x08000b8d
 8000b88:	08000b95 	.word	0x08000b95
		case RIGHT:
			t_position = 3;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <time_set_mode+0x198>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
			break;
 8000b92:	e038      	b.n	8000c06 <time_set_mode+0x18e>
		case LEFT:
			t_position = 2;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <time_set_mode+0x198>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	601a      	str	r2, [r3, #0]
		case UP:
			stime.hours++;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <time_set_mode+0x1a4>)
 8000b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <time_set_mode+0x1a4>)
 8000baa:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <time_set_mode+0x1a4>)
 8000bae:	f993 3000 	ldrsb.w	r3, [r3]
 8000bb2:	2b0b      	cmp	r3, #11
 8000bb4:	dd26      	ble.n	8000c04 <time_set_mode+0x18c>
				stime.hours = 0;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <time_set_mode+0x1a4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bbc:	e022      	b.n	8000c04 <time_set_mode+0x18c>
		case DOWN:
			stime.hours--;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <time_set_mode+0x1a4>)
 8000bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <time_set_mode+0x1a4>)
 8000bce:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <time_set_mode+0x1a4>)
 8000bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da12      	bge.n	8000c00 <time_set_mode+0x188>
				stime.hours = 11;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <time_set_mode+0x1a4>)
 8000bdc:	220b      	movs	r2, #11
 8000bde:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000be0:	e00e      	b.n	8000c00 <time_set_mode+0x188>
		}
	} else if (t_position == 3) {
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <time_set_mode+0x198>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d10d      	bne.n	8000c06 <time_set_mode+0x18e>
		printf("t_position 3 \r\n");
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <time_set_mode+0x1b0>)
 8000bec:	f007 f984 	bl	8007ef8 <puts>
		t_position = 0;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <time_set_mode+0x198>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e006      	b.n	8000c06 <time_set_mode+0x18e>
			break;
 8000bf8:	bf00      	nop
 8000bfa:	e004      	b.n	8000c06 <time_set_mode+0x18e>
			break;
 8000bfc:	bf00      	nop
 8000bfe:	e002      	b.n	8000c06 <time_set_mode+0x18e>
			break;
 8000c00:	bf00      	nop
 8000c02:	e000      	b.n	8000c06 <time_set_mode+0x18e>
			break;
 8000c04:	bf00      	nop
	}

	timeDisplay();
 8000c06:	f7ff fe71 	bl	80008ec <timeDisplay>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200009e8 	.word	0x200009e8
 8000c14:	080090c0 	.word	0x080090c0
 8000c18:	200009a0 	.word	0x200009a0
 8000c1c:	200009c8 	.word	0x200009c8
 8000c20:	080090d0 	.word	0x080090d0
 8000c24:	080090e0 	.word	0x080090e0
 8000c28:	080090f0 	.word	0x080090f0

08000c2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c32:	f001 f811 	bl	8001c58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c36:	f000 f839 	bl	8000cac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3a:	f000 fad5 	bl	80011e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c3e:	f000 fab3 	bl	80011a8 <MX_DMA_Init>
	MX_ETH_Init();
 8000c42:	f000 f923 	bl	8000e8c <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000c46:	f000 fa57 	bl	80010f8 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000c4a:	f000 fa7f 	bl	800114c <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000c4e:	f000 f8bd 	bl	8000dcc <MX_ADC1_Init>
	MX_I2C1_Init();
 8000c52:	f000 f969 	bl	8000f28 <MX_I2C1_Init>
	MX_RTC_Init();
 8000c56:	f000 f9a7 	bl	8000fa8 <MX_RTC_Init>
	MX_TIM3_Init();
 8000c5a:	f000 f9ff 	bl	800105c <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000c5e:	f000 f891 	bl	8000d84 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000c62:	2202      	movs	r2, #2
 8000c64:	490d      	ldr	r1, [pc, #52]	; (8000c9c <main+0x70>)
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <main+0x74>)
 8000c68:	f001 f9e0 	bl	800202c <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_IT(&hadc1);
	HAL_TIM_Base_Start_IT(&htim3);
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <main+0x78>)
 8000c6e:	f005 f8d3 	bl	8005e18 <HAL_TIM_Base_Start_IT>
	init();
 8000c72:	f7ff fdb0 	bl	80007d6 <init>

	current_state.mode = NORMAL_STATE;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <main+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
		// RTC test
//	  get_time();
//	  HAL_Delay(1000);

//		joyStick_btn_chk();
		get_RTC_time();
 8000c7c:	f7ff fdca 	bl	8000814 <get_RTC_time>
		if (current_state.mode == NORMAL_STATE) {
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <main+0x7c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <main+0x60>
			showCurrentTime();
 8000c88:	f7ff fe04 	bl	8000894 <showCurrentTime>
		}

		if (current_state.mode == TIME_SETTING) {
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <main+0x7c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d1f3      	bne.n	8000c7c <main+0x50>
			time_set_mode();
 8000c94:	f7ff fef0 	bl	8000a78 <time_set_mode>
		get_RTC_time();
 8000c98:	e7f0      	b.n	8000c7c <main+0x50>
 8000c9a:	bf00      	nop
 8000c9c:	20000968 	.word	0x20000968
 8000ca0:	20000204 	.word	0x20000204
 8000ca4:	200003d0 	.word	0x200003d0
 8000ca8:	200009a0 	.word	0x200009a0

08000cac <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f007 fa50 	bl	8008160 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xd0>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <SystemClock_Config+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <SystemClock_Config+0xd4>)
 8000cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <SystemClock_Config+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000d08:	2305      	movs	r3, #5
 8000d0a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000d24:	23a8      	movs	r3, #168	; 0xa8
 8000d26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fec9 	bl	8004acc <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x98>
		Error_Handler();
 8000d40:	f000 fba6 	bl	8001490 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d54:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2105      	movs	r1, #5
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 f92a 	bl	8004fbc <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xc6>
		Error_Handler();
 8000d6e:	f000 fb8f 	bl	8001490 <Error_Handler>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3750      	adds	r7, #80	; 0x50
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2027      	movs	r0, #39	; 0x27
 8000d8e:	f001 fe1a 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d92:	2027      	movs	r0, #39	; 0x27
 8000d94:	f001 fe33 	bl	80029fe <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2028      	movs	r0, #40	; 0x28
 8000d9e:	f001 fe12 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f001 fe2b 	bl	80029fe <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	201d      	movs	r0, #29
 8000dae:	f001 fe0a 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000db2:	201d      	movs	r0, #29
 8000db4:	f001 fe23 	bl	80029fe <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2012      	movs	r0, #18
 8000dbe:	f001 fe02 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dc2:	2012      	movs	r0, #18
 8000dc4:	f001 fe1b 	bl	80029fe <HAL_NVIC_EnableIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000de0:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <MX_ADC1_Init+0xbc>)
 8000de2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e30:	4814      	ldr	r0, [pc, #80]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e32:	f000 ffa7 	bl	8001d84 <HAL_ADC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000e3c:	f000 fb28 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000e40:	230d      	movs	r3, #13
 8000e42:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e52:	f001 fa23 	bl	800229c <HAL_ADC_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x94>
		Error_Handler();
 8000e5c:	f000 fb18 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000e60:	230a      	movs	r3, #10
 8000e62:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e6e:	f001 fa15 	bl	800229c <HAL_ADC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0xb0>
		Error_Handler();
 8000e78:	f000 fb0a 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000204 	.word	0x20000204
 8000e88:	40012000 	.word	0x40012000

08000e8c <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ETH_Init+0x84>)
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <MX_ETH_Init+0x88>)
 8000e94:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000ea4:	22e1      	movs	r2, #225	; 0xe1
 8000ea6:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_ETH_Init+0x84>)
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_ETH_Init+0x8c>)
 8000ebe:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_ETH_Init+0x84>)
 8000ec2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ec6:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_ETH_Init+0x84>)
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <MX_ETH_Init+0x90>)
 8000ecc:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_ETH_Init+0x84>)
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <MX_ETH_Init+0x94>)
 8000ed2:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_ETH_Init+0x84>)
 8000ed6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000eda:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_ETH_Init+0x84>)
 8000ede:	f002 f9ab 	bl	8003238 <HAL_ETH_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ETH_Init+0x60>
		Error_Handler();
 8000ee8:	f000 fad2 	bl	8001490 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000eec:	2238      	movs	r2, #56	; 0x38
 8000eee:	2100      	movs	r1, #0
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_ETH_Init+0x98>)
 8000ef2:	f007 f935 	bl	8008160 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_ETH_Init+0x98>)
 8000ef8:	2221      	movs	r2, #33	; 0x21
 8000efa:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_ETH_Init+0x98>)
 8000efe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f02:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_ETH_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200002ac 	.word	0x200002ac
 8000f14:	40028000 	.word	0x40028000
 8000f18:	200009ec 	.word	0x200009ec
 8000f1c:	20000164 	.word	0x20000164
 8000f20:	200000c4 	.word	0x200000c4
 8000f24:	2000008c 	.word	0x2000008c

08000f28 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_I2C1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <MX_I2C1_Init+0x7c>)
 8000f36:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f66:	f002 fe9f 	bl	8003ca8 <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f70:	f000 fa8e 	bl	8001490 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f78:	f003 fc0f 	bl	800479a <HAL_I2CEx_ConfigAnalogFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000f82:	f000 fa85 	bl	8001490 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000f86:	2100      	movs	r1, #0
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f8a:	f003 fc42 	bl	8004812 <HAL_I2CEx_ConfigDigitalFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x70>
		Error_Handler();
 8000f94:	f000 fa7c 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000035c 	.word	0x2000035c
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	000186a0 	.word	0x000186a0

08000fa8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_RTC_Init+0xac>)
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <MX_RTC_Init+0xb0>)
 8000fc4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_RTC_Init+0xac>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_RTC_Init+0xac>)
 8000fce:	227f      	movs	r2, #127	; 0x7f
 8000fd0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_RTC_Init+0xac>)
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_RTC_Init+0xac>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_RTC_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_RTC_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000fea:	481a      	ldr	r0, [pc, #104]	; (8001054 <MX_RTC_Init+0xac>)
 8000fec:	f004 fbc6 	bl	800577c <HAL_RTC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_RTC_Init+0x52>
		Error_Handler();
 8000ff6:	f000 fa4b 	bl	8001490 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001002:	2300      	movs	r3, #0
 8001004:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <MX_RTC_Init+0xac>)
 8001016:	f004 fc27 	bl	8005868 <HAL_RTC_SetTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0x7c>
		Error_Handler();
 8001020:	f000 fa36 	bl	8001490 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001024:	2305      	movs	r3, #5
 8001026:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 8001028:	2311      	movs	r3, #17
 800102a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 800102c:	2310      	movs	r3, #16
 800102e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 8001030:	2323      	movs	r3, #35	; 0x23
 8001032:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001034:	463b      	mov	r3, r7
 8001036:	2201      	movs	r2, #1
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_RTC_Init+0xac>)
 800103c:	f004 fd0c 	bl	8005a58 <HAL_RTC_SetDate>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_RTC_Init+0xa2>
		Error_Handler();
 8001046:	f000 fa23 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200003b0 	.word	0x200003b0
 8001058:	40002800 	.word	0x40002800

0800105c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_TIM3_Init+0x94>)
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_TIM3_Init+0x98>)
 800107c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001080:	f242 7210 	movw	r2, #10000	; 0x2710
 8001084:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 900;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_TIM3_Init+0x94>)
 800108e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001092:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM3_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010a2:	f004 fe69 	bl	8005d78 <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM3_Init+0x54>
		Error_Handler();
 80010ac:	f000 f9f0 	bl	8001490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010be:	f005 f823 	bl	8006108 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0x70>
		Error_Handler();
 80010c8:	f000 f9e2 	bl	8001490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010cc:	2320      	movs	r3, #32
 80010ce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010da:	f005 fa3f 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80010e4:	f000 f9d4 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200003d0 	.word	0x200003d0
 80010f4:	40000400 	.word	0x40000400

080010f8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART3_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART3_UART_Init+0x4c>)
 8001130:	f005 faa4 	bl	800667c <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800113a:	f000 f9a9 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000418 	.word	0x20000418
 8001148:	40004800 	.word	0x40004800

0800114c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001152:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001156:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115a:	2204      	movs	r2, #4
 800115c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001160:	2202      	movs	r2, #2
 8001162:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116c:	2202      	movs	r2, #2
 800116e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001184:	2201      	movs	r2, #1
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001190:	f003 fb7e 	bl	8004890 <HAL_PCD_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800119a:	f000 f979 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000045c 	.word	0x2000045c

080011a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2038      	movs	r0, #56	; 0x38
 80011d0:	f001 fbf9 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d4:	2038      	movs	r0, #56	; 0x38
 80011d6:	f001 fc12 	bl	80029fe <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <MX_GPIO_Init+0x190>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a5c      	ldr	r2, [pc, #368]	; (8001378 <MX_GPIO_Init+0x190>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <MX_GPIO_Init+0x190>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b56      	ldr	r3, [pc, #344]	; (8001378 <MX_GPIO_Init+0x190>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a55      	ldr	r2, [pc, #340]	; (8001378 <MX_GPIO_Init+0x190>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <MX_GPIO_Init+0x190>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <MX_GPIO_Init+0x190>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a4e      	ldr	r2, [pc, #312]	; (8001378 <MX_GPIO_Init+0x190>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <MX_GPIO_Init+0x190>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <MX_GPIO_Init+0x190>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a47      	ldr	r2, [pc, #284]	; (8001378 <MX_GPIO_Init+0x190>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <MX_GPIO_Init+0x190>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <MX_GPIO_Init+0x190>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <MX_GPIO_Init+0x190>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <MX_GPIO_Init+0x190>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <MX_GPIO_Init+0x190>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a39      	ldr	r2, [pc, #228]	; (8001378 <MX_GPIO_Init+0x190>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_GPIO_Init+0x190>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <MX_GPIO_Init+0x190>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <MX_GPIO_Init+0x190>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_GPIO_Init+0x190>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80012c8:	482c      	ldr	r0, [pc, #176]	; (800137c <MX_GPIO_Init+0x194>)
 80012ca:	f002 fca1 	bl	8003c10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80012ce:	2200      	movs	r2, #0
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	482b      	ldr	r0, [pc, #172]	; (8001380 <MX_GPIO_Init+0x198>)
 80012d4:	f002 fc9c 	bl	8003c10 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <MX_GPIO_Init+0x19c>)
 80012f0:	f002 faca 	bl	8003888 <HAL_GPIO_Init>

	/*Configure GPIO pin : Joy_btn_Pin */
	GPIO_InitStruct.Pin = Joy_btn_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_GPIO_Init+0x1a0>)
 800130a:	f002 fabd 	bl	8003888 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800130e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001312:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_GPIO_Init+0x194>)
 8001328:	f002 faae 	bl	8003888 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	480f      	ldr	r0, [pc, #60]	; (8001380 <MX_GPIO_Init+0x198>)
 8001344:	f002 faa0 	bl	8003888 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_GPIO_Init+0x198>)
 800135c:	f002 fa94 	bl	8003888 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2009      	movs	r0, #9
 8001366:	f001 fb2e 	bl	80029c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800136a:	2009      	movs	r0, #9
 800136c:	f001 fb47 	bl	80029fe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400
 8001380:	40021800 	.word	0x40021800
 8001384:	40020800 	.word	0x40020800
 8001388:	40021400 	.word	0x40021400

0800138c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d161      	bne.n	8001460 <HAL_GPIO_EXTI_Callback+0xd4>
		// joystick sw test OK!
//	  btn_cnt++;
//	  printf("cnt = %d\r\n", btn_cnt);
//		printf("test interval=%d\r\n", interval);
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800139c:	2101      	movs	r1, #1
 800139e:	4832      	ldr	r0, [pc, #200]	; (8001468 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013a0:	f002 fc4f 	bl	8003c42 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 80013a4:	f000 fcbe 	bl	8001d24 <HAL_GetTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a30      	ldr	r2, [pc, #192]	; (800146c <HAL_GPIO_EXTI_Callback+0xe0>)
 80013ac:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <HAL_GPIO_EXTI_Callback+0xe0>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013ba:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_GPIO_EXTI_Callback+0xe0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013c2:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 80013c4:	2108      	movs	r1, #8
 80013c6:	482c      	ldr	r0, [pc, #176]	; (8001478 <HAL_GPIO_EXTI_Callback+0xec>)
 80013c8:	f002 fc0a 	bl	8003be0 <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d146      	bne.n	8001460 <HAL_GPIO_EXTI_Callback+0xd4>
			if (interval < 130) {
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b81      	cmp	r3, #129	; 0x81
 80013d8:	d805      	bhi.n	80013e6 <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3303      	adds	r3, #3
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e02a      	b.n	800143c <HAL_GPIO_EXTI_Callback+0xb0>
			} else if (interval >= 130 && interval < 200) {
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b81      	cmp	r3, #129	; 0x81
 80013ec:	d910      	bls.n	8001410 <HAL_GPIO_EXTI_Callback+0x84>
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2bc7      	cmp	r3, #199	; 0xc7
 80013f4:	d80c      	bhi.n	8001410 <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <HAL_GPIO_EXTI_Callback+0xf4>)
 80013fe:	f006 fd15 	bl	8007e2c <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_GPIO_EXTI_Callback+0xf8>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e015      	b.n	800143c <HAL_GPIO_EXTI_Callback+0xb0>
//				time_set_mode();
			} else if (interval >= 300 && interval <= 1000) {
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001418:	d310      	bcc.n	800143c <HAL_GPIO_EXTI_Callback+0xb0>
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001422:	d80b      	bhi.n	800143c <HAL_GPIO_EXTI_Callback+0xb0>
				printf("Long click!!  interval = %u\r\n",
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <HAL_GPIO_EXTI_Callback+0xfc>)
 800142c:	f006 fcfe 	bl	8007e2c <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001438:	2202      	movs	r2, #2
 800143a:	701a      	strb	r2, [r3, #0]
//				alarm_set_mode();
			}
			if (btn_cnt >= 5) {
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b04      	cmp	r3, #4
 8001442:	dd0d      	ble.n	8001460 <HAL_GPIO_EXTI_Callback+0xd4>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <HAL_GPIO_EXTI_Callback+0x100>)
 8001450:	f006 fcec 	bl	8007e2c <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_GPIO_EXTI_Callback+0xf8>)
 800145c:	2203      	movs	r2, #3
 800145e:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400
 800146c:	20000994 	.word	0x20000994
 8001470:	20000998 	.word	0x20000998
 8001474:	2000099c 	.word	0x2000099c
 8001478:	40021400 	.word	0x40021400
 800147c:	20000970 	.word	0x20000970
 8001480:	08009100 	.word	0x08009100
 8001484:	200009a0 	.word	0x200009a0
 8001488:	08009120 	.word	0x08009120
 800148c:	08009140 	.word	0x08009140

08001490 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001498:	e7fe      	b.n	8001498 <Error_Handler+0x8>
	...

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3c      	ldr	r2, [pc, #240]	; (80015fc <HAL_ADC_MspInit+0x110>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d171      	bne.n	80015f2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_ADC_MspInit+0x114>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_ADC_MspInit+0x114>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_ADC_MspInit+0x114>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001562:	2309      	movs	r3, #9
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4823      	ldr	r0, [pc, #140]	; (8001604 <HAL_ADC_MspInit+0x118>)
 8001576:	f002 f987 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800157a:	2308      	movs	r3, #8
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157e:	2303      	movs	r3, #3
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <HAL_ADC_MspInit+0x11c>)
 800158e:	f002 f97b 	bl	8003888 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_ADC_MspInit+0x120>)
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_ADC_MspInit+0x124>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_ADC_MspInit+0x120>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015d8:	f001 fa2c 	bl	8002a34 <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80015e2:	f7ff ff55 	bl	8001490 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_ADC_MspInit+0x120>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40012000 	.word	0x40012000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020800 	.word	0x40020800
 8001608:	40020000 	.word	0x40020000
 800160c:	2000024c 	.word	0x2000024c
 8001610:	40026410 	.word	0x40026410

08001614 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_ETH_MspInit+0x174>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 80a4 	bne.w	8001780 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_ETH_MspInit+0x178>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_ETH_MspInit+0x178>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_ETH_MspInit+0x178>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <HAL_ETH_MspInit+0x178>)
 800165e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b45      	ldr	r3, [pc, #276]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_ETH_MspInit+0x178>)
 800167a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_ETH_MspInit+0x178>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_ETH_MspInit+0x178>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a36      	ldr	r2, [pc, #216]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_ETH_MspInit+0x178>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016fc:	2332      	movs	r3, #50	; 0x32
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800170c:	230b      	movs	r3, #11
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <HAL_ETH_MspInit+0x17c>)
 8001718:	f002 f8b6 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800171c:	2386      	movs	r3, #134	; 0x86
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172c:	230b      	movs	r3, #11
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4817      	ldr	r0, [pc, #92]	; (8001794 <HAL_ETH_MspInit+0x180>)
 8001738:	f002 f8a6 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174e:	230b      	movs	r3, #11
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <HAL_ETH_MspInit+0x184>)
 800175a:	f002 f895 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800175e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001770:	230b      	movs	r3, #11
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <HAL_ETH_MspInit+0x188>)
 800177c:	f002 f884 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3738      	adds	r7, #56	; 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40028000 	.word	0x40028000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020800 	.word	0x40020800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020400 	.word	0x40020400
 800179c:	40021800 	.word	0x40021800

080017a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_I2C_MspInit+0x84>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12c      	bne.n	800181c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_I2C_MspInit+0x88>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_I2C_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e4:	2312      	movs	r3, #18
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f0:	2304      	movs	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <HAL_I2C_MspInit+0x8c>)
 80017fc:	f002 f844 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_I2C_MspInit+0x88>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_I2C_MspInit+0x88>)
 800180a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_I2C_MspInit+0x88>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40005400 	.word	0x40005400
 8001828:	40023800 	.word	0x40023800
 800182c:	40020400 	.word	0x40020400

08001830 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	2230      	movs	r2, #48	; 0x30
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fc8d 	bl	8008160 <memset>
  if(hrtc->Instance==RTC)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_RTC_MspInit+0x4c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d111      	bne.n	8001874 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001850:	2320      	movs	r3, #32
 8001852:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fdcc 	bl	80053fc <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800186a:	f7ff fe11 	bl	8001490 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_RTC_MspInit+0x50>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3738      	adds	r7, #56	; 0x38
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40002800 	.word	0x40002800
 8001880:	42470e3c 	.word	0x42470e3c

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10d      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_UART_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12c      	bne.n	8001944 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_UART_MspInit+0x88>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001934:	2307      	movs	r3, #7
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0x8c>)
 8001940:	f001 ffa2 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004800 	.word	0x40004800
 8001950:	40023800 	.word	0x40023800
 8001954:	40020c00 	.word	0x40020c00

08001958 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001978:	d13f      	bne.n	80019fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001996:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019a8:	230a      	movs	r3, #10
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4815      	ldr	r0, [pc, #84]	; (8001a08 <HAL_PCD_MspInit+0xb0>)
 80019b4:	f001 ff68 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480e      	ldr	r0, [pc, #56]	; (8001a08 <HAL_PCD_MspInit+0xb0>)
 80019ce:	f001 ff5b 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019dc:	6353      	str	r3, [r2, #52]	; 0x34
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_PCD_MspInit+0xac>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f950 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8001a64:	2008      	movs	r0, #8
 8001a66:	f002 f907 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <ADC_IRQHandler+0x10>)
 8001a76:	f000 f9c8 	bl	8001e0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000204 	.word	0x20000204

08001a84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM3_IRQHandler+0x10>)
 8001a8a:	f004 fa35 	bl	8005ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003d0 	.word	0x200003d0

08001a98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <USART3_IRQHandler+0x10>)
 8001a9e:	f004 fecd 	bl	800683c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000418 	.word	0x20000418

08001aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab4:	f002 f8e0 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA2_Stream0_IRQHandler+0x10>)
 8001ac2:	f001 f94f 	bl	8002d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000024c 	.word	0x2000024c

08001ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e00a      	b.n	8001af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf0      	blt.n	8001ae2 <_read+0x12>
  }

  return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
  return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_isatty>:

int _isatty(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f006 fb2a 	bl	80081fc <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20030000 	.word	0x20030000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	200009f4 	.word	0x200009f4
 8001bdc:	20000b48 	.word	0x20000b48

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0a:	490e      	ldr	r1, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c20:	4c0b      	ldr	r4, [pc, #44]	; (8001c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2e:	f7ff ffd7 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c32:	f006 fae9 	bl	8008208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c36:	f7fe fff9 	bl	8000c2c <main>
  bx  lr    
 8001c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c48:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8001c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c50:	20000b48 	.word	0x20000b48

08001c54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <CAN1_RX0_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_Init+0x40>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_Init+0x40>)
 8001c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_Init+0x40>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 fe95 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fc06 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fead 	bl	8002a1a <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 fe75 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	200009f8 	.word	0x200009f8

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200009f8 	.word	0x200009f8

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000010 	.word	0x20000010

08001d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e033      	b.n	8001e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fba2 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dca:	f023 0302 	bic.w	r3, r3, #2
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fb92 	bl	8002500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
 8001df2:	e001      	b.n	8001df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d049      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0xca>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d046      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d12b      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d127      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d119      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f9c1 	bl	800224c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0212 	mvn.w	r2, #18
 8001ed2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d057      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x190>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d054      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d139      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d12b      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d124      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11d      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d119      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fc36 	bl	80027fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 020c 	mvn.w	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x1d6>
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d014      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f94f 	bl	8002274 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f06f 0201 	mvn.w	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_ADC_IRQHandler+0x218>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0202 	orr.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0220 	mvn.w	r2, #32
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f938 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0220 	mvn.w	r2, #32
 8002020:	601a      	str	r2, [r3, #0]
  }
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_Start_DMA+0x1e>
 8002046:	2302      	movs	r3, #2
 8002048:	e0e9      	b.n	800221e <HAL_ADC_Start_DMA+0x1f2>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d018      	beq.n	8002092 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002070:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_ADC_Start_DMA+0x1fc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6d      	ldr	r2, [pc, #436]	; (800222c <HAL_ADC_Start_DMA+0x200>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9a      	lsrs	r2, r3, #18
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	3b01      	subs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d107      	bne.n	80020b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 80a1 	bne.w	8002204 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d106      	bne.n	8002110 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f023 0206 	bic.w	r2, r3, #6
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
 800210e:	e002      	b.n	8002116 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_ADC_Start_DMA+0x204>)
 8002120:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	4a43      	ldr	r2, [pc, #268]	; (8002234 <HAL_ADC_Start_DMA+0x208>)
 8002128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4a42      	ldr	r2, [pc, #264]	; (8002238 <HAL_ADC_Start_DMA+0x20c>)
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	4a41      	ldr	r2, [pc, #260]	; (800223c <HAL_ADC_Start_DMA+0x210>)
 8002138:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002142:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002152:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002162:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	334c      	adds	r3, #76	; 0x4c
 800216e:	4619      	mov	r1, r3
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f000 fd0c 	bl	8002b90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b00      	cmp	r3, #0
 8002182:	d12a      	bne.n	80021da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_ADC_Start_DMA+0x214>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d015      	beq.n	80021ba <HAL_ADC_Start_DMA+0x18e>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <HAL_ADC_Start_DMA+0x218>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_Start_DMA+0x178>
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_ADC_Start_DMA+0x204>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <HAL_ADC_Start_DMA+0x21c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d136      	bne.n	800221c <HAL_ADC_Start_DMA+0x1f0>
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_ADC_Start_DMA+0x204>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d130      	bne.n	800221c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d129      	bne.n	800221c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e020      	b.n	800221c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_ADC_Start_DMA+0x214>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d11b      	bne.n	800221c <HAL_ADC_Start_DMA+0x1f0>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d114      	bne.n	800221c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	e00b      	b.n	800221c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	431bde83 	.word	0x431bde83
 8002230:	40012300 	.word	0x40012300
 8002234:	080026f9 	.word	0x080026f9
 8002238:	080027b3 	.word	0x080027b3
 800223c:	080027cf 	.word	0x080027cf
 8002240:	40012000 	.word	0x40012000
 8002244:	40012100 	.word	0x40012100
 8002248:	40012200 	.word	0x40012200

0800224c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e113      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x244>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d925      	bls.n	8002314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	3b1e      	subs	r3, #30
 80022de:	2207      	movs	r2, #7
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43da      	mvns	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	400a      	ands	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4403      	add	r3, r0
 8002306:	3b1e      	subs	r3, #30
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e022      	b.n	800235a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6919      	ldr	r1, [r3, #16]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	4603      	mov	r3, r0
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4403      	add	r3, r0
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d824      	bhi.n	80023ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b05      	subs	r3, #5
 8002374:	221f      	movs	r2, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b05      	subs	r3, #5
 800239e:	fa00 f203 	lsl.w	r2, r0, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34
 80023aa:	e04c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d824      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b23      	subs	r3, #35	; 0x23
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	fa00 f203 	lsl.w	r2, r0, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	e023      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	; 0x41
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	; 0x41
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_ADC_ConfigChannel+0x250>)
 8002448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x1f4>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b11      	cmp	r3, #17
 800248e:	d122      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_ADC_ConfigChannel+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_ADC_ConfigChannel+0x260>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9a      	lsrs	r2, r3, #18
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	40012000 	.word	0x40012000
 80024f4:	10000012 	.word	0x10000012
 80024f8:	20000008 	.word	0x20000008
 80024fc:	431bde83 	.word	0x431bde83

08002500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002508:	4b79      	ldr	r3, [pc, #484]	; (80026f0 <ADC_Init+0x1f0>)
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	021a      	lsls	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <ADC_Init+0x1f4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e00f      	b.n	80025fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0202 	bic.w	r2, r2, #2
 800260c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800263a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800264a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	3b01      	subs	r3, #1
 8002658:	035a      	lsls	r2, r3, #13
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e007      	b.n	8002674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	3b01      	subs	r3, #1
 8002690:	051a      	lsls	r2, r3, #20
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b6:	025a      	lsls	r2, r3, #9
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	029a      	lsls	r2, r3, #10
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40012300 	.word	0x40012300
 80026f4:	0f000001 	.word	0x0f000001

080026f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13c      	bne.n	800278c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12b      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d127      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800274c:	2b00      	cmp	r3, #0
 800274e:	d119      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0220 	bic.w	r2, r2, #32
 800275e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fd61 	bl	800224c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800278a:	e00e      	b.n	80027aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fd75 	bl	8002288 <HAL_ADC_ErrorCallback>
}
 800279e:	e004      	b.n	80027aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fd4d 	bl	8002260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fd4a 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff f970 	bl	8001d24 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e099      	b.n	8002b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a70:	e00f      	b.n	8002a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a72:	f7ff f957 	bl	8001d24 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d908      	bls.n	8002a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e078      	b.n	8002b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e8      	bne.n	8002a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_DMA_Init+0x158>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f023 0307 	bic.w	r3, r3, #7
 8002b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d117      	bne.n	8002b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fb01 	bl	8003140 <DMA_CheckFifoParam>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b52:	2301      	movs	r3, #1
 8002b54:	e016      	b.n	8002b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fab8 	bl	80030d4 <DMA_CalcBaseAndBitshift>
 8002b64:	4603      	mov	r3, r0
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	223f      	movs	r2, #63	; 0x3f
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	f010803f 	.word	0xf010803f

08002b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_DMA_Start_IT+0x26>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e040      	b.n	8002c38 <HAL_DMA_Start_IT+0xa8>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12f      	bne.n	8002c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fa4a 	bl	8003078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	223f      	movs	r2, #63	; 0x3f
 8002bea:	409a      	lsls	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0216 	orr.w	r2, r2, #22
 8002bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0208 	orr.w	r2, r2, #8
 8002c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e005      	b.n	8002c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	f7ff f869 	bl	8001d24 <HAL_GetTick>
 8002c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e052      	b.n	8002d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0216 	bic.w	r2, r2, #22
 8002c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_DMA_Abort+0x62>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0208 	bic.w	r2, r2, #8
 8002cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc2:	e013      	b.n	8002cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc4:	f7ff f82e 	bl	8001d24 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d90c      	bls.n	8002cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e015      	b.n	8002d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e4      	bne.n	8002cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	223f      	movs	r2, #63	; 0x3f
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00c      	b.n	8002d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d70:	4b8e      	ldr	r3, [pc, #568]	; (8002fac <HAL_DMA_IRQHandler+0x248>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a8e      	ldr	r2, [pc, #568]	; (8002fb0 <HAL_DMA_IRQHandler+0x24c>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0a9b      	lsrs	r3, r3, #10
 8002d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2208      	movs	r2, #8
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01a      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0204 	bic.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	2201      	movs	r2, #1
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d012      	beq.n	8002e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	2204      	movs	r2, #4
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	2210      	movs	r2, #16
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d043      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03c      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	2210      	movs	r2, #16
 8002e60:	409a      	lsls	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d024      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e01f      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01b      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e016      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0208 	bic.w	r2, r2, #8
 8002ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2220      	movs	r2, #32
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 808f 	beq.w	8003004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8087 	beq.w	8003004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2220      	movs	r2, #32
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d136      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0216 	bic.w	r2, r2, #22
 8002f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_DMA_IRQHandler+0x1da>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0208 	bic.w	r2, r2, #8
 8002f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	223f      	movs	r2, #63	; 0x3f
 8002f54:	409a      	lsls	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d07e      	beq.n	8003070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
        }
        return;
 8002f7a:	e079      	b.n	8003070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01d      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d031      	beq.n	8003004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
 8002fa8:	e02c      	b.n	8003004 <HAL_DMA_IRQHandler+0x2a0>
 8002faa:	bf00      	nop
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d023      	beq.n	8003004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
 8002fc4:	e01e      	b.n	8003004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0210 	bic.w	r2, r2, #16
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	2b00      	cmp	r3, #0
 800300a:	d032      	beq.n	8003072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d022      	beq.n	800305e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2205      	movs	r2, #5
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3301      	adds	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	429a      	cmp	r2, r3
 800303a:	d307      	bcc.n	800304c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f2      	bne.n	8003030 <HAL_DMA_IRQHandler+0x2cc>
 800304a:	e000      	b.n	800304e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800304c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	e000      	b.n	8003072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003070:	bf00      	nop
    }
  }
}
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d108      	bne.n	80030b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030b6:	e007      	b.n	80030c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3b10      	subs	r3, #16
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <DMA_CalcBaseAndBitshift+0x64>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <DMA_CalcBaseAndBitshift+0x68>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d909      	bls.n	8003116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800310a:	f023 0303 	bic.w	r3, r3, #3
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	; 0x58
 8003114:	e007      	b.n	8003126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	aaaaaaab 	.word	0xaaaaaaab
 800313c:	080091a4 	.word	0x080091a4

08003140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11f      	bne.n	800319a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d856      	bhi.n	800320e <DMA_CheckFifoParam+0xce>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <DMA_CheckFifoParam+0x28>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	08003179 	.word	0x08003179
 800316c:	0800318b 	.word	0x0800318b
 8003170:	08003179 	.word	0x08003179
 8003174:	0800320f 	.word	0x0800320f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d046      	beq.n	8003212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003188:	e043      	b.n	8003212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003192:	d140      	bne.n	8003216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003198:	e03d      	b.n	8003216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d121      	bne.n	80031e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d837      	bhi.n	800321a <DMA_CheckFifoParam+0xda>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <DMA_CheckFifoParam+0x70>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031c7 	.word	0x080031c7
 80031b8:	080031c1 	.word	0x080031c1
 80031bc:	080031d9 	.word	0x080031d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e030      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d025      	beq.n	800321e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d6:	e022      	b.n	800321e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e0:	d11f      	bne.n	8003222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031e6:	e01c      	b.n	8003222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d903      	bls.n	80031f6 <DMA_CheckFifoParam+0xb6>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d003      	beq.n	80031fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f4:	e018      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      break;
 80031fa:	e015      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e00b      	b.n	8003226 <DMA_CheckFifoParam+0xe6>
      break;
 800320e:	bf00      	nop
 8003210:	e00a      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;
 8003212:	bf00      	nop
 8003214:	e008      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e006      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e004      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;   
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
    }
  } 
  
  return status; 
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06c      	b.n	8003324 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2223      	movs	r2, #35	; 0x23
 8003258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fe f9d9 	bl	8001614 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_ETH_Init+0xf4>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_ETH_Init+0xf4>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_ETH_Init+0xf4>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_ETH_Init+0xf8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a2b      	ldr	r2, [pc, #172]	; (8003330 <HAL_ETH_Init+0xf8>)
 8003284:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003288:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800328a:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_ETH_Init+0xf8>)
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4927      	ldr	r1, [pc, #156]	; (8003330 <HAL_ETH_Init+0xf8>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_ETH_Init+0xf8>)
 800329a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b4:	f7fe fd36 	bl	8001d24 <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032ba:	e011      	b.n	80032e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80032bc:	f7fe fd32 	bl	8001d24 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ca:	d909      	bls.n	80032e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2204      	movs	r2, #4
 80032d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	22e0      	movs	r2, #224	; 0xe0
 80032d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e021      	b.n	8003324 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e4      	bne.n	80032bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f958 	bl	80035a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9ff 	bl	80036fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa55 	bl	80037ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	461a      	mov	r2, r3
 800330a:	2100      	movs	r1, #0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f9bd 	bl	800368c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2210      	movs	r2, #16
 800331e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	40013800 	.word	0x40013800

08003334 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4b51      	ldr	r3, [pc, #324]	; (8003490 <ETH_SetMACConfig+0x15c>)
 800334a:	4013      	ands	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	7c1b      	ldrb	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <ETH_SetMACConfig+0x28>
 8003356:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800335a:	e000      	b.n	800335e <ETH_SetMACConfig+0x2a>
 800335c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	7c5b      	ldrb	r3, [r3, #17]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <ETH_SetMACConfig+0x38>
 8003366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800336a:	e000      	b.n	800336e <ETH_SetMACConfig+0x3a>
 800336c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800336e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	7fdb      	ldrb	r3, [r3, #31]
 800337a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800337c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003382:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	7f92      	ldrb	r2, [r2, #30]
 8003388:	2a00      	cmp	r2, #0
 800338a:	d102      	bne.n	8003392 <ETH_SetMACConfig+0x5e>
 800338c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003390:	e000      	b.n	8003394 <ETH_SetMACConfig+0x60>
 8003392:	2200      	movs	r2, #0
                        macconf->Speed |
 8003394:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	7f1b      	ldrb	r3, [r3, #28]
 800339a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800339c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	791b      	ldrb	r3, [r3, #4]
 80033a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80033aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033b2:	2a00      	cmp	r2, #0
 80033b4:	d102      	bne.n	80033bc <ETH_SetMACConfig+0x88>
 80033b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ba:	e000      	b.n	80033be <ETH_SetMACConfig+0x8a>
 80033bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	7bdb      	ldrb	r3, [r3, #15]
 80033c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f7fe fca4 	bl	8001d3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	f64f 7341 	movw	r3, #65345	; 0xff41
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800341a:	2a00      	cmp	r2, #0
 800341c:	d101      	bne.n	8003422 <ETH_SetMACConfig+0xee>
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	e000      	b.n	8003424 <ETH_SetMACConfig+0xf0>
 8003422:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003424:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800342a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003432:	2a01      	cmp	r2, #1
 8003434:	d101      	bne.n	800343a <ETH_SetMACConfig+0x106>
 8003436:	2208      	movs	r2, #8
 8003438:	e000      	b.n	800343c <ETH_SetMACConfig+0x108>
 800343a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800343c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003444:	2a01      	cmp	r2, #1
 8003446:	d101      	bne.n	800344c <ETH_SetMACConfig+0x118>
 8003448:	2204      	movs	r2, #4
 800344a:	e000      	b.n	800344e <ETH_SetMACConfig+0x11a>
 800344c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800344e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003456:	2a01      	cmp	r2, #1
 8003458:	d101      	bne.n	800345e <ETH_SetMACConfig+0x12a>
 800345a:	2202      	movs	r2, #2
 800345c:	e000      	b.n	8003460 <ETH_SetMACConfig+0x12c>
 800345e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003460:	4313      	orrs	r3, r2
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003478:	2001      	movs	r0, #1
 800347a:	f7fe fc5f 	bl	8001d3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	ff20810f 	.word	0xff20810f

08003494 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <ETH_SetDMAConfig+0x110>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	7b1b      	ldrb	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <ETH_SetDMAConfig+0x2c>
 80034ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034be:	e000      	b.n	80034c2 <ETH_SetDMAConfig+0x2e>
 80034c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	7b5b      	ldrb	r3, [r3, #13]
 80034c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	7f52      	ldrb	r2, [r2, #29]
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	d102      	bne.n	80034d8 <ETH_SetDMAConfig+0x44>
 80034d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034d6:	e000      	b.n	80034da <ETH_SetDMAConfig+0x46>
 80034d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	7b9b      	ldrb	r3, [r3, #14]
 80034e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7f1b      	ldrb	r3, [r3, #28]
 80034ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80034f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7f9b      	ldrb	r3, [r3, #30]
 80034f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003506:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003508:	4313      	orrs	r3, r2
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003518:	461a      	mov	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800352a:	2001      	movs	r0, #1
 800352c:	f7fe fc06 	bl	8001d3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	461a      	mov	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003548:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800354e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003554:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800355c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800355e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003566:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800356c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800357a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003588:	2001      	movs	r0, #1
 800358a:	f7fe fbd7 	bl	8001d3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6013      	str	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	f8de3f23 	.word	0xf8de3f23

080035a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0a6      	sub	sp, #152	; 0x98
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80035bc:	2300      	movs	r3, #0
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80035e4:	2300      	movs	r3, #0
 80035e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800360a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800361c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fe86 	bl	8003334 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003628:	2301      	movs	r3, #1
 800362a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800362c:	2301      	movs	r3, #1
 800362e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003636:	2301      	movs	r3, #1
 8003638:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003654:	2301      	movs	r3, #1
 8003656:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800365e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003662:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003668:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003670:	2300      	movs	r3, #0
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ff08 	bl	8003494 <ETH_SetDMAConfig>
}
 8003684:	bf00      	nop
 8003686:	3798      	adds	r7, #152	; 0x98
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3305      	adds	r3, #5
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	3204      	adds	r2, #4
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <ETH_MACAddressConfig+0x68>)
 80036ae:	4413      	add	r3, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3303      	adds	r3, #3
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	061a      	lsls	r2, r3, #24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3302      	adds	r3, #2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3301      	adds	r3, #1
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	4313      	orrs	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <ETH_MACAddressConfig+0x6c>)
 80036de:	4413      	add	r3, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	6013      	str	r3, [r2, #0]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40028040 	.word	0x40028040
 80036f8:	40028044 	.word	0x40028044

080036fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e03e      	b.n	8003788 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	3206      	adds	r2, #6
 800373c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d80c      	bhi.n	800376c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68d9      	ldr	r1, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	461a      	mov	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e004      	b.n	8003776 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d9bd      	bls.n	800370a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a0:	611a      	str	r2, [r3, #16]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e046      	b.n	800384a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6919      	ldr	r1, [r3, #16]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2200      	movs	r2, #0
 80037ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003800:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	3212      	adds	r2, #18
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d80c      	bhi.n	800383a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6919      	ldr	r1, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e004      	b.n	8003844 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	461a      	mov	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d9b5      	bls.n	80037bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387a:	60da      	str	r2, [r3, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e177      	b.n	8003b94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f040 8166 	bne.w	8003b8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d005      	beq.n	80038da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d130      	bne.n	800393c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003910:	2201      	movs	r2, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 0201 	and.w	r2, r3, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b03      	cmp	r3, #3
 8003946:	d017      	beq.n	8003978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d123      	bne.n	80039cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80c0 	beq.w	8003b8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2a:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <HAL_GPIO_Init+0x328>)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_GPIO_Init+0x32c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d037      	beq.n	8003ac6 <HAL_GPIO_Init+0x23e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_GPIO_Init+0x330>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d031      	beq.n	8003ac2 <HAL_GPIO_Init+0x23a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_GPIO_Init+0x334>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <HAL_GPIO_Init+0x236>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a55      	ldr	r2, [pc, #340]	; (8003bc0 <HAL_GPIO_Init+0x338>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x232>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <HAL_GPIO_Init+0x33c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x22e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a53      	ldr	r2, [pc, #332]	; (8003bc8 <HAL_GPIO_Init+0x340>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x22a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_GPIO_Init+0x344>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x226>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a51      	ldr	r2, [pc, #324]	; (8003bd0 <HAL_GPIO_Init+0x348>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x222>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a50      	ldr	r2, [pc, #320]	; (8003bd4 <HAL_GPIO_Init+0x34c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x21e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x21a>
 8003a9e:	2309      	movs	r3, #9
 8003aa0:	e012      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e010      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	; (8003bb0 <HAL_GPIO_Init+0x328>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3a:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae84 	bls.w	80038a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022400 	.word	0x40022400
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e001      	b.n	8003c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c2c:	e003      	b.n	8003c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	041a      	lsls	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	619a      	str	r2, [r3, #24]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c54:	887a      	ldrh	r2, [r7, #2]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	041a      	lsls	r2, r3, #16
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	400b      	ands	r3, r1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fb78 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013c00 	.word	0x40013c00

08003ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e12b      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fd66 	bl	80017a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f001 fb4e 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a81      	ldr	r2, [pc, #516]	; (8003f1c <HAL_I2C_Init+0x274>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d807      	bhi.n	8003d2c <HAL_I2C_Init+0x84>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a80      	ldr	r2, [pc, #512]	; (8003f20 <HAL_I2C_Init+0x278>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bf94      	ite	ls
 8003d24:	2301      	movls	r3, #1
 8003d26:	2300      	movhi	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e006      	b.n	8003d3a <HAL_I2C_Init+0x92>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	; (8003f24 <HAL_I2C_Init+0x27c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bf94      	ite	ls
 8003d34:	2301      	movls	r3, #1
 8003d36:	2300      	movhi	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0e7      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a78      	ldr	r2, [pc, #480]	; (8003f28 <HAL_I2C_Init+0x280>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9b      	lsrs	r3, r3, #18
 8003d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a6a      	ldr	r2, [pc, #424]	; (8003f1c <HAL_I2C_Init+0x274>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <HAL_I2C_Init+0xd4>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	e009      	b.n	8003d90 <HAL_I2C_Init+0xe8>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	4a69      	ldr	r2, [pc, #420]	; (8003f2c <HAL_I2C_Init+0x284>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	3301      	adds	r3, #1
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003da2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	495c      	ldr	r1, [pc, #368]	; (8003f1c <HAL_I2C_Init+0x274>)
 8003dac:	428b      	cmp	r3, r1
 8003dae:	d819      	bhi.n	8003de4 <HAL_I2C_Init+0x13c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e59      	subs	r1, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_I2C_Init+0x138>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1e59      	subs	r1, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	e051      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e04f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d111      	bne.n	8003e10 <HAL_I2C_Init+0x168>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e58      	subs	r0, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e012      	b.n	8003e36 <HAL_I2C_Init+0x18e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e58      	subs	r0, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	0099      	lsls	r1, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Init+0x196>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e022      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <HAL_I2C_Init+0x1bc>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1e58      	subs	r0, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	440b      	add	r3, r1
 8003e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	0099      	lsls	r1, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	6809      	ldr	r1, [r1, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6911      	ldr	r1, [r2, #16]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	000186a0 	.word	0x000186a0
 8003f20:	001e847f 	.word	0x001e847f
 8003f24:	003d08ff 	.word	0x003d08ff
 8003f28:	431bde83 	.word	0x431bde83
 8003f2c:	10624dd3 	.word	0x10624dd3

08003f30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	817b      	strh	r3, [r7, #10]
 8003f40:	4613      	mov	r3, r2
 8003f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7fd feee 	bl	8001d24 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 80e0 	bne.w	8004118 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4970      	ldr	r1, [pc, #448]	; (8004124 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa92 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0d3      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2C_Master_Transmit+0x50>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0cc      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d007      	beq.n	8003fa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	; 0x21
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	893a      	ldrh	r2, [r7, #8]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a50      	ldr	r2, [pc, #320]	; (8004128 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fe8:	8979      	ldrh	r1, [r7, #10]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f9ca 	bl	8004388 <I2C_MasterRequestWrite>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e08d      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004014:	e066      	b.n	80040e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6a39      	ldr	r1, [r7, #32]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fb0c 	bl	8004638 <I2C_WaitOnTXEFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b04      	cmp	r3, #4
 800402c:	d107      	bne.n	800403e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06b      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d11b      	bne.n	80040b8 <HAL_I2C_Master_Transmit+0x188>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fafc 	bl	80046ba <I2C_WaitOnBTFFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d107      	bne.n	80040e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e01a      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d194      	bne.n	8004016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000

0800412c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	460b      	mov	r3, r1
 800413a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7fd fdf2 	bl	8001d24 <HAL_GetTick>
 8004140:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 8111 	bne.w	8004376 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2319      	movs	r3, #25
 800415a:	2201      	movs	r2, #1
 800415c:	4988      	ldr	r1, [pc, #544]	; (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f994 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	e104      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2C_IsDeviceReady+0x50>
 8004178:	2302      	movs	r3, #2
 800417a:	e0fd      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d007      	beq.n	80041a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a70      	ldr	r2, [pc, #448]	; (8004384 <HAL_I2C_IsDeviceReady+0x258>)
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f952 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fc:	d103      	bne.n	8004206 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0b6      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004218:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800421a:	f7fd fd83 	bl	8001d24 <HAL_GetTick>
 800421e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800424e:	e025      	b.n	800429c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004250:	f7fd fd68 	bl	8001d24 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <HAL_I2C_IsDeviceReady+0x13a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22a0      	movs	r2, #160	; 0xa0
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2ba0      	cmp	r3, #160	; 0xa0
 80042a6:	d005      	beq.n	80042b4 <HAL_I2C_IsDeviceReady+0x188>
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_I2C_IsDeviceReady+0x188>
 80042ae:	7dbb      	ldrb	r3, [r7, #22]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0cd      	beq.n	8004250 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d129      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	4921      	ldr	r1, [pc, #132]	; (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8c6 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e036      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e02c      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004336:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2319      	movs	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	490f      	ldr	r1, [pc, #60]	; (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8a2 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e012      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	3301      	adds	r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	f4ff af32 	bcc.w	80041c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d006      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b0:	d108      	bne.n	80043c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e00b      	b.n	80043dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d107      	bne.n	80043dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f84f 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d103      	bne.n	800440c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e035      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004418:	d108      	bne.n	800442c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	e01b      	b.n	8004464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	11db      	asrs	r3, r3, #7
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f063 030f 	orn	r3, r3, #15
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <I2C_MasterRequestWrite+0xfc>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f875 	bl	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e010      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4907      	ldr	r1, [pc, #28]	; (8004488 <I2C_MasterRequestWrite+0x100>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f865 	bl	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010008 	.word	0x00010008
 8004488:	00010002 	.word	0x00010002

0800448c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800449c:	e025      	b.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d021      	beq.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fd fc3d 	bl	8001d24 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e023      	b.n	8004532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10d      	bne.n	8004510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	e00c      	b.n	800452a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0b6      	beq.n	800449e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004548:	e051      	b.n	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d123      	bne.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f043 0204 	orr.w	r2, r3, #4
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e046      	b.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d021      	beq.n	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd fbbb 	bl	8001d24 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e020      	b.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10c      	bne.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e00b      	b.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	43da      	mvns	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d18d      	bne.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004644:	e02d      	b.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f878 	bl	800473c <I2C_IsAcknowledgeFailed>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e02d      	b.n	80046b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d021      	beq.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fd fb61 	bl	8001d24 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e007      	b.n	80046b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d1ca      	bne.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c6:	e02d      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f837 	bl	800473c <I2C_IsAcknowledgeFailed>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e02d      	b.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d021      	beq.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e0:	f7fd fb20 	bl	8001d24 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d116      	bne.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d1ca      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d11b      	bne.n	800478c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800475c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d129      	bne.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	; 0x24
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b20      	cmp	r3, #32
 800482a:	d12a      	bne.n	8004882 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2224      	movs	r2, #36	; 0x24
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	f023 030f 	bic.w	r3, r3, #15
 8004852:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	b29a      	uxth	r2, r3
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	4313      	orrs	r3, r2
 800485c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	89fa      	ldrh	r2, [r7, #14]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0201 	orr.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b08f      	sub	sp, #60	; 0x3c
 8004894:	af0a      	add	r7, sp, #40	; 0x28
 8004896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e10f      	b.n	8004ac2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fd f84b 	bl	8001958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f002 ff40 	bl	8007766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	687e      	ldr	r6, [r7, #4]
 80048ee:	466d      	mov	r5, sp
 80048f0:	f106 0410 	add.w	r4, r6, #16
 80048f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004900:	e885 0003 	stmia.w	r5, {r0, r1}
 8004904:	1d33      	adds	r3, r6, #4
 8004906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004908:	6838      	ldr	r0, [r7, #0]
 800490a:	f002 fecb 	bl	80076a4 <USB_CoreInit>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f002 ff2e 	bl	8007788 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e04a      	b.n	80049c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	333d      	adds	r3, #61	; 0x3d
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	333c      	adds	r3, #60	; 0x3c
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800495a:	7bfa      	ldrb	r2, [r7, #15]
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	b298      	uxth	r0, r3
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3344      	adds	r3, #68	; 0x44
 800496e:	4602      	mov	r2, r0
 8004970:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3340      	adds	r3, #64	; 0x40
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3348      	adds	r3, #72	; 0x48
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	334c      	adds	r3, #76	; 0x4c
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3354      	adds	r3, #84	; 0x54
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	3301      	adds	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3af      	bcc.n	8004932 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e044      	b.n	8004a62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049d8:	7bfa      	ldrb	r2, [r7, #15]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3b5      	bcc.n	80049d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	687e      	ldr	r6, [r7, #4]
 8004a74:	466d      	mov	r5, sp
 8004a76:	f106 0410 	add.w	r4, r6, #16
 8004a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a8a:	1d33      	adds	r3, r6, #4
 8004a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8e:	6838      	ldr	r0, [r7, #0]
 8004a90:	f002 fec6 	bl	8007820 <USB_DevInit>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00d      	b.n	8004ac2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 f891 	bl	8007be2 <USB_DevDisconnect>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e267      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aea:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af6:	4b85      	ldr	r3, [pc, #532]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d112      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b02:	4b82      	ldr	r3, [pc, #520]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0e:	d10b      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	4b7e      	ldr	r3, [pc, #504]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05b      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x108>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d157      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e242      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d106      	bne.n	8004b40 <HAL_RCC_OscConfig+0x74>
 8004b32:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e01d      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x98>
 8004b4a:	4b70      	ldr	r3, [pc, #448]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6f      	ldr	r2, [pc, #444]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6c      	ldr	r2, [pc, #432]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b64:	4b69      	ldr	r3, [pc, #420]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b66      	ldr	r3, [pc, #408]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd f8ce 	bl	8001d24 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fd f8ca 	bl	8001d24 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e207      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xc0>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fd f8ba 	bl	8001d24 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fd f8b6 	bl	8001d24 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	; 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1f3      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	4b51      	ldr	r3, [pc, #324]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xe8>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c7      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd f86f 	bl	8001d24 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fd f86b 	bl	8001d24 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1a8      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fd f84e 	bl	8001d24 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fd f84a 	bl	8001d24 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e187      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fd f82e 	bl	8001d24 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fd f82a 	bl	8001d24 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e167      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x200>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd f817 	bl	8001d24 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fd f813 	bl	8001d24 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e150      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b88      	ldr	r3, [pc, #544]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b81      	ldr	r3, [pc, #516]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7d      	ldr	r3, [pc, #500]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a7c      	ldr	r2, [pc, #496]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b7a      	ldr	r3, [pc, #488]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b77      	ldr	r3, [pc, #476]	; (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b74      	ldr	r3, [pc, #464]	; (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a73      	ldr	r2, [pc, #460]	; (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc ffd3 	bl	8001d24 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fc ffcf 	bl	8001d24 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e10c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6a      	ldr	r3, [pc, #424]	; (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2ea>
 8004da8:	4b64      	ldr	r3, [pc, #400]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a63      	ldr	r2, [pc, #396]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x30c>
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a5b      	ldr	r2, [pc, #364]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004dd8:	4b58      	ldr	r3, [pc, #352]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a57      	ldr	r2, [pc, #348]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a54      	ldr	r2, [pc, #336]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fc ff94 	bl	8001d24 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc ff90 	bl	8001d24 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0cb      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x334>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fc ff7e 	bl	8001d24 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fc ff7a 	bl	8001d24 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0b5      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a1 	beq.w	8004fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d05c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d141      	bne.n	8004f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fc ff4e 	bl	8001d24 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fc ff4a 	bl	8001d24 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e087      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	491b      	ldr	r1, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fc ff23 	bl	8001d24 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fc ff1f 	bl	8001d24 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e05c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x416>
 8004f00:	e054      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fc ff0c 	bl	8001d24 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fc ff08 	bl	8001d24 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e045      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x444>
 8004f2e:	e03d      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e038      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d121      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0cc      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b68      	ldr	r3, [pc, #416]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d90c      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b65      	ldr	r3, [pc, #404]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b8      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005010:	4b59      	ldr	r3, [pc, #356]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a58      	ldr	r2, [pc, #352]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800501a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005028:	4b53      	ldr	r3, [pc, #332]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b50      	ldr	r3, [pc, #320]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	494d      	ldr	r1, [pc, #308]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e07f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d003      	beq.n	800507a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005076:	2b03      	cmp	r3, #3
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4b3f      	ldr	r3, [pc, #252]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b3b      	ldr	r3, [pc, #236]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e067      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b37      	ldr	r3, [pc, #220]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4934      	ldr	r1, [pc, #208]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ac:	f7fc fe3a 	bl	8001d24 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7fc fe36 	bl	8001d24 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d20c      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b22      	ldr	r3, [pc, #136]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e032      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4916      	ldr	r1, [pc, #88]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490e      	ldr	r1, [pc, #56]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005142:	f000 f821 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490a      	ldr	r1, [pc, #40]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fc fd9a 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	40023800 	.word	0x40023800
 800517c:	0800918c 	.word	0x0800918c
 8005180:	20000008 	.word	0x20000008
 8005184:	2000000c 	.word	0x2000000c

08005188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b094      	sub	sp, #80	; 0x50
 800518e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	647b      	str	r3, [r7, #68]	; 0x44
 8005194:	2300      	movs	r3, #0
 8005196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a0:	4b79      	ldr	r3, [pc, #484]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d00d      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x40>
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f200 80e1 	bhi.w	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x34>
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ba:	e0db      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b73      	ldr	r3, [pc, #460]	; (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051c0:	e0db      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b73      	ldr	r3, [pc, #460]	; (8005390 <HAL_RCC_GetSysClockFreq+0x208>)
 80051c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051c6:	e0d8      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c8:	4b6f      	ldr	r3, [pc, #444]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d2:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b6a      	ldr	r3, [pc, #424]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
 80051f2:	2300      	movs	r3, #0
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	f04f 0000 	mov.w	r0, #0
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	0159      	lsls	r1, r3, #5
 8005208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800520c:	0150      	lsls	r0, r2, #5
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4621      	mov	r1, r4
 8005214:	1a51      	subs	r1, r2, r1
 8005216:	6139      	str	r1, [r7, #16]
 8005218:	4629      	mov	r1, r5
 800521a:	eb63 0301 	sbc.w	r3, r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	018b      	lsls	r3, r1, #6
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005236:	4651      	mov	r1, sl
 8005238:	018a      	lsls	r2, r1, #6
 800523a:	4651      	mov	r1, sl
 800523c:	ebb2 0801 	subs.w	r8, r2, r1
 8005240:	4659      	mov	r1, fp
 8005242:	eb63 0901 	sbc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	462b      	mov	r3, r5
 8005268:	eb49 0303 	adc.w	r3, r9, r3
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800527a:	4629      	mov	r1, r5
 800527c:	024b      	lsls	r3, r1, #9
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005284:	4621      	mov	r1, r4
 8005286:	024a      	lsls	r2, r1, #9
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528e:	2200      	movs	r2, #0
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
 8005292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005298:	f7fb f802 	bl	80002a0 <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a4:	e058      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b38      	ldr	r3, [pc, #224]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	4611      	mov	r1, r2
 80052b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	0159      	lsls	r1, r3, #5
 80052ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d2:	0150      	lsls	r0, r2, #5
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4641      	mov	r1, r8
 80052da:	ebb2 0a01 	subs.w	sl, r2, r1
 80052de:	4649      	mov	r1, r9
 80052e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052f8:	ebb2 040a 	subs.w	r4, r2, sl
 80052fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	00eb      	lsls	r3, r5, #3
 800530a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530e:	00e2      	lsls	r2, r4, #3
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	4643      	mov	r3, r8
 8005316:	18e3      	adds	r3, r4, r3
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	464b      	mov	r3, r9
 800531c:	eb45 0303 	adc.w	r3, r5, r3
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800532e:	4629      	mov	r1, r5
 8005330:	028b      	lsls	r3, r1, #10
 8005332:	4621      	mov	r1, r4
 8005334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005338:	4621      	mov	r1, r4
 800533a:	028a      	lsls	r2, r1, #10
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005342:	2200      	movs	r2, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	61fa      	str	r2, [r7, #28]
 8005348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534c:	f7fa ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	3301      	adds	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005372:	e002      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800537c:	4618      	mov	r0, r3
 800537e:	3750      	adds	r7, #80	; 0x50
 8005380:	46bd      	mov	sp, r7
 8005382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
 800538c:	00f42400 	.word	0x00f42400
 8005390:	007a1200 	.word	0x007a1200

08005394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000008 	.word	0x20000008

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053b0:	f7ff fff0 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0a9b      	lsrs	r3, r3, #10
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	0800919c 	.word	0x0800919c

080053d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053d8:	f7ff ffdc 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0b5b      	lsrs	r3, r3, #13
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	; (80053f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	0800919c 	.word	0x0800919c

080053fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d075      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005430:	4b91      	ldr	r3, [pc, #580]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005436:	f7fc fc75 	bl	8001d24 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800543e:	f7fc fc71 	bl	8001d24 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e189      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005450:	4b8a      	ldr	r3, [pc, #552]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4981      	ldr	r1, [pc, #516]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005488:	4b7c      	ldr	r3, [pc, #496]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548e:	0f1b      	lsrs	r3, r3, #28
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	019a      	lsls	r2, r3, #6
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	431a      	orrs	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	4974      	ldr	r1, [pc, #464]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054b0:	4b72      	ldr	r3, [pc, #456]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b6:	f023 021f 	bic.w	r2, r3, #31
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	3b01      	subs	r3, #1
 80054c0:	496e      	ldr	r1, [pc, #440]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	019a      	lsls	r2, r3, #6
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	071b      	lsls	r3, r3, #28
 80054e8:	4964      	ldr	r1, [pc, #400]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f0:	4b61      	ldr	r3, [pc, #388]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f6:	f7fc fc15 	bl	8001d24 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054fe:	f7fc fc11 	bl	8001d24 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e129      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005510:	4b5a      	ldr	r3, [pc, #360]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005530:	2b00      	cmp	r3, #0
 8005532:	d079      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005534:	4b52      	ldr	r3, [pc, #328]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800553a:	f7fc fbf3 	bl	8001d24 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005542:	f7fc fbef 	bl	8001d24 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e107      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005554:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005560:	d0ef      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	0f1b      	lsrs	r3, r3, #28
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	019a      	lsls	r2, r3, #6
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	493b      	ldr	r1, [pc, #236]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005596:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	4934      	ldr	r1, [pc, #208]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01e      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	071b      	lsls	r3, r3, #28
 80055dc:	4927      	ldr	r1, [pc, #156]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	4922      	ldr	r1, [pc, #136]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055fa:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005600:	f7fc fb90 	bl	8001d24 <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005608:	f7fc fb8c 	bl	8001d24 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0a4      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005626:	d1ef      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 808b 	beq.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005644:	6413      	str	r3, [r2, #64]	; 0x40
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565e:	f7fc fb61 	bl	8001d24 <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005664:	e010      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fc fb5d 	bl	8001d24 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d909      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e075      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005678:	42470068 	.word	0x42470068
 800567c:	40023800 	.word	0x40023800
 8005680:	42470070 	.word	0x42470070
 8005684:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0e8      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d028      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056bc:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c2:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056c8:	4a29      	ldr	r2, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ce:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d114      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056da:	f7fc fb23 	bl	8001d24 <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc fb1f 	bl	8001d24 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e035      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ee      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005710:	d10d      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	4912      	ldr	r1, [pc, #72]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005728:	4313      	orrs	r3, r2
 800572a:	608b      	str	r3, [r1, #8]
 800572c:	e005      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4a0f      	ldr	r2, [pc, #60]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005734:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800573c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	4313      	orrs	r3, r2
 800574a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005760:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40007000 	.word	0x40007000
 8005770:	40023800 	.word	0x40023800
 8005774:	42470e40 	.word	0x42470e40
 8005778:	424711e0 	.word	0x424711e0

0800577c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e066      	b.n	8005860 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7f5b      	ldrb	r3, [r3, #29]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc f844 	bl	8001830 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	22ca      	movs	r2, #202	; 0xca
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2253      	movs	r2, #83	; 0x53
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa45 	bl	8005c4e <RTC_EnterInitMode>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d12c      	bne.n	8005828 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68d2      	ldr	r2, [r2, #12]
 8005808:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6919      	ldr	r1, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	041a      	lsls	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa4c 	bl	8005cbc <RTC_ExitInitMode>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d113      	bne.n	8005856 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	22ff      	movs	r2, #255	; 0xff
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	7f1b      	ldrb	r3, [r3, #28]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_RTC_SetTime+0x1c>
 8005880:	2302      	movs	r3, #2
 8005882:	e087      	b.n	8005994 <HAL_RTC_SetTime+0x12c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2202      	movs	r2, #2
 800588e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d126      	bne.n	80058e4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fa29 	bl	8005d06 <RTC_ByteToBcd2>
 80058b4:	4603      	mov	r3, r0
 80058b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa22 	bl	8005d06 <RTC_ByteToBcd2>
 80058c2:	4603      	mov	r3, r0
 80058c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	789b      	ldrb	r3, [r3, #2]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fa1a 	bl	8005d06 <RTC_ByteToBcd2>
 80058d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e018      	b.n	8005916 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d102      	bne.n	80058f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005904:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800590a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	78db      	ldrb	r3, [r3, #3]
 8005910:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	22ca      	movs	r2, #202	; 0xca
 800591c:	625a      	str	r2, [r3, #36]	; 0x24
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2253      	movs	r2, #83	; 0x53
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f991 	bl	8005c4e <RTC_EnterInitMode>
 800592c:	4603      	mov	r3, r0
 800592e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d120      	bne.n	8005978 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005940:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005944:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005954:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f9a4 	bl	8005cbc <RTC_ExitInitMode>
 8005974:	4603      	mov	r3, r0
 8005976:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	22ff      	movs	r2, #255	; 0xff
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	771a      	strb	r2, [r3, #28]

  return status;
 8005992:	7cfb      	ldrb	r3, [r7, #19]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd90      	pop	{r4, r7, pc}

0800599c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80059ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	0d9b      	lsrs	r3, r3, #22
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11a      	bne.n	8005a4e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f98f 	bl	8005d40 <RTC_Bcd2ToByte>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f986 	bl	8005d40 <RTC_Bcd2ToByte>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	789b      	ldrb	r3, [r3, #2]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f97d 	bl	8005d40 <RTC_Bcd2ToByte>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	7f1b      	ldrb	r3, [r3, #28]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_RTC_SetDate+0x1c>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e071      	b.n	8005b58 <HAL_RTC_SetDate+0x100>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10e      	bne.n	8005aa4 <HAL_RTC_SetDate+0x4c>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	f023 0310 	bic.w	r3, r3, #16
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	330a      	adds	r3, #10
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11c      	bne.n	8005ae4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f929 	bl	8005d06 <RTC_ByteToBcd2>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f922 	bl	8005d06 <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ac6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f91a 	bl	8005d06 <RTC_ByteToBcd2>
 8005ad2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ad4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e00e      	b.n	8005b02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005af0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005af6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	22ca      	movs	r2, #202	; 0xca
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2253      	movs	r2, #83	; 0x53
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f89b 	bl	8005c4e <RTC_EnterInitMode>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10c      	bne.n	8005b3c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f8c2 	bl	8005cbc <RTC_ExitInitMode>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]

  return status;
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0c1b      	lsrs	r3, r3, #16
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	0b5b      	lsrs	r3, r3, #13
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11a      	bne.n	8005bf4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	78db      	ldrb	r3, [r3, #3]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f8bc 	bl	8005d40 <RTC_Bcd2ToByte>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f8b3 	bl	8005d40 <RTC_Bcd2ToByte>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	789b      	ldrb	r3, [r3, #2]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f8aa 	bl	8005d40 <RTC_Bcd2ToByte>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c18:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1a:	f7fc f883 	bl	8001d24 <HAL_GetTick>
 8005c1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c20:	e009      	b.n	8005c36 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c22:	f7fc f87f 	bl	8001d24 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c30:	d901      	bls.n	8005c36 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e007      	b.n	8005c46 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ee      	beq.n	8005c22 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d122      	bne.n	8005cb2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fc f852 	bl	8001d24 <HAL_GetTick>
 8005c80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c82:	e00c      	b.n	8005c9e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c84:	f7fc f84e 	bl	8001d24 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c92:	d904      	bls.n	8005c9e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2204      	movs	r2, #4
 8005c98:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <RTC_EnterInitMode+0x64>
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d1e8      	bne.n	8005c84 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ff89 	bl	8005bfe <HAL_RTC_WaitForSynchro>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005d14:	e005      	b.n	8005d22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	3b0a      	subs	r3, #10
 8005d20:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d8f6      	bhi.n	8005d16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b2db      	uxtb	r3, r3
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	4413      	add	r3, r2
 8005d6a:	b2db      	uxtb	r3, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e041      	b.n	8005e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb fd70 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f000 fa96 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e04e      	b.n	8005ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a23      	ldr	r2, [pc, #140]	; (8005edc <HAL_TIM_Base_Start_IT+0xc4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5a:	d01d      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIM_Base_Start_IT+0xd4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x80>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d111      	bne.n	8005ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d010      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e007      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40010400 	.word	0x40010400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40001800 	.word	0x40001800

08005ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0202 	mvn.w	r2, #2
 8005f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9b5 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9a7 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9b8 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0204 	mvn.w	r2, #4
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f98b 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f97d 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f98e 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0208 	mvn.w	r2, #8
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f961 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f953 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f964 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b10      	cmp	r3, #16
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0210 	mvn.w	r2, #16
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2208      	movs	r2, #8
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f937 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f929 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f93a 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10e      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0201 	mvn.w	r2, #1
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fa fc02 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fae0 	bl	8006668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8ff 	bl	80062d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0220 	mvn.w	r2, #32
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 faaa 	bl	8006654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIM_ConfigClockSource+0x1c>
 8006120:	2302      	movs	r3, #2
 8006122:	e0b4      	b.n	800628e <HAL_TIM_ConfigClockSource+0x186>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d03e      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0xd4>
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	f200 8087 	bhi.w	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	f000 8086 	beq.w	800627a <HAL_TIM_ConfigClockSource+0x172>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d87f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 8006174:	2b70      	cmp	r3, #112	; 0x70
 8006176:	d01a      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0xa6>
 8006178:	2b70      	cmp	r3, #112	; 0x70
 800617a:	d87b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d050      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x11a>
 8006180:	2b60      	cmp	r3, #96	; 0x60
 8006182:	d877      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d03c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0xfa>
 8006188:	2b50      	cmp	r3, #80	; 0x50
 800618a:	d873      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d058      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x13a>
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d86f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d064      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15a>
 8006198:	2b30      	cmp	r3, #48	; 0x30
 800619a:	d86b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d060      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d867      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05c      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15a>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d05a      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15a>
 80061ac:	e062      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f000 f9ad 	bl	800651c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]
      break;
 80061da:	e04f      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6899      	ldr	r1, [r3, #8]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f000 f996 	bl	800651c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fe:	609a      	str	r2, [r3, #8]
      break;
 8006200:	e03c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	f000 f90a 	bl	8006428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2150      	movs	r1, #80	; 0x50
 800621a:	4618      	mov	r0, r3
 800621c:	f000 f963 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8006220:	e02c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	461a      	mov	r2, r3
 8006230:	f000 f929 	bl	8006486 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2160      	movs	r1, #96	; 0x60
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f953 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8006240:	e01c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	461a      	mov	r2, r3
 8006250:	f000 f8ea 	bl	8006428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f943 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8006260:	e00c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 f93a 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8006272:	e003      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e000      	b.n	800627c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800627a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a40      	ldr	r2, [pc, #256]	; (80063fc <TIM_Base_SetConfig+0x114>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a3d      	ldr	r2, [pc, #244]	; (8006400 <TIM_Base_SetConfig+0x118>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3c      	ldr	r2, [pc, #240]	; (8006404 <TIM_Base_SetConfig+0x11c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a3b      	ldr	r2, [pc, #236]	; (8006408 <TIM_Base_SetConfig+0x120>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3a      	ldr	r2, [pc, #232]	; (800640c <TIM_Base_SetConfig+0x124>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2f      	ldr	r2, [pc, #188]	; (80063fc <TIM_Base_SetConfig+0x114>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d02b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d027      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2c      	ldr	r2, [pc, #176]	; (8006400 <TIM_Base_SetConfig+0x118>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d023      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2b      	ldr	r2, [pc, #172]	; (8006404 <TIM_Base_SetConfig+0x11c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01f      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <TIM_Base_SetConfig+0x120>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a29      	ldr	r2, [pc, #164]	; (800640c <TIM_Base_SetConfig+0x124>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d017      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a28      	ldr	r2, [pc, #160]	; (8006410 <TIM_Base_SetConfig+0x128>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <TIM_Base_SetConfig+0x12c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a26      	ldr	r2, [pc, #152]	; (8006418 <TIM_Base_SetConfig+0x130>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a25      	ldr	r2, [pc, #148]	; (800641c <TIM_Base_SetConfig+0x134>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a24      	ldr	r2, [pc, #144]	; (8006420 <TIM_Base_SetConfig+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a23      	ldr	r2, [pc, #140]	; (8006424 <TIM_Base_SetConfig+0x13c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <TIM_Base_SetConfig+0x114>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0xf8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a0c      	ldr	r2, [pc, #48]	; (800640c <TIM_Base_SetConfig+0x124>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d103      	bne.n	80063e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	615a      	str	r2, [r3, #20]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800
 800641c:	40001800 	.word	0x40001800
 8006420:	40001c00 	.word	0x40001c00
 8006424:	40002000 	.word	0x40002000

08006428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f023 030a 	bic.w	r3, r3, #10
 8006464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0210 	bic.w	r2, r3, #16
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	031b      	lsls	r3, r3, #12
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	f043 0307 	orr.w	r3, r3, #7
 8006508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	021a      	lsls	r2, r3, #8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	431a      	orrs	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006570:	2302      	movs	r3, #2
 8006572:	e05a      	b.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a21      	ldr	r2, [pc, #132]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c0:	d01d      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1d      	ldr	r2, [pc, #116]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a15      	ldr	r2, [pc, #84]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d10c      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4313      	orrs	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40001800 	.word	0x40001800

08006654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e03f      	b.n	800670e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fb f910 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fd7b 	bl	80071bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b08a      	sub	sp, #40	; 0x28
 800671a:	af02      	add	r7, sp, #8
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b20      	cmp	r3, #32
 8006734:	d17c      	bne.n	8006830 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_Transmit+0x2c>
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e075      	b.n	8006832 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_UART_Transmit+0x3e>
 8006750:	2302      	movs	r3, #2
 8006752:	e06e      	b.n	8006832 <HAL_UART_Transmit+0x11c>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2221      	movs	r2, #33	; 0x21
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676a:	f7fb fadb 	bl	8001d24 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	d108      	bne.n	8006798 <HAL_UART_Transmit+0x82>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e003      	b.n	80067a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067a8:	e02a      	b.n	8006800 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 faf9 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e036      	b.n	8006832 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	3302      	adds	r3, #2
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e007      	b.n	80067f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1cf      	bne.n	80067aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2200      	movs	r2, #0
 8006812:	2140      	movs	r1, #64	; 0x40
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fac9 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e006      	b.n	8006832 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b0ba      	sub	sp, #232	; 0xe8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fbd3 	bl	8007046 <UART_Receive_IT>
      return;
 80068a0:	e256      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80de 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
 80068ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80d1 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0202 	orr.w	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
 800691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0208 	orr.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 81ed 	beq.w	8006d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb5e 	bl	8007046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_UART_IRQHandler+0x17a>
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04f      	beq.n	8006a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa66 	bl	8006e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d141      	bne.n	8006a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_UART_IRQHandler+0x3dc>)
 8006a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc f978 	bl	8002d20 <HAL_DMA_Abort_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00e      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f99a 	bl	8006d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e00a      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f996 	bl	8006d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e006      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f992 	bl	8006d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a62:	e170      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	bf00      	nop
    return;
 8006a66:	e16e      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 814a 	bne.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8143 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 813c 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	f040 80b4 	bne.w	8006c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8140 	beq.w	8006d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	f080 8139 	bcs.w	8006d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	f000 8088 	beq.w	8006bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d9      	bne.n	8006aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e1      	bne.n	8006b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc f821 	bl	8002c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8c0 	bl	8006d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c14:	e099      	b.n	8006d4a <HAL_UART_IRQHandler+0x50e>
 8006c16:	bf00      	nop
 8006c18:	08006f4f 	.word	0x08006f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808b 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8086 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c66:	647a      	str	r2, [r7, #68]	; 0x44
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f848 	bl	8006d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d04:	e023      	b.n	8006d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f929 	bl	8006f76 <UART_Transmit_IT>
    return;
 8006d24:	e014      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f969 	bl	8007016 <UART_EndTransmit_IT>
    return;
 8006d44:	e004      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    return;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4e:	bf00      	nop
  }
}
 8006d50:	37e8      	adds	r7, #232	; 0xe8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop

08006d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b090      	sub	sp, #64	; 0x40
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbc:	e050      	b.n	8006e60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d04c      	beq.n	8006e60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8006dcc:	f7fa ffaa 	bl	8001d24 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d241      	bcs.n	8006e60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006dfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3314      	adds	r3, #20
 8006e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e30:	623a      	str	r2, [r7, #32]
 8006e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e00f      	b.n	8006e80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d09f      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3740      	adds	r7, #64	; 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b095      	sub	sp, #84	; 0x54
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d119      	bne.n	8006f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0310 	bic.w	r3, r3, #16
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f20:	61ba      	str	r2, [r7, #24]
 8006f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6979      	ldr	r1, [r7, #20]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e5      	bne.n	8006f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f42:	bf00      	nop
 8006f44:	3754      	adds	r7, #84	; 0x54
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff ff09 	bl	8006d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b21      	cmp	r3, #33	; 0x21
 8006f88:	d13e      	bne.n	8007008 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d114      	bne.n	8006fbe <UART_Transmit_IT+0x48>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d110      	bne.n	8006fbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	1c9a      	adds	r2, r3, #2
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	621a      	str	r2, [r3, #32]
 8006fbc:	e008      	b.n	8006fd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6211      	str	r1, [r2, #32]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10f      	bne.n	8007004 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fe8e 	bl	8006d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b08c      	sub	sp, #48	; 0x30
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b22      	cmp	r3, #34	; 0x22
 8007058:	f040 80ab 	bne.w	80071b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007064:	d117      	bne.n	8007096 <UART_Receive_IT+0x50>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d113      	bne.n	8007096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	b29a      	uxth	r2, r3
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	629a      	str	r2, [r3, #40]	; 0x28
 8007094:	e026      	b.n	80070e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800709c:	2300      	movs	r3, #0
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a8:	d007      	beq.n	80070ba <UART_Receive_IT+0x74>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <UART_Receive_IT+0x82>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e008      	b.n	80070da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4619      	mov	r1, r3
 80070f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d15a      	bne.n	80071ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0220 	bic.w	r2, r2, #32
 8007106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695a      	ldr	r2, [r3, #20]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	2b01      	cmp	r3, #1
 8007136:	d135      	bne.n	80071a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	613b      	str	r3, [r7, #16]
   return(result);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715e:	623a      	str	r2, [r7, #32]
 8007160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	69f9      	ldr	r1, [r7, #28]
 8007164:	6a3a      	ldr	r2, [r7, #32]
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	61bb      	str	r3, [r7, #24]
   return(result);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e5      	bne.n	800713e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b10      	cmp	r3, #16
 800717e:	d10a      	bne.n	8007196 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fdf9 	bl	8006d94 <HAL_UARTEx_RxEventCallback>
 80071a2:	e002      	b.n	80071aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fde1 	bl	8006d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e002      	b.n	80071b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3730      	adds	r7, #48	; 0x30
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c0:	b0c0      	sub	sp, #256	; 0x100
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	68d9      	ldr	r1, [r3, #12]
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	ea40 0301 	orr.w	r3, r0, r1
 80071e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007214:	f021 010c 	bic.w	r1, r1, #12
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007222:	430b      	orrs	r3, r1
 8007224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007236:	6999      	ldr	r1, [r3, #24]
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	ea40 0301 	orr.w	r3, r0, r1
 8007242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b8f      	ldr	r3, [pc, #572]	; (8007488 <UART_SetConfig+0x2cc>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d005      	beq.n	800725c <UART_SetConfig+0xa0>
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b8d      	ldr	r3, [pc, #564]	; (800748c <UART_SetConfig+0x2d0>)
 8007258:	429a      	cmp	r2, r3
 800725a:	d104      	bne.n	8007266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fe f8ba 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 8007260:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007264:	e003      	b.n	800726e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007266:	f7fe f8a1 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800726a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007278:	f040 810c 	bne.w	8007494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800727c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007286:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800728a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	1891      	adds	r1, r2, r2
 8007294:	65b9      	str	r1, [r7, #88]	; 0x58
 8007296:	415b      	adcs	r3, r3
 8007298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800729e:	4621      	mov	r1, r4
 80072a0:	eb12 0801 	adds.w	r8, r2, r1
 80072a4:	4629      	mov	r1, r5
 80072a6:	eb43 0901 	adc.w	r9, r3, r1
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072be:	4690      	mov	r8, r2
 80072c0:	4699      	mov	r9, r3
 80072c2:	4623      	mov	r3, r4
 80072c4:	eb18 0303 	adds.w	r3, r8, r3
 80072c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072cc:	462b      	mov	r3, r5
 80072ce:	eb49 0303 	adc.w	r3, r9, r3
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ea:	460b      	mov	r3, r1
 80072ec:	18db      	adds	r3, r3, r3
 80072ee:	653b      	str	r3, [r7, #80]	; 0x50
 80072f0:	4613      	mov	r3, r2
 80072f2:	eb42 0303 	adc.w	r3, r2, r3
 80072f6:	657b      	str	r3, [r7, #84]	; 0x54
 80072f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007300:	f7f8 ffce 	bl	80002a0 <__aeabi_uldivmod>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4b61      	ldr	r3, [pc, #388]	; (8007490 <UART_SetConfig+0x2d4>)
 800730a:	fba3 2302 	umull	r2, r3, r3, r2
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	011c      	lsls	r4, r3, #4
 8007312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800731c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	1891      	adds	r1, r2, r2
 800732a:	64b9      	str	r1, [r7, #72]	; 0x48
 800732c:	415b      	adcs	r3, r3
 800732e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007334:	4641      	mov	r1, r8
 8007336:	eb12 0a01 	adds.w	sl, r2, r1
 800733a:	4649      	mov	r1, r9
 800733c:	eb43 0b01 	adc.w	fp, r3, r1
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800734c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007354:	4692      	mov	sl, r2
 8007356:	469b      	mov	fp, r3
 8007358:	4643      	mov	r3, r8
 800735a:	eb1a 0303 	adds.w	r3, sl, r3
 800735e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007362:	464b      	mov	r3, r9
 8007364:	eb4b 0303 	adc.w	r3, fp, r3
 8007368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007378:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800737c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007380:	460b      	mov	r3, r1
 8007382:	18db      	adds	r3, r3, r3
 8007384:	643b      	str	r3, [r7, #64]	; 0x40
 8007386:	4613      	mov	r3, r2
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	647b      	str	r3, [r7, #68]	; 0x44
 800738e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007396:	f7f8 ff83 	bl	80002a0 <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	4b3b      	ldr	r3, [pc, #236]	; (8007490 <UART_SetConfig+0x2d4>)
 80073a2:	fba3 2301 	umull	r2, r3, r3, r1
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	2264      	movs	r2, #100	; 0x64
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
 80073ae:	1acb      	subs	r3, r1, r3
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073b6:	4b36      	ldr	r3, [pc, #216]	; (8007490 <UART_SetConfig+0x2d4>)
 80073b8:	fba3 2302 	umull	r2, r3, r3, r2
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073c4:	441c      	add	r4, r3
 80073c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	1891      	adds	r1, r2, r2
 80073de:	63b9      	str	r1, [r7, #56]	; 0x38
 80073e0:	415b      	adcs	r3, r3
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073e8:	4641      	mov	r1, r8
 80073ea:	1851      	adds	r1, r2, r1
 80073ec:	6339      	str	r1, [r7, #48]	; 0x30
 80073ee:	4649      	mov	r1, r9
 80073f0:	414b      	adcs	r3, r1
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007400:	4659      	mov	r1, fp
 8007402:	00cb      	lsls	r3, r1, #3
 8007404:	4651      	mov	r1, sl
 8007406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800740a:	4651      	mov	r1, sl
 800740c:	00ca      	lsls	r2, r1, #3
 800740e:	4610      	mov	r0, r2
 8007410:	4619      	mov	r1, r3
 8007412:	4603      	mov	r3, r0
 8007414:	4642      	mov	r2, r8
 8007416:	189b      	adds	r3, r3, r2
 8007418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741c:	464b      	mov	r3, r9
 800741e:	460a      	mov	r2, r1
 8007420:	eb42 0303 	adc.w	r3, r2, r3
 8007424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007434:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800743c:	460b      	mov	r3, r1
 800743e:	18db      	adds	r3, r3, r3
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
 8007442:	4613      	mov	r3, r2
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800744e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007452:	f7f8 ff25 	bl	80002a0 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <UART_SetConfig+0x2d4>)
 800745c:	fba3 1302 	umull	r1, r3, r3, r2
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	2164      	movs	r1, #100	; 0x64
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	3332      	adds	r3, #50	; 0x32
 800746e:	4a08      	ldr	r2, [pc, #32]	; (8007490 <UART_SetConfig+0x2d4>)
 8007470:	fba2 2303 	umull	r2, r3, r2, r3
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	f003 0207 	and.w	r2, r3, #7
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4422      	add	r2, r4
 8007482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007484:	e106      	b.n	8007694 <UART_SetConfig+0x4d8>
 8007486:	bf00      	nop
 8007488:	40011000 	.word	0x40011000
 800748c:	40011400 	.word	0x40011400
 8007490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007498:	2200      	movs	r2, #0
 800749a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800749e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074a6:	4642      	mov	r2, r8
 80074a8:	464b      	mov	r3, r9
 80074aa:	1891      	adds	r1, r2, r2
 80074ac:	6239      	str	r1, [r7, #32]
 80074ae:	415b      	adcs	r3, r3
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
 80074b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074b6:	4641      	mov	r1, r8
 80074b8:	1854      	adds	r4, r2, r1
 80074ba:	4649      	mov	r1, r9
 80074bc:	eb43 0501 	adc.w	r5, r3, r1
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	00eb      	lsls	r3, r5, #3
 80074ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ce:	00e2      	lsls	r2, r4, #3
 80074d0:	4614      	mov	r4, r2
 80074d2:	461d      	mov	r5, r3
 80074d4:	4643      	mov	r3, r8
 80074d6:	18e3      	adds	r3, r4, r3
 80074d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074dc:	464b      	mov	r3, r9
 80074de:	eb45 0303 	adc.w	r3, r5, r3
 80074e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007502:	4629      	mov	r1, r5
 8007504:	008b      	lsls	r3, r1, #2
 8007506:	4621      	mov	r1, r4
 8007508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800750c:	4621      	mov	r1, r4
 800750e:	008a      	lsls	r2, r1, #2
 8007510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007514:	f7f8 fec4 	bl	80002a0 <__aeabi_uldivmod>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <UART_SetConfig+0x4e4>)
 800751e:	fba3 2302 	umull	r2, r3, r3, r2
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	011c      	lsls	r4, r3, #4
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752a:	2200      	movs	r2, #0
 800752c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007530:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	1891      	adds	r1, r2, r2
 800753e:	61b9      	str	r1, [r7, #24]
 8007540:	415b      	adcs	r3, r3
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007548:	4641      	mov	r1, r8
 800754a:	1851      	adds	r1, r2, r1
 800754c:	6139      	str	r1, [r7, #16]
 800754e:	4649      	mov	r1, r9
 8007550:	414b      	adcs	r3, r1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007560:	4659      	mov	r1, fp
 8007562:	00cb      	lsls	r3, r1, #3
 8007564:	4651      	mov	r1, sl
 8007566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756a:	4651      	mov	r1, sl
 800756c:	00ca      	lsls	r2, r1, #3
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	4603      	mov	r3, r0
 8007574:	4642      	mov	r2, r8
 8007576:	189b      	adds	r3, r3, r2
 8007578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800757c:	464b      	mov	r3, r9
 800757e:	460a      	mov	r2, r1
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	67bb      	str	r3, [r7, #120]	; 0x78
 8007592:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075a0:	4649      	mov	r1, r9
 80075a2:	008b      	lsls	r3, r1, #2
 80075a4:	4641      	mov	r1, r8
 80075a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075aa:	4641      	mov	r1, r8
 80075ac:	008a      	lsls	r2, r1, #2
 80075ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075b2:	f7f8 fe75 	bl	80002a0 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	4b38      	ldr	r3, [pc, #224]	; (80076a0 <UART_SetConfig+0x4e4>)
 80075be:	fba3 2301 	umull	r2, r3, r3, r1
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2264      	movs	r2, #100	; 0x64
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	1acb      	subs	r3, r1, r3
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	3332      	adds	r3, #50	; 0x32
 80075d0:	4a33      	ldr	r2, [pc, #204]	; (80076a0 <UART_SetConfig+0x4e4>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075dc:	441c      	add	r4, r3
 80075de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e2:	2200      	movs	r2, #0
 80075e4:	673b      	str	r3, [r7, #112]	; 0x70
 80075e6:	677a      	str	r2, [r7, #116]	; 0x74
 80075e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	1891      	adds	r1, r2, r2
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	415b      	adcs	r3, r3
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075fc:	4641      	mov	r1, r8
 80075fe:	1851      	adds	r1, r2, r1
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	4649      	mov	r1, r9
 8007604:	414b      	adcs	r3, r1
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007614:	4659      	mov	r1, fp
 8007616:	00cb      	lsls	r3, r1, #3
 8007618:	4651      	mov	r1, sl
 800761a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761e:	4651      	mov	r1, sl
 8007620:	00ca      	lsls	r2, r1, #3
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	4603      	mov	r3, r0
 8007628:	4642      	mov	r2, r8
 800762a:	189b      	adds	r3, r3, r2
 800762c:	66bb      	str	r3, [r7, #104]	; 0x68
 800762e:	464b      	mov	r3, r9
 8007630:	460a      	mov	r2, r1
 8007632:	eb42 0303 	adc.w	r3, r2, r3
 8007636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	663b      	str	r3, [r7, #96]	; 0x60
 8007642:	667a      	str	r2, [r7, #100]	; 0x64
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007650:	4649      	mov	r1, r9
 8007652:	008b      	lsls	r3, r1, #2
 8007654:	4641      	mov	r1, r8
 8007656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765a:	4641      	mov	r1, r8
 800765c:	008a      	lsls	r2, r1, #2
 800765e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007662:	f7f8 fe1d 	bl	80002a0 <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <UART_SetConfig+0x4e4>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a08      	ldr	r2, [pc, #32]	; (80076a0 <UART_SetConfig+0x4e4>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f003 020f 	and.w	r2, r3, #15
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4422      	add	r2, r4
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800769a:	46bd      	mov	sp, r7
 800769c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a0:	51eb851f 	.word	0x51eb851f

080076a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a4:	b084      	sub	sp, #16
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	f107 001c 	add.w	r0, r7, #28
 80076b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d122      	bne.n	8007702 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d105      	bne.n	80076f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 faa2 	bl	8007c40 <USB_CoreReset>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]
 8007700:	e01a      	b.n	8007738 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa96 	bl	8007c40 <USB_CoreReset>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
 800772a:	e005      	b.n	8007738 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10b      	bne.n	8007756 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f043 0206 	orr.w	r2, r3, #6
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f043 0220 	orr.w	r2, r3, #32
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007762:	b004      	add	sp, #16
 8007764:	4770      	bx	lr

08007766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d115      	bne.n	80077d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077b6:	2001      	movs	r0, #1
 80077b8:	f7fa fac0 	bl	8001d3c <HAL_Delay>
      ms++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa2e 	bl	8007c24 <USB_GetMode>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d01e      	beq.n	800780c <USB_SetCurrentMode+0x84>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b31      	cmp	r3, #49	; 0x31
 80077d2:	d9f0      	bls.n	80077b6 <USB_SetCurrentMode+0x2e>
 80077d4:	e01a      	b.n	800780c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d115      	bne.n	8007808 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077e8:	2001      	movs	r0, #1
 80077ea:	f7fa faa7 	bl	8001d3c <HAL_Delay>
      ms++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa15 	bl	8007c24 <USB_GetMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <USB_SetCurrentMode+0x84>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b31      	cmp	r3, #49	; 0x31
 8007804:	d9f0      	bls.n	80077e8 <USB_SetCurrentMode+0x60>
 8007806:	e001      	b.n	800780c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e005      	b.n	8007818 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b32      	cmp	r3, #50	; 0x32
 8007810:	d101      	bne.n	8007816 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007820:	b084      	sub	sp, #16
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800782e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	e009      	b.n	8007854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3340      	adds	r3, #64	; 0x40
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b0e      	cmp	r3, #14
 8007858:	d9f2      	bls.n	8007840 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800785a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d11c      	bne.n	800789a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786e:	f043 0302 	orr.w	r3, r3, #2
 8007872:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
 8007898:	e00b      	b.n	80078b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c4:	4619      	mov	r1, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078cc:	461a      	mov	r2, r3
 80078ce:	680b      	ldr	r3, [r1, #0]
 80078d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d10c      	bne.n	80078f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078de:	2100      	movs	r1, #0
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f965 	bl	8007bb0 <USB_SetDevSpeed>
 80078e6:	e008      	b.n	80078fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078e8:	2101      	movs	r1, #1
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f960 	bl	8007bb0 <USB_SetDevSpeed>
 80078f0:	e003      	b.n	80078fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078f2:	2103      	movs	r1, #3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f95b 	bl	8007bb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078fa:	2110      	movs	r1, #16
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8f3 	bl	8007ae8 <USB_FlushTxFifo>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f91f 	bl	8007b50 <USB_FlushRxFifo>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	461a      	mov	r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793a:	461a      	mov	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	e043      	b.n	80079ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795c:	d118      	bne.n	8007990 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e013      	b.n	80079a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	461a      	mov	r2, r3
 8007988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e008      	b.n	80079a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799c:	461a      	mov	r2, r3
 800799e:	2300      	movs	r3, #0
 80079a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	461a      	mov	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	461a      	mov	r2, r3
 80079c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	3301      	adds	r3, #1
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d3b7      	bcc.n	8007946 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	e043      	b.n	8007a64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f2:	d118      	bne.n	8007a26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	461a      	mov	r2, r3
 8007a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e013      	b.n	8007a38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	e008      	b.n	8007a38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	461a      	mov	r2, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	461a      	mov	r2, r3
 8007a46:	2300      	movs	r3, #0
 8007a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	461a      	mov	r2, r3
 8007a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	3301      	adds	r3, #1
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d3b7      	bcc.n	80079dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f043 0210 	orr.w	r2, r3, #16
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <USB_DevInit+0x2c4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f043 0208 	orr.w	r2, r3, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d107      	bne.n	8007ad4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ae0:	b004      	add	sp, #16
 8007ae2:	4770      	bx	lr
 8007ae4:	803c3800 	.word	0x803c3800

08007ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <USB_FlushTxFifo+0x64>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e01b      	b.n	8007b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	daf2      	bge.n	8007af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	019b      	lsls	r3, r3, #6
 8007b18:	f043 0220 	orr.w	r2, r3, #32
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4a08      	ldr	r2, [pc, #32]	; (8007b4c <USB_FlushTxFifo+0x64>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d0f0      	beq.n	8007b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	00030d40 	.word	0x00030d40

08007b50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4a11      	ldr	r2, [pc, #68]	; (8007bac <USB_FlushRxFifo+0x5c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e018      	b.n	8007ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	daf2      	bge.n	8007b5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <USB_FlushRxFifo+0x5c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e006      	b.n	8007ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d0f0      	beq.n	8007b80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	00030d40 	.word	0x00030d40

08007bb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c10:	f043 0302 	orr.w	r3, r3, #2
 8007c14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0301 	and.w	r3, r3, #1
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <USB_CoreReset+0x64>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e01b      	b.n	8007c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	daf2      	bge.n	8007c4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f043 0201 	orr.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <USB_CoreReset+0x64>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e006      	b.n	8007c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d0f0      	beq.n	8007c76 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	00030d40 	.word	0x00030d40

08007ca8 <std>:
 8007ca8:	2300      	movs	r3, #0
 8007caa:	b510      	push	{r4, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	e9c0 3300 	strd	r3, r3, [r0]
 8007cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb6:	6083      	str	r3, [r0, #8]
 8007cb8:	8181      	strh	r1, [r0, #12]
 8007cba:	6643      	str	r3, [r0, #100]	; 0x64
 8007cbc:	81c2      	strh	r2, [r0, #14]
 8007cbe:	6183      	str	r3, [r0, #24]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	305c      	adds	r0, #92	; 0x5c
 8007cc6:	f000 fa4b 	bl	8008160 <memset>
 8007cca:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <std+0x58>)
 8007ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <std+0x5c>)
 8007cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <std+0x60>)
 8007cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <std+0x64>)
 8007cd8:	6323      	str	r3, [r4, #48]	; 0x30
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <std+0x68>)
 8007cdc:	6224      	str	r4, [r4, #32]
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d006      	beq.n	8007cf0 <std+0x48>
 8007ce2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ce6:	4294      	cmp	r4, r2
 8007ce8:	d002      	beq.n	8007cf0 <std+0x48>
 8007cea:	33d0      	adds	r3, #208	; 0xd0
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d105      	bne.n	8007cfc <std+0x54>
 8007cf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf8:	f000 baaa 	b.w	8008250 <__retarget_lock_init_recursive>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	08007fb1 	.word	0x08007fb1
 8007d04:	08007fd3 	.word	0x08007fd3
 8007d08:	0800800b 	.word	0x0800800b
 8007d0c:	0800802f 	.word	0x0800802f
 8007d10:	200009fc 	.word	0x200009fc

08007d14 <stdio_exit_handler>:
 8007d14:	4a02      	ldr	r2, [pc, #8]	; (8007d20 <stdio_exit_handler+0xc>)
 8007d16:	4903      	ldr	r1, [pc, #12]	; (8007d24 <stdio_exit_handler+0x10>)
 8007d18:	4803      	ldr	r0, [pc, #12]	; (8007d28 <stdio_exit_handler+0x14>)
 8007d1a:	f000 b869 	b.w	8007df0 <_fwalk_sglue>
 8007d1e:	bf00      	nop
 8007d20:	20000014 	.word	0x20000014
 8007d24:	08008dad 	.word	0x08008dad
 8007d28:	20000020 	.word	0x20000020

08007d2c <cleanup_stdio>:
 8007d2c:	6841      	ldr	r1, [r0, #4]
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <cleanup_stdio+0x34>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	d001      	beq.n	8007d3c <cleanup_stdio+0x10>
 8007d38:	f001 f838 	bl	8008dac <_fflush_r>
 8007d3c:	68a1      	ldr	r1, [r4, #8]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <cleanup_stdio+0x38>)
 8007d40:	4299      	cmp	r1, r3
 8007d42:	d002      	beq.n	8007d4a <cleanup_stdio+0x1e>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 f831 	bl	8008dac <_fflush_r>
 8007d4a:	68e1      	ldr	r1, [r4, #12]
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <cleanup_stdio+0x3c>)
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	d004      	beq.n	8007d5c <cleanup_stdio+0x30>
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f001 b828 	b.w	8008dac <_fflush_r>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	200009fc 	.word	0x200009fc
 8007d64:	20000a64 	.word	0x20000a64
 8007d68:	20000acc 	.word	0x20000acc

08007d6c <global_stdio_init.part.0>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <global_stdio_init.part.0+0x30>)
 8007d70:	4c0b      	ldr	r4, [pc, #44]	; (8007da0 <global_stdio_init.part.0+0x34>)
 8007d72:	4a0c      	ldr	r2, [pc, #48]	; (8007da4 <global_stdio_init.part.0+0x38>)
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	f7ff ff94 	bl	8007ca8 <std>
 8007d80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d84:	2201      	movs	r2, #1
 8007d86:	2109      	movs	r1, #9
 8007d88:	f7ff ff8e 	bl	8007ca8 <std>
 8007d8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d90:	2202      	movs	r2, #2
 8007d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d96:	2112      	movs	r1, #18
 8007d98:	f7ff bf86 	b.w	8007ca8 <std>
 8007d9c:	20000b34 	.word	0x20000b34
 8007da0:	200009fc 	.word	0x200009fc
 8007da4:	08007d15 	.word	0x08007d15

08007da8 <__sfp_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__sfp_lock_acquire+0x8>)
 8007daa:	f000 ba52 	b.w	8008252 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20000b3d 	.word	0x20000b3d

08007db4 <__sfp_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_release+0x8>)
 8007db6:	f000 ba4d 	b.w	8008254 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000b3d 	.word	0x20000b3d

08007dc0 <__sinit>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7ff fff0 	bl	8007da8 <__sfp_lock_acquire>
 8007dc8:	6a23      	ldr	r3, [r4, #32]
 8007dca:	b11b      	cbz	r3, 8007dd4 <__sinit+0x14>
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bff0 	b.w	8007db4 <__sfp_lock_release>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <__sinit+0x28>)
 8007dd6:	6223      	str	r3, [r4, #32]
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <__sinit+0x2c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <__sinit+0xc>
 8007de0:	f7ff ffc4 	bl	8007d6c <global_stdio_init.part.0>
 8007de4:	e7f2      	b.n	8007dcc <__sinit+0xc>
 8007de6:	bf00      	nop
 8007de8:	08007d2d 	.word	0x08007d2d
 8007dec:	20000b34 	.word	0x20000b34

08007df0 <_fwalk_sglue>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4607      	mov	r7, r0
 8007df6:	4688      	mov	r8, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e00:	f1b9 0901 	subs.w	r9, r9, #1
 8007e04:	d505      	bpl.n	8007e12 <_fwalk_sglue+0x22>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d1f7      	bne.n	8007dfc <_fwalk_sglue+0xc>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d907      	bls.n	8007e28 <_fwalk_sglue+0x38>
 8007e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	d003      	beq.n	8007e28 <_fwalk_sglue+0x38>
 8007e20:	4629      	mov	r1, r5
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	4306      	orrs	r6, r0
 8007e28:	3568      	adds	r5, #104	; 0x68
 8007e2a:	e7e9      	b.n	8007e00 <_fwalk_sglue+0x10>

08007e2c <iprintf>:
 8007e2c:	b40f      	push	{r0, r1, r2, r3}
 8007e2e:	b507      	push	{r0, r1, r2, lr}
 8007e30:	4906      	ldr	r1, [pc, #24]	; (8007e4c <iprintf+0x20>)
 8007e32:	ab04      	add	r3, sp, #16
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e3a:	6881      	ldr	r1, [r0, #8]
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	f000 fc85 	bl	800874c <_vfiprintf_r>
 8007e42:	b003      	add	sp, #12
 8007e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e48:	b004      	add	sp, #16
 8007e4a:	4770      	bx	lr
 8007e4c:	2000006c 	.word	0x2000006c

08007e50 <_puts_r>:
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	6884      	ldr	r4, [r0, #8]
 8007e56:	4605      	mov	r5, r0
 8007e58:	460e      	mov	r6, r1
 8007e5a:	b90b      	cbnz	r3, 8007e60 <_puts_r+0x10>
 8007e5c:	f7ff ffb0 	bl	8007dc0 <__sinit>
 8007e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e62:	07db      	lsls	r3, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_puts_r+0x22>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	0598      	lsls	r0, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_puts_r+0x22>
 8007e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6e:	f000 f9f0 	bl	8008252 <__retarget_lock_acquire_recursive>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	0719      	lsls	r1, r3, #28
 8007e76:	d513      	bpl.n	8007ea0 <_puts_r+0x50>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	b18b      	cbz	r3, 8007ea0 <_puts_r+0x50>
 8007e7c:	3e01      	subs	r6, #1
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	b9e9      	cbnz	r1, 8007ec6 <_puts_r+0x76>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da2e      	bge.n	8007eec <_puts_r+0x9c>
 8007e8e:	4622      	mov	r2, r4
 8007e90:	210a      	movs	r1, #10
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 f8cf 	bl	8008036 <__swbuf_r>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d007      	beq.n	8007eac <_puts_r+0x5c>
 8007e9c:	250a      	movs	r5, #10
 8007e9e:	e007      	b.n	8007eb0 <_puts_r+0x60>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f904 	bl	80080b0 <__swsetup_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0e7      	beq.n	8007e7c <_puts_r+0x2c>
 8007eac:	f04f 35ff 	mov.w	r5, #4294967295
 8007eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb2:	07da      	lsls	r2, r3, #31
 8007eb4:	d405      	bmi.n	8007ec2 <_puts_r+0x72>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	059b      	lsls	r3, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_puts_r+0x72>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebe:	f000 f9c9 	bl	8008254 <__retarget_lock_release_recursive>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da04      	bge.n	8007ed4 <_puts_r+0x84>
 8007eca:	69a2      	ldr	r2, [r4, #24]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	dc06      	bgt.n	8007ede <_puts_r+0x8e>
 8007ed0:	290a      	cmp	r1, #10
 8007ed2:	d004      	beq.n	8007ede <_puts_r+0x8e>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	6022      	str	r2, [r4, #0]
 8007eda:	7019      	strb	r1, [r3, #0]
 8007edc:	e7cf      	b.n	8007e7e <_puts_r+0x2e>
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 f8a8 	bl	8008036 <__swbuf_r>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d1c9      	bne.n	8007e7e <_puts_r+0x2e>
 8007eea:	e7df      	b.n	8007eac <_puts_r+0x5c>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	250a      	movs	r5, #10
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	6022      	str	r2, [r4, #0]
 8007ef4:	701d      	strb	r5, [r3, #0]
 8007ef6:	e7db      	b.n	8007eb0 <_puts_r+0x60>

08007ef8 <puts>:
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <puts+0xc>)
 8007efa:	4601      	mov	r1, r0
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	f7ff bfa7 	b.w	8007e50 <_puts_r>
 8007f02:	bf00      	nop
 8007f04:	2000006c 	.word	0x2000006c

08007f08 <sniprintf>:
 8007f08:	b40c      	push	{r2, r3}
 8007f0a:	b530      	push	{r4, r5, lr}
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <sniprintf+0x64>)
 8007f0e:	1e0c      	subs	r4, r1, #0
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	b09d      	sub	sp, #116	; 0x74
 8007f14:	da08      	bge.n	8007f28 <sniprintf+0x20>
 8007f16:	238b      	movs	r3, #139	; 0x8b
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	b01d      	add	sp, #116	; 0x74
 8007f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f24:	b002      	add	sp, #8
 8007f26:	4770      	bx	lr
 8007f28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f30:	bf14      	ite	ne
 8007f32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f36:	4623      	moveq	r3, r4
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f40:	9002      	str	r0, [sp, #8]
 8007f42:	9006      	str	r0, [sp, #24]
 8007f44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f4a:	ab21      	add	r3, sp, #132	; 0x84
 8007f4c:	a902      	add	r1, sp, #8
 8007f4e:	4628      	mov	r0, r5
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f000 fad3 	bl	80084fc <_svfiprintf_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	bfbc      	itt	lt
 8007f5a:	238b      	movlt	r3, #139	; 0x8b
 8007f5c:	602b      	strlt	r3, [r5, #0]
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	d0dd      	beq.n	8007f1e <sniprintf+0x16>
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e7d9      	b.n	8007f1e <sniprintf+0x16>
 8007f6a:	bf00      	nop
 8007f6c:	2000006c 	.word	0x2000006c

08007f70 <siprintf>:
 8007f70:	b40e      	push	{r1, r2, r3}
 8007f72:	b500      	push	{lr}
 8007f74:	b09c      	sub	sp, #112	; 0x70
 8007f76:	ab1d      	add	r3, sp, #116	; 0x74
 8007f78:	9002      	str	r0, [sp, #8]
 8007f7a:	9006      	str	r0, [sp, #24]
 8007f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f80:	4809      	ldr	r0, [pc, #36]	; (8007fa8 <siprintf+0x38>)
 8007f82:	9107      	str	r1, [sp, #28]
 8007f84:	9104      	str	r1, [sp, #16]
 8007f86:	4909      	ldr	r1, [pc, #36]	; (8007fac <siprintf+0x3c>)
 8007f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8c:	9105      	str	r1, [sp, #20]
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	a902      	add	r1, sp, #8
 8007f94:	f000 fab2 	bl	80084fc <_svfiprintf_r>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	b01c      	add	sp, #112	; 0x70
 8007fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa4:	b003      	add	sp, #12
 8007fa6:	4770      	bx	lr
 8007fa8:	2000006c 	.word	0x2000006c
 8007fac:	ffff0208 	.word	0xffff0208

08007fb0 <__sread>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb8:	f000 f8fc 	bl	80081b4 <_read_r>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	bfab      	itete	ge
 8007fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc4:	181b      	addge	r3, r3, r0
 8007fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fca:	bfac      	ite	ge
 8007fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fce:	81a3      	strhlt	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__swrite>:
 8007fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	898b      	ldrh	r3, [r1, #12]
 8007fda:	05db      	lsls	r3, r3, #23
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	d505      	bpl.n	8007ff0 <__swrite+0x1e>
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2302      	movs	r3, #2
 8007fea:	2200      	movs	r2, #0
 8007fec:	f000 f8d0 	bl	8008190 <_lseek_r>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	4628      	mov	r0, r5
 8008002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	f000 b8e7 	b.w	80081d8 <_write_r>

0800800a <__sseek>:
 800800a:	b510      	push	{r4, lr}
 800800c:	460c      	mov	r4, r1
 800800e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008012:	f000 f8bd 	bl	8008190 <_lseek_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	bf15      	itete	ne
 800801c:	6560      	strne	r0, [r4, #84]	; 0x54
 800801e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strheq	r3, [r4, #12]
 8008028:	bf18      	it	ne
 800802a:	81a3      	strhne	r3, [r4, #12]
 800802c:	bd10      	pop	{r4, pc}

0800802e <__sclose>:
 800802e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008032:	f000 b89d 	b.w	8008170 <_close_r>

08008036 <__swbuf_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	460e      	mov	r6, r1
 800803a:	4614      	mov	r4, r2
 800803c:	4605      	mov	r5, r0
 800803e:	b118      	cbz	r0, 8008048 <__swbuf_r+0x12>
 8008040:	6a03      	ldr	r3, [r0, #32]
 8008042:	b90b      	cbnz	r3, 8008048 <__swbuf_r+0x12>
 8008044:	f7ff febc 	bl	8007dc0 <__sinit>
 8008048:	69a3      	ldr	r3, [r4, #24]
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	071a      	lsls	r2, r3, #28
 8008050:	d525      	bpl.n	800809e <__swbuf_r+0x68>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	b31b      	cbz	r3, 800809e <__swbuf_r+0x68>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	6922      	ldr	r2, [r4, #16]
 800805a:	1a98      	subs	r0, r3, r2
 800805c:	6963      	ldr	r3, [r4, #20]
 800805e:	b2f6      	uxtb	r6, r6
 8008060:	4283      	cmp	r3, r0
 8008062:	4637      	mov	r7, r6
 8008064:	dc04      	bgt.n	8008070 <__swbuf_r+0x3a>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 fe9f 	bl	8008dac <_fflush_r>
 800806e:	b9e0      	cbnz	r0, 80080aa <__swbuf_r+0x74>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	3b01      	subs	r3, #1
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	6022      	str	r2, [r4, #0]
 800807c:	701e      	strb	r6, [r3, #0]
 800807e:	6962      	ldr	r2, [r4, #20]
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	429a      	cmp	r2, r3
 8008084:	d004      	beq.n	8008090 <__swbuf_r+0x5a>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	07db      	lsls	r3, r3, #31
 800808a:	d506      	bpl.n	800809a <__swbuf_r+0x64>
 800808c:	2e0a      	cmp	r6, #10
 800808e:	d104      	bne.n	800809a <__swbuf_r+0x64>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 fe8a 	bl	8008dac <_fflush_r>
 8008098:	b938      	cbnz	r0, 80080aa <__swbuf_r+0x74>
 800809a:	4638      	mov	r0, r7
 800809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 f805 	bl	80080b0 <__swsetup_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0d5      	beq.n	8008056 <__swbuf_r+0x20>
 80080aa:	f04f 37ff 	mov.w	r7, #4294967295
 80080ae:	e7f4      	b.n	800809a <__swbuf_r+0x64>

080080b0 <__swsetup_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4b2a      	ldr	r3, [pc, #168]	; (800815c <__swsetup_r+0xac>)
 80080b4:	4605      	mov	r5, r0
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	460c      	mov	r4, r1
 80080ba:	b118      	cbz	r0, 80080c4 <__swsetup_r+0x14>
 80080bc:	6a03      	ldr	r3, [r0, #32]
 80080be:	b90b      	cbnz	r3, 80080c4 <__swsetup_r+0x14>
 80080c0:	f7ff fe7e 	bl	8007dc0 <__sinit>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ca:	0718      	lsls	r0, r3, #28
 80080cc:	d422      	bmi.n	8008114 <__swsetup_r+0x64>
 80080ce:	06d9      	lsls	r1, r3, #27
 80080d0:	d407      	bmi.n	80080e2 <__swsetup_r+0x32>
 80080d2:	2309      	movs	r3, #9
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e034      	b.n	800814c <__swsetup_r+0x9c>
 80080e2:	0758      	lsls	r0, r3, #29
 80080e4:	d512      	bpl.n	800810c <__swsetup_r+0x5c>
 80080e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e8:	b141      	cbz	r1, 80080fc <__swsetup_r+0x4c>
 80080ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ee:	4299      	cmp	r1, r3
 80080f0:	d002      	beq.n	80080f8 <__swsetup_r+0x48>
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f8b0 	bl	8008258 <_free_r>
 80080f8:	2300      	movs	r3, #0
 80080fa:	6363      	str	r3, [r4, #52]	; 0x34
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f043 0308 	orr.w	r3, r3, #8
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	b94b      	cbnz	r3, 800812c <__swsetup_r+0x7c>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800811e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008122:	d003      	beq.n	800812c <__swsetup_r+0x7c>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 fe8e 	bl	8008e48 <__smakebuf_r>
 800812c:	89a0      	ldrh	r0, [r4, #12]
 800812e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008132:	f010 0301 	ands.w	r3, r0, #1
 8008136:	d00a      	beq.n	800814e <__swsetup_r+0x9e>
 8008138:	2300      	movs	r3, #0
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	6963      	ldr	r3, [r4, #20]
 800813e:	425b      	negs	r3, r3
 8008140:	61a3      	str	r3, [r4, #24]
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	b943      	cbnz	r3, 8008158 <__swsetup_r+0xa8>
 8008146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800814a:	d1c4      	bne.n	80080d6 <__swsetup_r+0x26>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	0781      	lsls	r1, r0, #30
 8008150:	bf58      	it	pl
 8008152:	6963      	ldrpl	r3, [r4, #20]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	e7f4      	b.n	8008142 <__swsetup_r+0x92>
 8008158:	2000      	movs	r0, #0
 800815a:	e7f7      	b.n	800814c <__swsetup_r+0x9c>
 800815c:	2000006c 	.word	0x2000006c

08008160 <memset>:
 8008160:	4402      	add	r2, r0
 8008162:	4603      	mov	r3, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	f803 1b01 	strb.w	r1, [r3], #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_close_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	; (800818c <_close_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7f9 fcc5 	bl	8001b0a <_close>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_close_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_close_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000b38 	.word	0x20000b38

08008190 <_lseek_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	; (80081b0 <_lseek_r+0x20>)
 8008194:	4604      	mov	r4, r0
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7f9 fcda 	bl	8001b58 <_lseek>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_lseek_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_lseek_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20000b38 	.word	0x20000b38

080081b4 <_read_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_read_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7f9 fc84 	bl	8001ad0 <_read>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_read_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_read_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000b38 	.word	0x20000b38

080081d8 <_write_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_write_r+0x20>)
 80081dc:	4604      	mov	r4, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7f8 fafe 	bl	80007e8 <_write>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_write_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_write_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000b38 	.word	0x20000b38

080081fc <__errno>:
 80081fc:	4b01      	ldr	r3, [pc, #4]	; (8008204 <__errno+0x8>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	2000006c 	.word	0x2000006c

08008208 <__libc_init_array>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	4d0d      	ldr	r5, [pc, #52]	; (8008240 <__libc_init_array+0x38>)
 800820c:	4c0d      	ldr	r4, [pc, #52]	; (8008244 <__libc_init_array+0x3c>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	2600      	movs	r6, #0
 8008214:	42a6      	cmp	r6, r4
 8008216:	d109      	bne.n	800822c <__libc_init_array+0x24>
 8008218:	4d0b      	ldr	r5, [pc, #44]	; (8008248 <__libc_init_array+0x40>)
 800821a:	4c0c      	ldr	r4, [pc, #48]	; (800824c <__libc_init_array+0x44>)
 800821c:	f000 fee2 	bl	8008fe4 <_init>
 8008220:	1b64      	subs	r4, r4, r5
 8008222:	10a4      	asrs	r4, r4, #2
 8008224:	2600      	movs	r6, #0
 8008226:	42a6      	cmp	r6, r4
 8008228:	d105      	bne.n	8008236 <__libc_init_array+0x2e>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008230:	4798      	blx	r3
 8008232:	3601      	adds	r6, #1
 8008234:	e7ee      	b.n	8008214 <__libc_init_array+0xc>
 8008236:	f855 3b04 	ldr.w	r3, [r5], #4
 800823a:	4798      	blx	r3
 800823c:	3601      	adds	r6, #1
 800823e:	e7f2      	b.n	8008226 <__libc_init_array+0x1e>
 8008240:	080091e8 	.word	0x080091e8
 8008244:	080091e8 	.word	0x080091e8
 8008248:	080091e8 	.word	0x080091e8
 800824c:	080091ec 	.word	0x080091ec

08008250 <__retarget_lock_init_recursive>:
 8008250:	4770      	bx	lr

08008252 <__retarget_lock_acquire_recursive>:
 8008252:	4770      	bx	lr

08008254 <__retarget_lock_release_recursive>:
 8008254:	4770      	bx	lr
	...

08008258 <_free_r>:
 8008258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825a:	2900      	cmp	r1, #0
 800825c:	d044      	beq.n	80082e8 <_free_r+0x90>
 800825e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008262:	9001      	str	r0, [sp, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f1a1 0404 	sub.w	r4, r1, #4
 800826a:	bfb8      	it	lt
 800826c:	18e4      	addlt	r4, r4, r3
 800826e:	f000 f8df 	bl	8008430 <__malloc_lock>
 8008272:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <_free_r+0x94>)
 8008274:	9801      	ldr	r0, [sp, #4]
 8008276:	6813      	ldr	r3, [r2, #0]
 8008278:	b933      	cbnz	r3, 8008288 <_free_r+0x30>
 800827a:	6063      	str	r3, [r4, #4]
 800827c:	6014      	str	r4, [r2, #0]
 800827e:	b003      	add	sp, #12
 8008280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008284:	f000 b8da 	b.w	800843c <__malloc_unlock>
 8008288:	42a3      	cmp	r3, r4
 800828a:	d908      	bls.n	800829e <_free_r+0x46>
 800828c:	6825      	ldr	r5, [r4, #0]
 800828e:	1961      	adds	r1, r4, r5
 8008290:	428b      	cmp	r3, r1
 8008292:	bf01      	itttt	eq
 8008294:	6819      	ldreq	r1, [r3, #0]
 8008296:	685b      	ldreq	r3, [r3, #4]
 8008298:	1949      	addeq	r1, r1, r5
 800829a:	6021      	streq	r1, [r4, #0]
 800829c:	e7ed      	b.n	800827a <_free_r+0x22>
 800829e:	461a      	mov	r2, r3
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	b10b      	cbz	r3, 80082a8 <_free_r+0x50>
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d9fa      	bls.n	800829e <_free_r+0x46>
 80082a8:	6811      	ldr	r1, [r2, #0]
 80082aa:	1855      	adds	r5, r2, r1
 80082ac:	42a5      	cmp	r5, r4
 80082ae:	d10b      	bne.n	80082c8 <_free_r+0x70>
 80082b0:	6824      	ldr	r4, [r4, #0]
 80082b2:	4421      	add	r1, r4
 80082b4:	1854      	adds	r4, r2, r1
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	6011      	str	r1, [r2, #0]
 80082ba:	d1e0      	bne.n	800827e <_free_r+0x26>
 80082bc:	681c      	ldr	r4, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	6053      	str	r3, [r2, #4]
 80082c2:	440c      	add	r4, r1
 80082c4:	6014      	str	r4, [r2, #0]
 80082c6:	e7da      	b.n	800827e <_free_r+0x26>
 80082c8:	d902      	bls.n	80082d0 <_free_r+0x78>
 80082ca:	230c      	movs	r3, #12
 80082cc:	6003      	str	r3, [r0, #0]
 80082ce:	e7d6      	b.n	800827e <_free_r+0x26>
 80082d0:	6825      	ldr	r5, [r4, #0]
 80082d2:	1961      	adds	r1, r4, r5
 80082d4:	428b      	cmp	r3, r1
 80082d6:	bf04      	itt	eq
 80082d8:	6819      	ldreq	r1, [r3, #0]
 80082da:	685b      	ldreq	r3, [r3, #4]
 80082dc:	6063      	str	r3, [r4, #4]
 80082de:	bf04      	itt	eq
 80082e0:	1949      	addeq	r1, r1, r5
 80082e2:	6021      	streq	r1, [r4, #0]
 80082e4:	6054      	str	r4, [r2, #4]
 80082e6:	e7ca      	b.n	800827e <_free_r+0x26>
 80082e8:	b003      	add	sp, #12
 80082ea:	bd30      	pop	{r4, r5, pc}
 80082ec:	20000b40 	.word	0x20000b40

080082f0 <sbrk_aligned>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	4e0e      	ldr	r6, [pc, #56]	; (800832c <sbrk_aligned+0x3c>)
 80082f4:	460c      	mov	r4, r1
 80082f6:	6831      	ldr	r1, [r6, #0]
 80082f8:	4605      	mov	r5, r0
 80082fa:	b911      	cbnz	r1, 8008302 <sbrk_aligned+0x12>
 80082fc:	f000 fe1c 	bl	8008f38 <_sbrk_r>
 8008300:	6030      	str	r0, [r6, #0]
 8008302:	4621      	mov	r1, r4
 8008304:	4628      	mov	r0, r5
 8008306:	f000 fe17 	bl	8008f38 <_sbrk_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	d00a      	beq.n	8008324 <sbrk_aligned+0x34>
 800830e:	1cc4      	adds	r4, r0, #3
 8008310:	f024 0403 	bic.w	r4, r4, #3
 8008314:	42a0      	cmp	r0, r4
 8008316:	d007      	beq.n	8008328 <sbrk_aligned+0x38>
 8008318:	1a21      	subs	r1, r4, r0
 800831a:	4628      	mov	r0, r5
 800831c:	f000 fe0c 	bl	8008f38 <_sbrk_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d101      	bne.n	8008328 <sbrk_aligned+0x38>
 8008324:	f04f 34ff 	mov.w	r4, #4294967295
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	20000b44 	.word	0x20000b44

08008330 <_malloc_r>:
 8008330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008334:	1ccd      	adds	r5, r1, #3
 8008336:	f025 0503 	bic.w	r5, r5, #3
 800833a:	3508      	adds	r5, #8
 800833c:	2d0c      	cmp	r5, #12
 800833e:	bf38      	it	cc
 8008340:	250c      	movcc	r5, #12
 8008342:	2d00      	cmp	r5, #0
 8008344:	4607      	mov	r7, r0
 8008346:	db01      	blt.n	800834c <_malloc_r+0x1c>
 8008348:	42a9      	cmp	r1, r5
 800834a:	d905      	bls.n	8008358 <_malloc_r+0x28>
 800834c:	230c      	movs	r3, #12
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	2600      	movs	r6, #0
 8008352:	4630      	mov	r0, r6
 8008354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008358:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800842c <_malloc_r+0xfc>
 800835c:	f000 f868 	bl	8008430 <__malloc_lock>
 8008360:	f8d8 3000 	ldr.w	r3, [r8]
 8008364:	461c      	mov	r4, r3
 8008366:	bb5c      	cbnz	r4, 80083c0 <_malloc_r+0x90>
 8008368:	4629      	mov	r1, r5
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ffc0 	bl	80082f0 <sbrk_aligned>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	4604      	mov	r4, r0
 8008374:	d155      	bne.n	8008422 <_malloc_r+0xf2>
 8008376:	f8d8 4000 	ldr.w	r4, [r8]
 800837a:	4626      	mov	r6, r4
 800837c:	2e00      	cmp	r6, #0
 800837e:	d145      	bne.n	800840c <_malloc_r+0xdc>
 8008380:	2c00      	cmp	r4, #0
 8008382:	d048      	beq.n	8008416 <_malloc_r+0xe6>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	4631      	mov	r1, r6
 8008388:	4638      	mov	r0, r7
 800838a:	eb04 0903 	add.w	r9, r4, r3
 800838e:	f000 fdd3 	bl	8008f38 <_sbrk_r>
 8008392:	4581      	cmp	r9, r0
 8008394:	d13f      	bne.n	8008416 <_malloc_r+0xe6>
 8008396:	6821      	ldr	r1, [r4, #0]
 8008398:	1a6d      	subs	r5, r5, r1
 800839a:	4629      	mov	r1, r5
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff ffa7 	bl	80082f0 <sbrk_aligned>
 80083a2:	3001      	adds	r0, #1
 80083a4:	d037      	beq.n	8008416 <_malloc_r+0xe6>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	442b      	add	r3, r5
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	f8d8 3000 	ldr.w	r3, [r8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d038      	beq.n	8008426 <_malloc_r+0xf6>
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	42a2      	cmp	r2, r4
 80083b8:	d12b      	bne.n	8008412 <_malloc_r+0xe2>
 80083ba:	2200      	movs	r2, #0
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	e00f      	b.n	80083e0 <_malloc_r+0xb0>
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	1b52      	subs	r2, r2, r5
 80083c4:	d41f      	bmi.n	8008406 <_malloc_r+0xd6>
 80083c6:	2a0b      	cmp	r2, #11
 80083c8:	d917      	bls.n	80083fa <_malloc_r+0xca>
 80083ca:	1961      	adds	r1, r4, r5
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	6025      	str	r5, [r4, #0]
 80083d0:	bf18      	it	ne
 80083d2:	6059      	strne	r1, [r3, #4]
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	bf08      	it	eq
 80083d8:	f8c8 1000 	streq.w	r1, [r8]
 80083dc:	5162      	str	r2, [r4, r5]
 80083de:	604b      	str	r3, [r1, #4]
 80083e0:	4638      	mov	r0, r7
 80083e2:	f104 060b 	add.w	r6, r4, #11
 80083e6:	f000 f829 	bl	800843c <__malloc_unlock>
 80083ea:	f026 0607 	bic.w	r6, r6, #7
 80083ee:	1d23      	adds	r3, r4, #4
 80083f0:	1af2      	subs	r2, r6, r3
 80083f2:	d0ae      	beq.n	8008352 <_malloc_r+0x22>
 80083f4:	1b9b      	subs	r3, r3, r6
 80083f6:	50a3      	str	r3, [r4, r2]
 80083f8:	e7ab      	b.n	8008352 <_malloc_r+0x22>
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	d1dd      	bne.n	80083bc <_malloc_r+0x8c>
 8008400:	f8c8 2000 	str.w	r2, [r8]
 8008404:	e7ec      	b.n	80083e0 <_malloc_r+0xb0>
 8008406:	4623      	mov	r3, r4
 8008408:	6864      	ldr	r4, [r4, #4]
 800840a:	e7ac      	b.n	8008366 <_malloc_r+0x36>
 800840c:	4634      	mov	r4, r6
 800840e:	6876      	ldr	r6, [r6, #4]
 8008410:	e7b4      	b.n	800837c <_malloc_r+0x4c>
 8008412:	4613      	mov	r3, r2
 8008414:	e7cc      	b.n	80083b0 <_malloc_r+0x80>
 8008416:	230c      	movs	r3, #12
 8008418:	603b      	str	r3, [r7, #0]
 800841a:	4638      	mov	r0, r7
 800841c:	f000 f80e 	bl	800843c <__malloc_unlock>
 8008420:	e797      	b.n	8008352 <_malloc_r+0x22>
 8008422:	6025      	str	r5, [r4, #0]
 8008424:	e7dc      	b.n	80083e0 <_malloc_r+0xb0>
 8008426:	605b      	str	r3, [r3, #4]
 8008428:	deff      	udf	#255	; 0xff
 800842a:	bf00      	nop
 800842c:	20000b40 	.word	0x20000b40

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_lock+0x8>)
 8008432:	f7ff bf0e 	b.w	8008252 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	20000b3c 	.word	0x20000b3c

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_unlock+0x8>)
 800843e:	f7ff bf09 	b.w	8008254 <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	20000b3c 	.word	0x20000b3c

08008448 <__ssputs_r>:
 8008448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800844c:	688e      	ldr	r6, [r1, #8]
 800844e:	461f      	mov	r7, r3
 8008450:	42be      	cmp	r6, r7
 8008452:	680b      	ldr	r3, [r1, #0]
 8008454:	4682      	mov	sl, r0
 8008456:	460c      	mov	r4, r1
 8008458:	4690      	mov	r8, r2
 800845a:	d82c      	bhi.n	80084b6 <__ssputs_r+0x6e>
 800845c:	898a      	ldrh	r2, [r1, #12]
 800845e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008462:	d026      	beq.n	80084b2 <__ssputs_r+0x6a>
 8008464:	6965      	ldr	r5, [r4, #20]
 8008466:	6909      	ldr	r1, [r1, #16]
 8008468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846c:	eba3 0901 	sub.w	r9, r3, r1
 8008470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008474:	1c7b      	adds	r3, r7, #1
 8008476:	444b      	add	r3, r9
 8008478:	106d      	asrs	r5, r5, #1
 800847a:	429d      	cmp	r5, r3
 800847c:	bf38      	it	cc
 800847e:	461d      	movcc	r5, r3
 8008480:	0553      	lsls	r3, r2, #21
 8008482:	d527      	bpl.n	80084d4 <__ssputs_r+0x8c>
 8008484:	4629      	mov	r1, r5
 8008486:	f7ff ff53 	bl	8008330 <_malloc_r>
 800848a:	4606      	mov	r6, r0
 800848c:	b360      	cbz	r0, 80084e8 <__ssputs_r+0xa0>
 800848e:	6921      	ldr	r1, [r4, #16]
 8008490:	464a      	mov	r2, r9
 8008492:	f000 fd61 	bl	8008f58 <memcpy>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800849c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	6126      	str	r6, [r4, #16]
 80084a4:	6165      	str	r5, [r4, #20]
 80084a6:	444e      	add	r6, r9
 80084a8:	eba5 0509 	sub.w	r5, r5, r9
 80084ac:	6026      	str	r6, [r4, #0]
 80084ae:	60a5      	str	r5, [r4, #8]
 80084b0:	463e      	mov	r6, r7
 80084b2:	42be      	cmp	r6, r7
 80084b4:	d900      	bls.n	80084b8 <__ssputs_r+0x70>
 80084b6:	463e      	mov	r6, r7
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	4632      	mov	r2, r6
 80084bc:	4641      	mov	r1, r8
 80084be:	f000 fcff 	bl	8008ec0 <memmove>
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	1b9b      	subs	r3, r3, r6
 80084c6:	60a3      	str	r3, [r4, #8]
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	4433      	add	r3, r6
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	2000      	movs	r0, #0
 80084d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d4:	462a      	mov	r2, r5
 80084d6:	f000 fd4d 	bl	8008f74 <_realloc_r>
 80084da:	4606      	mov	r6, r0
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1e0      	bne.n	80084a2 <__ssputs_r+0x5a>
 80084e0:	6921      	ldr	r1, [r4, #16]
 80084e2:	4650      	mov	r0, sl
 80084e4:	f7ff feb8 	bl	8008258 <_free_r>
 80084e8:	230c      	movs	r3, #12
 80084ea:	f8ca 3000 	str.w	r3, [sl]
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	e7e9      	b.n	80084d0 <__ssputs_r+0x88>

080084fc <_svfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	898b      	ldrh	r3, [r1, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	b09d      	sub	sp, #116	; 0x74
 8008508:	4607      	mov	r7, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
 800850e:	d50e      	bpl.n	800852e <_svfiprintf_r+0x32>
 8008510:	690b      	ldr	r3, [r1, #16]
 8008512:	b963      	cbnz	r3, 800852e <_svfiprintf_r+0x32>
 8008514:	2140      	movs	r1, #64	; 0x40
 8008516:	f7ff ff0b 	bl	8008330 <_malloc_r>
 800851a:	6028      	str	r0, [r5, #0]
 800851c:	6128      	str	r0, [r5, #16]
 800851e:	b920      	cbnz	r0, 800852a <_svfiprintf_r+0x2e>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e0d0      	b.n	80086cc <_svfiprintf_r+0x1d0>
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	616b      	str	r3, [r5, #20]
 800852e:	2300      	movs	r3, #0
 8008530:	9309      	str	r3, [sp, #36]	; 0x24
 8008532:	2320      	movs	r3, #32
 8008534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008538:	f8cd 800c 	str.w	r8, [sp, #12]
 800853c:	2330      	movs	r3, #48	; 0x30
 800853e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086e4 <_svfiprintf_r+0x1e8>
 8008542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008546:	f04f 0901 	mov.w	r9, #1
 800854a:	4623      	mov	r3, r4
 800854c:	469a      	mov	sl, r3
 800854e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008552:	b10a      	cbz	r2, 8008558 <_svfiprintf_r+0x5c>
 8008554:	2a25      	cmp	r2, #37	; 0x25
 8008556:	d1f9      	bne.n	800854c <_svfiprintf_r+0x50>
 8008558:	ebba 0b04 	subs.w	fp, sl, r4
 800855c:	d00b      	beq.n	8008576 <_svfiprintf_r+0x7a>
 800855e:	465b      	mov	r3, fp
 8008560:	4622      	mov	r2, r4
 8008562:	4629      	mov	r1, r5
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff ff6f 	bl	8008448 <__ssputs_r>
 800856a:	3001      	adds	r0, #1
 800856c:	f000 80a9 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008572:	445a      	add	r2, fp
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 80a1 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008580:	2300      	movs	r3, #0
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858a:	f10a 0a01 	add.w	sl, sl, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	9307      	str	r3, [sp, #28]
 8008592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008596:	931a      	str	r3, [sp, #104]	; 0x68
 8008598:	4654      	mov	r4, sl
 800859a:	2205      	movs	r2, #5
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	4850      	ldr	r0, [pc, #320]	; (80086e4 <_svfiprintf_r+0x1e8>)
 80085a2:	f7f7 fe2d 	bl	8000200 <memchr>
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	b9d8      	cbnz	r0, 80085e2 <_svfiprintf_r+0xe6>
 80085aa:	06d0      	lsls	r0, r2, #27
 80085ac:	bf44      	itt	mi
 80085ae:	2320      	movmi	r3, #32
 80085b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b4:	0711      	lsls	r1, r2, #28
 80085b6:	bf44      	itt	mi
 80085b8:	232b      	movmi	r3, #43	; 0x2b
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b2a      	cmp	r3, #42	; 0x2a
 80085c4:	d015      	beq.n	80085f2 <_svfiprintf_r+0xf6>
 80085c6:	9a07      	ldr	r2, [sp, #28]
 80085c8:	4654      	mov	r4, sl
 80085ca:	2000      	movs	r0, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	4621      	mov	r1, r4
 80085d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d6:	3b30      	subs	r3, #48	; 0x30
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d94d      	bls.n	8008678 <_svfiprintf_r+0x17c>
 80085dc:	b1b0      	cbz	r0, 800860c <_svfiprintf_r+0x110>
 80085de:	9207      	str	r2, [sp, #28]
 80085e0:	e014      	b.n	800860c <_svfiprintf_r+0x110>
 80085e2:	eba0 0308 	sub.w	r3, r0, r8
 80085e6:	fa09 f303 	lsl.w	r3, r9, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	46a2      	mov	sl, r4
 80085f0:	e7d2      	b.n	8008598 <_svfiprintf_r+0x9c>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	1d19      	adds	r1, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9103      	str	r1, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfbb      	ittet	lt
 80085fe:	425b      	neglt	r3, r3
 8008600:	f042 0202 	orrlt.w	r2, r2, #2
 8008604:	9307      	strge	r3, [sp, #28]
 8008606:	9307      	strlt	r3, [sp, #28]
 8008608:	bfb8      	it	lt
 800860a:	9204      	strlt	r2, [sp, #16]
 800860c:	7823      	ldrb	r3, [r4, #0]
 800860e:	2b2e      	cmp	r3, #46	; 0x2e
 8008610:	d10c      	bne.n	800862c <_svfiprintf_r+0x130>
 8008612:	7863      	ldrb	r3, [r4, #1]
 8008614:	2b2a      	cmp	r3, #42	; 0x2a
 8008616:	d134      	bne.n	8008682 <_svfiprintf_r+0x186>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9203      	str	r2, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfb8      	it	lt
 8008624:	f04f 33ff 	movlt.w	r3, #4294967295
 8008628:	3402      	adds	r4, #2
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086f4 <_svfiprintf_r+0x1f8>
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	f7f7 fde3 	bl	8000200 <memchr>
 800863a:	b138      	cbz	r0, 800864c <_svfiprintf_r+0x150>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	2240      	movs	r2, #64	; 0x40
 8008644:	4082      	lsls	r2, r0
 8008646:	4313      	orrs	r3, r2
 8008648:	3401      	adds	r4, #1
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4825      	ldr	r0, [pc, #148]	; (80086e8 <_svfiprintf_r+0x1ec>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008656:	2206      	movs	r2, #6
 8008658:	f7f7 fdd2 	bl	8000200 <memchr>
 800865c:	2800      	cmp	r0, #0
 800865e:	d038      	beq.n	80086d2 <_svfiprintf_r+0x1d6>
 8008660:	4b22      	ldr	r3, [pc, #136]	; (80086ec <_svfiprintf_r+0x1f0>)
 8008662:	bb1b      	cbnz	r3, 80086ac <_svfiprintf_r+0x1b0>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	3307      	adds	r3, #7
 8008668:	f023 0307 	bic.w	r3, r3, #7
 800866c:	3308      	adds	r3, #8
 800866e:	9303      	str	r3, [sp, #12]
 8008670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008672:	4433      	add	r3, r6
 8008674:	9309      	str	r3, [sp, #36]	; 0x24
 8008676:	e768      	b.n	800854a <_svfiprintf_r+0x4e>
 8008678:	fb0c 3202 	mla	r2, ip, r2, r3
 800867c:	460c      	mov	r4, r1
 800867e:	2001      	movs	r0, #1
 8008680:	e7a6      	b.n	80085d0 <_svfiprintf_r+0xd4>
 8008682:	2300      	movs	r3, #0
 8008684:	3401      	adds	r4, #1
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	4619      	mov	r1, r3
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4620      	mov	r0, r4
 8008690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008694:	3a30      	subs	r2, #48	; 0x30
 8008696:	2a09      	cmp	r2, #9
 8008698:	d903      	bls.n	80086a2 <_svfiprintf_r+0x1a6>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0c6      	beq.n	800862c <_svfiprintf_r+0x130>
 800869e:	9105      	str	r1, [sp, #20]
 80086a0:	e7c4      	b.n	800862c <_svfiprintf_r+0x130>
 80086a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a6:	4604      	mov	r4, r0
 80086a8:	2301      	movs	r3, #1
 80086aa:	e7f0      	b.n	800868e <_svfiprintf_r+0x192>
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <_svfiprintf_r+0x1f4>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4638      	mov	r0, r7
 80086b8:	f3af 8000 	nop.w
 80086bc:	1c42      	adds	r2, r0, #1
 80086be:	4606      	mov	r6, r0
 80086c0:	d1d6      	bne.n	8008670 <_svfiprintf_r+0x174>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af2d 	bmi.w	8008524 <_svfiprintf_r+0x28>
 80086ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086cc:	b01d      	add	sp, #116	; 0x74
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	ab03      	add	r3, sp, #12
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	462a      	mov	r2, r5
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_svfiprintf_r+0x1f4>)
 80086da:	a904      	add	r1, sp, #16
 80086dc:	4638      	mov	r0, r7
 80086de:	f000 f9bd 	bl	8008a5c <_printf_i>
 80086e2:	e7eb      	b.n	80086bc <_svfiprintf_r+0x1c0>
 80086e4:	080091ac 	.word	0x080091ac
 80086e8:	080091b6 	.word	0x080091b6
 80086ec:	00000000 	.word	0x00000000
 80086f0:	08008449 	.word	0x08008449
 80086f4:	080091b2 	.word	0x080091b2

080086f8 <__sfputc_r>:
 80086f8:	6893      	ldr	r3, [r2, #8]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	b410      	push	{r4}
 8008700:	6093      	str	r3, [r2, #8]
 8008702:	da08      	bge.n	8008716 <__sfputc_r+0x1e>
 8008704:	6994      	ldr	r4, [r2, #24]
 8008706:	42a3      	cmp	r3, r4
 8008708:	db01      	blt.n	800870e <__sfputc_r+0x16>
 800870a:	290a      	cmp	r1, #10
 800870c:	d103      	bne.n	8008716 <__sfputc_r+0x1e>
 800870e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008712:	f7ff bc90 	b.w	8008036 <__swbuf_r>
 8008716:	6813      	ldr	r3, [r2, #0]
 8008718:	1c58      	adds	r0, r3, #1
 800871a:	6010      	str	r0, [r2, #0]
 800871c:	7019      	strb	r1, [r3, #0]
 800871e:	4608      	mov	r0, r1
 8008720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008724:	4770      	bx	lr

08008726 <__sfputs_r>:
 8008726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	460f      	mov	r7, r1
 800872c:	4614      	mov	r4, r2
 800872e:	18d5      	adds	r5, r2, r3
 8008730:	42ac      	cmp	r4, r5
 8008732:	d101      	bne.n	8008738 <__sfputs_r+0x12>
 8008734:	2000      	movs	r0, #0
 8008736:	e007      	b.n	8008748 <__sfputs_r+0x22>
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	463a      	mov	r2, r7
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff ffda 	bl	80086f8 <__sfputc_r>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d1f3      	bne.n	8008730 <__sfputs_r+0xa>
 8008748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800874c <_vfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460d      	mov	r5, r1
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	4614      	mov	r4, r2
 8008756:	4698      	mov	r8, r3
 8008758:	4606      	mov	r6, r0
 800875a:	b118      	cbz	r0, 8008764 <_vfiprintf_r+0x18>
 800875c:	6a03      	ldr	r3, [r0, #32]
 800875e:	b90b      	cbnz	r3, 8008764 <_vfiprintf_r+0x18>
 8008760:	f7ff fb2e 	bl	8007dc0 <__sinit>
 8008764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d405      	bmi.n	8008776 <_vfiprintf_r+0x2a>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	059a      	lsls	r2, r3, #22
 800876e:	d402      	bmi.n	8008776 <_vfiprintf_r+0x2a>
 8008770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008772:	f7ff fd6e 	bl	8008252 <__retarget_lock_acquire_recursive>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	071b      	lsls	r3, r3, #28
 800877a:	d501      	bpl.n	8008780 <_vfiprintf_r+0x34>
 800877c:	692b      	ldr	r3, [r5, #16]
 800877e:	b99b      	cbnz	r3, 80087a8 <_vfiprintf_r+0x5c>
 8008780:	4629      	mov	r1, r5
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff fc94 	bl	80080b0 <__swsetup_r>
 8008788:	b170      	cbz	r0, 80087a8 <_vfiprintf_r+0x5c>
 800878a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878c:	07dc      	lsls	r4, r3, #31
 800878e:	d504      	bpl.n	800879a <_vfiprintf_r+0x4e>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b01d      	add	sp, #116	; 0x74
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	0598      	lsls	r0, r3, #22
 800879e:	d4f7      	bmi.n	8008790 <_vfiprintf_r+0x44>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7ff fd57 	bl	8008254 <__retarget_lock_release_recursive>
 80087a6:	e7f3      	b.n	8008790 <_vfiprintf_r+0x44>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9309      	str	r3, [sp, #36]	; 0x24
 80087ac:	2320      	movs	r3, #32
 80087ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087b6:	2330      	movs	r3, #48	; 0x30
 80087b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800896c <_vfiprintf_r+0x220>
 80087bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c0:	f04f 0901 	mov.w	r9, #1
 80087c4:	4623      	mov	r3, r4
 80087c6:	469a      	mov	sl, r3
 80087c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087cc:	b10a      	cbz	r2, 80087d2 <_vfiprintf_r+0x86>
 80087ce:	2a25      	cmp	r2, #37	; 0x25
 80087d0:	d1f9      	bne.n	80087c6 <_vfiprintf_r+0x7a>
 80087d2:	ebba 0b04 	subs.w	fp, sl, r4
 80087d6:	d00b      	beq.n	80087f0 <_vfiprintf_r+0xa4>
 80087d8:	465b      	mov	r3, fp
 80087da:	4622      	mov	r2, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ffa1 	bl	8008726 <__sfputs_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	f000 80a9 	beq.w	800893c <_vfiprintf_r+0x1f0>
 80087ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ec:	445a      	add	r2, fp
 80087ee:	9209      	str	r2, [sp, #36]	; 0x24
 80087f0:	f89a 3000 	ldrb.w	r3, [sl]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80a1 	beq.w	800893c <_vfiprintf_r+0x1f0>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008804:	f10a 0a01 	add.w	sl, sl, #1
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	9307      	str	r3, [sp, #28]
 800880c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008810:	931a      	str	r3, [sp, #104]	; 0x68
 8008812:	4654      	mov	r4, sl
 8008814:	2205      	movs	r2, #5
 8008816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881a:	4854      	ldr	r0, [pc, #336]	; (800896c <_vfiprintf_r+0x220>)
 800881c:	f7f7 fcf0 	bl	8000200 <memchr>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	b9d8      	cbnz	r0, 800885c <_vfiprintf_r+0x110>
 8008824:	06d1      	lsls	r1, r2, #27
 8008826:	bf44      	itt	mi
 8008828:	2320      	movmi	r3, #32
 800882a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800882e:	0713      	lsls	r3, r2, #28
 8008830:	bf44      	itt	mi
 8008832:	232b      	movmi	r3, #43	; 0x2b
 8008834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008838:	f89a 3000 	ldrb.w	r3, [sl]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d015      	beq.n	800886c <_vfiprintf_r+0x120>
 8008840:	9a07      	ldr	r2, [sp, #28]
 8008842:	4654      	mov	r4, sl
 8008844:	2000      	movs	r0, #0
 8008846:	f04f 0c0a 	mov.w	ip, #10
 800884a:	4621      	mov	r1, r4
 800884c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008850:	3b30      	subs	r3, #48	; 0x30
 8008852:	2b09      	cmp	r3, #9
 8008854:	d94d      	bls.n	80088f2 <_vfiprintf_r+0x1a6>
 8008856:	b1b0      	cbz	r0, 8008886 <_vfiprintf_r+0x13a>
 8008858:	9207      	str	r2, [sp, #28]
 800885a:	e014      	b.n	8008886 <_vfiprintf_r+0x13a>
 800885c:	eba0 0308 	sub.w	r3, r0, r8
 8008860:	fa09 f303 	lsl.w	r3, r9, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	46a2      	mov	sl, r4
 800886a:	e7d2      	b.n	8008812 <_vfiprintf_r+0xc6>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	1d19      	adds	r1, r3, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	9103      	str	r1, [sp, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfbb      	ittet	lt
 8008878:	425b      	neglt	r3, r3
 800887a:	f042 0202 	orrlt.w	r2, r2, #2
 800887e:	9307      	strge	r3, [sp, #28]
 8008880:	9307      	strlt	r3, [sp, #28]
 8008882:	bfb8      	it	lt
 8008884:	9204      	strlt	r2, [sp, #16]
 8008886:	7823      	ldrb	r3, [r4, #0]
 8008888:	2b2e      	cmp	r3, #46	; 0x2e
 800888a:	d10c      	bne.n	80088a6 <_vfiprintf_r+0x15a>
 800888c:	7863      	ldrb	r3, [r4, #1]
 800888e:	2b2a      	cmp	r3, #42	; 0x2a
 8008890:	d134      	bne.n	80088fc <_vfiprintf_r+0x1b0>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	9203      	str	r2, [sp, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfb8      	it	lt
 800889e:	f04f 33ff 	movlt.w	r3, #4294967295
 80088a2:	3402      	adds	r4, #2
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800897c <_vfiprintf_r+0x230>
 80088aa:	7821      	ldrb	r1, [r4, #0]
 80088ac:	2203      	movs	r2, #3
 80088ae:	4650      	mov	r0, sl
 80088b0:	f7f7 fca6 	bl	8000200 <memchr>
 80088b4:	b138      	cbz	r0, 80088c6 <_vfiprintf_r+0x17a>
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	eba0 000a 	sub.w	r0, r0, sl
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	4082      	lsls	r2, r0
 80088c0:	4313      	orrs	r3, r2
 80088c2:	3401      	adds	r4, #1
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	4829      	ldr	r0, [pc, #164]	; (8008970 <_vfiprintf_r+0x224>)
 80088cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088d0:	2206      	movs	r2, #6
 80088d2:	f7f7 fc95 	bl	8000200 <memchr>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d03f      	beq.n	800895a <_vfiprintf_r+0x20e>
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <_vfiprintf_r+0x228>)
 80088dc:	bb1b      	cbnz	r3, 8008926 <_vfiprintf_r+0x1da>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	3308      	adds	r3, #8
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	443b      	add	r3, r7
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	e768      	b.n	80087c4 <_vfiprintf_r+0x78>
 80088f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088f6:	460c      	mov	r4, r1
 80088f8:	2001      	movs	r0, #1
 80088fa:	e7a6      	b.n	800884a <_vfiprintf_r+0xfe>
 80088fc:	2300      	movs	r3, #0
 80088fe:	3401      	adds	r4, #1
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	4619      	mov	r1, r3
 8008904:	f04f 0c0a 	mov.w	ip, #10
 8008908:	4620      	mov	r0, r4
 800890a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890e:	3a30      	subs	r2, #48	; 0x30
 8008910:	2a09      	cmp	r2, #9
 8008912:	d903      	bls.n	800891c <_vfiprintf_r+0x1d0>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0c6      	beq.n	80088a6 <_vfiprintf_r+0x15a>
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	e7c4      	b.n	80088a6 <_vfiprintf_r+0x15a>
 800891c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008920:	4604      	mov	r4, r0
 8008922:	2301      	movs	r3, #1
 8008924:	e7f0      	b.n	8008908 <_vfiprintf_r+0x1bc>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <_vfiprintf_r+0x22c>)
 800892e:	a904      	add	r1, sp, #16
 8008930:	4630      	mov	r0, r6
 8008932:	f3af 8000 	nop.w
 8008936:	4607      	mov	r7, r0
 8008938:	1c78      	adds	r0, r7, #1
 800893a:	d1d6      	bne.n	80088ea <_vfiprintf_r+0x19e>
 800893c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d405      	bmi.n	800894e <_vfiprintf_r+0x202>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	059a      	lsls	r2, r3, #22
 8008946:	d402      	bmi.n	800894e <_vfiprintf_r+0x202>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f7ff fc83 	bl	8008254 <__retarget_lock_release_recursive>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af1d 	bmi.w	8008790 <_vfiprintf_r+0x44>
 8008956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008958:	e71c      	b.n	8008794 <_vfiprintf_r+0x48>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <_vfiprintf_r+0x22c>)
 8008962:	a904      	add	r1, sp, #16
 8008964:	4630      	mov	r0, r6
 8008966:	f000 f879 	bl	8008a5c <_printf_i>
 800896a:	e7e4      	b.n	8008936 <_vfiprintf_r+0x1ea>
 800896c:	080091ac 	.word	0x080091ac
 8008970:	080091b6 	.word	0x080091b6
 8008974:	00000000 	.word	0x00000000
 8008978:	08008727 	.word	0x08008727
 800897c:	080091b2 	.word	0x080091b2

08008980 <_printf_common>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	4616      	mov	r6, r2
 8008986:	4699      	mov	r9, r3
 8008988:	688a      	ldr	r2, [r1, #8]
 800898a:	690b      	ldr	r3, [r1, #16]
 800898c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008990:	4293      	cmp	r3, r2
 8008992:	bfb8      	it	lt
 8008994:	4613      	movlt	r3, r2
 8008996:	6033      	str	r3, [r6, #0]
 8008998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800899c:	4607      	mov	r7, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	b10a      	cbz	r2, 80089a6 <_printf_common+0x26>
 80089a2:	3301      	adds	r3, #1
 80089a4:	6033      	str	r3, [r6, #0]
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	0699      	lsls	r1, r3, #26
 80089aa:	bf42      	ittt	mi
 80089ac:	6833      	ldrmi	r3, [r6, #0]
 80089ae:	3302      	addmi	r3, #2
 80089b0:	6033      	strmi	r3, [r6, #0]
 80089b2:	6825      	ldr	r5, [r4, #0]
 80089b4:	f015 0506 	ands.w	r5, r5, #6
 80089b8:	d106      	bne.n	80089c8 <_printf_common+0x48>
 80089ba:	f104 0a19 	add.w	sl, r4, #25
 80089be:	68e3      	ldr	r3, [r4, #12]
 80089c0:	6832      	ldr	r2, [r6, #0]
 80089c2:	1a9b      	subs	r3, r3, r2
 80089c4:	42ab      	cmp	r3, r5
 80089c6:	dc26      	bgt.n	8008a16 <_printf_common+0x96>
 80089c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089cc:	1e13      	subs	r3, r2, #0
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	bf18      	it	ne
 80089d2:	2301      	movne	r3, #1
 80089d4:	0692      	lsls	r2, r2, #26
 80089d6:	d42b      	bmi.n	8008a30 <_printf_common+0xb0>
 80089d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089dc:	4649      	mov	r1, r9
 80089de:	4638      	mov	r0, r7
 80089e0:	47c0      	blx	r8
 80089e2:	3001      	adds	r0, #1
 80089e4:	d01e      	beq.n	8008a24 <_printf_common+0xa4>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6922      	ldr	r2, [r4, #16]
 80089ea:	f003 0306 	and.w	r3, r3, #6
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	bf02      	ittt	eq
 80089f2:	68e5      	ldreq	r5, [r4, #12]
 80089f4:	6833      	ldreq	r3, [r6, #0]
 80089f6:	1aed      	subeq	r5, r5, r3
 80089f8:	68a3      	ldr	r3, [r4, #8]
 80089fa:	bf0c      	ite	eq
 80089fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a00:	2500      	movne	r5, #0
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bfc4      	itt	gt
 8008a06:	1a9b      	subgt	r3, r3, r2
 8008a08:	18ed      	addgt	r5, r5, r3
 8008a0a:	2600      	movs	r6, #0
 8008a0c:	341a      	adds	r4, #26
 8008a0e:	42b5      	cmp	r5, r6
 8008a10:	d11a      	bne.n	8008a48 <_printf_common+0xc8>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e008      	b.n	8008a28 <_printf_common+0xa8>
 8008a16:	2301      	movs	r3, #1
 8008a18:	4652      	mov	r2, sl
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	47c0      	blx	r8
 8008a20:	3001      	adds	r0, #1
 8008a22:	d103      	bne.n	8008a2c <_printf_common+0xac>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	e7c6      	b.n	80089be <_printf_common+0x3e>
 8008a30:	18e1      	adds	r1, r4, r3
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	2030      	movs	r0, #48	; 0x30
 8008a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a3a:	4422      	add	r2, r4
 8008a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a44:	3302      	adds	r3, #2
 8008a46:	e7c7      	b.n	80089d8 <_printf_common+0x58>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4638      	mov	r0, r7
 8008a50:	47c0      	blx	r8
 8008a52:	3001      	adds	r0, #1
 8008a54:	d0e6      	beq.n	8008a24 <_printf_common+0xa4>
 8008a56:	3601      	adds	r6, #1
 8008a58:	e7d9      	b.n	8008a0e <_printf_common+0x8e>
	...

08008a5c <_printf_i>:
 8008a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	7e0f      	ldrb	r7, [r1, #24]
 8008a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a64:	2f78      	cmp	r7, #120	; 0x78
 8008a66:	4691      	mov	r9, r2
 8008a68:	4680      	mov	r8, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	469a      	mov	sl, r3
 8008a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a72:	d807      	bhi.n	8008a84 <_printf_i+0x28>
 8008a74:	2f62      	cmp	r7, #98	; 0x62
 8008a76:	d80a      	bhi.n	8008a8e <_printf_i+0x32>
 8008a78:	2f00      	cmp	r7, #0
 8008a7a:	f000 80d4 	beq.w	8008c26 <_printf_i+0x1ca>
 8008a7e:	2f58      	cmp	r7, #88	; 0x58
 8008a80:	f000 80c0 	beq.w	8008c04 <_printf_i+0x1a8>
 8008a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a8c:	e03a      	b.n	8008b04 <_printf_i+0xa8>
 8008a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a92:	2b15      	cmp	r3, #21
 8008a94:	d8f6      	bhi.n	8008a84 <_printf_i+0x28>
 8008a96:	a101      	add	r1, pc, #4	; (adr r1, 8008a9c <_printf_i+0x40>)
 8008a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008b09 	.word	0x08008b09
 8008aa4:	08008a85 	.word	0x08008a85
 8008aa8:	08008a85 	.word	0x08008a85
 8008aac:	08008a85 	.word	0x08008a85
 8008ab0:	08008a85 	.word	0x08008a85
 8008ab4:	08008b09 	.word	0x08008b09
 8008ab8:	08008a85 	.word	0x08008a85
 8008abc:	08008a85 	.word	0x08008a85
 8008ac0:	08008a85 	.word	0x08008a85
 8008ac4:	08008a85 	.word	0x08008a85
 8008ac8:	08008c0d 	.word	0x08008c0d
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008bc7 	.word	0x08008bc7
 8008ad4:	08008a85 	.word	0x08008a85
 8008ad8:	08008a85 	.word	0x08008a85
 8008adc:	08008c2f 	.word	0x08008c2f
 8008ae0:	08008a85 	.word	0x08008a85
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008a85 	.word	0x08008a85
 8008aec:	08008a85 	.word	0x08008a85
 8008af0:	08008bcf 	.word	0x08008bcf
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	1d1a      	adds	r2, r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b04:	2301      	movs	r3, #1
 8008b06:	e09f      	b.n	8008c48 <_printf_i+0x1ec>
 8008b08:	6820      	ldr	r0, [r4, #0]
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	0607      	lsls	r7, r0, #24
 8008b0e:	f103 0104 	add.w	r1, r3, #4
 8008b12:	6029      	str	r1, [r5, #0]
 8008b14:	d501      	bpl.n	8008b1a <_printf_i+0xbe>
 8008b16:	681e      	ldr	r6, [r3, #0]
 8008b18:	e003      	b.n	8008b22 <_printf_i+0xc6>
 8008b1a:	0646      	lsls	r6, r0, #25
 8008b1c:	d5fb      	bpl.n	8008b16 <_printf_i+0xba>
 8008b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	da03      	bge.n	8008b2e <_printf_i+0xd2>
 8008b26:	232d      	movs	r3, #45	; 0x2d
 8008b28:	4276      	negs	r6, r6
 8008b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2e:	485a      	ldr	r0, [pc, #360]	; (8008c98 <_printf_i+0x23c>)
 8008b30:	230a      	movs	r3, #10
 8008b32:	e012      	b.n	8008b5a <_printf_i+0xfe>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	6029      	str	r1, [r5, #0]
 8008b3c:	0605      	lsls	r5, r0, #24
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0xe8>
 8008b40:	681e      	ldr	r6, [r3, #0]
 8008b42:	e002      	b.n	8008b4a <_printf_i+0xee>
 8008b44:	0641      	lsls	r1, r0, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0xe4>
 8008b48:	881e      	ldrh	r6, [r3, #0]
 8008b4a:	4853      	ldr	r0, [pc, #332]	; (8008c98 <_printf_i+0x23c>)
 8008b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4e:	bf0c      	ite	eq
 8008b50:	2308      	moveq	r3, #8
 8008b52:	230a      	movne	r3, #10
 8008b54:	2100      	movs	r1, #0
 8008b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b5a:	6865      	ldr	r5, [r4, #4]
 8008b5c:	60a5      	str	r5, [r4, #8]
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	bfa2      	ittt	ge
 8008b62:	6821      	ldrge	r1, [r4, #0]
 8008b64:	f021 0104 	bicge.w	r1, r1, #4
 8008b68:	6021      	strge	r1, [r4, #0]
 8008b6a:	b90e      	cbnz	r6, 8008b70 <_printf_i+0x114>
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d04b      	beq.n	8008c08 <_printf_i+0x1ac>
 8008b70:	4615      	mov	r5, r2
 8008b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b76:	fb03 6711 	mls	r7, r3, r1, r6
 8008b7a:	5dc7      	ldrb	r7, [r0, r7]
 8008b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b80:	4637      	mov	r7, r6
 8008b82:	42bb      	cmp	r3, r7
 8008b84:	460e      	mov	r6, r1
 8008b86:	d9f4      	bls.n	8008b72 <_printf_i+0x116>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d10b      	bne.n	8008ba4 <_printf_i+0x148>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	07de      	lsls	r6, r3, #31
 8008b90:	d508      	bpl.n	8008ba4 <_printf_i+0x148>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	6861      	ldr	r1, [r4, #4]
 8008b96:	4299      	cmp	r1, r3
 8008b98:	bfde      	ittt	le
 8008b9a:	2330      	movle	r3, #48	; 0x30
 8008b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba4:	1b52      	subs	r2, r2, r5
 8008ba6:	6122      	str	r2, [r4, #16]
 8008ba8:	f8cd a000 	str.w	sl, [sp]
 8008bac:	464b      	mov	r3, r9
 8008bae:	aa03      	add	r2, sp, #12
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fee4 	bl	8008980 <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d14a      	bne.n	8008c52 <_printf_i+0x1f6>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	b004      	add	sp, #16
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f043 0320 	orr.w	r3, r3, #32
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	4833      	ldr	r0, [pc, #204]	; (8008c9c <_printf_i+0x240>)
 8008bd0:	2778      	movs	r7, #120	; 0x78
 8008bd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	6829      	ldr	r1, [r5, #0]
 8008bda:	061f      	lsls	r7, r3, #24
 8008bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008be0:	d402      	bmi.n	8008be8 <_printf_i+0x18c>
 8008be2:	065f      	lsls	r7, r3, #25
 8008be4:	bf48      	it	mi
 8008be6:	b2b6      	uxthmi	r6, r6
 8008be8:	07df      	lsls	r7, r3, #31
 8008bea:	bf48      	it	mi
 8008bec:	f043 0320 	orrmi.w	r3, r3, #32
 8008bf0:	6029      	str	r1, [r5, #0]
 8008bf2:	bf48      	it	mi
 8008bf4:	6023      	strmi	r3, [r4, #0]
 8008bf6:	b91e      	cbnz	r6, 8008c00 <_printf_i+0x1a4>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	f023 0320 	bic.w	r3, r3, #32
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	2310      	movs	r3, #16
 8008c02:	e7a7      	b.n	8008b54 <_printf_i+0xf8>
 8008c04:	4824      	ldr	r0, [pc, #144]	; (8008c98 <_printf_i+0x23c>)
 8008c06:	e7e4      	b.n	8008bd2 <_printf_i+0x176>
 8008c08:	4615      	mov	r5, r2
 8008c0a:	e7bd      	b.n	8008b88 <_printf_i+0x12c>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	6826      	ldr	r6, [r4, #0]
 8008c10:	6961      	ldr	r1, [r4, #20]
 8008c12:	1d18      	adds	r0, r3, #4
 8008c14:	6028      	str	r0, [r5, #0]
 8008c16:	0635      	lsls	r5, r6, #24
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0x1c4>
 8008c1c:	6019      	str	r1, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <_printf_i+0x1ca>
 8008c20:	0670      	lsls	r0, r6, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0x1c0>
 8008c24:	8019      	strh	r1, [r3, #0]
 8008c26:	2300      	movs	r3, #0
 8008c28:	6123      	str	r3, [r4, #16]
 8008c2a:	4615      	mov	r5, r2
 8008c2c:	e7bc      	b.n	8008ba8 <_printf_i+0x14c>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	1d1a      	adds	r2, r3, #4
 8008c32:	602a      	str	r2, [r5, #0]
 8008c34:	681d      	ldr	r5, [r3, #0]
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7f7 fae0 	bl	8000200 <memchr>
 8008c40:	b108      	cbz	r0, 8008c46 <_printf_i+0x1ea>
 8008c42:	1b40      	subs	r0, r0, r5
 8008c44:	6060      	str	r0, [r4, #4]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c50:	e7aa      	b.n	8008ba8 <_printf_i+0x14c>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	462a      	mov	r2, r5
 8008c56:	4649      	mov	r1, r9
 8008c58:	4640      	mov	r0, r8
 8008c5a:	47d0      	blx	sl
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0ad      	beq.n	8008bbc <_printf_i+0x160>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	079b      	lsls	r3, r3, #30
 8008c64:	d413      	bmi.n	8008c8e <_printf_i+0x232>
 8008c66:	68e0      	ldr	r0, [r4, #12]
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	bfb8      	it	lt
 8008c6e:	4618      	movlt	r0, r3
 8008c70:	e7a6      	b.n	8008bc0 <_printf_i+0x164>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4632      	mov	r2, r6
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d09d      	beq.n	8008bbc <_printf_i+0x160>
 8008c80:	3501      	adds	r5, #1
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	9903      	ldr	r1, [sp, #12]
 8008c86:	1a5b      	subs	r3, r3, r1
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	dcf2      	bgt.n	8008c72 <_printf_i+0x216>
 8008c8c:	e7eb      	b.n	8008c66 <_printf_i+0x20a>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	f104 0619 	add.w	r6, r4, #25
 8008c94:	e7f5      	b.n	8008c82 <_printf_i+0x226>
 8008c96:	bf00      	nop
 8008c98:	080091bd 	.word	0x080091bd
 8008c9c:	080091ce 	.word	0x080091ce

08008ca0 <__sflush_r>:
 8008ca0:	898a      	ldrh	r2, [r1, #12]
 8008ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	0710      	lsls	r0, r2, #28
 8008caa:	460c      	mov	r4, r1
 8008cac:	d458      	bmi.n	8008d60 <__sflush_r+0xc0>
 8008cae:	684b      	ldr	r3, [r1, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dc05      	bgt.n	8008cc0 <__sflush_r+0x20>
 8008cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dc02      	bgt.n	8008cc0 <__sflush_r+0x20>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d0f9      	beq.n	8008cba <__sflush_r+0x1a>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ccc:	682f      	ldr	r7, [r5, #0]
 8008cce:	6a21      	ldr	r1, [r4, #32]
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	d032      	beq.n	8008d3a <__sflush_r+0x9a>
 8008cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	075a      	lsls	r2, r3, #29
 8008cda:	d505      	bpl.n	8008ce8 <__sflush_r+0x48>
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	1ac0      	subs	r0, r0, r3
 8008ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ce2:	b10b      	cbz	r3, 8008ce8 <__sflush_r+0x48>
 8008ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ce6:	1ac0      	subs	r0, r0, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4602      	mov	r2, r0
 8008cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cee:	6a21      	ldr	r1, [r4, #32]
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b0      	blx	r6
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	d106      	bne.n	8008d08 <__sflush_r+0x68>
 8008cfa:	6829      	ldr	r1, [r5, #0]
 8008cfc:	291d      	cmp	r1, #29
 8008cfe:	d82b      	bhi.n	8008d58 <__sflush_r+0xb8>
 8008d00:	4a29      	ldr	r2, [pc, #164]	; (8008da8 <__sflush_r+0x108>)
 8008d02:	410a      	asrs	r2, r1
 8008d04:	07d6      	lsls	r6, r2, #31
 8008d06:	d427      	bmi.n	8008d58 <__sflush_r+0xb8>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	6062      	str	r2, [r4, #4]
 8008d0c:	04d9      	lsls	r1, r3, #19
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	6022      	str	r2, [r4, #0]
 8008d12:	d504      	bpl.n	8008d1e <__sflush_r+0x7e>
 8008d14:	1c42      	adds	r2, r0, #1
 8008d16:	d101      	bne.n	8008d1c <__sflush_r+0x7c>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b903      	cbnz	r3, 8008d1e <__sflush_r+0x7e>
 8008d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8008d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d20:	602f      	str	r7, [r5, #0]
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d0c9      	beq.n	8008cba <__sflush_r+0x1a>
 8008d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d002      	beq.n	8008d34 <__sflush_r+0x94>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7ff fa92 	bl	8008258 <_free_r>
 8008d34:	2000      	movs	r0, #0
 8008d36:	6360      	str	r0, [r4, #52]	; 0x34
 8008d38:	e7c0      	b.n	8008cbc <__sflush_r+0x1c>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b0      	blx	r6
 8008d40:	1c41      	adds	r1, r0, #1
 8008d42:	d1c8      	bne.n	8008cd6 <__sflush_r+0x36>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0c5      	beq.n	8008cd6 <__sflush_r+0x36>
 8008d4a:	2b1d      	cmp	r3, #29
 8008d4c:	d001      	beq.n	8008d52 <__sflush_r+0xb2>
 8008d4e:	2b16      	cmp	r3, #22
 8008d50:	d101      	bne.n	8008d56 <__sflush_r+0xb6>
 8008d52:	602f      	str	r7, [r5, #0]
 8008d54:	e7b1      	b.n	8008cba <__sflush_r+0x1a>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	e7ad      	b.n	8008cbc <__sflush_r+0x1c>
 8008d60:	690f      	ldr	r7, [r1, #16]
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	d0a9      	beq.n	8008cba <__sflush_r+0x1a>
 8008d66:	0793      	lsls	r3, r2, #30
 8008d68:	680e      	ldr	r6, [r1, #0]
 8008d6a:	bf08      	it	eq
 8008d6c:	694b      	ldreq	r3, [r1, #20]
 8008d6e:	600f      	str	r7, [r1, #0]
 8008d70:	bf18      	it	ne
 8008d72:	2300      	movne	r3, #0
 8008d74:	eba6 0807 	sub.w	r8, r6, r7
 8008d78:	608b      	str	r3, [r1, #8]
 8008d7a:	f1b8 0f00 	cmp.w	r8, #0
 8008d7e:	dd9c      	ble.n	8008cba <__sflush_r+0x1a>
 8008d80:	6a21      	ldr	r1, [r4, #32]
 8008d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d84:	4643      	mov	r3, r8
 8008d86:	463a      	mov	r2, r7
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b0      	blx	r6
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	dc06      	bgt.n	8008d9e <__sflush_r+0xfe>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e78e      	b.n	8008cbc <__sflush_r+0x1c>
 8008d9e:	4407      	add	r7, r0
 8008da0:	eba8 0800 	sub.w	r8, r8, r0
 8008da4:	e7e9      	b.n	8008d7a <__sflush_r+0xda>
 8008da6:	bf00      	nop
 8008da8:	dfbffffe 	.word	0xdfbffffe

08008dac <_fflush_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	690b      	ldr	r3, [r1, #16]
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b913      	cbnz	r3, 8008dbc <_fflush_r+0x10>
 8008db6:	2500      	movs	r5, #0
 8008db8:	4628      	mov	r0, r5
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	b118      	cbz	r0, 8008dc6 <_fflush_r+0x1a>
 8008dbe:	6a03      	ldr	r3, [r0, #32]
 8008dc0:	b90b      	cbnz	r3, 8008dc6 <_fflush_r+0x1a>
 8008dc2:	f7fe fffd 	bl	8007dc0 <__sinit>
 8008dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f3      	beq.n	8008db6 <_fflush_r+0xa>
 8008dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dd0:	07d0      	lsls	r0, r2, #31
 8008dd2:	d404      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd4:	0599      	lsls	r1, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dda:	f7ff fa3a 	bl	8008252 <__retarget_lock_acquire_recursive>
 8008dde:	4628      	mov	r0, r5
 8008de0:	4621      	mov	r1, r4
 8008de2:	f7ff ff5d 	bl	8008ca0 <__sflush_r>
 8008de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008de8:	07da      	lsls	r2, r3, #31
 8008dea:	4605      	mov	r5, r0
 8008dec:	d4e4      	bmi.n	8008db8 <_fflush_r+0xc>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	059b      	lsls	r3, r3, #22
 8008df2:	d4e1      	bmi.n	8008db8 <_fflush_r+0xc>
 8008df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008df6:	f7ff fa2d 	bl	8008254 <__retarget_lock_release_recursive>
 8008dfa:	e7dd      	b.n	8008db8 <_fflush_r+0xc>

08008dfc <__swhatbuf_r>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	460c      	mov	r4, r1
 8008e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e04:	2900      	cmp	r1, #0
 8008e06:	b096      	sub	sp, #88	; 0x58
 8008e08:	4615      	mov	r5, r2
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	da0d      	bge.n	8008e2a <__swhatbuf_r+0x2e>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e14:	f04f 0100 	mov.w	r1, #0
 8008e18:	bf0c      	ite	eq
 8008e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e1e:	2340      	movne	r3, #64	; 0x40
 8008e20:	2000      	movs	r0, #0
 8008e22:	6031      	str	r1, [r6, #0]
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	b016      	add	sp, #88	; 0x58
 8008e28:	bd70      	pop	{r4, r5, r6, pc}
 8008e2a:	466a      	mov	r2, sp
 8008e2c:	f000 f862 	bl	8008ef4 <_fstat_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	dbec      	blt.n	8008e0e <__swhatbuf_r+0x12>
 8008e34:	9901      	ldr	r1, [sp, #4]
 8008e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e3e:	4259      	negs	r1, r3
 8008e40:	4159      	adcs	r1, r3
 8008e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e46:	e7eb      	b.n	8008e20 <__swhatbuf_r+0x24>

08008e48 <__smakebuf_r>:
 8008e48:	898b      	ldrh	r3, [r1, #12]
 8008e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e4c:	079d      	lsls	r5, r3, #30
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	d507      	bpl.n	8008e64 <__smakebuf_r+0x1c>
 8008e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	6163      	str	r3, [r4, #20]
 8008e60:	b002      	add	sp, #8
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	ab01      	add	r3, sp, #4
 8008e66:	466a      	mov	r2, sp
 8008e68:	f7ff ffc8 	bl	8008dfc <__swhatbuf_r>
 8008e6c:	9900      	ldr	r1, [sp, #0]
 8008e6e:	4605      	mov	r5, r0
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff fa5d 	bl	8008330 <_malloc_r>
 8008e76:	b948      	cbnz	r0, 8008e8c <__smakebuf_r+0x44>
 8008e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e7c:	059a      	lsls	r2, r3, #22
 8008e7e:	d4ef      	bmi.n	8008e60 <__smakebuf_r+0x18>
 8008e80:	f023 0303 	bic.w	r3, r3, #3
 8008e84:	f043 0302 	orr.w	r3, r3, #2
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	e7e3      	b.n	8008e54 <__smakebuf_r+0xc>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	6020      	str	r0, [r4, #0]
 8008e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	6163      	str	r3, [r4, #20]
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	6120      	str	r0, [r4, #16]
 8008e9e:	b15b      	cbz	r3, 8008eb8 <__smakebuf_r+0x70>
 8008ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 f837 	bl	8008f18 <_isatty_r>
 8008eaa:	b128      	cbz	r0, 8008eb8 <__smakebuf_r+0x70>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	f043 0301 	orr.w	r3, r3, #1
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	431d      	orrs	r5, r3
 8008ebc:	81a5      	strh	r5, [r4, #12]
 8008ebe:	e7cf      	b.n	8008e60 <__smakebuf_r+0x18>

08008ec0 <memmove>:
 8008ec0:	4288      	cmp	r0, r1
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	eb01 0402 	add.w	r4, r1, r2
 8008ec8:	d902      	bls.n	8008ed0 <memmove+0x10>
 8008eca:	4284      	cmp	r4, r0
 8008ecc:	4623      	mov	r3, r4
 8008ece:	d807      	bhi.n	8008ee0 <memmove+0x20>
 8008ed0:	1e43      	subs	r3, r0, #1
 8008ed2:	42a1      	cmp	r1, r4
 8008ed4:	d008      	beq.n	8008ee8 <memmove+0x28>
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ede:	e7f8      	b.n	8008ed2 <memmove+0x12>
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	428a      	cmp	r2, r1
 8008ee6:	d100      	bne.n	8008eea <memmove+0x2a>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ef2:	e7f7      	b.n	8008ee4 <memmove+0x24>

08008ef4 <_fstat_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_fstat_r+0x20>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	f7f8 fe0e 	bl	8001b22 <_fstat>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d102      	bne.n	8008f10 <_fstat_r+0x1c>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	b103      	cbz	r3, 8008f10 <_fstat_r+0x1c>
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	bf00      	nop
 8008f14:	20000b38 	.word	0x20000b38

08008f18 <_isatty_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_isatty_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 fe0d 	bl	8001b42 <_isatty>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_isatty_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_isatty_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20000b38 	.word	0x20000b38

08008f38 <_sbrk_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d06      	ldr	r5, [pc, #24]	; (8008f54 <_sbrk_r+0x1c>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f8 fe16 	bl	8001b74 <_sbrk>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_sbrk_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_sbrk_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000b38 	.word	0x20000b38

08008f58 <memcpy>:
 8008f58:	440a      	add	r2, r1
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f60:	d100      	bne.n	8008f64 <memcpy+0xc>
 8008f62:	4770      	bx	lr
 8008f64:	b510      	push	{r4, lr}
 8008f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	d1f9      	bne.n	8008f66 <memcpy+0xe>
 8008f72:	bd10      	pop	{r4, pc}

08008f74 <_realloc_r>:
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4614      	mov	r4, r2
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	b921      	cbnz	r1, 8008f8a <_realloc_r+0x16>
 8008f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4611      	mov	r1, r2
 8008f86:	f7ff b9d3 	b.w	8008330 <_malloc_r>
 8008f8a:	b92a      	cbnz	r2, 8008f98 <_realloc_r+0x24>
 8008f8c:	f7ff f964 	bl	8008258 <_free_r>
 8008f90:	4625      	mov	r5, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f98:	f000 f81b 	bl	8008fd2 <_malloc_usable_size_r>
 8008f9c:	4284      	cmp	r4, r0
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	d802      	bhi.n	8008fa8 <_realloc_r+0x34>
 8008fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fa6:	d812      	bhi.n	8008fce <_realloc_r+0x5a>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4640      	mov	r0, r8
 8008fac:	f7ff f9c0 	bl	8008330 <_malloc_r>
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0ed      	beq.n	8008f92 <_realloc_r+0x1e>
 8008fb6:	42bc      	cmp	r4, r7
 8008fb8:	4622      	mov	r2, r4
 8008fba:	4631      	mov	r1, r6
 8008fbc:	bf28      	it	cs
 8008fbe:	463a      	movcs	r2, r7
 8008fc0:	f7ff ffca 	bl	8008f58 <memcpy>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	f7ff f946 	bl	8008258 <_free_r>
 8008fcc:	e7e1      	b.n	8008f92 <_realloc_r+0x1e>
 8008fce:	4635      	mov	r5, r6
 8008fd0:	e7df      	b.n	8008f92 <_realloc_r+0x1e>

08008fd2 <_malloc_usable_size_r>:
 8008fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd6:	1f18      	subs	r0, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbc      	itt	lt
 8008fdc:	580b      	ldrlt	r3, [r1, r0]
 8008fde:	18c0      	addlt	r0, r0, r3
 8008fe0:	4770      	bx	lr
	...

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
