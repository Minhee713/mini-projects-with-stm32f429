
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08008ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00000a8c  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b68  20000b68  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018df1  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003506  00000000  00000000  00038f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001478  00000000  00000000  0003c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ff4  00000000  00000000  0003d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000284a7  00000000  00000000  0003e8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e2d  00000000  00000000  00066d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f23a8  00000000  00000000  00080b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000060d0  00000000  00000000  00172f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00179000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008858 	.word	0x08008858

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	08008858 	.word	0x08008858

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 fcdc 	bl	8005f8c <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fcc9 	bl	8003f80 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 f8b9 	bl	800777c <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 fcb5 	bl	8005f8c <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 fcad 	bl	8005f8c <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 fc9d 	bl	8005f8c <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08008880 	.word	0x08008880
 8000660:	2000043c 	.word	0x2000043c
 8000664:	200003c8 	.word	0x200003c8
 8000668:	08008870 	.word	0x08008870
 800066c:	08008878 	.word	0x08008878
 8000670:	0800887c 	.word	0x0800887c

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fc75 	bl	8003f80 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 fb3e 	bl	8003d84 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fa3f 	bl	8001b90 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200003c8 	.word	0x200003c8

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
void time_set_mode(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f005 fbc4 	bl	8005f8c <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000043c 	.word	0x2000043c

08000814 <get_time>:

//char temp_alarm_buf[30];

void get_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <get_time+0x50>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <get_time+0x54>)
 8000820:	f004 ffe6 	bl	80057f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	4911      	ldr	r1, [pc, #68]	; (800086c <get_time+0x58>)
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <get_time+0x54>)
 800082a:	f005 f8c3 	bl	80059b4 <HAL_RTC_GetDate>

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <get_time+0x50>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	461a      	mov	r2, r3
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <get_time+0x5c>)
 800083c:	441a      	add	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <get_time+0x50>)
 8000840:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000842:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <get_time+0x50>)
 8000846:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000848:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <get_time+0x50>)
 800084c:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	4603      	mov	r3, r0
 8000854:	4907      	ldr	r1, [pc, #28]	; (8000874 <get_time+0x60>)
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <get_time+0x64>)
 8000858:	f006 ffc4 	bl	80077e4 <siprintf>

//	sprintf((char*) temp_alarm_buf, "%s %02d: %02d: %02d",
//			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
//			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200009d0 	.word	0x200009d0
 8000868:	2000041c 	.word	0x2000041c
 800086c:	200009cc 	.word	0x200009cc
 8000870:	20000000 	.word	0x20000000
 8000874:	08008898 	.word	0x08008898
 8000878:	200009a4 	.word	0x200009a4

0800087c <showCurrentTime>:

void showCurrentTime() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	204e      	movs	r0, #78	; 0x4e
 8000884:	f7ff ff4c 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <showCurrentTime+0x28>)
 800088a:	204e      	movs	r0, #78	; 0x4e
 800088c:	f7ff ff89 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000890:	21c0      	movs	r1, #192	; 0xc0
 8000892:	204e      	movs	r0, #78	; 0x4e
 8000894:	f7ff ff44 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 8000898:	4903      	ldr	r1, [pc, #12]	; (80008a8 <showCurrentTime+0x2c>)
 800089a:	204e      	movs	r0, #78	; 0x4e
 800089c:	f7ff ff81 	bl	80007a2 <LCD_SendString>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	080088ac 	.word	0x080088ac
 80008a8:	200009a4 	.word	0x200009a4

080008ac <lcd_clear>:

void lcd_clear() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00000001);
 80008b0:	2101      	movs	r1, #1
 80008b2:	204e      	movs	r0, #78	; 0x4e
 80008b4:	f7ff ff34 	bl	8000720 <LCD_SendCommand>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <readFlash>:

uint8_t readFlash(uint32_t addr) {
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t value = *(uint8_t*) addr;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	73fb      	strb	r3, [r7, #15]

//	printf("flash value=%d\r\n", value);

	return value;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <joyStick_btn_chk>:
//		break;
//	}

}

enum CLOCK_BUTTON joyStick_btn_chk() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <joyStick_btn_chk+0x68>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <joyStick_btn_chk+0x68>)
 80008e2:	6852      	ldr	r2, [r2, #4]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <joyStick_btn_chk+0x6c>)
 80008e8:	f006 feda 	bl	80076a0 <iprintf>
	if (xy[1] > 4000) {
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <joyStick_btn_chk+0x68>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008f4:	d904      	bls.n	8000900 <joyStick_btn_chk+0x28>
		printf("up\r\n");
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <joyStick_btn_chk+0x70>)
 80008f8:	f006 ff38 	bl	800776c <puts>
		return UP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e01d      	b.n	800093c <joyStick_btn_chk+0x64>
	}
	if (xy[1] < 1000) {
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <joyStick_btn_chk+0x68>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000908:	d204      	bcs.n	8000914 <joyStick_btn_chk+0x3c>
		printf("down\r\n");
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <joyStick_btn_chk+0x74>)
 800090c:	f006 ff2e 	bl	800776c <puts>
		return DOWN;
 8000910:	2302      	movs	r3, #2
 8000912:	e013      	b.n	800093c <joyStick_btn_chk+0x64>
	}
	if (xy[0] > 4000) {
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <joyStick_btn_chk+0x68>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800091c:	d904      	bls.n	8000928 <joyStick_btn_chk+0x50>
		printf("left\r\n");
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <joyStick_btn_chk+0x78>)
 8000920:	f006 ff24 	bl	800776c <puts>
		return LEFT;
 8000924:	2304      	movs	r3, #4
 8000926:	e009      	b.n	800093c <joyStick_btn_chk+0x64>
	}
	if (xy[0] < 1000) {
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <joyStick_btn_chk+0x68>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000930:	d204      	bcs.n	800093c <joyStick_btn_chk+0x64>
		printf("right\r\n");
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <joyStick_btn_chk+0x7c>)
 8000934:	f006 ff1a 	bl	800776c <puts>
		return RIGHT;
 8000938:	2303      	movs	r3, #3
 800093a:	e7ff      	b.n	800093c <joyStick_btn_chk+0x64>
	}
}
 800093c:	4618      	mov	r0, r3
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000098c 	.word	0x2000098c
 8000944:	080089b0 	.word	0x080089b0
 8000948:	080089c4 	.word	0x080089c4
 800094c:	080089c8 	.word	0x080089c8
 8000950:	080089d0 	.word	0x080089d0
 8000954:	080089d8 	.word	0x080089d8

08000958 <time_set_mode>:

void time_set_mode() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
 800095e:	f7ff ffbb 	bl	80008d8 <joyStick_btn_chk>
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]

		}
	}
	timeDisplay();
#endif
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <init_getFlashTime>:

	printf("%d. %s\r\n", mu_position, alarmMusic[mu_position].musicTitle);

}

void init_getFlashTime() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	RTC_Time.Hours = readFlash(FLASH_USER_START_ADDR);
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <init_getFlashTime+0x54>)
 8000976:	f7ff ffa1 	bl	80008bc <readFlash>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <init_getFlashTime+0x58>)
 8000980:	701a      	strb	r2, [r3, #0]
	RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 1);
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <init_getFlashTime+0x5c>)
 8000984:	f7ff ff9a 	bl	80008bc <readFlash>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <init_getFlashTime+0x58>)
 800098e:	705a      	strb	r2, [r3, #1]
	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <init_getFlashTime+0x60>)
 8000992:	f7ff ff93 	bl	80008bc <readFlash>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <init_getFlashTime+0x58>)
 800099c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800099e:	2200      	movs	r2, #0
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <init_getFlashTime+0x58>)
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <init_getFlashTime+0x64>)
 80009a4:	f004 fe8a 	bl	80056bc <HAL_RTC_SetTime>

	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <init_getFlashTime+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <init_getFlashTime+0x58>)
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	461a      	mov	r2, r3
			RTC_Time.Seconds);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <init_getFlashTime+0x58>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <init_getFlashTime+0x68>)
 80009ba:	f006 fe71 	bl	80076a0 <iprintf>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080c0000 	.word	0x080c0000
 80009c8:	200009d0 	.word	0x200009d0
 80009cc:	080c0001 	.word	0x080c0001
 80009d0:	080c0002 	.word	0x080c0002
 80009d4:	2000041c 	.word	0x2000041c
 80009d8:	08008a4c 	.word	0x08008a4c

080009dc <init_getFlashAlarm>:

void init_getFlashAlarm() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	RTC_Alarm.AlarmTime.Hours = readFlash(FLASH_USER_START_ADDR + 3);
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <init_getFlashAlarm+0x54>)
 80009e2:	f7ff ff6b 	bl	80008bc <readFlash>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <init_getFlashAlarm+0x58>)
 80009ec:	701a      	strb	r2, [r3, #0]
	RTC_Alarm.AlarmTime.Minutes = readFlash(FLASH_USER_START_ADDR + 4);
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <init_getFlashAlarm+0x5c>)
 80009f0:	f7ff ff64 	bl	80008bc <readFlash>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <init_getFlashAlarm+0x58>)
 80009fa:	705a      	strb	r2, [r3, #1]
	RTC_Alarm.AlarmTime.Seconds = readFlash(FLASH_USER_START_ADDR + 5);
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <init_getFlashAlarm+0x60>)
 80009fe:	f7ff ff5d 	bl	80008bc <readFlash>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <init_getFlashAlarm+0x58>)
 8000a08:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <init_getFlashAlarm+0x64>)
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <init_getFlashAlarm+0x68>)
 8000a10:	f004 fe54 	bl	80056bc <HAL_RTC_SetTime>

	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <init_getFlashAlarm+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <init_getFlashAlarm+0x58>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 8000a1e:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <init_getFlashAlarm+0x58>)
 8000a22:	789b      	ldrb	r3, [r3, #2]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <init_getFlashAlarm+0x6c>)
 8000a26:	f006 fe3b 	bl	80076a0 <iprintf>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	080c0003 	.word	0x080c0003
 8000a34:	200009e4 	.word	0x200009e4
 8000a38:	080c0004 	.word	0x080c0004
 8000a3c:	080c0005 	.word	0x080c0005
 8000a40:	200009d0 	.word	0x200009d0
 8000a44:	2000041c 	.word	0x2000041c
 8000a48:	08008a6c 	.word	0x08008a6c

08000a4c <init_getFlashMusic>:

void init_getFlashMusic() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	current_state.music_num = readFlash(FLASH_USER_START_ADDR + 6);
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <init_getFlashMusic+0x38>)
 8000a52:	f7ff ff33 	bl	80008bc <readFlash>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <init_getFlashMusic+0x3c>)
 8000a5c:	605a      	str	r2, [r3, #4]

	printf("Setting Music: %d %s\r\n", current_state.music_num,
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <init_getFlashMusic+0x3c>)
 8000a60:	6859      	ldr	r1, [r3, #4]
			alarmMusic[current_state.music_num].musicTitle);
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <init_getFlashMusic+0x3c>)
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00da      	lsls	r2, r3, #3
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <init_getFlashMusic+0x40>)
 8000a72:	4413      	add	r3, r2
 8000a74:	3301      	adds	r3, #1
	printf("Setting Music: %d %s\r\n", current_state.music_num,
 8000a76:	461a      	mov	r2, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <init_getFlashMusic+0x44>)
 8000a7a:	f006 fe11 	bl	80076a0 <iprintf>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	080c0006 	.word	0x080c0006
 8000a88:	200009c4 	.word	0x200009c4
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	08008a90 	.word	0x08008a90

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f001 f808 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f844 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa0:	f000 faca 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa4:	f000 faa8 	bl	8000ff8 <MX_DMA_Init>
  MX_ETH_Init();
 8000aa8:	f000 f92e 	bl	8000d08 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000aac:	f000 fa4c 	bl	8000f48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ab0:	f000 fa74 	bl	8000f9c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ab4:	f000 f8c8 	bl	8000c48 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f974 	bl	8000da4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000abc:	f000 f9b2 	bl	8000e24 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ac0:	f000 f89e 	bl	8000c00 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4913      	ldr	r1, [pc, #76]	; (8000b14 <main+0x80>)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <main+0x84>)
 8000aca:	f001 f9d9 	bl	8001e80 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_IT(&hadc1);
//	HAL_TIM_Base_Start_IT(&htim3);
	init();
 8000ace:	f7ff fe82 	bl	80007d6 <init>

	init_getFlashTime();
 8000ad2:	f7ff ff4d 	bl	8000970 <init_getFlashTime>
	init_getFlashAlarm();
 8000ad6:	f7ff ff81 	bl	80009dc <init_getFlashAlarm>
	init_getFlashMusic();
 8000ada:	f7ff ffb7 	bl	8000a4c <init_getFlashMusic>
	lcd_clear();
 8000ade:	f7ff fee5 	bl	80008ac <lcd_clear>
	current_state.mode = NORMAL_STATE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <main+0x88>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (current_state.mode) {
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <main+0x88>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <main+0x62>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <main+0x6c>
		case MUSIC_SELECT:
			music_set_mode();
			break;
#endif
		default:
			break;
 8000af4:	e00c      	b.n	8000b10 <main+0x7c>
			get_time();
 8000af6:	f7ff fe8d 	bl	8000814 <get_time>
			showCurrentTime();
 8000afa:	f7ff febf 	bl	800087c <showCurrentTime>
			break;
 8000afe:	e007      	b.n	8000b10 <main+0x7c>
			time_set_mode();
 8000b00:	f7ff ff2a 	bl	8000958 <time_set_mode>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000b04:	2200      	movs	r2, #0
 8000b06:	4906      	ldr	r1, [pc, #24]	; (8000b20 <main+0x8c>)
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <main+0x90>)
 8000b0a:	f004 fdd7 	bl	80056bc <HAL_RTC_SetTime>
			break;
 8000b0e:	bf00      	nop
		switch (current_state.mode) {
 8000b10:	e7ea      	b.n	8000ae8 <main+0x54>
 8000b12:	bf00      	nop
 8000b14:	2000098c 	.word	0x2000098c
 8000b18:	20000270 	.word	0x20000270
 8000b1c:	200009c4 	.word	0x200009c4
 8000b20:	200009d0 	.word	0x200009d0
 8000b24:	2000041c 	.word	0x2000041c

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	; 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 ff4c 	bl	80079d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b84:	2305      	movs	r3, #5
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ba0:	23a8      	movs	r3, #168	; 0xa8
 8000ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 feb5 	bl	8004920 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bbc:	f000 fbb4 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2105      	movs	r1, #5
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f916 	bl	8004e10 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bea:	f000 fb9d 	bl	8001328 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2027      	movs	r0, #39	; 0x27
 8000c0a:	f001 fe06 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c0e:	2027      	movs	r0, #39	; 0x27
 8000c10:	f001 fe1f 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2028      	movs	r0, #40	; 0x28
 8000c1a:	f001 fdfe 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1e:	2028      	movs	r0, #40	; 0x28
 8000c20:	f001 fe17 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f001 fdf6 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c2e:	2012      	movs	r0, #18
 8000c30:	f001 fe0f 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2029      	movs	r0, #41	; 0x29
 8000c3a:	f001 fdee 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c3e:	2029      	movs	r0, #41	; 0x29
 8000c40:	f001 fe07 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <MX_ADC1_Init+0xbc>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	4814      	ldr	r0, [pc, #80]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000cae:	f000 ff93 	bl	8001bd8 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000cb8:	f000 fb36 	bl	8001328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000cce:	f001 fa0f 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cd8:	f000 fb26 	bl	8001328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000cdc:	230d      	movs	r3, #13
 8000cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_ADC1_Init+0xb8>)
 8000cea:	f001 fa01 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000cf4:	f000 fb18 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000270 	.word	0x20000270
 8000d04:	40012000 	.word	0x40012000

08000d08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d0e:	4a20      	ldr	r2, [pc, #128]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d20:	22e1      	movs	r2, #225	; 0xe1
 8000d22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d38:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d42:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <MX_ETH_Init+0x90>)
 8000d48:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_ETH_Init+0x94>)
 8000d4e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d56:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d5a:	f002 f997 	bl	800308c <HAL_ETH_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d64:	f000 fae0 	bl	8001328 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d68:	2238      	movs	r2, #56	; 0x38
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_ETH_Init+0x98>)
 8000d6e:	f006 fe31 	bl	80079d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_ETH_Init+0x98>)
 8000d74:	2221      	movs	r2, #33	; 0x21
 8000d76:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_ETH_Init+0x98>)
 8000d7a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d7e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_ETH_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000318 	.word	0x20000318
 8000d90:	40028000 	.word	0x40028000
 8000d94:	20000a0c 	.word	0x20000a0c
 8000d98:	200001d0 	.word	0x200001d0
 8000d9c:	20000130 	.word	0x20000130
 8000da0:	200000f8 	.word	0x200000f8

08000da4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_I2C1_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MX_I2C1_Init+0x7c>)
 8000db2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000de2:	f002 fe8b 	bl	8003afc <HAL_I2C_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dec:	f000 fa9c 	bl	8001328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000df4:	f003 fbfb 	bl	80045ee <HAL_I2CEx_ConfigAnalogFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dfe:	f000 fa93 	bl	8001328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000e06:	f003 fc2e 	bl	8004666 <HAL_I2CEx_ConfigDigitalFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 fa8a 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200003c8 	.word	0x200003c8
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2228      	movs	r2, #40	; 0x28
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 fdc5 	bl	80079d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e4c:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <MX_RTC_Init+0x120>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e58:	227f      	movs	r2, #127	; 0x7f
 8000e5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e74:	4832      	ldr	r0, [pc, #200]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000e76:	f004 fbab 	bl	80055d0 <HAL_RTC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e80:	f000 fa52 	bl	8001328 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4824      	ldr	r0, [pc, #144]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000eae:	f004 fc05 	bl	80056bc <HAL_RTC_SetTime>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000eb8:	f000 fa36 	bl	8001328 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000ec2:	2311      	movs	r3, #17
 8000ec4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x16;
 8000ec8:	2316      	movs	r3, #22
 8000eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000ece:	2323      	movs	r3, #35	; 0x23
 8000ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4619      	mov	r1, r3
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000ede:	f004 fce5 	bl	80058ac <HAL_RTC_SetDate>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000ee8:	f000 fa1e 	bl	8001328 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000efc:	2300      	movs	r3, #0
 8000efe:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f0c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f22:	463b      	mov	r3, r7
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_RTC_Init+0x11c>)
 8000f2a:	f004 fd93 	bl	8005a54 <HAL_RTC_SetAlarm_IT>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8000f34:	f000 f9f8 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3740      	adds	r7, #64	; 0x40
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000041c 	.word	0x2000041c
 8000f44:	40002800 	.word	0x40002800

08000f48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART3_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART3_UART_Init+0x4c>)
 8000f80:	f004 ffb7 	bl	8005ef2 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f9cd 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000043c 	.word	0x2000043c
 8000f98:	40004800 	.word	0x40004800

08000f9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	f003 fb80 	bl	80046e4 <HAL_PCD_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f99d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000480 	.word	0x20000480

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x3c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2038      	movs	r0, #56	; 0x38
 8001020:	f001 fbfb 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001024:	2038      	movs	r0, #56	; 0x38
 8001026:	f001 fc14 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a5c      	ldr	r2, [pc, #368]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a55      	ldr	r2, [pc, #340]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <MX_GPIO_Init+0x190>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <MX_GPIO_Init+0x190>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f244 0181 	movw	r1, #16513	; 0x4081
 8001118:	482c      	ldr	r0, [pc, #176]	; (80011cc <MX_GPIO_Init+0x194>)
 800111a:	f002 fca3 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	482b      	ldr	r0, [pc, #172]	; (80011d0 <MX_GPIO_Init+0x198>)
 8001124:	f002 fc9e 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <MX_GPIO_Init+0x19c>)
 8001140:	f002 facc 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Joy_btn_Pin */
  GPIO_InitStruct.Pin = Joy_btn_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001148:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	481f      	ldr	r0, [pc, #124]	; (80011d8 <MX_GPIO_Init+0x1a0>)
 800115a:	f002 fabf 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800115e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <MX_GPIO_Init+0x194>)
 8001178:	f002 fab0 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_GPIO_Init+0x198>)
 8001194:	f002 faa2 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_GPIO_Init+0x198>)
 80011ac:	f002 fa96 	bl	80036dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2009      	movs	r0, #9
 80011b6:	f001 fb30 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011ba:	2009      	movs	r0, #9
 80011bc:	f001 fb49 	bl	8002852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40021400 	.word	0x40021400

080011dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d161      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0xd4>
		// joystick sw test OK!
		//	  btn_cnt++;
		//	  printf("cnt = %d\r\n", btn_cnt);
		//		printf("test interval=%d\r\n", interval);
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80011ec:	2101      	movs	r1, #1
 80011ee:	4832      	ldr	r0, [pc, #200]	; (80012b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011f0:	f002 fc51 	bl	8003a96 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 80011f4:	f000 fcc0 	bl	8001b78 <HAL_GetTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_GPIO_EXTI_Callback+0xe0>)
 80011fc:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800120a:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_GPIO_EXTI_Callback+0xe0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001212:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 8001214:	2108      	movs	r1, #8
 8001216:	482c      	ldr	r0, [pc, #176]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8001218:	f002 fc0c 	bl	8003a34 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d146      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0xd4>
			if (interval < 130) {
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b81      	cmp	r3, #129	; 0x81
 8001228:	d805      	bhi.n	8001236 <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3303      	adds	r3, #3
 8001230:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e02a      	b.n	800128c <HAL_GPIO_EXTI_Callback+0xb0>
			} else if (interval >= 130 && interval < 200) {
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b81      	cmp	r3, #129	; 0x81
 800123c:	d910      	bls.n	8001260 <HAL_GPIO_EXTI_Callback+0x84>
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2bc7      	cmp	r3, #199	; 0xc7
 8001244:	d80c      	bhi.n	8001260 <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <HAL_GPIO_EXTI_Callback+0xf4>)
 800124e:	f006 fa27 	bl	80076a0 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	e015      	b.n	800128c <HAL_GPIO_EXTI_Callback+0xb0>
//			lcd_clear();
			} else if (interval >= 300 && interval <= 1000) {
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001268:	d310      	bcc.n	800128c <HAL_GPIO_EXTI_Callback+0xb0>
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001272:	d80b      	bhi.n	800128c <HAL_GPIO_EXTI_Callback+0xb0>
				printf("Long click!!  interval = %u\r\n",
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4817      	ldr	r0, [pc, #92]	; (80012d8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800127c:	f006 fa10 	bl	80076a0 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
//			lcd_clear();
			}
			if (btn_cnt >= 5) {
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	dd0d      	ble.n	80012b0 <HAL_GPIO_EXTI_Callback+0xd4>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <HAL_GPIO_EXTI_Callback+0x100>)
 80012a0:	f006 f9fe 	bl	80076a0 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_GPIO_EXTI_Callback+0xf0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	701a      	strb	r2, [r3, #0]
//			lcd_clear();
			}
		}
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020400 	.word	0x40020400
 80012bc:	20000994 	.word	0x20000994
 80012c0:	20000998 	.word	0x20000998
 80012c4:	2000099c 	.word	0x2000099c
 80012c8:	40021400 	.word	0x40021400
 80012cc:	200009a0 	.word	0x200009a0
 80012d0:	08008aa8 	.word	0x08008aa8
 80012d4:	200009c4 	.word	0x200009c4
 80012d8:	08008ac8 	.word	0x08008ac8
 80012dc:	08008ae8 	.word	0x08008ae8

080012e0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_RTC_AlarmAEventCallback+0x40>)
 80012f6:	1899      	adds	r1, r3, r2
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_RTC_AlarmAEventCallback+0x3c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 80012fc:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001300:	785b      	ldrb	r3, [r3, #1]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 8001302:	4618      	mov	r0, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001306:	789b      	ldrb	r3, [r3, #2]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4603      	mov	r3, r0
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_RTC_AlarmAEventCallback+0x44>)
 800130e:	f006 f9c7 	bl	80076a0 <iprintf>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200009e4 	.word	0x200009e4
 8001320:	20000000 	.word	0x20000000
 8001324:	08008b1c 	.word	0x08008b1c

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3c      	ldr	r2, [pc, #240]	; (8001494 <HAL_ADC_MspInit+0x110>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d171      	bne.n	800148a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a33      	ldr	r2, [pc, #204]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_ADC_MspInit+0x114>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80013fa:	2309      	movs	r3, #9
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fe:	2303      	movs	r3, #3
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4823      	ldr	r0, [pc, #140]	; (800149c <HAL_ADC_MspInit+0x118>)
 800140e:	f002 f965 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001412:	2308      	movs	r3, #8
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	481e      	ldr	r0, [pc, #120]	; (80014a0 <HAL_ADC_MspInit+0x11c>)
 8001426:	f002 f959 	bl	80036dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x124>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001448:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 800144c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001450:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001458:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 800145c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001470:	f001 fa0a 	bl	8002888 <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800147a:	f7ff ff55 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_ADC_MspInit+0x120>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012000 	.word	0x40012000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	200002b8 	.word	0x200002b8
 80014a8:	40026410 	.word	0x40026410

080014ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a55      	ldr	r2, [pc, #340]	; (8001620 <HAL_ETH_MspInit+0x174>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f040 80a4 	bne.w	8001618 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	623b      	str	r3, [r7, #32]
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b49      	ldr	r3, [pc, #292]	; (8001624 <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a3d      	ldr	r2, [pc, #244]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a36      	ldr	r2, [pc, #216]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_ETH_MspInit+0x178>)
 8001582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_ETH_MspInit+0x178>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001594:	2332      	movs	r3, #50	; 0x32
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	230b      	movs	r3, #11
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	481e      	ldr	r0, [pc, #120]	; (8001628 <HAL_ETH_MspInit+0x17c>)
 80015b0:	f002 f894 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015b4:	2386      	movs	r3, #134	; 0x86
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c4:	230b      	movs	r3, #11
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4817      	ldr	r0, [pc, #92]	; (800162c <HAL_ETH_MspInit+0x180>)
 80015d0:	f002 f884 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	480f      	ldr	r0, [pc, #60]	; (8001630 <HAL_ETH_MspInit+0x184>)
 80015f2:	f002 f873 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001608:	230b      	movs	r3, #11
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <HAL_ETH_MspInit+0x188>)
 8001614:	f002 f862 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3738      	adds	r7, #56	; 0x38
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40028000 	.word	0x40028000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40021800 	.word	0x40021800

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_I2C_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	; (80016c4 <HAL_I2C_MspInit+0x8c>)
 8001694:	f002 f822 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 80016a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2230      	movs	r2, #48	; 0x30
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f97b 	bl	80079d4 <memset>
  if(hrtc->Instance==RTC)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <HAL_RTC_MspInit+0x4c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016e8:	2320      	movs	r3, #32
 80016ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fdaa 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001702:	f7ff fe11 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_RTC_MspInit+0x50>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40002800 	.word	0x40002800
 8001718:	42470e3c 	.word	0x42470e3c

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12c      	bne.n	8001798 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001788:	2307      	movs	r3, #7
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001794:	f001 ffa2 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40004800 	.word	0x40004800
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020c00 	.word	0x40020c00

080017ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d13f      	bne.n	800184e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_PCD_MspInit+0xac>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <HAL_PCD_MspInit+0xac>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_PCD_MspInit+0xac>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017fc:	230a      	movs	r3, #10
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <HAL_PCD_MspInit+0xb0>)
 8001808:	f001 ff68 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <HAL_PCD_MspInit+0xb0>)
 8001822:	f001 ff5b 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_PCD_MspInit+0xac>)
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_PCD_MspInit+0xac>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6353      	str	r3, [r2, #52]	; 0x34
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_PCD_MspInit+0xac>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_PCD_MspInit+0xac>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_PCD_MspInit+0xac>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ac:	f000 f950 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 80018b8:	2008      	movs	r0, #8
 80018ba:	f002 f907 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <ADC_IRQHandler+0x10>)
 80018ca:	f000 f9c8 	bl	8001c5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000270 	.word	0x20000270

080018d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART3_IRQHandler+0x10>)
 80018de:	f004 fbe7 	bl	80060b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000043c 	.word	0x2000043c

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f4:	f002 f8ea 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <RTC_Alarm_IRQHandler+0x10>)
 8001902:	f004 f9e9 	bl	8005cd8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000041c 	.word	0x2000041c

08001910 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA2_Stream0_IRQHandler+0x10>)
 8001916:	f001 f94f 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002b8 	.word	0x200002b8

08001924 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
  }

  return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_close>:
  }
  return len;
}

int _close(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f006 f83a 	bl	8007a70 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20030000 	.word	0x20030000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20000a14 	.word	0x20000a14
 8001a30:	20000b68 	.word	0x20000b68

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5e:	490e      	ldr	r1, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a82:	f7ff ffd7 	bl	8001a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f005 fff9 	bl	8007a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff f803 	bl	8000a94 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001a9c:	08008ba8 	.word	0x08008ba8
  ldr r2, =_sbss
 8001aa0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001aa4:	20000b68 	.word	0x20000b68

08001aa8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <CAN1_RX0_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 fe95 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fc28 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fead 	bl	800286e <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 fe75 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000074 	.word	0x20000074
 8001b48:	2000007c 	.word	0x2000007c
 8001b4c:	20000078 	.word	0x20000078

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000007c 	.word	0x2000007c
 8001b74:	20000a18 	.word	0x20000a18

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000a18 	.word	0x20000a18

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000007c 	.word	0x2000007c

08001bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e033      	b.n	8001c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fbc4 	bl	8001384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d118      	bne.n	8001c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1e:	f023 0302 	bic.w	r3, r3, #2
 8001c22:	f043 0202 	orr.w	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fb92 	bl	8002354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
 8001c46:	e001      	b.n	8001c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d049      	beq.n	8001d28 <HAL_ADC_IRQHandler+0xca>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d046      	beq.n	8001d28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12b      	bne.n	8001d18 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d127      	bne.n	8001d18 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d119      	bne.n	8001d18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0220 	bic.w	r2, r2, #32
 8001cf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f9c1 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0212 	mvn.w	r2, #18
 8001d26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d057      	beq.n	8001dee <HAL_ADC_IRQHandler+0x190>
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d054      	beq.n	8001dee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d139      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d12b      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d124      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11d      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc36 	bl	8002650 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 020c 	mvn.w	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x1d6>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d014      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10d      	bne.n	8001e34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f94f 	bl	80020c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0201 	mvn.w	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x218>
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f938 	bl	80020dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0220 	mvn.w	r2, #32
 8001e74:	601a      	str	r2, [r3, #0]
  }
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Start_DMA+0x1e>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e0e9      	b.n	8002072 <HAL_ADC_Start_DMA+0x1f2>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d018      	beq.n	8001ee6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec4:	4b6d      	ldr	r3, [pc, #436]	; (800207c <HAL_ADC_Start_DMA+0x1fc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6d      	ldr	r2, [pc, #436]	; (8002080 <HAL_ADC_Start_DMA+0x200>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9a      	lsrs	r2, r3, #18
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef4:	d107      	bne.n	8001f06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 80a1 	bne.w	8002058 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f54:	d106      	bne.n	8001f64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f023 0206 	bic.w	r2, r3, #6
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
 8001f62:	e002      	b.n	8001f6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f72:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_ADC_Start_DMA+0x204>)
 8001f74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4a43      	ldr	r2, [pc, #268]	; (8002088 <HAL_ADC_Start_DMA+0x208>)
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	4a42      	ldr	r2, [pc, #264]	; (800208c <HAL_ADC_Start_DMA+0x20c>)
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_ADC_Start_DMA+0x210>)
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fa6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	334c      	adds	r3, #76	; 0x4c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f000 fd0c 	bl	80029e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d12a      	bne.n	800202e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <HAL_ADC_Start_DMA+0x214>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d015      	beq.n	800200e <HAL_ADC_Start_DMA+0x18e>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <HAL_ADC_Start_DMA+0x218>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d105      	bne.n	8001ff8 <HAL_ADC_Start_DMA+0x178>
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_ADC_Start_DMA+0x204>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_ADC_Start_DMA+0x21c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d136      	bne.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_ADC_Start_DMA+0x204>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b00      	cmp	r3, #0
 800200c:	d130      	bne.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d129      	bne.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	e020      	b.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_ADC_Start_DMA+0x214>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d11b      	bne.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d114      	bne.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	e00b      	b.n	8002070 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000074 	.word	0x20000074
 8002080:	431bde83 	.word	0x431bde83
 8002084:	40012300 	.word	0x40012300
 8002088:	0800254d 	.word	0x0800254d
 800208c:	08002607 	.word	0x08002607
 8002090:	08002623 	.word	0x08002623
 8002094:	40012000 	.word	0x40012000
 8002098:	40012100 	.word	0x40012100
 800209c:	40012200 	.word	0x40012200

080020a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e113      	b.n	8002334 <HAL_ADC_ConfigChannel+0x244>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d925      	bls.n	8002168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	4603      	mov	r3, r0
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	3b1e      	subs	r3, #30
 800215c:	409a      	lsls	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e022      	b.n	80021ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d824      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
 80021fe:	e04c      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d824      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b23      	subs	r3, #35	; 0x23
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
 8002250:	e023      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	; 0x41
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_ADC_ConfigChannel+0x250>)
 800229c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10f      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d122      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_ADC_ConfigChannel+0x25c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_ADC_ConfigChannel+0x260>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	10000012 	.word	0x10000012
 800234c:	20000074 	.word	0x20000074
 8002350:	431bde83 	.word	0x431bde83

08002354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <ADC_Init+0x1f0>)
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4a58      	ldr	r2, [pc, #352]	; (8002548 <ADC_Init+0x1f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e00f      	b.n	8002452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0202 	bic.w	r2, r2, #2
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e1b      	ldrb	r3, [r3, #24]
 800246c:	005a      	lsls	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800249e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	3b01      	subs	r3, #1
 80024ac:	035a      	lsls	r2, r3, #13
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e007      	b.n	80024c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	051a      	lsls	r2, r3, #20
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250a:	025a      	lsls	r2, r3, #9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	029a      	lsls	r2, r3, #10
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	0f000001 	.word	0x0f000001

0800254c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d13c      	bne.n	80025e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d12b      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d127      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d119      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0220 	bic.w	r2, r2, #32
 80025b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff fd61 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025de:	e00e      	b.n	80025fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fd75 	bl	80020dc <HAL_ADC_ErrorCallback>
}
 80025f2:	e004      	b.n	80025fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fd4d 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fd4a 	bl	80020dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff f970 	bl	8001b78 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e099      	b.n	80029d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c4:	e00f      	b.n	80028e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c6:	f7ff f957 	bl	8001b78 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d908      	bls.n	80028e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e078      	b.n	80029d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e8      	bne.n	80028c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_DMA_Init+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4313      	orrs	r3, r2
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0307 	bic.w	r3, r3, #7
 8002966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b04      	cmp	r3, #4
 8002978:	d117      	bne.n	80029aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fb01 	bl	8002f94 <DMA_CheckFifoParam>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029a6:	2301      	movs	r3, #1
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fab8 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 80029b8:	4603      	mov	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	223f      	movs	r2, #63	; 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	f010803f 	.word	0xf010803f

080029e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Start_IT+0x26>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e040      	b.n	8002a8c <HAL_DMA_Start_IT+0xa8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12f      	bne.n	8002a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa4a 	bl	8002ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0216 	orr.w	r2, r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7ff f869 	bl	8001b78 <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e052      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_Abort+0x62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b16:	e013      	b.n	8002b40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b18:	f7ff f82e 	bl	8001b78 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d90c      	bls.n	8002b40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e015      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00c      	b.n	8002bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc4:	4b8e      	ldr	r3, [pc, #568]	; (8002e00 <HAL_DMA_IRQHandler+0x248>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a8e      	ldr	r2, [pc, #568]	; (8002e04 <HAL_DMA_IRQHandler+0x24c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2210      	movs	r2, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d024      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e01f      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 808f 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8087 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2220      	movs	r2, #32
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d136      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x1da>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	223f      	movs	r2, #63	; 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07e      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        }
        return;
 8002dce:	e079      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d031      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e02c      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
 8002dfe:	bf00      	nop
 8002e00:	20000074 	.word	0x20000074
 8002e04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e01e      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0210 	bic.w	r2, r2, #16
 8002e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d307      	bcc.n	8002ea0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f2      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x2cc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ea0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e000      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ec4:	bf00      	nop
    }
  }
}
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b10      	subs	r3, #16
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <DMA_CalcBaseAndBitshift+0x64>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d909      	bls.n	8002f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
 8002f68:	e007      	b.n	8002f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	08008b5c 	.word	0x08008b5c

08002f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d856      	bhi.n	8003062 <DMA_CheckFifoParam+0xce>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <DMA_CheckFifoParam+0x28>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08003063 	.word	0x08003063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d046      	beq.n	8003066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e043      	b.n	8003066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe6:	d140      	bne.n	800306a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e03d      	b.n	800306a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	d121      	bne.n	800303c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d837      	bhi.n	800306e <DMA_CheckFifoParam+0xda>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <DMA_CheckFifoParam+0x70>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301b 	.word	0x0800301b
 800300c:	08003015 	.word	0x08003015
 8003010:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e030      	b.n	800307c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d025      	beq.n	8003072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e022      	b.n	8003072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003034:	d11f      	bne.n	8003076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800303a:	e01c      	b.n	8003076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d903      	bls.n	800304a <DMA_CheckFifoParam+0xb6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003048:	e018      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      break;
 800304e:	e015      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e00b      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003062:	bf00      	nop
 8003064:	e00a      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
 8003068:	e008      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
 800306c:	e006      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306e:	bf00      	nop
 8003070:	e004      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;   
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800307a:	bf00      	nop
    }
  } 
  
  return status; 
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06c      	b.n	8003178 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2223      	movs	r2, #35	; 0x23
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe f9fb 	bl	80014ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_ETH_Init+0xf4>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a30      	ldr	r2, [pc, #192]	; (8003180 <HAL_ETH_Init+0xf4>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_ETH_Init+0xf4>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030d2:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_ETH_Init+0xf8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <HAL_ETH_Init+0xf8>)
 80030d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_ETH_Init+0xf8>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4927      	ldr	r1, [pc, #156]	; (8003184 <HAL_ETH_Init+0xf8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_ETH_Init+0xf8>)
 80030ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003106:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003108:	f7fe fd36 	bl	8001b78 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800310e:	e011      	b.n	8003134 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003110:	f7fe fd32 	bl	8001b78 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800311e:	d909      	bls.n	8003134 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	22e0      	movs	r2, #224	; 0xe0
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e021      	b.n	8003178 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e4      	bne.n	8003110 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f958 	bl	80033fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f9ff 	bl	8003550 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa55 	bl	8003602 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	461a      	mov	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f9bd 	bl	80034e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2210      	movs	r2, #16
 8003172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	40013800 	.word	0x40013800

08003188 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <ETH_SetMACConfig+0x15c>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	7c1b      	ldrb	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <ETH_SetMACConfig+0x28>
 80031aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031ae:	e000      	b.n	80031b2 <ETH_SetMACConfig+0x2a>
 80031b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7c5b      	ldrb	r3, [r3, #17]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <ETH_SetMACConfig+0x38>
 80031ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031be:	e000      	b.n	80031c2 <ETH_SetMACConfig+0x3a>
 80031c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	7fdb      	ldrb	r3, [r3, #31]
 80031ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	7f92      	ldrb	r2, [r2, #30]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d102      	bne.n	80031e6 <ETH_SetMACConfig+0x5e>
 80031e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e4:	e000      	b.n	80031e8 <ETH_SetMACConfig+0x60>
 80031e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80031e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7f1b      	ldrb	r3, [r3, #28]
 80031ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	791b      	ldrb	r3, [r3, #4]
 80031fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80031fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003206:	2a00      	cmp	r2, #0
 8003208:	d102      	bne.n	8003210 <ETH_SetMACConfig+0x88>
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	e000      	b.n	8003212 <ETH_SetMACConfig+0x8a>
 8003210:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003212:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	7bdb      	ldrb	r3, [r3, #15]
 8003218:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800321a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003220:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003228:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322a:	4313      	orrs	r3, r2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003242:	2001      	movs	r0, #1
 8003244:	f7fe fca4 	bl	8001b90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800325e:	4013      	ands	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800326e:	2a00      	cmp	r2, #0
 8003270:	d101      	bne.n	8003276 <ETH_SetMACConfig+0xee>
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	e000      	b.n	8003278 <ETH_SetMACConfig+0xf0>
 8003276:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003278:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800327e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003286:	2a01      	cmp	r2, #1
 8003288:	d101      	bne.n	800328e <ETH_SetMACConfig+0x106>
 800328a:	2208      	movs	r2, #8
 800328c:	e000      	b.n	8003290 <ETH_SetMACConfig+0x108>
 800328e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003290:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003298:	2a01      	cmp	r2, #1
 800329a:	d101      	bne.n	80032a0 <ETH_SetMACConfig+0x118>
 800329c:	2204      	movs	r2, #4
 800329e:	e000      	b.n	80032a2 <ETH_SetMACConfig+0x11a>
 80032a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80032aa:	2a01      	cmp	r2, #1
 80032ac:	d101      	bne.n	80032b2 <ETH_SetMACConfig+0x12a>
 80032ae:	2202      	movs	r2, #2
 80032b0:	e000      	b.n	80032b4 <ETH_SetMACConfig+0x12c>
 80032b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7fe fc5f 	bl	8001b90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	ff20810f 	.word	0xff20810f

080032e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <ETH_SetDMAConfig+0x110>)
 8003302:	4013      	ands	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <ETH_SetDMAConfig+0x2c>
 800330e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003312:	e000      	b.n	8003316 <ETH_SetDMAConfig+0x2e>
 8003314:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7b5b      	ldrb	r3, [r3, #13]
 800331a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800331c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	7f52      	ldrb	r2, [r2, #29]
 8003322:	2a00      	cmp	r2, #0
 8003324:	d102      	bne.n	800332c <ETH_SetDMAConfig+0x44>
 8003326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800332a:	e000      	b.n	800332e <ETH_SetDMAConfig+0x46>
 800332c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800332e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	7b9b      	ldrb	r3, [r3, #14]
 8003334:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003336:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800333c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	7f1b      	ldrb	r3, [r3, #28]
 8003342:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003344:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	7f9b      	ldrb	r3, [r3, #30]
 800334a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800334c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003352:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800335c:	4313      	orrs	r3, r2
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	461a      	mov	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800337e:	2001      	movs	r0, #1
 8003380:	f7fe fc06 	bl	8001b90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800339c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80033a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80033b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033dc:	2001      	movs	r0, #1
 80033de:	f7fe fbd7 	bl	8001b90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	f8de3f23 	.word	0xf8de3f23

080033fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0a6      	sub	sp, #152	; 0x98
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003410:	2300      	movs	r3, #0
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003438:	2300      	movs	r3, #0
 800343a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003442:	2300      	movs	r3, #0
 8003444:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800345e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003462:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003468:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fe86 	bl	8003188 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800347c:	2301      	movs	r3, #1
 800347e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003480:	2301      	movs	r3, #1
 8003482:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800348a:	2301      	movs	r3, #1
 800348c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003492:	2300      	movs	r3, #0
 8003494:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff08 	bl	80032e8 <ETH_SetDMAConfig>
}
 80034d8:	bf00      	nop
 80034da:	3798      	adds	r7, #152	; 0x98
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3305      	adds	r3, #5
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	3204      	adds	r2, #4
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <ETH_MACAddressConfig+0x68>)
 8003502:	4413      	add	r3, r2
 8003504:	461a      	mov	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3303      	adds	r3, #3
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	061a      	lsls	r2, r3, #24
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3302      	adds	r3, #2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	4313      	orrs	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <ETH_MACAddressConfig+0x6c>)
 8003532:	4413      	add	r3, r2
 8003534:	461a      	mov	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40028040 	.word	0x40028040
 800354c:	40028044 	.word	0x40028044

08003550 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e03e      	b.n	80035dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	3206      	adds	r2, #6
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d80c      	bhi.n	80035c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68d9      	ldr	r1, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	e004      	b.n	80035ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d9bd      	bls.n	800355e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f4:	611a      	str	r2, [r3, #16]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e046      	b.n	800369e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6919      	ldr	r1, [r3, #16]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800364c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003654:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	3212      	adds	r2, #18
 800366a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d80c      	bhi.n	800368e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6919      	ldr	r1, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e004      	b.n	8003698 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	461a      	mov	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d9b5      	bls.n	8003610 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e177      	b.n	80039e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8166 	bne.w	80039e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	2b02      	cmp	r3, #2
 800372c:	d130      	bne.n	8003790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80c0 	beq.w	80039e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_GPIO_Init+0x324>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a61      	ldr	r2, [pc, #388]	; (8003a04 <HAL_GPIO_Init+0x328>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d037      	beq.n	800391a <HAL_GPIO_Init+0x23e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a57      	ldr	r2, [pc, #348]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_GPIO_Init+0x23a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <HAL_GPIO_Init+0x236>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x338>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x232>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_GPIO_Init+0x33c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x22e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_GPIO_Init+0x340>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x22a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_GPIO_Init+0x344>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_GPIO_Init+0x348>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_GPIO_Init+0x34c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_GPIO_Init+0x350>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038f2:	2309      	movs	r3, #9
 80038f4:	e012      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038f6:	230a      	movs	r3, #10
 80038f8:	e010      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fa:	2308      	movs	r3, #8
 80038fc:	e00e      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fe:	2307      	movs	r3, #7
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003902:	2306      	movs	r3, #6
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x240>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	; (8003a04 <HAL_GPIO_Init+0x328>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae84 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40021c00 	.word	0x40021c00
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022400 	.word	0x40022400
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e001      	b.n	8003a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	041a      	lsls	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fb76 	bl	80011dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e12b      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fd88 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b60:	f001 fb4e 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a81      	ldr	r2, [pc, #516]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d807      	bhi.n	8003b80 <HAL_I2C_Init+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a80      	ldr	r2, [pc, #512]	; (8003d74 <HAL_I2C_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x92>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_I2C_Init+0x27c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0e7      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a78      	ldr	r2, [pc, #480]	; (8003d7c <HAL_I2C_Init+0x280>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_I2C_Init+0xd4>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e009      	b.n	8003be4 <HAL_I2C_Init+0xe8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_I2C_Init+0x284>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	495c      	ldr	r1, [pc, #368]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d819      	bhi.n	8003c38 <HAL_I2C_Init+0x13c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e59      	subs	r1, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c18:	400b      	ands	r3, r1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_I2C_Init+0x138>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	e051      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e04f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_I2C_Init+0x168>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e012      	b.n	8003c8a <HAL_I2C_Init+0x18e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x196>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_I2C_Init+0x1bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e58      	subs	r0, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6911      	ldr	r1, [r2, #16]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	460b      	mov	r3, r1
 8003d92:	817b      	strh	r3, [r7, #10]
 8003d94:	4613      	mov	r3, r2
 8003d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d98:	f7fd feee 	bl	8001b78 <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	f040 80e0 	bne.w	8003f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	4970      	ldr	r1, [pc, #448]	; (8003f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa92 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0d3      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_I2C_Master_Transmit+0x50>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0cc      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d007      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2221      	movs	r2, #33	; 0x21
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2210      	movs	r2, #16
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	893a      	ldrh	r2, [r7, #8]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a50      	ldr	r2, [pc, #320]	; (8003f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e3c:	8979      	ldrh	r1, [r7, #10]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f9ca 	bl	80041dc <I2C_MasterRequestWrite>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e08d      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e68:	e066      	b.n	8003f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6a39      	ldr	r1, [r7, #32]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb0c 	bl	800448c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d107      	bne.n	8003e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x188>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fafc 	bl	800450e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01a      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d194      	bne.n	8003e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	00100002 	.word	0x00100002
 8003f7c:	ffff0000 	.word	0xffff0000

08003f80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7fd fdf2 	bl	8001b78 <HAL_GetTick>
 8003f94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	f040 8111 	bne.w	80041ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4988      	ldr	r1, [pc, #544]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f994 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e104      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_IsDeviceReady+0x50>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0fd      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a70      	ldr	r2, [pc, #448]	; (80041d8 <HAL_I2C_IsDeviceReady+0x258>)
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f952 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004050:	d103      	bne.n	800405a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b6      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800406c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800406e:	f7fd fd83 	bl	8001b78 <HAL_GetTick>
 8004072:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040a2:	e025      	b.n	80040f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7fd fd68 	bl	8001b78 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <HAL_I2C_IsDeviceReady+0x13a>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	22a0      	movs	r2, #160	; 0xa0
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2ba0      	cmp	r3, #160	; 0xa0
 80040fa:	d005      	beq.n	8004108 <HAL_I2C_IsDeviceReady+0x188>
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <HAL_I2C_IsDeviceReady+0x188>
 8004102:	7dbb      	ldrb	r3, [r7, #22]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0cd      	beq.n	80040a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d129      	bne.n	8004172 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	4921      	ldr	r1, [pc, #132]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8c6 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e036      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e02c      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800418a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	490f      	ldr	r1, [pc, #60]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8a2 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e012      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f4ff af32 	bcc.w	800401a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	00100002 	.word	0x00100002
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d006      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00b      	b.n	8004230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b12      	cmp	r3, #18
 800421e:	d107      	bne.n	8004230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f84f 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d103      	bne.n	8004260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e035      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d108      	bne.n	8004280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e01b      	b.n	80042b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	11db      	asrs	r3, r3, #7
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f063 030f 	orn	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <I2C_MasterRequestWrite+0xfc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f875 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e010      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <I2C_MasterRequestWrite+0x100>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f865 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010008 	.word	0x00010008
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	e025      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d021      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fd fc3d 	bl	8001b78 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e023      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10d      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	e00c      	b.n	800437e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0b6      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439c:	e051      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d123      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e046      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d021      	beq.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fd fbbb 	bl	8001b78 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e020      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10c      	bne.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e00b      	b.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d18d      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004498:	e02d      	b.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f878 	bl	8004590 <I2C_IsAcknowledgeFailed>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e02d      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d021      	beq.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fd fb61 	bl	8001b78 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e007      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d1ca      	bne.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451a:	e02d      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f837 	bl	8004590 <I2C_IsAcknowledgeFailed>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e02d      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d021      	beq.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fd fb20 	bl	8001b78 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d1ca      	bne.n	800451c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d11b      	bne.n	80045e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0204 	orr.w	r2, r3, #4
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d129      	bne.n	8004658 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0210 	bic.w	r2, r2, #16
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	d12a      	bne.n	80046d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80046a0:	89fb      	ldrh	r3, [r7, #14]
 80046a2:	f023 030f 	bic.w	r3, r3, #15
 80046a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	89fa      	ldrh	r2, [r7, #14]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e6:	b08f      	sub	sp, #60	; 0x3c
 80046e8:	af0a      	add	r7, sp, #40	; 0x28
 80046ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e10f      	b.n	8004916 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fd f84b 	bl	80017ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2203      	movs	r2, #3
 800471a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f002 fc50 	bl	8006fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	687e      	ldr	r6, [r7, #4]
 8004742:	466d      	mov	r5, sp
 8004744:	f106 0410 	add.w	r4, r6, #16
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004754:	e885 0003 	stmia.w	r5, {r0, r1}
 8004758:	1d33      	adds	r3, r6, #4
 800475a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f002 fbdb 	bl	8006f18 <USB_CoreInit>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0d0      	b.n	8004916 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f002 fc3e 	bl	8006ffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e04a      	b.n	800481c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004786:	7bfa      	ldrb	r2, [r7, #15]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	333d      	adds	r3, #61	; 0x3d
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	333c      	adds	r3, #60	; 0x3c
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	b298      	uxth	r0, r3
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3344      	adds	r3, #68	; 0x44
 80047c2:	4602      	mov	r2, r0
 80047c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3340      	adds	r3, #64	; 0x40
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3348      	adds	r3, #72	; 0x48
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	334c      	adds	r3, #76	; 0x4c
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3354      	adds	r3, #84	; 0x54
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	3301      	adds	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d3af      	bcc.n	8004786 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e044      	b.n	80048b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	3301      	adds	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3b5      	bcc.n	800482c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	687e      	ldr	r6, [r7, #4]
 80048c8:	466d      	mov	r5, sp
 80048ca:	f106 0410 	add.w	r4, r6, #16
 80048ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048da:	e885 0003 	stmia.w	r5, {r0, r1}
 80048de:	1d33      	adds	r3, r6, #4
 80048e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e2:	6838      	ldr	r0, [r7, #0]
 80048e4:	f002 fbd6 	bl	8007094 <USB_DevInit>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00d      	b.n	8004916 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f002 fda1 	bl	8007456 <USB_DevDisconnect>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e267      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d075      	beq.n	8004a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493e:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d00c      	beq.n	8004964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494a:	4b85      	ldr	r3, [pc, #532]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004952:	2b08      	cmp	r3, #8
 8004954:	d112      	bne.n	800497c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004956:	4b82      	ldr	r3, [pc, #520]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004962:	d10b      	bne.n	800497c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	4b7e      	ldr	r3, [pc, #504]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d05b      	beq.n	8004a28 <HAL_RCC_OscConfig+0x108>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d157      	bne.n	8004a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e242      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x74>
 8004986:	4b76      	ldr	r3, [pc, #472]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a75      	ldr	r2, [pc, #468]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e01d      	b.n	80049d0 <HAL_RCC_OscConfig+0xb0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x98>
 800499e:	4b70      	ldr	r3, [pc, #448]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6f      	ldr	r2, [pc, #444]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b6d      	ldr	r3, [pc, #436]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6c      	ldr	r2, [pc, #432]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0xb0>
 80049b8:	4b69      	ldr	r3, [pc, #420]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a68      	ldr	r2, [pc, #416]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a65      	ldr	r2, [pc, #404]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fd f8ce 	bl	8001b78 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fd f8ca 	bl	8001b78 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e207      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0xc0>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fd f8ba 	bl	8001b78 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fd f8b6 	bl	8001b78 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e1f3      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	4b51      	ldr	r3, [pc, #324]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0xe8>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d063      	beq.n	8004afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a36:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d11c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_RCC_OscConfig+0x152>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e1c7      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4937      	ldr	r1, [pc, #220]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	e03a      	b.n	8004afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd f86f 	bl	8001b78 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9e:	f7fd f86b 	bl	8001b78 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1a8      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4925      	ldr	r1, [pc, #148]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	e015      	b.n	8004afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd f84e 	bl	8001b78 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae0:	f7fd f84a 	bl	8001b78 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e187      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d036      	beq.n	8004b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_RCC_OscConfig+0x248>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7fd f82e 	bl	8001b78 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fd f82a 	bl	8001b78 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e167      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x200>
 8004b3e:	e01b      	b.n	8004b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_OscConfig+0x248>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7fd f817 	bl	8001b78 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4c:	e00e      	b.n	8004b6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b4e:	f7fd f813 	bl	8001b78 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d907      	bls.n	8004b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e150      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	42470000 	.word	0x42470000
 8004b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ea      	bne.n	8004b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8097 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8a:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	4b7d      	ldr	r3, [pc, #500]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a7c      	ldr	r2, [pc, #496]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b7a      	ldr	r3, [pc, #488]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	4b77      	ldr	r3, [pc, #476]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d118      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc2:	4b74      	ldr	r3, [pc, #464]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a73      	ldr	r2, [pc, #460]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bce:	f7fc ffd3 	bl	8001b78 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd6:	f7fc ffcf 	bl	8001b78 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e10c      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2ea>
 8004bfc:	4b64      	ldr	r3, [pc, #400]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	4a63      	ldr	r2, [pc, #396]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70
 8004c08:	e01c      	b.n	8004c44 <HAL_RCC_OscConfig+0x324>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x30c>
 8004c12:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a5e      	ldr	r2, [pc, #376]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	4b5c      	ldr	r3, [pc, #368]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a5b      	ldr	r2, [pc, #364]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0x324>
 8004c2c:	4b58      	ldr	r3, [pc, #352]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a54      	ldr	r2, [pc, #336]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	f023 0304 	bic.w	r3, r3, #4
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d015      	beq.n	8004c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fc ff94 	bl	8001b78 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c54:	f7fc ff90 	bl	8001b78 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e0cb      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6a:	4b49      	ldr	r3, [pc, #292]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0ee      	beq.n	8004c54 <HAL_RCC_OscConfig+0x334>
 8004c76:	e014      	b.n	8004ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7fc ff7e 	bl	8001b78 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7fc ff7a 	bl	8001b78 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0b5      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c96:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ee      	bne.n	8004c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	4a38      	ldr	r2, [pc, #224]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a1 	beq.w	8004e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cbe:	4b34      	ldr	r3, [pc, #208]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d05c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d141      	bne.n	8004d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fc ff4e 	bl	8001b78 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fc ff4a 	bl	8001b78 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e087      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	3b01      	subs	r3, #1
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	061b      	lsls	r3, r3, #24
 8004d22:	491b      	ldr	r1, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7fc ff23 	bl	8001b78 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fc ff1f 	bl	8001b78 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e05c      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x416>
 8004d54:	e054      	b.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fc ff0c 	bl	8001b78 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fc ff08 	bl	8001b78 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e045      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x444>
 8004d82:	e03d      	b.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e038      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40007000 	.word	0x40007000
 8004d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x4ec>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d028      	beq.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d121      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d11a      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d111      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	3b01      	subs	r3, #1
 8004de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cc      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90c      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e067      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fc fe3a 	bl	8001b78 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fc fe36 	bl	8001b78 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fc fd9a 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	08008b44 	.word	0x08008b44
 8004fd4:	20000074 	.word	0x20000074
 8004fd8:	20000078 	.word	0x20000078

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe0:	b094      	sub	sp, #80	; 0x50
 8004fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe8:	2300      	movs	r3, #0
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	2300      	movs	r3, #0
 8004fee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d00d      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x40>
 8005000:	2b08      	cmp	r3, #8
 8005002:	f200 80e1 	bhi.w	80051c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x34>
 800500a:	2b04      	cmp	r3, #4
 800500c:	d003      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x3a>
 800500e:	e0db      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005014:	e0db      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005016:	4b73      	ldr	r3, [pc, #460]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800501a:	e0d8      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800501c:	4b6f      	ldr	r3, [pc, #444]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005024:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005026:	4b6d      	ldr	r3, [pc, #436]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d063      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005032:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	2200      	movs	r2, #0
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
 800503c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800504e:	4622      	mov	r2, r4
 8005050:	462b      	mov	r3, r5
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	0159      	lsls	r1, r3, #5
 800505c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005060:	0150      	lsls	r0, r2, #5
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4621      	mov	r1, r4
 8005068:	1a51      	subs	r1, r2, r1
 800506a:	6139      	str	r1, [r7, #16]
 800506c:	4629      	mov	r1, r5
 800506e:	eb63 0301 	sbc.w	r3, r3, r1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005080:	4659      	mov	r1, fp
 8005082:	018b      	lsls	r3, r1, #6
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800508a:	4651      	mov	r1, sl
 800508c:	018a      	lsls	r2, r1, #6
 800508e:	4651      	mov	r1, sl
 8005090:	ebb2 0801 	subs.w	r8, r2, r1
 8005094:	4659      	mov	r1, fp
 8005096:	eb63 0901 	sbc.w	r9, r3, r1
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ae:	4690      	mov	r8, r2
 80050b0:	4699      	mov	r9, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	eb18 0303 	adds.w	r3, r8, r3
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	462b      	mov	r3, r5
 80050bc:	eb49 0303 	adc.w	r3, r9, r3
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ce:	4629      	mov	r1, r5
 80050d0:	024b      	lsls	r3, r1, #9
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050d8:	4621      	mov	r1, r4
 80050da:	024a      	lsls	r2, r1, #9
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e2:	2200      	movs	r2, #0
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ec:	f7fb f8d8 	bl	80002a0 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	e058      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	2200      	movs	r2, #0
 8005102:	4618      	mov	r0, r3
 8005104:	4611      	mov	r1, r2
 8005106:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	f04f 0000 	mov.w	r0, #0
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	0159      	lsls	r1, r3, #5
 8005122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005126:	0150      	lsls	r0, r2, #5
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4641      	mov	r1, r8
 800512e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005132:	4649      	mov	r1, r9
 8005134:	eb63 0b01 	sbc.w	fp, r3, r1
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800514c:	ebb2 040a 	subs.w	r4, r2, sl
 8005150:	eb63 050b 	sbc.w	r5, r3, fp
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	464b      	mov	r3, r9
 8005170:	eb45 0303 	adc.w	r3, r5, r3
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005182:	4629      	mov	r1, r5
 8005184:	028b      	lsls	r3, r1, #10
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800518c:	4621      	mov	r1, r4
 800518e:	028a      	lsls	r2, r1, #10
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	2200      	movs	r2, #0
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a0:	f7fb f87e 	bl	80002a0 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051c6:	e002      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3750      	adds	r7, #80	; 0x50
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	007a1200 	.word	0x007a1200

080051e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000074 	.word	0x20000074

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a9b      	lsrs	r3, r3, #10
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	08008b54 	.word	0x08008b54

08005228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800522c:	f7ff ffdc 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0b5b      	lsrs	r3, r3, #13
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4903      	ldr	r1, [pc, #12]	; (800524c <HAL_RCC_GetPCLK2Freq+0x24>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	08008b54 	.word	0x08008b54

08005250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005280:	2b00      	cmp	r3, #0
 8005282:	d075      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005284:	4b91      	ldr	r3, [pc, #580]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800528a:	f7fc fc75 	bl	8001b78 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005292:	f7fc fc71 	bl	8001b78 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e189      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a4:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	019a      	lsls	r2, r3, #6
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	071b      	lsls	r3, r3, #28
 80052c8:	4981      	ldr	r1, [pc, #516]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01f      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052dc:	4b7c      	ldr	r3, [pc, #496]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	0f1b      	lsrs	r3, r3, #28
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	061b      	lsls	r3, r3, #24
 80052f6:	431a      	orrs	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	071b      	lsls	r3, r3, #28
 80052fc:	4974      	ldr	r1, [pc, #464]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005304:	4b72      	ldr	r3, [pc, #456]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530a:	f023 021f 	bic.w	r2, r3, #31
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	3b01      	subs	r3, #1
 8005314:	496e      	ldr	r1, [pc, #440]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	019a      	lsls	r2, r3, #6
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	071b      	lsls	r3, r3, #28
 800533c:	4964      	ldr	r1, [pc, #400]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005344:	4b61      	ldr	r3, [pc, #388]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534a:	f7fc fc15 	bl	8001b78 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005352:	f7fc fc11 	bl	8001b78 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e129      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d079      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005388:	4b52      	ldr	r3, [pc, #328]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538e:	f7fc fbf3 	bl	8001b78 <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005396:	f7fc fbef 	bl	8001b78 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e107      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053a8:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b4:	d0ef      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d020      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	019a      	lsls	r2, r3, #6
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	493b      	ldr	r1, [pc, #236]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ea:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	4934      	ldr	r1, [pc, #208]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01e      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	0e1b      	lsrs	r3, r3, #24
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	019a      	lsls	r2, r3, #6
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	071b      	lsls	r3, r3, #28
 8005430:	4927      	ldr	r1, [pc, #156]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	4922      	ldr	r1, [pc, #136]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800544e:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005454:	f7fc fb90 	bl	8001b78 <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800545c:	f7fc fb8c 	bl	8001b78 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0a4      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547a:	d1ef      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 808b 	beq.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005498:	6413      	str	r3, [r2, #64]	; 0x40
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054b2:	f7fc fb61 	bl	8001b78 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054b8:	e010      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fc fb5d 	bl	8001b78 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d909      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e075      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054cc:	42470068 	.word	0x42470068
 80054d0:	40023800 	.word	0x40023800
 80054d4:	42470070 	.word	0x42470070
 80054d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054dc:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0e8      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d028      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005506:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005516:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800551c:	4a29      	ldr	r2, [pc, #164]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005522:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d114      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800552e:	f7fc fb23 	bl	8001b78 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	e00a      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fc fb1f 	bl	8001b78 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e035      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ee      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005564:	d10d      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	4912      	ldr	r1, [pc, #72]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800557c:	4313      	orrs	r3, r2
 800557e:	608b      	str	r3, [r1, #8]
 8005580:	e005      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005582:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4a0f      	ldr	r2, [pc, #60]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005588:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800558c:	6093      	str	r3, [r2, #8]
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559a:	490a      	ldr	r1, [pc, #40]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800559c:	4313      	orrs	r3, r2
 800559e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80055b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40007000 	.word	0x40007000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	42470e40 	.word	0x42470e40
 80055cc:	424711e0 	.word	0x424711e0

080055d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e066      	b.n	80056b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7f5b      	ldrb	r3, [r3, #29]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc f866 	bl	80016c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	22ca      	movs	r2, #202	; 0xca
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2253      	movs	r2, #83	; 0x53
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fbce 	bl	8005db4 <RTC_EnterInitMode>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d12c      	bne.n	800567c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	68d2      	ldr	r2, [r2, #12]
 800565c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6919      	ldr	r1, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	041a      	lsls	r2, r3, #16
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fbd5 	bl	8005e22 <RTC_ExitInitMode>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d113      	bne.n	80056aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	22ff      	movs	r2, #255	; 0xff
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7f1b      	ldrb	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RTC_SetTime+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e087      	b.n	80057e8 <HAL_RTC_SetTime+0x12c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2202      	movs	r2, #2
 80056e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d126      	bne.n	8005738 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fbb2 	bl	8005e6c <RTC_ByteToBcd2>
 8005708:	4603      	mov	r3, r0
 800570a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fbab 	bl	8005e6c <RTC_ByteToBcd2>
 8005716:	4603      	mov	r3, r0
 8005718:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800571a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	789b      	ldrb	r3, [r3, #2]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fba3 	bl	8005e6c <RTC_ByteToBcd2>
 8005726:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005728:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	78db      	ldrb	r3, [r3, #3]
 8005730:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e018      	b.n	800576a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005758:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800575e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	22ca      	movs	r2, #202	; 0xca
 8005770:	625a      	str	r2, [r3, #36]	; 0x24
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2253      	movs	r2, #83	; 0x53
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fb1a 	bl	8005db4 <RTC_EnterInitMode>
 8005780:	4603      	mov	r3, r0
 8005782:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d120      	bne.n	80057cc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005794:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005798:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fb2d 	bl	8005e22 <RTC_ExitInitMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	771a      	strb	r2, [r3, #28]

  return status;
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd90      	pop	{r4, r7, pc}

080057f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005822:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005826:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	0c1b      	lsrs	r3, r3, #16
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0d9b      	lsrs	r3, r3, #22
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11a      	bne.n	80058a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fb18 	bl	8005ea6 <RTC_Bcd2ToByte>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb0f 	bl	8005ea6 <RTC_Bcd2ToByte>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	789b      	ldrb	r3, [r3, #2]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb06 	bl	8005ea6 <RTC_Bcd2ToByte>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	7f1b      	ldrb	r3, [r3, #28]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_RTC_SetDate+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e071      	b.n	80059ac <HAL_RTC_SetDate+0x100>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2202      	movs	r2, #2
 80058d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10e      	bne.n	80058f8 <HAL_RTC_SetDate+0x4c>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d008      	beq.n	80058f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	330a      	adds	r3, #10
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11c      	bne.n	8005938 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fab2 	bl	8005e6c <RTC_ByteToBcd2>
 8005908:	4603      	mov	r3, r0
 800590a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 faab 	bl	8005e6c <RTC_ByteToBcd2>
 8005916:	4603      	mov	r3, r0
 8005918:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800591a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 faa3 	bl	8005e6c <RTC_ByteToBcd2>
 8005926:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005928:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e00e      	b.n	8005956 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	78db      	ldrb	r3, [r3, #3]
 800593c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005944:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800594a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	22ca      	movs	r2, #202	; 0xca
 800595c:	625a      	str	r2, [r3, #36]	; 0x24
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2253      	movs	r2, #83	; 0x53
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa24 	bl	8005db4 <RTC_EnterInitMode>
 800596c:	4603      	mov	r3, r0
 800596e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005984:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa4b 	bl	8005e22 <RTC_ExitInitMode>
 800598c:	4603      	mov	r3, r0
 800598e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]

  return status;
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd90      	pop	{r4, r7, pc}

080059b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	0b5b      	lsrs	r3, r3, #13
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11a      	bne.n	8005a48 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	78db      	ldrb	r3, [r3, #3]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fa45 	bl	8005ea6 <RTC_Bcd2ToByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fa3c 	bl	8005ea6 <RTC_Bcd2ToByte>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	789b      	ldrb	r3, [r3, #2]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fa33 	bl	8005ea6 <RTC_Bcd2ToByte>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005a60:	4b9a      	ldr	r3, [pc, #616]	; (8005ccc <HAL_RTC_SetAlarm_IT+0x278>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a9a      	ldr	r2, [pc, #616]	; (8005cd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0adb      	lsrs	r3, r3, #11
 8005a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	7f1b      	ldrb	r3, [r3, #28]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_RTC_SetAlarm_IT+0x36>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e11c      	b.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x270>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d137      	bne.n	8005b0c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f9d9 	bl	8005e6c <RTC_ByteToBcd2>
 8005aba:	4603      	mov	r3, r0
 8005abc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f9d2 	bl	8005e6c <RTC_ByteToBcd2>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005acc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	789b      	ldrb	r3, [r3, #2]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f9ca 	bl	8005e6c <RTC_ByteToBcd2>
 8005ad8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ada:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	78db      	ldrb	r3, [r3, #3]
 8005ae2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005ae4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f9bc 	bl	8005e6c <RTC_ByteToBcd2>
 8005af4:	4603      	mov	r3, r0
 8005af6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005af8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005b00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	e023      	b.n	8005b54 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b2c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005b32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005b3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005b44:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005b4a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	22ca      	movs	r2, #202	; 0xca
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2253      	movs	r2, #83	; 0x53
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d141      	bne.n	8005bfe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b88:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b9a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	617a      	str	r2, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e082      	b.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0e7      	beq.n	8005b9c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bfa:	609a      	str	r2, [r3, #8]
 8005bfc:	e04b      	b.n	8005c96 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c1e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005c20:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <HAL_RTC_SetAlarm_IT+0x278>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	0adb      	lsrs	r3, r3, #11
 8005c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c30:	fb02 f303 	mul.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	1e5a      	subs	r2, r3, #1
 8005c3a:	617a      	str	r2, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e035      	b.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0e7      	beq.n	8005c36 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c84:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <HAL_RTC_SetAlarm_IT+0x280>)
 8005ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cac:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3724      	adds	r7, #36	; 0x24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}
 8005ccc:	20000074 	.word	0x20000074
 8005cd0:	10624dd3 	.word	0x10624dd3
 8005cd4:	40013c00 	.word	0x40013c00

08005cd8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb faef 	bl	80012e0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d012      	beq.n	8005d48 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8d4 	bl	8005ede <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d4e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	775a      	strb	r2, [r3, #29]
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40013c00 	.word	0x40013c00

08005d64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d80:	f7fb fefa 	bl	8001b78 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d86:	e009      	b.n	8005d9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d88:	f7fb fef6 	bl	8001b78 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d96:	d901      	bls.n	8005d9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e007      	b.n	8005dac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ee      	beq.n	8005d88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d122      	bne.n	8005e18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005de0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005de2:	f7fb fec9 	bl	8001b78 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005de8:	e00c      	b.n	8005e04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dea:	f7fb fec5 	bl	8001b78 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df8:	d904      	bls.n	8005e04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <RTC_EnterInitMode+0x64>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d1e8      	bne.n	8005dea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff89 	bl	8005d64 <HAL_RTC_WaitForSynchro>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e7a:	e005      	b.n	8005e88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	3b0a      	subs	r3, #10
 8005e86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b09      	cmp	r3, #9
 8005e8c:	d8f6      	bhi.n	8005e7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	4603      	mov	r3, r0
 8005eae:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	0092      	lsls	r2, r2, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	4413      	add	r3, r2
 8005ed0:	b2db      	uxtb	r3, r3
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e03f      	b.n	8005f84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fb fbff 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fd7a 	bl	8006a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d17c      	bne.n	80060a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_UART_Transmit+0x2c>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e075      	b.n	80060a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x3e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e06e      	b.n	80060a8 <HAL_UART_Transmit+0x11c>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2221      	movs	r2, #33	; 0x21
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe0:	f7fb fdca 	bl	8001b78 <HAL_GetTick>
 8005fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	88fa      	ldrh	r2, [r7, #6]
 8005fea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d108      	bne.n	800600e <HAL_UART_Transmit+0x82>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e003      	b.n	8006016 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800601e:	e02a      	b.n	8006076 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2200      	movs	r2, #0
 8006028:	2180      	movs	r1, #128	; 0x80
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 faf8 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e036      	b.n	80060a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800604e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	3302      	adds	r3, #2
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e007      	b.n	8006068 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3301      	adds	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1cf      	bne.n	8006020 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fac8 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e006      	b.n	80060a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b0ba      	sub	sp, #232	; 0xe8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
 8006102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fbd3 	bl	80068ba <UART_Receive_IT>
      return;
 8006114:	e256      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80de 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80d1 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0201 	orr.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0202 	orr.w	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
 800618e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 81ed 	beq.w	80065ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb5e 	bl	80068ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_UART_IRQHandler+0x17a>
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04f      	beq.n	80062ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa66 	bl	80066fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d141      	bne.n	80062c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800626a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d9      	bne.n	800623e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	4a7d      	ldr	r2, [pc, #500]	; (800648c <HAL_UART_IRQHandler+0x3dc>)
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc fc68 	bl	8002b74 <HAL_DMA_Abort_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e00e      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f99a 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00a      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f996 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e006      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f992 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062d6:	e170      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	bf00      	nop
    return;
 80062da:	e16e      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 814a 	bne.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8143 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 813c 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	f040 80b4 	bne.w	8006490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8140 	beq.w	80065be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006346:	429a      	cmp	r2, r3
 8006348:	f080 8139 	bcs.w	80065be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	f000 8088 	beq.w	8006472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800638e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800639a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d9      	bne.n	8006362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e1      	bne.n	80063ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800640e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e3      	bne.n	80063ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006454:	65ba      	str	r2, [r7, #88]	; 0x58
 8006456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800645a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e3      	bne.n	8006430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc fb11 	bl	8002a94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647a:	b29b      	uxth	r3, r3
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8c0 	bl	8006608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006488:	e099      	b.n	80065be <HAL_UART_IRQHandler+0x50e>
 800648a:	bf00      	nop
 800648c:	080067c3 	.word	0x080067c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 808b 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8086 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064da:	647a      	str	r2, [r7, #68]	; 0x44
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006512:	633a      	str	r2, [r7, #48]	; 0x30
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	617b      	str	r3, [r7, #20]
   return(result);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800656c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f848 	bl	8006608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006578:	e023      	b.n	80065c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f929 	bl	80067ea <UART_Transmit_IT>
    return;
 8006598:	e014      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f969 	bl	800688a <UART_EndTransmit_IT>
    return;
 80065b8:	e004      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    return;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065c2:	bf00      	nop
  }
}
 80065c4:	37e8      	adds	r7, #232	; 0xe8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b090      	sub	sp, #64	; 0x40
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006630:	e050      	b.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d04c      	beq.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800663a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <UART_WaitOnFlagUntilTimeout+0x30>
 8006640:	f7fb fa9a 	bl	8001b78 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800664c:	429a      	cmp	r2, r3
 800664e:	d241      	bcs.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006670:	637a      	str	r2, [r7, #52]	; 0x34
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	613b      	str	r3, [r7, #16]
   return(result);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3314      	adds	r3, #20
 80066a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a4:	623a      	str	r2, [r7, #32]
 80066a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	69f9      	ldr	r1, [r7, #28]
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e00f      	b.n	80066f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4013      	ands	r3, r2
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	bf0c      	ite	eq
 80066e4:	2301      	moveq	r3, #1
 80066e6:	2300      	movne	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d09f      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	; 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b095      	sub	sp, #84	; 0x54
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006724:	643a      	str	r2, [r7, #64]	; 0x40
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800672a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e5      	bne.n	8006704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3314      	adds	r3, #20
 800673e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	61fb      	str	r3, [r7, #28]
   return(result);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800675e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b01      	cmp	r3, #1
 8006772:	d119      	bne.n	80067a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60bb      	str	r3, [r7, #8]
   return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	647b      	str	r3, [r7, #68]	; 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006794:	61ba      	str	r2, [r7, #24]
 8006796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067b6:	bf00      	nop
 80067b8:	3754      	adds	r7, #84	; 0x54
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff ff09 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b21      	cmp	r3, #33	; 0x21
 80067fc:	d13e      	bne.n	800687c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d114      	bne.n	8006832 <UART_Transmit_IT+0x48>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d110      	bne.n	8006832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]
 8006830:	e008      	b.n	8006844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6211      	str	r1, [r2, #32]
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4619      	mov	r1, r3
 8006852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10f      	bne.n	8006878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff fe8e 	bl	80065cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08c      	sub	sp, #48	; 0x30
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b22      	cmp	r3, #34	; 0x22
 80068cc:	f040 80ab 	bne.w	8006a26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d8:	d117      	bne.n	800690a <UART_Receive_IT+0x50>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d113      	bne.n	800690a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	1c9a      	adds	r2, r3, #2
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
 8006908:	e026      	b.n	8006958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691c:	d007      	beq.n	800692e <UART_Receive_IT+0x74>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <UART_Receive_IT+0x82>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	e008      	b.n	800694e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006948:	b2da      	uxtb	r2, r3
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4619      	mov	r1, r3
 8006966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006968:	2b00      	cmp	r3, #0
 800696a:	d15a      	bne.n	8006a22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0220 	bic.w	r2, r2, #32
 800697a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800698a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d135      	bne.n	8006a18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	330c      	adds	r3, #12
 80069b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	613b      	str	r3, [r7, #16]
   return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f023 0310 	bic.w	r3, r3, #16
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d2:	623a      	str	r2, [r7, #32]
 80069d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	69f9      	ldr	r1, [r7, #28]
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d10a      	bne.n	8006a0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fdf9 	bl	8006608 <HAL_UARTEx_RxEventCallback>
 8006a16:	e002      	b.n	8006a1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fde1 	bl	80065e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e002      	b.n	8006a28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3730      	adds	r7, #48	; 0x30
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b0c0      	sub	sp, #256	; 0x100
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	ea40 0301 	orr.w	r3, r0, r1
 8006a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a88:	f021 010c 	bic.w	r1, r1, #12
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a96:	430b      	orrs	r3, r1
 8006a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	6999      	ldr	r1, [r3, #24]
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	ea40 0301 	orr.w	r3, r0, r1
 8006ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b8f      	ldr	r3, [pc, #572]	; (8006cfc <UART_SetConfig+0x2cc>)
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d005      	beq.n	8006ad0 <UART_SetConfig+0xa0>
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b8d      	ldr	r3, [pc, #564]	; (8006d00 <UART_SetConfig+0x2d0>)
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d104      	bne.n	8006ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fe fbaa 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8006ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ad8:	e003      	b.n	8006ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ada:	f7fe fb91 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8006ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aec:	f040 810c 	bne.w	8006d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	1891      	adds	r1, r2, r2
 8006b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b0a:	415b      	adcs	r3, r3
 8006b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b12:	4621      	mov	r1, r4
 8006b14:	eb12 0801 	adds.w	r8, r2, r1
 8006b18:	4629      	mov	r1, r5
 8006b1a:	eb43 0901 	adc.w	r9, r3, r1
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b32:	4690      	mov	r8, r2
 8006b34:	4699      	mov	r9, r3
 8006b36:	4623      	mov	r3, r4
 8006b38:	eb18 0303 	adds.w	r3, r8, r3
 8006b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b40:	462b      	mov	r3, r5
 8006b42:	eb49 0303 	adc.w	r3, r9, r3
 8006b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b5e:	460b      	mov	r3, r1
 8006b60:	18db      	adds	r3, r3, r3
 8006b62:	653b      	str	r3, [r7, #80]	; 0x50
 8006b64:	4613      	mov	r3, r2
 8006b66:	eb42 0303 	adc.w	r3, r2, r3
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b74:	f7f9 fb94 	bl	80002a0 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4b61      	ldr	r3, [pc, #388]	; (8006d04 <UART_SetConfig+0x2d4>)
 8006b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	011c      	lsls	r4, r3, #4
 8006b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ba8:	4641      	mov	r1, r8
 8006baa:	eb12 0a01 	adds.w	sl, r2, r1
 8006bae:	4649      	mov	r1, r9
 8006bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc8:	4692      	mov	sl, r2
 8006bca:	469b      	mov	fp, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	eb1a 0303 	adds.w	r3, sl, r3
 8006bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8006bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	18db      	adds	r3, r3, r3
 8006bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	eb42 0303 	adc.w	r3, r2, r3
 8006c00:	647b      	str	r3, [r7, #68]	; 0x44
 8006c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c0a:	f7f9 fb49 	bl	80002a0 <__aeabi_uldivmod>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <UART_SetConfig+0x2d4>)
 8006c16:	fba3 2301 	umull	r2, r3, r3, r1
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	2264      	movs	r2, #100	; 0x64
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	1acb      	subs	r3, r1, r3
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c2a:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <UART_SetConfig+0x2d4>)
 8006c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c38:	441c      	add	r4, r3
 8006c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	1891      	adds	r1, r2, r2
 8006c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c54:	415b      	adcs	r3, r3
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	1851      	adds	r1, r2, r1
 8006c60:	6339      	str	r1, [r7, #48]	; 0x30
 8006c62:	4649      	mov	r1, r9
 8006c64:	414b      	adcs	r3, r1
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c74:	4659      	mov	r1, fp
 8006c76:	00cb      	lsls	r3, r1, #3
 8006c78:	4651      	mov	r1, sl
 8006c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c7e:	4651      	mov	r1, sl
 8006c80:	00ca      	lsls	r2, r1, #3
 8006c82:	4610      	mov	r0, r2
 8006c84:	4619      	mov	r1, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	4642      	mov	r2, r8
 8006c8a:	189b      	adds	r3, r3, r2
 8006c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c90:	464b      	mov	r3, r9
 8006c92:	460a      	mov	r2, r1
 8006c94:	eb42 0303 	adc.w	r3, r2, r3
 8006c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	18db      	adds	r3, r3, r3
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	eb42 0303 	adc.w	r3, r2, r3
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cc6:	f7f9 faeb 	bl	80002a0 <__aeabi_uldivmod>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <UART_SetConfig+0x2d4>)
 8006cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	2164      	movs	r1, #100	; 0x64
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	3332      	adds	r3, #50	; 0x32
 8006ce2:	4a08      	ldr	r2, [pc, #32]	; (8006d04 <UART_SetConfig+0x2d4>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	f003 0207 	and.w	r2, r3, #7
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4422      	add	r2, r4
 8006cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cf8:	e106      	b.n	8006f08 <UART_SetConfig+0x4d8>
 8006cfa:	bf00      	nop
 8006cfc:	40011000 	.word	0x40011000
 8006d00:	40011400 	.word	0x40011400
 8006d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	1891      	adds	r1, r2, r2
 8006d20:	6239      	str	r1, [r7, #32]
 8006d22:	415b      	adcs	r3, r3
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
 8006d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	1854      	adds	r4, r2, r1
 8006d2e:	4649      	mov	r1, r9
 8006d30:	eb43 0501 	adc.w	r5, r3, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	00eb      	lsls	r3, r5, #3
 8006d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d42:	00e2      	lsls	r2, r4, #3
 8006d44:	4614      	mov	r4, r2
 8006d46:	461d      	mov	r5, r3
 8006d48:	4643      	mov	r3, r8
 8006d4a:	18e3      	adds	r3, r4, r3
 8006d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d50:	464b      	mov	r3, r9
 8006d52:	eb45 0303 	adc.w	r3, r5, r3
 8006d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d76:	4629      	mov	r1, r5
 8006d78:	008b      	lsls	r3, r1, #2
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d80:	4621      	mov	r1, r4
 8006d82:	008a      	lsls	r2, r1, #2
 8006d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d88:	f7f9 fa8a 	bl	80002a0 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4b60      	ldr	r3, [pc, #384]	; (8006f14 <UART_SetConfig+0x4e4>)
 8006d92:	fba3 2302 	umull	r2, r3, r3, r2
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	011c      	lsls	r4, r3, #4
 8006d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	1891      	adds	r1, r2, r2
 8006db2:	61b9      	str	r1, [r7, #24]
 8006db4:	415b      	adcs	r3, r3
 8006db6:	61fb      	str	r3, [r7, #28]
 8006db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	1851      	adds	r1, r2, r1
 8006dc0:	6139      	str	r1, [r7, #16]
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	414b      	adcs	r3, r1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	00cb      	lsls	r3, r1, #3
 8006dd8:	4651      	mov	r1, sl
 8006dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dde:	4651      	mov	r1, sl
 8006de0:	00ca      	lsls	r2, r1, #3
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	4642      	mov	r2, r8
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006df0:	464b      	mov	r3, r9
 8006df2:	460a      	mov	r2, r1
 8006df4:	eb42 0303 	adc.w	r3, r2, r3
 8006df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e14:	4649      	mov	r1, r9
 8006e16:	008b      	lsls	r3, r1, #2
 8006e18:	4641      	mov	r1, r8
 8006e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e1e:	4641      	mov	r1, r8
 8006e20:	008a      	lsls	r2, r1, #2
 8006e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e26:	f7f9 fa3b 	bl	80002a0 <__aeabi_uldivmod>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4b38      	ldr	r3, [pc, #224]	; (8006f14 <UART_SetConfig+0x4e4>)
 8006e32:	fba3 2301 	umull	r2, r3, r3, r1
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2264      	movs	r2, #100	; 0x64
 8006e3a:	fb02 f303 	mul.w	r3, r2, r3
 8006e3e:	1acb      	subs	r3, r1, r3
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	3332      	adds	r3, #50	; 0x32
 8006e44:	4a33      	ldr	r2, [pc, #204]	; (8006f14 <UART_SetConfig+0x4e4>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e50:	441c      	add	r4, r3
 8006e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e56:	2200      	movs	r2, #0
 8006e58:	673b      	str	r3, [r7, #112]	; 0x70
 8006e5a:	677a      	str	r2, [r7, #116]	; 0x74
 8006e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e60:	4642      	mov	r2, r8
 8006e62:	464b      	mov	r3, r9
 8006e64:	1891      	adds	r1, r2, r2
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	415b      	adcs	r3, r3
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e70:	4641      	mov	r1, r8
 8006e72:	1851      	adds	r1, r2, r1
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	4649      	mov	r1, r9
 8006e78:	414b      	adcs	r3, r1
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e88:	4659      	mov	r1, fp
 8006e8a:	00cb      	lsls	r3, r1, #3
 8006e8c:	4651      	mov	r1, sl
 8006e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e92:	4651      	mov	r1, sl
 8006e94:	00ca      	lsls	r2, r1, #3
 8006e96:	4610      	mov	r0, r2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	189b      	adds	r3, r3, r2
 8006ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	460a      	mov	r2, r1
 8006ea6:	eb42 0303 	adc.w	r3, r2, r3
 8006eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8006eb6:	667a      	str	r2, [r7, #100]	; 0x64
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	008b      	lsls	r3, r1, #2
 8006ec8:	4641      	mov	r1, r8
 8006eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ece:	4641      	mov	r1, r8
 8006ed0:	008a      	lsls	r2, r1, #2
 8006ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ed6:	f7f9 f9e3 	bl	80002a0 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <UART_SetConfig+0x4e4>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <UART_SetConfig+0x4e4>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4422      	add	r2, r4
 8006f06:	609a      	str	r2, [r3, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f14:	51eb851f 	.word	0x51eb851f

08006f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f18:	b084      	sub	sp, #16
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	f107 001c 	add.w	r0, r7, #28
 8006f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d122      	bne.n	8006f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d105      	bne.n	8006f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 faa2 	bl	80074b4 <USB_CoreReset>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]
 8006f74:	e01a      	b.n	8006fac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa96 	bl	80074b4 <USB_CoreReset>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f9e:	e005      	b.n	8006fac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10b      	bne.n	8006fca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f043 0206 	orr.w	r2, r3, #6
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd6:	b004      	add	sp, #16
 8006fd8:	4770      	bx	lr

08006fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d115      	bne.n	800704a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800702a:	2001      	movs	r0, #1
 800702c:	f7fa fdb0 	bl	8001b90 <HAL_Delay>
      ms++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa2e 	bl	8007498 <USB_GetMode>
 800703c:	4603      	mov	r3, r0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d01e      	beq.n	8007080 <USB_SetCurrentMode+0x84>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b31      	cmp	r3, #49	; 0x31
 8007046:	d9f0      	bls.n	800702a <USB_SetCurrentMode+0x2e>
 8007048:	e01a      	b.n	8007080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d115      	bne.n	800707c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800705c:	2001      	movs	r0, #1
 800705e:	f7fa fd97 	bl	8001b90 <HAL_Delay>
      ms++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa15 	bl	8007498 <USB_GetMode>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <USB_SetCurrentMode+0x84>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b31      	cmp	r3, #49	; 0x31
 8007078:	d9f0      	bls.n	800705c <USB_SetCurrentMode+0x60>
 800707a:	e001      	b.n	8007080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e005      	b.n	800708c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b32      	cmp	r3, #50	; 0x32
 8007084:	d101      	bne.n	800708a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007094:	b084      	sub	sp, #16
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e009      	b.n	80070c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	3340      	adds	r3, #64	; 0x40
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	2200      	movs	r2, #0
 80070c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b0e      	cmp	r3, #14
 80070cc:	d9f2      	bls.n	80070b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11c      	bne.n	800710e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e2:	f043 0302 	orr.w	r3, r3, #2
 80070e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
 800710c:	e00b      	b.n	8007126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	4619      	mov	r1, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	461a      	mov	r2, r3
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10c      	bne.n	8007166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007152:	2100      	movs	r1, #0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f965 	bl	8007424 <USB_SetDevSpeed>
 800715a:	e008      	b.n	800716e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800715c:	2101      	movs	r1, #1
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f960 	bl	8007424 <USB_SetDevSpeed>
 8007164:	e003      	b.n	800716e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007166:	2103      	movs	r1, #3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f95b 	bl	8007424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800716e:	2110      	movs	r1, #16
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f8f3 	bl	800735c <USB_FlushTxFifo>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f91f 	bl	80073c4 <USB_FlushRxFifo>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	461a      	mov	r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	461a      	mov	r2, r3
 80071b0:	2300      	movs	r3, #0
 80071b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e043      	b.n	8007242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d0:	d118      	bne.n	8007204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	461a      	mov	r2, r3
 80071e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e013      	b.n	8007216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	461a      	mov	r2, r3
 80071fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e008      	b.n	8007216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	461a      	mov	r2, r3
 8007212:	2300      	movs	r3, #0
 8007214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	461a      	mov	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	461a      	mov	r2, r3
 8007236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800723a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3301      	adds	r3, #1
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3b7      	bcc.n	80071ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	e043      	b.n	80072d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007266:	d118      	bne.n	800729a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	461a      	mov	r2, r3
 800727c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e013      	b.n	80072ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	461a      	mov	r2, r3
 8007292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e008      	b.n	80072ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	461a      	mov	r2, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	461a      	mov	r2, r3
 80072ba:	2300      	movs	r3, #0
 80072bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	461a      	mov	r2, r3
 80072cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3301      	adds	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d3b7      	bcc.n	8007250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f043 0210 	orr.w	r2, r3, #16
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <USB_DevInit+0x2c4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f043 0208 	orr.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007340:	f043 0304 	orr.w	r3, r3, #4
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007354:	b004      	add	sp, #16
 8007356:	4770      	bx	lr
 8007358:	803c3800 	.word	0x803c3800

0800735c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <USB_FlushTxFifo+0x64>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e01b      	b.n	80073b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	daf2      	bge.n	800736a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	019b      	lsls	r3, r3, #6
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <USB_FlushTxFifo+0x64>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d901      	bls.n	80073a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e006      	b.n	80073b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d0f0      	beq.n	8007394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	00030d40 	.word	0x00030d40

080073c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4a11      	ldr	r2, [pc, #68]	; (8007420 <USB_FlushRxFifo+0x5c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e018      	b.n	8007414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	daf2      	bge.n	80073d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2210      	movs	r2, #16
 80073f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4a08      	ldr	r2, [pc, #32]	; (8007420 <USB_FlushRxFifo+0x5c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d901      	bls.n	8007406 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e006      	b.n	8007414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	2b10      	cmp	r3, #16
 8007410:	d0f0      	beq.n	80073f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	00030d40 	.word	0x00030d40

08007424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007444:	4313      	orrs	r3, r2
 8007446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007484:	f043 0302 	orr.w	r3, r3, #2
 8007488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	f003 0301 	and.w	r3, r3, #1
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <USB_CoreReset+0x64>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e01b      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a09      	ldr	r2, [pc, #36]	; (8007518 <USB_CoreReset+0x64>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e006      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d0f0      	beq.n	80074ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	00030d40 	.word	0x00030d40

0800751c <std>:
 800751c:	2300      	movs	r3, #0
 800751e:	b510      	push	{r4, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	e9c0 3300 	strd	r3, r3, [r0]
 8007526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800752a:	6083      	str	r3, [r0, #8]
 800752c:	8181      	strh	r1, [r0, #12]
 800752e:	6643      	str	r3, [r0, #100]	; 0x64
 8007530:	81c2      	strh	r2, [r0, #14]
 8007532:	6183      	str	r3, [r0, #24]
 8007534:	4619      	mov	r1, r3
 8007536:	2208      	movs	r2, #8
 8007538:	305c      	adds	r0, #92	; 0x5c
 800753a:	f000 fa4b 	bl	80079d4 <memset>
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <std+0x58>)
 8007540:	6263      	str	r3, [r4, #36]	; 0x24
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <std+0x5c>)
 8007544:	62a3      	str	r3, [r4, #40]	; 0x28
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <std+0x60>)
 8007548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800754a:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <std+0x64>)
 800754c:	6323      	str	r3, [r4, #48]	; 0x30
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <std+0x68>)
 8007550:	6224      	str	r4, [r4, #32]
 8007552:	429c      	cmp	r4, r3
 8007554:	d006      	beq.n	8007564 <std+0x48>
 8007556:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800755a:	4294      	cmp	r4, r2
 800755c:	d002      	beq.n	8007564 <std+0x48>
 800755e:	33d0      	adds	r3, #208	; 0xd0
 8007560:	429c      	cmp	r4, r3
 8007562:	d105      	bne.n	8007570 <std+0x54>
 8007564:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f000 baaa 	b.w	8007ac4 <__retarget_lock_init_recursive>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	08007825 	.word	0x08007825
 8007578:	08007847 	.word	0x08007847
 800757c:	0800787f 	.word	0x0800787f
 8007580:	080078a3 	.word	0x080078a3
 8007584:	20000a1c 	.word	0x20000a1c

08007588 <stdio_exit_handler>:
 8007588:	4a02      	ldr	r2, [pc, #8]	; (8007594 <stdio_exit_handler+0xc>)
 800758a:	4903      	ldr	r1, [pc, #12]	; (8007598 <stdio_exit_handler+0x10>)
 800758c:	4803      	ldr	r0, [pc, #12]	; (800759c <stdio_exit_handler+0x14>)
 800758e:	f000 b869 	b.w	8007664 <_fwalk_sglue>
 8007592:	bf00      	nop
 8007594:	20000080 	.word	0x20000080
 8007598:	08008621 	.word	0x08008621
 800759c:	2000008c 	.word	0x2000008c

080075a0 <cleanup_stdio>:
 80075a0:	6841      	ldr	r1, [r0, #4]
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <cleanup_stdio+0x34>)
 80075a4:	4299      	cmp	r1, r3
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	d001      	beq.n	80075b0 <cleanup_stdio+0x10>
 80075ac:	f001 f838 	bl	8008620 <_fflush_r>
 80075b0:	68a1      	ldr	r1, [r4, #8]
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <cleanup_stdio+0x38>)
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d002      	beq.n	80075be <cleanup_stdio+0x1e>
 80075b8:	4620      	mov	r0, r4
 80075ba:	f001 f831 	bl	8008620 <_fflush_r>
 80075be:	68e1      	ldr	r1, [r4, #12]
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <cleanup_stdio+0x3c>)
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d004      	beq.n	80075d0 <cleanup_stdio+0x30>
 80075c6:	4620      	mov	r0, r4
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f001 b828 	b.w	8008620 <_fflush_r>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	20000a1c 	.word	0x20000a1c
 80075d8:	20000a84 	.word	0x20000a84
 80075dc:	20000aec 	.word	0x20000aec

080075e0 <global_stdio_init.part.0>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <global_stdio_init.part.0+0x30>)
 80075e4:	4c0b      	ldr	r4, [pc, #44]	; (8007614 <global_stdio_init.part.0+0x34>)
 80075e6:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <global_stdio_init.part.0+0x38>)
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	4620      	mov	r0, r4
 80075ec:	2200      	movs	r2, #0
 80075ee:	2104      	movs	r1, #4
 80075f0:	f7ff ff94 	bl	800751c <std>
 80075f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075f8:	2201      	movs	r2, #1
 80075fa:	2109      	movs	r1, #9
 80075fc:	f7ff ff8e 	bl	800751c <std>
 8007600:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007604:	2202      	movs	r2, #2
 8007606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760a:	2112      	movs	r1, #18
 800760c:	f7ff bf86 	b.w	800751c <std>
 8007610:	20000b54 	.word	0x20000b54
 8007614:	20000a1c 	.word	0x20000a1c
 8007618:	08007589 	.word	0x08007589

0800761c <__sfp_lock_acquire>:
 800761c:	4801      	ldr	r0, [pc, #4]	; (8007624 <__sfp_lock_acquire+0x8>)
 800761e:	f000 ba52 	b.w	8007ac6 <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	20000b5d 	.word	0x20000b5d

08007628 <__sfp_lock_release>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sfp_lock_release+0x8>)
 800762a:	f000 ba4d 	b.w	8007ac8 <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	20000b5d 	.word	0x20000b5d

08007634 <__sinit>:
 8007634:	b510      	push	{r4, lr}
 8007636:	4604      	mov	r4, r0
 8007638:	f7ff fff0 	bl	800761c <__sfp_lock_acquire>
 800763c:	6a23      	ldr	r3, [r4, #32]
 800763e:	b11b      	cbz	r3, 8007648 <__sinit+0x14>
 8007640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007644:	f7ff bff0 	b.w	8007628 <__sfp_lock_release>
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <__sinit+0x28>)
 800764a:	6223      	str	r3, [r4, #32]
 800764c:	4b04      	ldr	r3, [pc, #16]	; (8007660 <__sinit+0x2c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f5      	bne.n	8007640 <__sinit+0xc>
 8007654:	f7ff ffc4 	bl	80075e0 <global_stdio_init.part.0>
 8007658:	e7f2      	b.n	8007640 <__sinit+0xc>
 800765a:	bf00      	nop
 800765c:	080075a1 	.word	0x080075a1
 8007660:	20000b54 	.word	0x20000b54

08007664 <_fwalk_sglue>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	4607      	mov	r7, r0
 800766a:	4688      	mov	r8, r1
 800766c:	4614      	mov	r4, r2
 800766e:	2600      	movs	r6, #0
 8007670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007674:	f1b9 0901 	subs.w	r9, r9, #1
 8007678:	d505      	bpl.n	8007686 <_fwalk_sglue+0x22>
 800767a:	6824      	ldr	r4, [r4, #0]
 800767c:	2c00      	cmp	r4, #0
 800767e:	d1f7      	bne.n	8007670 <_fwalk_sglue+0xc>
 8007680:	4630      	mov	r0, r6
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d907      	bls.n	800769c <_fwalk_sglue+0x38>
 800768c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007690:	3301      	adds	r3, #1
 8007692:	d003      	beq.n	800769c <_fwalk_sglue+0x38>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	47c0      	blx	r8
 800769a:	4306      	orrs	r6, r0
 800769c:	3568      	adds	r5, #104	; 0x68
 800769e:	e7e9      	b.n	8007674 <_fwalk_sglue+0x10>

080076a0 <iprintf>:
 80076a0:	b40f      	push	{r0, r1, r2, r3}
 80076a2:	b507      	push	{r0, r1, r2, lr}
 80076a4:	4906      	ldr	r1, [pc, #24]	; (80076c0 <iprintf+0x20>)
 80076a6:	ab04      	add	r3, sp, #16
 80076a8:	6808      	ldr	r0, [r1, #0]
 80076aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ae:	6881      	ldr	r1, [r0, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f000 fc85 	bl	8007fc0 <_vfiprintf_r>
 80076b6:	b003      	add	sp, #12
 80076b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076bc:	b004      	add	sp, #16
 80076be:	4770      	bx	lr
 80076c0:	200000d8 	.word	0x200000d8

080076c4 <_puts_r>:
 80076c4:	6a03      	ldr	r3, [r0, #32]
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	6884      	ldr	r4, [r0, #8]
 80076ca:	4605      	mov	r5, r0
 80076cc:	460e      	mov	r6, r1
 80076ce:	b90b      	cbnz	r3, 80076d4 <_puts_r+0x10>
 80076d0:	f7ff ffb0 	bl	8007634 <__sinit>
 80076d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d6:	07db      	lsls	r3, r3, #31
 80076d8:	d405      	bmi.n	80076e6 <_puts_r+0x22>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	0598      	lsls	r0, r3, #22
 80076de:	d402      	bmi.n	80076e6 <_puts_r+0x22>
 80076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e2:	f000 f9f0 	bl	8007ac6 <__retarget_lock_acquire_recursive>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	0719      	lsls	r1, r3, #28
 80076ea:	d513      	bpl.n	8007714 <_puts_r+0x50>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	b18b      	cbz	r3, 8007714 <_puts_r+0x50>
 80076f0:	3e01      	subs	r6, #1
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076f8:	3b01      	subs	r3, #1
 80076fa:	60a3      	str	r3, [r4, #8]
 80076fc:	b9e9      	cbnz	r1, 800773a <_puts_r+0x76>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da2e      	bge.n	8007760 <_puts_r+0x9c>
 8007702:	4622      	mov	r2, r4
 8007704:	210a      	movs	r1, #10
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f8cf 	bl	80078aa <__swbuf_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d007      	beq.n	8007720 <_puts_r+0x5c>
 8007710:	250a      	movs	r5, #10
 8007712:	e007      	b.n	8007724 <_puts_r+0x60>
 8007714:	4621      	mov	r1, r4
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f904 	bl	8007924 <__swsetup_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	d0e7      	beq.n	80076f0 <_puts_r+0x2c>
 8007720:	f04f 35ff 	mov.w	r5, #4294967295
 8007724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d405      	bmi.n	8007736 <_puts_r+0x72>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	059b      	lsls	r3, r3, #22
 800772e:	d402      	bmi.n	8007736 <_puts_r+0x72>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f000 f9c9 	bl	8007ac8 <__retarget_lock_release_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	bd70      	pop	{r4, r5, r6, pc}
 800773a:	2b00      	cmp	r3, #0
 800773c:	da04      	bge.n	8007748 <_puts_r+0x84>
 800773e:	69a2      	ldr	r2, [r4, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	dc06      	bgt.n	8007752 <_puts_r+0x8e>
 8007744:	290a      	cmp	r1, #10
 8007746:	d004      	beq.n	8007752 <_puts_r+0x8e>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	7019      	strb	r1, [r3, #0]
 8007750:	e7cf      	b.n	80076f2 <_puts_r+0x2e>
 8007752:	4622      	mov	r2, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f8a8 	bl	80078aa <__swbuf_r>
 800775a:	3001      	adds	r0, #1
 800775c:	d1c9      	bne.n	80076f2 <_puts_r+0x2e>
 800775e:	e7df      	b.n	8007720 <_puts_r+0x5c>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	250a      	movs	r5, #10
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	701d      	strb	r5, [r3, #0]
 800776a:	e7db      	b.n	8007724 <_puts_r+0x60>

0800776c <puts>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <puts+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f7ff bfa7 	b.w	80076c4 <_puts_r>
 8007776:	bf00      	nop
 8007778:	200000d8 	.word	0x200000d8

0800777c <sniprintf>:
 800777c:	b40c      	push	{r2, r3}
 800777e:	b530      	push	{r4, r5, lr}
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <sniprintf+0x64>)
 8007782:	1e0c      	subs	r4, r1, #0
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	b09d      	sub	sp, #116	; 0x74
 8007788:	da08      	bge.n	800779c <sniprintf+0x20>
 800778a:	238b      	movs	r3, #139	; 0x8b
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	f04f 30ff 	mov.w	r0, #4294967295
 8007792:	b01d      	add	sp, #116	; 0x74
 8007794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007798:	b002      	add	sp, #8
 800779a:	4770      	bx	lr
 800779c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80077a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077a4:	bf14      	ite	ne
 80077a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077aa:	4623      	moveq	r3, r4
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077b4:	9002      	str	r0, [sp, #8]
 80077b6:	9006      	str	r0, [sp, #24]
 80077b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80077be:	ab21      	add	r3, sp, #132	; 0x84
 80077c0:	a902      	add	r1, sp, #8
 80077c2:	4628      	mov	r0, r5
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	f000 fad3 	bl	8007d70 <_svfiprintf_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	bfbc      	itt	lt
 80077ce:	238b      	movlt	r3, #139	; 0x8b
 80077d0:	602b      	strlt	r3, [r5, #0]
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d0dd      	beq.n	8007792 <sniprintf+0x16>
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e7d9      	b.n	8007792 <sniprintf+0x16>
 80077de:	bf00      	nop
 80077e0:	200000d8 	.word	0x200000d8

080077e4 <siprintf>:
 80077e4:	b40e      	push	{r1, r2, r3}
 80077e6:	b500      	push	{lr}
 80077e8:	b09c      	sub	sp, #112	; 0x70
 80077ea:	ab1d      	add	r3, sp, #116	; 0x74
 80077ec:	9002      	str	r0, [sp, #8]
 80077ee:	9006      	str	r0, [sp, #24]
 80077f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077f4:	4809      	ldr	r0, [pc, #36]	; (800781c <siprintf+0x38>)
 80077f6:	9107      	str	r1, [sp, #28]
 80077f8:	9104      	str	r1, [sp, #16]
 80077fa:	4909      	ldr	r1, [pc, #36]	; (8007820 <siprintf+0x3c>)
 80077fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	a902      	add	r1, sp, #8
 8007808:	f000 fab2 	bl	8007d70 <_svfiprintf_r>
 800780c:	9b02      	ldr	r3, [sp, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	b01c      	add	sp, #112	; 0x70
 8007814:	f85d eb04 	ldr.w	lr, [sp], #4
 8007818:	b003      	add	sp, #12
 800781a:	4770      	bx	lr
 800781c:	200000d8 	.word	0x200000d8
 8007820:	ffff0208 	.word	0xffff0208

08007824 <__sread>:
 8007824:	b510      	push	{r4, lr}
 8007826:	460c      	mov	r4, r1
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	f000 f8fc 	bl	8007a28 <_read_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	bfab      	itete	ge
 8007834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007836:	89a3      	ldrhlt	r3, [r4, #12]
 8007838:	181b      	addge	r3, r3, r0
 800783a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800783e:	bfac      	ite	ge
 8007840:	6563      	strge	r3, [r4, #84]	; 0x54
 8007842:	81a3      	strhlt	r3, [r4, #12]
 8007844:	bd10      	pop	{r4, pc}

08007846 <__swrite>:
 8007846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784a:	461f      	mov	r7, r3
 800784c:	898b      	ldrh	r3, [r1, #12]
 800784e:	05db      	lsls	r3, r3, #23
 8007850:	4605      	mov	r5, r0
 8007852:	460c      	mov	r4, r1
 8007854:	4616      	mov	r6, r2
 8007856:	d505      	bpl.n	8007864 <__swrite+0x1e>
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	2302      	movs	r3, #2
 800785e:	2200      	movs	r2, #0
 8007860:	f000 f8d0 	bl	8007a04 <_lseek_r>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800786a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	4628      	mov	r0, r5
 8007876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	f000 b8e7 	b.w	8007a4c <_write_r>

0800787e <__sseek>:
 800787e:	b510      	push	{r4, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007886:	f000 f8bd 	bl	8007a04 <_lseek_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	bf15      	itete	ne
 8007890:	6560      	strne	r0, [r4, #84]	; 0x54
 8007892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strheq	r3, [r4, #12]
 800789c:	bf18      	it	ne
 800789e:	81a3      	strhne	r3, [r4, #12]
 80078a0:	bd10      	pop	{r4, pc}

080078a2 <__sclose>:
 80078a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a6:	f000 b89d 	b.w	80079e4 <_close_r>

080078aa <__swbuf_r>:
 80078aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ac:	460e      	mov	r6, r1
 80078ae:	4614      	mov	r4, r2
 80078b0:	4605      	mov	r5, r0
 80078b2:	b118      	cbz	r0, 80078bc <__swbuf_r+0x12>
 80078b4:	6a03      	ldr	r3, [r0, #32]
 80078b6:	b90b      	cbnz	r3, 80078bc <__swbuf_r+0x12>
 80078b8:	f7ff febc 	bl	8007634 <__sinit>
 80078bc:	69a3      	ldr	r3, [r4, #24]
 80078be:	60a3      	str	r3, [r4, #8]
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	071a      	lsls	r2, r3, #28
 80078c4:	d525      	bpl.n	8007912 <__swbuf_r+0x68>
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	b31b      	cbz	r3, 8007912 <__swbuf_r+0x68>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	6922      	ldr	r2, [r4, #16]
 80078ce:	1a98      	subs	r0, r3, r2
 80078d0:	6963      	ldr	r3, [r4, #20]
 80078d2:	b2f6      	uxtb	r6, r6
 80078d4:	4283      	cmp	r3, r0
 80078d6:	4637      	mov	r7, r6
 80078d8:	dc04      	bgt.n	80078e4 <__swbuf_r+0x3a>
 80078da:	4621      	mov	r1, r4
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 fe9f 	bl	8008620 <_fflush_r>
 80078e2:	b9e0      	cbnz	r0, 800791e <__swbuf_r+0x74>
 80078e4:	68a3      	ldr	r3, [r4, #8]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	701e      	strb	r6, [r3, #0]
 80078f2:	6962      	ldr	r2, [r4, #20]
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d004      	beq.n	8007904 <__swbuf_r+0x5a>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	07db      	lsls	r3, r3, #31
 80078fe:	d506      	bpl.n	800790e <__swbuf_r+0x64>
 8007900:	2e0a      	cmp	r6, #10
 8007902:	d104      	bne.n	800790e <__swbuf_r+0x64>
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f000 fe8a 	bl	8008620 <_fflush_r>
 800790c:	b938      	cbnz	r0, 800791e <__swbuf_r+0x74>
 800790e:	4638      	mov	r0, r7
 8007910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f000 f805 	bl	8007924 <__swsetup_r>
 800791a:	2800      	cmp	r0, #0
 800791c:	d0d5      	beq.n	80078ca <__swbuf_r+0x20>
 800791e:	f04f 37ff 	mov.w	r7, #4294967295
 8007922:	e7f4      	b.n	800790e <__swbuf_r+0x64>

08007924 <__swsetup_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <__swsetup_r+0xac>)
 8007928:	4605      	mov	r5, r0
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	460c      	mov	r4, r1
 800792e:	b118      	cbz	r0, 8007938 <__swsetup_r+0x14>
 8007930:	6a03      	ldr	r3, [r0, #32]
 8007932:	b90b      	cbnz	r3, 8007938 <__swsetup_r+0x14>
 8007934:	f7ff fe7e 	bl	8007634 <__sinit>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800793e:	0718      	lsls	r0, r3, #28
 8007940:	d422      	bmi.n	8007988 <__swsetup_r+0x64>
 8007942:	06d9      	lsls	r1, r3, #27
 8007944:	d407      	bmi.n	8007956 <__swsetup_r+0x32>
 8007946:	2309      	movs	r3, #9
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e034      	b.n	80079c0 <__swsetup_r+0x9c>
 8007956:	0758      	lsls	r0, r3, #29
 8007958:	d512      	bpl.n	8007980 <__swsetup_r+0x5c>
 800795a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800795c:	b141      	cbz	r1, 8007970 <__swsetup_r+0x4c>
 800795e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007962:	4299      	cmp	r1, r3
 8007964:	d002      	beq.n	800796c <__swsetup_r+0x48>
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f8b0 	bl	8007acc <_free_r>
 800796c:	2300      	movs	r3, #0
 800796e:	6363      	str	r3, [r4, #52]	; 0x34
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	2300      	movs	r3, #0
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f043 0308 	orr.w	r3, r3, #8
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b94b      	cbnz	r3, 80079a0 <__swsetup_r+0x7c>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007996:	d003      	beq.n	80079a0 <__swsetup_r+0x7c>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 fe8e 	bl	80086bc <__smakebuf_r>
 80079a0:	89a0      	ldrh	r0, [r4, #12]
 80079a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a6:	f010 0301 	ands.w	r3, r0, #1
 80079aa:	d00a      	beq.n	80079c2 <__swsetup_r+0x9e>
 80079ac:	2300      	movs	r3, #0
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	425b      	negs	r3, r3
 80079b4:	61a3      	str	r3, [r4, #24]
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	b943      	cbnz	r3, 80079cc <__swsetup_r+0xa8>
 80079ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079be:	d1c4      	bne.n	800794a <__swsetup_r+0x26>
 80079c0:	bd38      	pop	{r3, r4, r5, pc}
 80079c2:	0781      	lsls	r1, r0, #30
 80079c4:	bf58      	it	pl
 80079c6:	6963      	ldrpl	r3, [r4, #20]
 80079c8:	60a3      	str	r3, [r4, #8]
 80079ca:	e7f4      	b.n	80079b6 <__swsetup_r+0x92>
 80079cc:	2000      	movs	r0, #0
 80079ce:	e7f7      	b.n	80079c0 <__swsetup_r+0x9c>
 80079d0:	200000d8 	.word	0x200000d8

080079d4 <memset>:
 80079d4:	4402      	add	r2, r0
 80079d6:	4603      	mov	r3, r0
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <memset+0xa>
 80079dc:	4770      	bx	lr
 80079de:	f803 1b01 	strb.w	r1, [r3], #1
 80079e2:	e7f9      	b.n	80079d8 <memset+0x4>

080079e4 <_close_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	; (8007a00 <_close_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7f9 ffb5 	bl	800195e <_close>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_close_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_close_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000b58 	.word	0x20000b58

08007a04 <_lseek_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_lseek_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7f9 ffca 	bl	80019ac <_lseek>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_lseek_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_lseek_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000b58 	.word	0x20000b58

08007a28 <_read_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_read_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7f9 ff74 	bl	8001924 <_read>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_read_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_read_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000b58 	.word	0x20000b58

08007a4c <_write_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_write_r+0x20>)
 8007a50:	4604      	mov	r4, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f7f8 fec4 	bl	80007e8 <_write>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_write_r+0x1e>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_write_r+0x1e>
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20000b58 	.word	0x20000b58

08007a70 <__errno>:
 8007a70:	4b01      	ldr	r3, [pc, #4]	; (8007a78 <__errno+0x8>)
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	200000d8 	.word	0x200000d8

08007a7c <__libc_init_array>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4d0d      	ldr	r5, [pc, #52]	; (8007ab4 <__libc_init_array+0x38>)
 8007a80:	4c0d      	ldr	r4, [pc, #52]	; (8007ab8 <__libc_init_array+0x3c>)
 8007a82:	1b64      	subs	r4, r4, r5
 8007a84:	10a4      	asrs	r4, r4, #2
 8007a86:	2600      	movs	r6, #0
 8007a88:	42a6      	cmp	r6, r4
 8007a8a:	d109      	bne.n	8007aa0 <__libc_init_array+0x24>
 8007a8c:	4d0b      	ldr	r5, [pc, #44]	; (8007abc <__libc_init_array+0x40>)
 8007a8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ac0 <__libc_init_array+0x44>)
 8007a90:	f000 fee2 	bl	8008858 <_init>
 8007a94:	1b64      	subs	r4, r4, r5
 8007a96:	10a4      	asrs	r4, r4, #2
 8007a98:	2600      	movs	r6, #0
 8007a9a:	42a6      	cmp	r6, r4
 8007a9c:	d105      	bne.n	8007aaa <__libc_init_array+0x2e>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa4:	4798      	blx	r3
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7ee      	b.n	8007a88 <__libc_init_array+0xc>
 8007aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aae:	4798      	blx	r3
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	e7f2      	b.n	8007a9a <__libc_init_array+0x1e>
 8007ab4:	08008ba0 	.word	0x08008ba0
 8007ab8:	08008ba0 	.word	0x08008ba0
 8007abc:	08008ba0 	.word	0x08008ba0
 8007ac0:	08008ba4 	.word	0x08008ba4

08007ac4 <__retarget_lock_init_recursive>:
 8007ac4:	4770      	bx	lr

08007ac6 <__retarget_lock_acquire_recursive>:
 8007ac6:	4770      	bx	lr

08007ac8 <__retarget_lock_release_recursive>:
 8007ac8:	4770      	bx	lr
	...

08007acc <_free_r>:
 8007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d044      	beq.n	8007b5c <_free_r+0x90>
 8007ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad6:	9001      	str	r0, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f1a1 0404 	sub.w	r4, r1, #4
 8007ade:	bfb8      	it	lt
 8007ae0:	18e4      	addlt	r4, r4, r3
 8007ae2:	f000 f8df 	bl	8007ca4 <__malloc_lock>
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <_free_r+0x94>)
 8007ae8:	9801      	ldr	r0, [sp, #4]
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x30>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	b003      	add	sp, #12
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	f000 b8da 	b.w	8007cb0 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x46>
 8007b00:	6825      	ldr	r5, [r4, #0]
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1949      	addeq	r1, r1, r5
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x22>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x50>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x46>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x70>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x26>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	440c      	add	r4, r1
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x26>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x78>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x26>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x26>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	20000b60 	.word	0x20000b60

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0e      	ldr	r6, [pc, #56]	; (8007ba0 <sbrk_aligned+0x3c>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fe1c 	bl	80087ac <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fe17 	bl	80087ac <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <sbrk_aligned+0x34>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d007      	beq.n	8007b9c <sbrk_aligned+0x38>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fe0c 	bl	80087ac <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d101      	bne.n	8007b9c <sbrk_aligned+0x38>
 8007b98:	f04f 34ff 	mov.w	r4, #4294967295
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	20000b64 	.word	0x20000b64

08007ba4 <_malloc_r>:
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	1ccd      	adds	r5, r1, #3
 8007baa:	f025 0503 	bic.w	r5, r5, #3
 8007bae:	3508      	adds	r5, #8
 8007bb0:	2d0c      	cmp	r5, #12
 8007bb2:	bf38      	it	cc
 8007bb4:	250c      	movcc	r5, #12
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	4607      	mov	r7, r0
 8007bba:	db01      	blt.n	8007bc0 <_malloc_r+0x1c>
 8007bbc:	42a9      	cmp	r1, r5
 8007bbe:	d905      	bls.n	8007bcc <_malloc_r+0x28>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ca0 <_malloc_r+0xfc>
 8007bd0:	f000 f868 	bl	8007ca4 <__malloc_lock>
 8007bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd8:	461c      	mov	r4, r3
 8007bda:	bb5c      	cbnz	r4, 8007c34 <_malloc_r+0x90>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ffc0 	bl	8007b64 <sbrk_aligned>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	4604      	mov	r4, r0
 8007be8:	d155      	bne.n	8007c96 <_malloc_r+0xf2>
 8007bea:	f8d8 4000 	ldr.w	r4, [r8]
 8007bee:	4626      	mov	r6, r4
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	d145      	bne.n	8007c80 <_malloc_r+0xdc>
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	d048      	beq.n	8007c8a <_malloc_r+0xe6>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	eb04 0903 	add.w	r9, r4, r3
 8007c02:	f000 fdd3 	bl	80087ac <_sbrk_r>
 8007c06:	4581      	cmp	r9, r0
 8007c08:	d13f      	bne.n	8007c8a <_malloc_r+0xe6>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1a6d      	subs	r5, r5, r1
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff ffa7 	bl	8007b64 <sbrk_aligned>
 8007c16:	3001      	adds	r0, #1
 8007c18:	d037      	beq.n	8007c8a <_malloc_r+0xe6>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	442b      	add	r3, r5
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	f8d8 3000 	ldr.w	r3, [r8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d038      	beq.n	8007c9a <_malloc_r+0xf6>
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	42a2      	cmp	r2, r4
 8007c2c:	d12b      	bne.n	8007c86 <_malloc_r+0xe2>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	e00f      	b.n	8007c54 <_malloc_r+0xb0>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	1b52      	subs	r2, r2, r5
 8007c38:	d41f      	bmi.n	8007c7a <_malloc_r+0xd6>
 8007c3a:	2a0b      	cmp	r2, #11
 8007c3c:	d917      	bls.n	8007c6e <_malloc_r+0xca>
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	6025      	str	r5, [r4, #0]
 8007c44:	bf18      	it	ne
 8007c46:	6059      	strne	r1, [r3, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	bf08      	it	eq
 8007c4c:	f8c8 1000 	streq.w	r1, [r8]
 8007c50:	5162      	str	r2, [r4, r5]
 8007c52:	604b      	str	r3, [r1, #4]
 8007c54:	4638      	mov	r0, r7
 8007c56:	f104 060b 	add.w	r6, r4, #11
 8007c5a:	f000 f829 	bl	8007cb0 <__malloc_unlock>
 8007c5e:	f026 0607 	bic.w	r6, r6, #7
 8007c62:	1d23      	adds	r3, r4, #4
 8007c64:	1af2      	subs	r2, r6, r3
 8007c66:	d0ae      	beq.n	8007bc6 <_malloc_r+0x22>
 8007c68:	1b9b      	subs	r3, r3, r6
 8007c6a:	50a3      	str	r3, [r4, r2]
 8007c6c:	e7ab      	b.n	8007bc6 <_malloc_r+0x22>
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	6862      	ldr	r2, [r4, #4]
 8007c72:	d1dd      	bne.n	8007c30 <_malloc_r+0x8c>
 8007c74:	f8c8 2000 	str.w	r2, [r8]
 8007c78:	e7ec      	b.n	8007c54 <_malloc_r+0xb0>
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	6864      	ldr	r4, [r4, #4]
 8007c7e:	e7ac      	b.n	8007bda <_malloc_r+0x36>
 8007c80:	4634      	mov	r4, r6
 8007c82:	6876      	ldr	r6, [r6, #4]
 8007c84:	e7b4      	b.n	8007bf0 <_malloc_r+0x4c>
 8007c86:	4613      	mov	r3, r2
 8007c88:	e7cc      	b.n	8007c24 <_malloc_r+0x80>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f000 f80e 	bl	8007cb0 <__malloc_unlock>
 8007c94:	e797      	b.n	8007bc6 <_malloc_r+0x22>
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	e7dc      	b.n	8007c54 <_malloc_r+0xb0>
 8007c9a:	605b      	str	r3, [r3, #4]
 8007c9c:	deff      	udf	#255	; 0xff
 8007c9e:	bf00      	nop
 8007ca0:	20000b60 	.word	0x20000b60

08007ca4 <__malloc_lock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_lock+0x8>)
 8007ca6:	f7ff bf0e 	b.w	8007ac6 <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	20000b5c 	.word	0x20000b5c

08007cb0 <__malloc_unlock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_unlock+0x8>)
 8007cb2:	f7ff bf09 	b.w	8007ac8 <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	20000b5c 	.word	0x20000b5c

08007cbc <__ssputs_r>:
 8007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	688e      	ldr	r6, [r1, #8]
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	680b      	ldr	r3, [r1, #0]
 8007cc8:	4682      	mov	sl, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4690      	mov	r8, r2
 8007cce:	d82c      	bhi.n	8007d2a <__ssputs_r+0x6e>
 8007cd0:	898a      	ldrh	r2, [r1, #12]
 8007cd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd6:	d026      	beq.n	8007d26 <__ssputs_r+0x6a>
 8007cd8:	6965      	ldr	r5, [r4, #20]
 8007cda:	6909      	ldr	r1, [r1, #16]
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	eba3 0901 	sub.w	r9, r3, r1
 8007ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce8:	1c7b      	adds	r3, r7, #1
 8007cea:	444b      	add	r3, r9
 8007cec:	106d      	asrs	r5, r5, #1
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	bf38      	it	cc
 8007cf2:	461d      	movcc	r5, r3
 8007cf4:	0553      	lsls	r3, r2, #21
 8007cf6:	d527      	bpl.n	8007d48 <__ssputs_r+0x8c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7ff ff53 	bl	8007ba4 <_malloc_r>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	b360      	cbz	r0, 8007d5c <__ssputs_r+0xa0>
 8007d02:	6921      	ldr	r1, [r4, #16]
 8007d04:	464a      	mov	r2, r9
 8007d06:	f000 fd61 	bl	80087cc <memcpy>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	6126      	str	r6, [r4, #16]
 8007d18:	6165      	str	r5, [r4, #20]
 8007d1a:	444e      	add	r6, r9
 8007d1c:	eba5 0509 	sub.w	r5, r5, r9
 8007d20:	6026      	str	r6, [r4, #0]
 8007d22:	60a5      	str	r5, [r4, #8]
 8007d24:	463e      	mov	r6, r7
 8007d26:	42be      	cmp	r6, r7
 8007d28:	d900      	bls.n	8007d2c <__ssputs_r+0x70>
 8007d2a:	463e      	mov	r6, r7
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4641      	mov	r1, r8
 8007d32:	f000 fcff 	bl	8008734 <memmove>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	1b9b      	subs	r3, r3, r6
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	4433      	add	r3, r6
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2000      	movs	r0, #0
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	462a      	mov	r2, r5
 8007d4a:	f000 fd4d 	bl	80087e8 <_realloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d1e0      	bne.n	8007d16 <__ssputs_r+0x5a>
 8007d54:	6921      	ldr	r1, [r4, #16]
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7ff feb8 	bl	8007acc <_free_r>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	f8ca 3000 	str.w	r3, [sl]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	e7e9      	b.n	8007d44 <__ssputs_r+0x88>

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	; 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d50e      	bpl.n	8007da2 <_svfiprintf_r+0x32>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b963      	cbnz	r3, 8007da2 <_svfiprintf_r+0x32>
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	f7ff ff0b 	bl	8007ba4 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b920      	cbnz	r0, 8007d9e <_svfiprintf_r+0x2e>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e0d0      	b.n	8007f40 <_svfiprintf_r+0x1d0>
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	616b      	str	r3, [r5, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	2320      	movs	r3, #32
 8007da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db0:	2330      	movs	r3, #48	; 0x30
 8007db2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f58 <_svfiprintf_r+0x1e8>
 8007db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dba:	f04f 0901 	mov.w	r9, #1
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	b10a      	cbz	r2, 8007dcc <_svfiprintf_r+0x5c>
 8007dc8:	2a25      	cmp	r2, #37	; 0x25
 8007dca:	d1f9      	bne.n	8007dc0 <_svfiprintf_r+0x50>
 8007dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd0:	d00b      	beq.n	8007dea <_svfiprintf_r+0x7a>
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ff6f 	bl	8007cbc <__ssputs_r>
 8007dde:	3001      	adds	r0, #1
 8007de0:	f000 80a9 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de6:	445a      	add	r2, fp
 8007de8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a1 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfe:	f10a 0a01 	add.w	sl, sl, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	4850      	ldr	r0, [pc, #320]	; (8007f58 <_svfiprintf_r+0x1e8>)
 8007e16:	f7f8 f9f3 	bl	8000200 <memchr>
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	b9d8      	cbnz	r0, 8007e56 <_svfiprintf_r+0xe6>
 8007e1e:	06d0      	lsls	r0, r2, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2320      	movmi	r3, #32
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e28:	0711      	lsls	r1, r2, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	232b      	movmi	r3, #43	; 0x2b
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	f89a 3000 	ldrb.w	r3, [sl]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d015      	beq.n	8007e66 <_svfiprintf_r+0xf6>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4621      	mov	r1, r4
 8007e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4a:	3b30      	subs	r3, #48	; 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d94d      	bls.n	8007eec <_svfiprintf_r+0x17c>
 8007e50:	b1b0      	cbz	r0, 8007e80 <_svfiprintf_r+0x110>
 8007e52:	9207      	str	r2, [sp, #28]
 8007e54:	e014      	b.n	8007e80 <_svfiprintf_r+0x110>
 8007e56:	eba0 0308 	sub.w	r3, r0, r8
 8007e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	46a2      	mov	sl, r4
 8007e64:	e7d2      	b.n	8007e0c <_svfiprintf_r+0x9c>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfbb      	ittet	lt
 8007e72:	425b      	neglt	r3, r3
 8007e74:	f042 0202 	orrlt.w	r2, r2, #2
 8007e78:	9307      	strge	r3, [sp, #28]
 8007e7a:	9307      	strlt	r3, [sp, #28]
 8007e7c:	bfb8      	it	lt
 8007e7e:	9204      	strlt	r2, [sp, #16]
 8007e80:	7823      	ldrb	r3, [r4, #0]
 8007e82:	2b2e      	cmp	r3, #46	; 0x2e
 8007e84:	d10c      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e86:	7863      	ldrb	r3, [r4, #1]
 8007e88:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8a:	d134      	bne.n	8007ef6 <_svfiprintf_r+0x186>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bfb8      	it	lt
 8007e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f68 <_svfiprintf_r+0x1f8>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 f9a9 	bl	8000200 <memchr>
 8007eae:	b138      	cbz	r0, 8007ec0 <_svfiprintf_r+0x150>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	4082      	lsls	r2, r0
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4825      	ldr	r0, [pc, #148]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f998 	bl	8000200 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d038      	beq.n	8007f46 <_svfiprintf_r+0x1d6>
 8007ed4:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <_svfiprintf_r+0x1f0>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x1b0>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	4433      	add	r3, r6
 8007ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eea:	e768      	b.n	8007dbe <_svfiprintf_r+0x4e>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a6      	b.n	8007e44 <_svfiprintf_r+0xd4>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	; 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c6      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c4      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_svfiprintf_r+0x192>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f3af 8000 	nop.w
 8007f30:	1c42      	adds	r2, r0, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	d1d6      	bne.n	8007ee4 <_svfiprintf_r+0x174>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af2d 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f4e:	a904      	add	r1, sp, #16
 8007f50:	4638      	mov	r0, r7
 8007f52:	f000 f9bd 	bl	80082d0 <_printf_i>
 8007f56:	e7eb      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f58:	08008b64 	.word	0x08008b64
 8007f5c:	08008b6e 	.word	0x08008b6e
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007cbd 	.word	0x08007cbd
 8007f68:	08008b6a 	.word	0x08008b6a

08007f6c <__sfputc_r>:
 8007f6c:	6893      	ldr	r3, [r2, #8]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	b410      	push	{r4}
 8007f74:	6093      	str	r3, [r2, #8]
 8007f76:	da08      	bge.n	8007f8a <__sfputc_r+0x1e>
 8007f78:	6994      	ldr	r4, [r2, #24]
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	db01      	blt.n	8007f82 <__sfputc_r+0x16>
 8007f7e:	290a      	cmp	r1, #10
 8007f80:	d103      	bne.n	8007f8a <__sfputc_r+0x1e>
 8007f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f86:	f7ff bc90 	b.w	80078aa <__swbuf_r>
 8007f8a:	6813      	ldr	r3, [r2, #0]
 8007f8c:	1c58      	adds	r0, r3, #1
 8007f8e:	6010      	str	r0, [r2, #0]
 8007f90:	7019      	strb	r1, [r3, #0]
 8007f92:	4608      	mov	r0, r1
 8007f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <__sfputs_r>:
 8007f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	18d5      	adds	r5, r2, r3
 8007fa4:	42ac      	cmp	r4, r5
 8007fa6:	d101      	bne.n	8007fac <__sfputs_r+0x12>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e007      	b.n	8007fbc <__sfputs_r+0x22>
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	463a      	mov	r2, r7
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffda 	bl	8007f6c <__sfputc_r>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d1f3      	bne.n	8007fa4 <__sfputs_r+0xa>
 8007fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fc0 <_vfiprintf_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	460d      	mov	r5, r1
 8007fc6:	b09d      	sub	sp, #116	; 0x74
 8007fc8:	4614      	mov	r4, r2
 8007fca:	4698      	mov	r8, r3
 8007fcc:	4606      	mov	r6, r0
 8007fce:	b118      	cbz	r0, 8007fd8 <_vfiprintf_r+0x18>
 8007fd0:	6a03      	ldr	r3, [r0, #32]
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <_vfiprintf_r+0x18>
 8007fd4:	f7ff fb2e 	bl	8007634 <__sinit>
 8007fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fda:	07d9      	lsls	r1, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	059a      	lsls	r2, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fe6:	f7ff fd6e 	bl	8007ac6 <__retarget_lock_acquire_recursive>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	071b      	lsls	r3, r3, #28
 8007fee:	d501      	bpl.n	8007ff4 <_vfiprintf_r+0x34>
 8007ff0:	692b      	ldr	r3, [r5, #16]
 8007ff2:	b99b      	cbnz	r3, 800801c <_vfiprintf_r+0x5c>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7ff fc94 	bl	8007924 <__swsetup_r>
 8007ffc:	b170      	cbz	r0, 800801c <_vfiprintf_r+0x5c>
 8007ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008000:	07dc      	lsls	r4, r3, #31
 8008002:	d504      	bpl.n	800800e <_vfiprintf_r+0x4e>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b01d      	add	sp, #116	; 0x74
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4f7      	bmi.n	8008004 <_vfiprintf_r+0x44>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f7ff fd57 	bl	8007ac8 <__retarget_lock_release_recursive>
 800801a:	e7f3      	b.n	8008004 <_vfiprintf_r+0x44>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008026:	f8cd 800c 	str.w	r8, [sp, #12]
 800802a:	2330      	movs	r3, #48	; 0x30
 800802c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80081e0 <_vfiprintf_r+0x220>
 8008030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008034:	f04f 0901 	mov.w	r9, #1
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0x86>
 8008042:	2a25      	cmp	r2, #37	; 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x7a>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xa4>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffa1 	bl	8007f9a <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80a9 	beq.w	80081b0 <_vfiprintf_r+0x1f0>
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a1 	beq.w	80081b0 <_vfiprintf_r+0x1f0>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008084:	931a      	str	r3, [sp, #104]	; 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4854      	ldr	r0, [pc, #336]	; (80081e0 <_vfiprintf_r+0x220>)
 8008090:	f7f8 f8b6 	bl	8000200 <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x110>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	; 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	; 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x120>
 80080b4:	9a07      	ldr	r2, [sp, #28]
 80080b6:	4654      	mov	r4, sl
 80080b8:	2000      	movs	r0, #0
 80080ba:	f04f 0c0a 	mov.w	ip, #10
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94d      	bls.n	8008166 <_vfiprintf_r+0x1a6>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x13a>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x13a>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	46a2      	mov	sl, r4
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xc6>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10c      	bne.n	800811a <_vfiprintf_r+0x15a>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	; 0x2a
 8008104:	d134      	bne.n	8008170 <_vfiprintf_r+0x1b0>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	9203      	str	r2, [sp, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	f04f 33ff 	movlt.w	r3, #4294967295
 8008116:	3402      	adds	r4, #2
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80081f0 <_vfiprintf_r+0x230>
 800811e:	7821      	ldrb	r1, [r4, #0]
 8008120:	2203      	movs	r2, #3
 8008122:	4650      	mov	r0, sl
 8008124:	f7f8 f86c 	bl	8000200 <memchr>
 8008128:	b138      	cbz	r0, 800813a <_vfiprintf_r+0x17a>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	eba0 000a 	sub.w	r0, r0, sl
 8008130:	2240      	movs	r2, #64	; 0x40
 8008132:	4082      	lsls	r2, r0
 8008134:	4313      	orrs	r3, r2
 8008136:	3401      	adds	r4, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813e:	4829      	ldr	r0, [pc, #164]	; (80081e4 <_vfiprintf_r+0x224>)
 8008140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008144:	2206      	movs	r2, #6
 8008146:	f7f8 f85b 	bl	8000200 <memchr>
 800814a:	2800      	cmp	r0, #0
 800814c:	d03f      	beq.n	80081ce <_vfiprintf_r+0x20e>
 800814e:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <_vfiprintf_r+0x228>)
 8008150:	bb1b      	cbnz	r3, 800819a <_vfiprintf_r+0x1da>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	3308      	adds	r3, #8
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	443b      	add	r3, r7
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	e768      	b.n	8008038 <_vfiprintf_r+0x78>
 8008166:	fb0c 3202 	mla	r2, ip, r2, r3
 800816a:	460c      	mov	r4, r1
 800816c:	2001      	movs	r0, #1
 800816e:	e7a6      	b.n	80080be <_vfiprintf_r+0xfe>
 8008170:	2300      	movs	r3, #0
 8008172:	3401      	adds	r4, #1
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	4619      	mov	r1, r3
 8008178:	f04f 0c0a 	mov.w	ip, #10
 800817c:	4620      	mov	r0, r4
 800817e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008182:	3a30      	subs	r2, #48	; 0x30
 8008184:	2a09      	cmp	r2, #9
 8008186:	d903      	bls.n	8008190 <_vfiprintf_r+0x1d0>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0c6      	beq.n	800811a <_vfiprintf_r+0x15a>
 800818c:	9105      	str	r1, [sp, #20]
 800818e:	e7c4      	b.n	800811a <_vfiprintf_r+0x15a>
 8008190:	fb0c 2101 	mla	r1, ip, r1, r2
 8008194:	4604      	mov	r4, r0
 8008196:	2301      	movs	r3, #1
 8008198:	e7f0      	b.n	800817c <_vfiprintf_r+0x1bc>
 800819a:	ab03      	add	r3, sp, #12
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	462a      	mov	r2, r5
 80081a0:	4b12      	ldr	r3, [pc, #72]	; (80081ec <_vfiprintf_r+0x22c>)
 80081a2:	a904      	add	r1, sp, #16
 80081a4:	4630      	mov	r0, r6
 80081a6:	f3af 8000 	nop.w
 80081aa:	4607      	mov	r7, r0
 80081ac:	1c78      	adds	r0, r7, #1
 80081ae:	d1d6      	bne.n	800815e <_vfiprintf_r+0x19e>
 80081b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d405      	bmi.n	80081c2 <_vfiprintf_r+0x202>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_vfiprintf_r+0x202>
 80081bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081be:	f7ff fc83 	bl	8007ac8 <__retarget_lock_release_recursive>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	065b      	lsls	r3, r3, #25
 80081c6:	f53f af1d 	bmi.w	8008004 <_vfiprintf_r+0x44>
 80081ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081cc:	e71c      	b.n	8008008 <_vfiprintf_r+0x48>
 80081ce:	ab03      	add	r3, sp, #12
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	462a      	mov	r2, r5
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <_vfiprintf_r+0x22c>)
 80081d6:	a904      	add	r1, sp, #16
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f879 	bl	80082d0 <_printf_i>
 80081de:	e7e4      	b.n	80081aa <_vfiprintf_r+0x1ea>
 80081e0:	08008b64 	.word	0x08008b64
 80081e4:	08008b6e 	.word	0x08008b6e
 80081e8:	00000000 	.word	0x00000000
 80081ec:	08007f9b 	.word	0x08007f9b
 80081f0:	08008b6a 	.word	0x08008b6a

080081f4 <_printf_common>:
 80081f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f8:	4616      	mov	r6, r2
 80081fa:	4699      	mov	r9, r3
 80081fc:	688a      	ldr	r2, [r1, #8]
 80081fe:	690b      	ldr	r3, [r1, #16]
 8008200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008204:	4293      	cmp	r3, r2
 8008206:	bfb8      	it	lt
 8008208:	4613      	movlt	r3, r2
 800820a:	6033      	str	r3, [r6, #0]
 800820c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008210:	4607      	mov	r7, r0
 8008212:	460c      	mov	r4, r1
 8008214:	b10a      	cbz	r2, 800821a <_printf_common+0x26>
 8008216:	3301      	adds	r3, #1
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	0699      	lsls	r1, r3, #26
 800821e:	bf42      	ittt	mi
 8008220:	6833      	ldrmi	r3, [r6, #0]
 8008222:	3302      	addmi	r3, #2
 8008224:	6033      	strmi	r3, [r6, #0]
 8008226:	6825      	ldr	r5, [r4, #0]
 8008228:	f015 0506 	ands.w	r5, r5, #6
 800822c:	d106      	bne.n	800823c <_printf_common+0x48>
 800822e:	f104 0a19 	add.w	sl, r4, #25
 8008232:	68e3      	ldr	r3, [r4, #12]
 8008234:	6832      	ldr	r2, [r6, #0]
 8008236:	1a9b      	subs	r3, r3, r2
 8008238:	42ab      	cmp	r3, r5
 800823a:	dc26      	bgt.n	800828a <_printf_common+0x96>
 800823c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008240:	1e13      	subs	r3, r2, #0
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	bf18      	it	ne
 8008246:	2301      	movne	r3, #1
 8008248:	0692      	lsls	r2, r2, #26
 800824a:	d42b      	bmi.n	80082a4 <_printf_common+0xb0>
 800824c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008250:	4649      	mov	r1, r9
 8008252:	4638      	mov	r0, r7
 8008254:	47c0      	blx	r8
 8008256:	3001      	adds	r0, #1
 8008258:	d01e      	beq.n	8008298 <_printf_common+0xa4>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	6922      	ldr	r2, [r4, #16]
 800825e:	f003 0306 	and.w	r3, r3, #6
 8008262:	2b04      	cmp	r3, #4
 8008264:	bf02      	ittt	eq
 8008266:	68e5      	ldreq	r5, [r4, #12]
 8008268:	6833      	ldreq	r3, [r6, #0]
 800826a:	1aed      	subeq	r5, r5, r3
 800826c:	68a3      	ldr	r3, [r4, #8]
 800826e:	bf0c      	ite	eq
 8008270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008274:	2500      	movne	r5, #0
 8008276:	4293      	cmp	r3, r2
 8008278:	bfc4      	itt	gt
 800827a:	1a9b      	subgt	r3, r3, r2
 800827c:	18ed      	addgt	r5, r5, r3
 800827e:	2600      	movs	r6, #0
 8008280:	341a      	adds	r4, #26
 8008282:	42b5      	cmp	r5, r6
 8008284:	d11a      	bne.n	80082bc <_printf_common+0xc8>
 8008286:	2000      	movs	r0, #0
 8008288:	e008      	b.n	800829c <_printf_common+0xa8>
 800828a:	2301      	movs	r3, #1
 800828c:	4652      	mov	r2, sl
 800828e:	4649      	mov	r1, r9
 8008290:	4638      	mov	r0, r7
 8008292:	47c0      	blx	r8
 8008294:	3001      	adds	r0, #1
 8008296:	d103      	bne.n	80082a0 <_printf_common+0xac>
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a0:	3501      	adds	r5, #1
 80082a2:	e7c6      	b.n	8008232 <_printf_common+0x3e>
 80082a4:	18e1      	adds	r1, r4, r3
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	2030      	movs	r0, #48	; 0x30
 80082aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ae:	4422      	add	r2, r4
 80082b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082b8:	3302      	adds	r3, #2
 80082ba:	e7c7      	b.n	800824c <_printf_common+0x58>
 80082bc:	2301      	movs	r3, #1
 80082be:	4622      	mov	r2, r4
 80082c0:	4649      	mov	r1, r9
 80082c2:	4638      	mov	r0, r7
 80082c4:	47c0      	blx	r8
 80082c6:	3001      	adds	r0, #1
 80082c8:	d0e6      	beq.n	8008298 <_printf_common+0xa4>
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7d9      	b.n	8008282 <_printf_common+0x8e>
	...

080082d0 <_printf_i>:
 80082d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	7e0f      	ldrb	r7, [r1, #24]
 80082d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082d8:	2f78      	cmp	r7, #120	; 0x78
 80082da:	4691      	mov	r9, r2
 80082dc:	4680      	mov	r8, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	469a      	mov	sl, r3
 80082e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082e6:	d807      	bhi.n	80082f8 <_printf_i+0x28>
 80082e8:	2f62      	cmp	r7, #98	; 0x62
 80082ea:	d80a      	bhi.n	8008302 <_printf_i+0x32>
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	f000 80d4 	beq.w	800849a <_printf_i+0x1ca>
 80082f2:	2f58      	cmp	r7, #88	; 0x58
 80082f4:	f000 80c0 	beq.w	8008478 <_printf_i+0x1a8>
 80082f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008300:	e03a      	b.n	8008378 <_printf_i+0xa8>
 8008302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008306:	2b15      	cmp	r3, #21
 8008308:	d8f6      	bhi.n	80082f8 <_printf_i+0x28>
 800830a:	a101      	add	r1, pc, #4	; (adr r1, 8008310 <_printf_i+0x40>)
 800830c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008310:	08008369 	.word	0x08008369
 8008314:	0800837d 	.word	0x0800837d
 8008318:	080082f9 	.word	0x080082f9
 800831c:	080082f9 	.word	0x080082f9
 8008320:	080082f9 	.word	0x080082f9
 8008324:	080082f9 	.word	0x080082f9
 8008328:	0800837d 	.word	0x0800837d
 800832c:	080082f9 	.word	0x080082f9
 8008330:	080082f9 	.word	0x080082f9
 8008334:	080082f9 	.word	0x080082f9
 8008338:	080082f9 	.word	0x080082f9
 800833c:	08008481 	.word	0x08008481
 8008340:	080083a9 	.word	0x080083a9
 8008344:	0800843b 	.word	0x0800843b
 8008348:	080082f9 	.word	0x080082f9
 800834c:	080082f9 	.word	0x080082f9
 8008350:	080084a3 	.word	0x080084a3
 8008354:	080082f9 	.word	0x080082f9
 8008358:	080083a9 	.word	0x080083a9
 800835c:	080082f9 	.word	0x080082f9
 8008360:	080082f9 	.word	0x080082f9
 8008364:	08008443 	.word	0x08008443
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	602a      	str	r2, [r5, #0]
 8008370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008378:	2301      	movs	r3, #1
 800837a:	e09f      	b.n	80084bc <_printf_i+0x1ec>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	0607      	lsls	r7, r0, #24
 8008382:	f103 0104 	add.w	r1, r3, #4
 8008386:	6029      	str	r1, [r5, #0]
 8008388:	d501      	bpl.n	800838e <_printf_i+0xbe>
 800838a:	681e      	ldr	r6, [r3, #0]
 800838c:	e003      	b.n	8008396 <_printf_i+0xc6>
 800838e:	0646      	lsls	r6, r0, #25
 8008390:	d5fb      	bpl.n	800838a <_printf_i+0xba>
 8008392:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008396:	2e00      	cmp	r6, #0
 8008398:	da03      	bge.n	80083a2 <_printf_i+0xd2>
 800839a:	232d      	movs	r3, #45	; 0x2d
 800839c:	4276      	negs	r6, r6
 800839e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a2:	485a      	ldr	r0, [pc, #360]	; (800850c <_printf_i+0x23c>)
 80083a4:	230a      	movs	r3, #10
 80083a6:	e012      	b.n	80083ce <_printf_i+0xfe>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	1d19      	adds	r1, r3, #4
 80083ae:	6029      	str	r1, [r5, #0]
 80083b0:	0605      	lsls	r5, r0, #24
 80083b2:	d501      	bpl.n	80083b8 <_printf_i+0xe8>
 80083b4:	681e      	ldr	r6, [r3, #0]
 80083b6:	e002      	b.n	80083be <_printf_i+0xee>
 80083b8:	0641      	lsls	r1, r0, #25
 80083ba:	d5fb      	bpl.n	80083b4 <_printf_i+0xe4>
 80083bc:	881e      	ldrh	r6, [r3, #0]
 80083be:	4853      	ldr	r0, [pc, #332]	; (800850c <_printf_i+0x23c>)
 80083c0:	2f6f      	cmp	r7, #111	; 0x6f
 80083c2:	bf0c      	ite	eq
 80083c4:	2308      	moveq	r3, #8
 80083c6:	230a      	movne	r3, #10
 80083c8:	2100      	movs	r1, #0
 80083ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ce:	6865      	ldr	r5, [r4, #4]
 80083d0:	60a5      	str	r5, [r4, #8]
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	bfa2      	ittt	ge
 80083d6:	6821      	ldrge	r1, [r4, #0]
 80083d8:	f021 0104 	bicge.w	r1, r1, #4
 80083dc:	6021      	strge	r1, [r4, #0]
 80083de:	b90e      	cbnz	r6, 80083e4 <_printf_i+0x114>
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	d04b      	beq.n	800847c <_printf_i+0x1ac>
 80083e4:	4615      	mov	r5, r2
 80083e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80083ea:	fb03 6711 	mls	r7, r3, r1, r6
 80083ee:	5dc7      	ldrb	r7, [r0, r7]
 80083f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083f4:	4637      	mov	r7, r6
 80083f6:	42bb      	cmp	r3, r7
 80083f8:	460e      	mov	r6, r1
 80083fa:	d9f4      	bls.n	80083e6 <_printf_i+0x116>
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d10b      	bne.n	8008418 <_printf_i+0x148>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	07de      	lsls	r6, r3, #31
 8008404:	d508      	bpl.n	8008418 <_printf_i+0x148>
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	6861      	ldr	r1, [r4, #4]
 800840a:	4299      	cmp	r1, r3
 800840c:	bfde      	ittt	le
 800840e:	2330      	movle	r3, #48	; 0x30
 8008410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008418:	1b52      	subs	r2, r2, r5
 800841a:	6122      	str	r2, [r4, #16]
 800841c:	f8cd a000 	str.w	sl, [sp]
 8008420:	464b      	mov	r3, r9
 8008422:	aa03      	add	r2, sp, #12
 8008424:	4621      	mov	r1, r4
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff fee4 	bl	80081f4 <_printf_common>
 800842c:	3001      	adds	r0, #1
 800842e:	d14a      	bne.n	80084c6 <_printf_i+0x1f6>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	b004      	add	sp, #16
 8008436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	f043 0320 	orr.w	r3, r3, #32
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	4833      	ldr	r0, [pc, #204]	; (8008510 <_printf_i+0x240>)
 8008444:	2778      	movs	r7, #120	; 0x78
 8008446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	061f      	lsls	r7, r3, #24
 8008450:	f851 6b04 	ldr.w	r6, [r1], #4
 8008454:	d402      	bmi.n	800845c <_printf_i+0x18c>
 8008456:	065f      	lsls	r7, r3, #25
 8008458:	bf48      	it	mi
 800845a:	b2b6      	uxthmi	r6, r6
 800845c:	07df      	lsls	r7, r3, #31
 800845e:	bf48      	it	mi
 8008460:	f043 0320 	orrmi.w	r3, r3, #32
 8008464:	6029      	str	r1, [r5, #0]
 8008466:	bf48      	it	mi
 8008468:	6023      	strmi	r3, [r4, #0]
 800846a:	b91e      	cbnz	r6, 8008474 <_printf_i+0x1a4>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	f023 0320 	bic.w	r3, r3, #32
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	2310      	movs	r3, #16
 8008476:	e7a7      	b.n	80083c8 <_printf_i+0xf8>
 8008478:	4824      	ldr	r0, [pc, #144]	; (800850c <_printf_i+0x23c>)
 800847a:	e7e4      	b.n	8008446 <_printf_i+0x176>
 800847c:	4615      	mov	r5, r2
 800847e:	e7bd      	b.n	80083fc <_printf_i+0x12c>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	6826      	ldr	r6, [r4, #0]
 8008484:	6961      	ldr	r1, [r4, #20]
 8008486:	1d18      	adds	r0, r3, #4
 8008488:	6028      	str	r0, [r5, #0]
 800848a:	0635      	lsls	r5, r6, #24
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	d501      	bpl.n	8008494 <_printf_i+0x1c4>
 8008490:	6019      	str	r1, [r3, #0]
 8008492:	e002      	b.n	800849a <_printf_i+0x1ca>
 8008494:	0670      	lsls	r0, r6, #25
 8008496:	d5fb      	bpl.n	8008490 <_printf_i+0x1c0>
 8008498:	8019      	strh	r1, [r3, #0]
 800849a:	2300      	movs	r3, #0
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	4615      	mov	r5, r2
 80084a0:	e7bc      	b.n	800841c <_printf_i+0x14c>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	1d1a      	adds	r2, r3, #4
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	681d      	ldr	r5, [r3, #0]
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	2100      	movs	r1, #0
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f7 fea6 	bl	8000200 <memchr>
 80084b4:	b108      	cbz	r0, 80084ba <_printf_i+0x1ea>
 80084b6:	1b40      	subs	r0, r0, r5
 80084b8:	6060      	str	r0, [r4, #4]
 80084ba:	6863      	ldr	r3, [r4, #4]
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	2300      	movs	r3, #0
 80084c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c4:	e7aa      	b.n	800841c <_printf_i+0x14c>
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4649      	mov	r1, r9
 80084cc:	4640      	mov	r0, r8
 80084ce:	47d0      	blx	sl
 80084d0:	3001      	adds	r0, #1
 80084d2:	d0ad      	beq.n	8008430 <_printf_i+0x160>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	079b      	lsls	r3, r3, #30
 80084d8:	d413      	bmi.n	8008502 <_printf_i+0x232>
 80084da:	68e0      	ldr	r0, [r4, #12]
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	4298      	cmp	r0, r3
 80084e0:	bfb8      	it	lt
 80084e2:	4618      	movlt	r0, r3
 80084e4:	e7a6      	b.n	8008434 <_printf_i+0x164>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4632      	mov	r2, r6
 80084ea:	4649      	mov	r1, r9
 80084ec:	4640      	mov	r0, r8
 80084ee:	47d0      	blx	sl
 80084f0:	3001      	adds	r0, #1
 80084f2:	d09d      	beq.n	8008430 <_printf_i+0x160>
 80084f4:	3501      	adds	r5, #1
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	9903      	ldr	r1, [sp, #12]
 80084fa:	1a5b      	subs	r3, r3, r1
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dcf2      	bgt.n	80084e6 <_printf_i+0x216>
 8008500:	e7eb      	b.n	80084da <_printf_i+0x20a>
 8008502:	2500      	movs	r5, #0
 8008504:	f104 0619 	add.w	r6, r4, #25
 8008508:	e7f5      	b.n	80084f6 <_printf_i+0x226>
 800850a:	bf00      	nop
 800850c:	08008b75 	.word	0x08008b75
 8008510:	08008b86 	.word	0x08008b86

08008514 <__sflush_r>:
 8008514:	898a      	ldrh	r2, [r1, #12]
 8008516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851a:	4605      	mov	r5, r0
 800851c:	0710      	lsls	r0, r2, #28
 800851e:	460c      	mov	r4, r1
 8008520:	d458      	bmi.n	80085d4 <__sflush_r+0xc0>
 8008522:	684b      	ldr	r3, [r1, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dc05      	bgt.n	8008534 <__sflush_r+0x20>
 8008528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800852a:	2b00      	cmp	r3, #0
 800852c:	dc02      	bgt.n	8008534 <__sflush_r+0x20>
 800852e:	2000      	movs	r0, #0
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008536:	2e00      	cmp	r6, #0
 8008538:	d0f9      	beq.n	800852e <__sflush_r+0x1a>
 800853a:	2300      	movs	r3, #0
 800853c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008540:	682f      	ldr	r7, [r5, #0]
 8008542:	6a21      	ldr	r1, [r4, #32]
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	d032      	beq.n	80085ae <__sflush_r+0x9a>
 8008548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	075a      	lsls	r2, r3, #29
 800854e:	d505      	bpl.n	800855c <__sflush_r+0x48>
 8008550:	6863      	ldr	r3, [r4, #4]
 8008552:	1ac0      	subs	r0, r0, r3
 8008554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008556:	b10b      	cbz	r3, 800855c <__sflush_r+0x48>
 8008558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800855a:	1ac0      	subs	r0, r0, r3
 800855c:	2300      	movs	r3, #0
 800855e:	4602      	mov	r2, r0
 8008560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008562:	6a21      	ldr	r1, [r4, #32]
 8008564:	4628      	mov	r0, r5
 8008566:	47b0      	blx	r6
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	d106      	bne.n	800857c <__sflush_r+0x68>
 800856e:	6829      	ldr	r1, [r5, #0]
 8008570:	291d      	cmp	r1, #29
 8008572:	d82b      	bhi.n	80085cc <__sflush_r+0xb8>
 8008574:	4a29      	ldr	r2, [pc, #164]	; (800861c <__sflush_r+0x108>)
 8008576:	410a      	asrs	r2, r1
 8008578:	07d6      	lsls	r6, r2, #31
 800857a:	d427      	bmi.n	80085cc <__sflush_r+0xb8>
 800857c:	2200      	movs	r2, #0
 800857e:	6062      	str	r2, [r4, #4]
 8008580:	04d9      	lsls	r1, r3, #19
 8008582:	6922      	ldr	r2, [r4, #16]
 8008584:	6022      	str	r2, [r4, #0]
 8008586:	d504      	bpl.n	8008592 <__sflush_r+0x7e>
 8008588:	1c42      	adds	r2, r0, #1
 800858a:	d101      	bne.n	8008590 <__sflush_r+0x7c>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b903      	cbnz	r3, 8008592 <__sflush_r+0x7e>
 8008590:	6560      	str	r0, [r4, #84]	; 0x54
 8008592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008594:	602f      	str	r7, [r5, #0]
 8008596:	2900      	cmp	r1, #0
 8008598:	d0c9      	beq.n	800852e <__sflush_r+0x1a>
 800859a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800859e:	4299      	cmp	r1, r3
 80085a0:	d002      	beq.n	80085a8 <__sflush_r+0x94>
 80085a2:	4628      	mov	r0, r5
 80085a4:	f7ff fa92 	bl	8007acc <_free_r>
 80085a8:	2000      	movs	r0, #0
 80085aa:	6360      	str	r0, [r4, #52]	; 0x34
 80085ac:	e7c0      	b.n	8008530 <__sflush_r+0x1c>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b0      	blx	r6
 80085b4:	1c41      	adds	r1, r0, #1
 80085b6:	d1c8      	bne.n	800854a <__sflush_r+0x36>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0c5      	beq.n	800854a <__sflush_r+0x36>
 80085be:	2b1d      	cmp	r3, #29
 80085c0:	d001      	beq.n	80085c6 <__sflush_r+0xb2>
 80085c2:	2b16      	cmp	r3, #22
 80085c4:	d101      	bne.n	80085ca <__sflush_r+0xb6>
 80085c6:	602f      	str	r7, [r5, #0]
 80085c8:	e7b1      	b.n	800852e <__sflush_r+0x1a>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d0:	81a3      	strh	r3, [r4, #12]
 80085d2:	e7ad      	b.n	8008530 <__sflush_r+0x1c>
 80085d4:	690f      	ldr	r7, [r1, #16]
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	d0a9      	beq.n	800852e <__sflush_r+0x1a>
 80085da:	0793      	lsls	r3, r2, #30
 80085dc:	680e      	ldr	r6, [r1, #0]
 80085de:	bf08      	it	eq
 80085e0:	694b      	ldreq	r3, [r1, #20]
 80085e2:	600f      	str	r7, [r1, #0]
 80085e4:	bf18      	it	ne
 80085e6:	2300      	movne	r3, #0
 80085e8:	eba6 0807 	sub.w	r8, r6, r7
 80085ec:	608b      	str	r3, [r1, #8]
 80085ee:	f1b8 0f00 	cmp.w	r8, #0
 80085f2:	dd9c      	ble.n	800852e <__sflush_r+0x1a>
 80085f4:	6a21      	ldr	r1, [r4, #32]
 80085f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085f8:	4643      	mov	r3, r8
 80085fa:	463a      	mov	r2, r7
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b0      	blx	r6
 8008600:	2800      	cmp	r0, #0
 8008602:	dc06      	bgt.n	8008612 <__sflush_r+0xfe>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e78e      	b.n	8008530 <__sflush_r+0x1c>
 8008612:	4407      	add	r7, r0
 8008614:	eba8 0800 	sub.w	r8, r8, r0
 8008618:	e7e9      	b.n	80085ee <__sflush_r+0xda>
 800861a:	bf00      	nop
 800861c:	dfbffffe 	.word	0xdfbffffe

08008620 <_fflush_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	690b      	ldr	r3, [r1, #16]
 8008624:	4605      	mov	r5, r0
 8008626:	460c      	mov	r4, r1
 8008628:	b913      	cbnz	r3, 8008630 <_fflush_r+0x10>
 800862a:	2500      	movs	r5, #0
 800862c:	4628      	mov	r0, r5
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	b118      	cbz	r0, 800863a <_fflush_r+0x1a>
 8008632:	6a03      	ldr	r3, [r0, #32]
 8008634:	b90b      	cbnz	r3, 800863a <_fflush_r+0x1a>
 8008636:	f7fe fffd 	bl	8007634 <__sinit>
 800863a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f3      	beq.n	800862a <_fflush_r+0xa>
 8008642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008644:	07d0      	lsls	r0, r2, #31
 8008646:	d404      	bmi.n	8008652 <_fflush_r+0x32>
 8008648:	0599      	lsls	r1, r3, #22
 800864a:	d402      	bmi.n	8008652 <_fflush_r+0x32>
 800864c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864e:	f7ff fa3a 	bl	8007ac6 <__retarget_lock_acquire_recursive>
 8008652:	4628      	mov	r0, r5
 8008654:	4621      	mov	r1, r4
 8008656:	f7ff ff5d 	bl	8008514 <__sflush_r>
 800865a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800865c:	07da      	lsls	r2, r3, #31
 800865e:	4605      	mov	r5, r0
 8008660:	d4e4      	bmi.n	800862c <_fflush_r+0xc>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	059b      	lsls	r3, r3, #22
 8008666:	d4e1      	bmi.n	800862c <_fflush_r+0xc>
 8008668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866a:	f7ff fa2d 	bl	8007ac8 <__retarget_lock_release_recursive>
 800866e:	e7dd      	b.n	800862c <_fflush_r+0xc>

08008670 <__swhatbuf_r>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	460c      	mov	r4, r1
 8008674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008678:	2900      	cmp	r1, #0
 800867a:	b096      	sub	sp, #88	; 0x58
 800867c:	4615      	mov	r5, r2
 800867e:	461e      	mov	r6, r3
 8008680:	da0d      	bge.n	800869e <__swhatbuf_r+0x2e>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008688:	f04f 0100 	mov.w	r1, #0
 800868c:	bf0c      	ite	eq
 800868e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008692:	2340      	movne	r3, #64	; 0x40
 8008694:	2000      	movs	r0, #0
 8008696:	6031      	str	r1, [r6, #0]
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	b016      	add	sp, #88	; 0x58
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	466a      	mov	r2, sp
 80086a0:	f000 f862 	bl	8008768 <_fstat_r>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	dbec      	blt.n	8008682 <__swhatbuf_r+0x12>
 80086a8:	9901      	ldr	r1, [sp, #4]
 80086aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086b2:	4259      	negs	r1, r3
 80086b4:	4159      	adcs	r1, r3
 80086b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ba:	e7eb      	b.n	8008694 <__swhatbuf_r+0x24>

080086bc <__smakebuf_r>:
 80086bc:	898b      	ldrh	r3, [r1, #12]
 80086be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086c0:	079d      	lsls	r5, r3, #30
 80086c2:	4606      	mov	r6, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	d507      	bpl.n	80086d8 <__smakebuf_r+0x1c>
 80086c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	2301      	movs	r3, #1
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	b002      	add	sp, #8
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	ab01      	add	r3, sp, #4
 80086da:	466a      	mov	r2, sp
 80086dc:	f7ff ffc8 	bl	8008670 <__swhatbuf_r>
 80086e0:	9900      	ldr	r1, [sp, #0]
 80086e2:	4605      	mov	r5, r0
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff fa5d 	bl	8007ba4 <_malloc_r>
 80086ea:	b948      	cbnz	r0, 8008700 <__smakebuf_r+0x44>
 80086ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d4ef      	bmi.n	80086d4 <__smakebuf_r+0x18>
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	f043 0302 	orr.w	r3, r3, #2
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	e7e3      	b.n	80086c8 <__smakebuf_r+0xc>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	6163      	str	r3, [r4, #20]
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	6120      	str	r0, [r4, #16]
 8008712:	b15b      	cbz	r3, 800872c <__smakebuf_r+0x70>
 8008714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f837 	bl	800878c <_isatty_r>
 800871e:	b128      	cbz	r0, 800872c <__smakebuf_r+0x70>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	431d      	orrs	r5, r3
 8008730:	81a5      	strh	r5, [r4, #12]
 8008732:	e7cf      	b.n	80086d4 <__smakebuf_r+0x18>

08008734 <memmove>:
 8008734:	4288      	cmp	r0, r1
 8008736:	b510      	push	{r4, lr}
 8008738:	eb01 0402 	add.w	r4, r1, r2
 800873c:	d902      	bls.n	8008744 <memmove+0x10>
 800873e:	4284      	cmp	r4, r0
 8008740:	4623      	mov	r3, r4
 8008742:	d807      	bhi.n	8008754 <memmove+0x20>
 8008744:	1e43      	subs	r3, r0, #1
 8008746:	42a1      	cmp	r1, r4
 8008748:	d008      	beq.n	800875c <memmove+0x28>
 800874a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008752:	e7f8      	b.n	8008746 <memmove+0x12>
 8008754:	4402      	add	r2, r0
 8008756:	4601      	mov	r1, r0
 8008758:	428a      	cmp	r2, r1
 800875a:	d100      	bne.n	800875e <memmove+0x2a>
 800875c:	bd10      	pop	{r4, pc}
 800875e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008766:	e7f7      	b.n	8008758 <memmove+0x24>

08008768 <_fstat_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_fstat_r+0x20>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f7f9 f8fe 	bl	8001976 <_fstat>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d102      	bne.n	8008784 <_fstat_r+0x1c>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b103      	cbz	r3, 8008784 <_fstat_r+0x1c>
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd38      	pop	{r3, r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	20000b58 	.word	0x20000b58

0800878c <_isatty_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_isatty_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f9 f8fd 	bl	8001996 <_isatty>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_isatty_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_isatty_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000b58 	.word	0x20000b58

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 f906 	bl	80019c8 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20000b58 	.word	0x20000b58

080087cc <memcpy>:
 80087cc:	440a      	add	r2, r1
 80087ce:	4291      	cmp	r1, r2
 80087d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d4:	d100      	bne.n	80087d8 <memcpy+0xc>
 80087d6:	4770      	bx	lr
 80087d8:	b510      	push	{r4, lr}
 80087da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e2:	4291      	cmp	r1, r2
 80087e4:	d1f9      	bne.n	80087da <memcpy+0xe>
 80087e6:	bd10      	pop	{r4, pc}

080087e8 <_realloc_r>:
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	4680      	mov	r8, r0
 80087ee:	4614      	mov	r4, r2
 80087f0:	460e      	mov	r6, r1
 80087f2:	b921      	cbnz	r1, 80087fe <_realloc_r+0x16>
 80087f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	4611      	mov	r1, r2
 80087fa:	f7ff b9d3 	b.w	8007ba4 <_malloc_r>
 80087fe:	b92a      	cbnz	r2, 800880c <_realloc_r+0x24>
 8008800:	f7ff f964 	bl	8007acc <_free_r>
 8008804:	4625      	mov	r5, r4
 8008806:	4628      	mov	r0, r5
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	f000 f81b 	bl	8008846 <_malloc_usable_size_r>
 8008810:	4284      	cmp	r4, r0
 8008812:	4607      	mov	r7, r0
 8008814:	d802      	bhi.n	800881c <_realloc_r+0x34>
 8008816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800881a:	d812      	bhi.n	8008842 <_realloc_r+0x5a>
 800881c:	4621      	mov	r1, r4
 800881e:	4640      	mov	r0, r8
 8008820:	f7ff f9c0 	bl	8007ba4 <_malloc_r>
 8008824:	4605      	mov	r5, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d0ed      	beq.n	8008806 <_realloc_r+0x1e>
 800882a:	42bc      	cmp	r4, r7
 800882c:	4622      	mov	r2, r4
 800882e:	4631      	mov	r1, r6
 8008830:	bf28      	it	cs
 8008832:	463a      	movcs	r2, r7
 8008834:	f7ff ffca 	bl	80087cc <memcpy>
 8008838:	4631      	mov	r1, r6
 800883a:	4640      	mov	r0, r8
 800883c:	f7ff f946 	bl	8007acc <_free_r>
 8008840:	e7e1      	b.n	8008806 <_realloc_r+0x1e>
 8008842:	4635      	mov	r5, r6
 8008844:	e7df      	b.n	8008806 <_realloc_r+0x1e>

08008846 <_malloc_usable_size_r>:
 8008846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884a:	1f18      	subs	r0, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfbc      	itt	lt
 8008850:	580b      	ldrlt	r3, [r1, r0]
 8008852:	18c0      	addlt	r0, r0, r3
 8008854:	4770      	bx	lr
	...

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
