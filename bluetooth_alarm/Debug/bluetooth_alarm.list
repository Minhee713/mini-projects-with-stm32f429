
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b78  08009b78  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000af4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d212  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d77  00000000  00000000  0003d301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019e8  00000000  00000000  00041078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000145a  00000000  00000000  00042a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000296dc  00000000  00000000  00043eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa38  00000000  00000000  0006d596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000faa31  00000000  00000000  0008cfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000795c  00000000  00000000  00187a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0018f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009964 	.word	0x08009964

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009964 	.word	0x08009964

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f006 fd61 	bl	8007096 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 fa5f 	bl	8004aac <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f008 f93f 	bl	8008888 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f006 fd3a 	bl	8007096 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f006 fd32 	bl	8007096 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f006 fd22 	bl	8007096 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800998c 	.word	0x0800998c
 8000660:	20000424 	.word	0x20000424
 8000664:	20000368 	.word	0x20000368
 8000668:	0800997c 	.word	0x0800997c
 800066c:	08009984 	.word	0x08009984
 8000670:	08009988 	.word	0x08009988

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 fa0b 	bl	8004aac <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f004 f8d4 	bl	80048b0 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fbf1 	bl	8001ef4 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000368 	.word	0x20000368

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
HAL_StatusTypeDef update_nvitems(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f006 fc49 	bl	8007096 <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000424 	.word	0x20000424

08000814 <get_RTC_time>:

RTC_DateTypeDef sDate;
RTC_TimeTypeDef RTC_Time;
void get_RTC_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8

	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	4912      	ldr	r1, [pc, #72]	; (8000868 <get_RTC_time+0x54>)
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <get_RTC_time+0x58>)
 8000820:	f005 fd7c 	bl	800631c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	4912      	ldr	r1, [pc, #72]	; (8000870 <get_RTC_time+0x5c>)
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <get_RTC_time+0x58>)
 800082a:	f005 fe59 	bl	80064e0 <HAL_RTC_GetDate>

//	printf("%s %02d:%02d:%02d\t\r\n", ampm[sTime.TimeFormat>>6],sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
			ampm[RTC_Time.TimeFormat >> 6], RTC_Time.Hours, RTC_Time.Minutes,
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <get_RTC_time+0x54>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	099b      	lsrs	r3, r3, #6
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <get_RTC_time+0x60>)
 8000840:	441a      	add	r2, r3
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <get_RTC_time+0x54>)
 8000844:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 8000846:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat >> 6], RTC_Time.Hours, RTC_Time.Minutes,
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <get_RTC_time+0x54>)
 800084a:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 800084c:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <get_RTC_time+0x54>)
 8000850:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) showTime, "%s %02d:%02d:%02d",
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9100      	str	r1, [sp, #0]
 8000856:	4603      	mov	r3, r0
 8000858:	4907      	ldr	r1, [pc, #28]	; (8000878 <get_RTC_time+0x64>)
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <get_RTC_time+0x68>)
 800085c:	f008 f848 	bl	80088f0 <siprintf>
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200009e0 	.word	0x200009e0
 800086c:	200003bc 	.word	0x200003bc
 8000870:	200009dc 	.word	0x200009dc
 8000874:	2000000c 	.word	0x2000000c
 8000878:	080099a4 	.word	0x080099a4
 800087c:	20000980 	.word	0x20000980

08000880 <update_nvitems>:

HAL_StatusTypeDef update_nvitems(void) {
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();
 800088c:	f003 fa0a 	bl	8003ca4 <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_2;
 8000890:	2302      	movs	r3, #2
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FirstSector;
 80008a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a2:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 80008a8:	f107 0214 	add.w	r2, r7, #20
 80008ac:	463b      	mov	r3, r7
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fb69 	bl	8003f88 <HAL_FLASHEx_Erase>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (error != HAL_OK) {
 80008bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <update_nvitems+0x4a>
		return error;
 80008c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c8:	e02c      	b.n	8000924 <update_nvitems+0xa4>
	}

	ptr = (uint8_t*) &default_nvitem;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <update_nvitems+0xac>)
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
 80008d2:	e022      	b.n	800091a <update_nvitems+0x9a>
		Address = (uint8_t*) nv_items + i;
 80008d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80008da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80008de:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*) ptr + i);
 80008e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	461c      	mov	r4, r3
 80008ee:	4615      	mov	r5, r2
 80008f0:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
 80008f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80008f8:	6a39      	ldr	r1, [r7, #32]
 80008fa:	2000      	movs	r0, #0
 80008fc:	f003 f97e 	bl	8003bfc <HAL_FLASH_Program>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (error != HAL_OK) {
 8000906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <update_nvitems+0x94>
			return error;
 800090e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000912:	e007      	b.n	8000924 <update_nvitems+0xa4>
	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	3301      	adds	r3, #1
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
 800091a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091c:	2b0b      	cmp	r3, #11
 800091e:	d9d9      	bls.n	80008d4 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 8000920:	f003 f9e2 	bl	8003ce8 <HAL_FLASH_Lock>
}
 8000924:	4618      	mov	r0, r3
 8000926:	3738      	adds	r7, #56	; 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bdb0      	pop	{r4, r5, r7, pc}
 800092c:	20000000 	.word	0x20000000

08000930 <HAL_TIM_PeriodElapsedCallback>:

uint32_t ADC_value;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d106      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x20>
//		}
//		if(ADC_value >= RIGHT_MIN && ADC_value <= RIGHT_MAX) {
//			printf("Right\r\n");
//		}

		HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000942:	2202      	movs	r2, #2
 8000944:	4905      	ldr	r1, [pc, #20]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000948:	f001 fd2a 	bl	80023a0 <HAL_ADC_Start_DMA>
//		printf("%d %d \r\n", xy[0], xy[1]);
		joyStick_btn_chk();
 800094c:	f000 f8bc 	bl	8000ac8 <joyStick_btn_chk>
//		if (xy[0] <= 2900 && xy[0] <= 3500) {
//			current_state.button = NO_KEY;
//			printf("no key\r\n");
//		} else if (xy[0] )

}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40000400 	.word	0x40000400
 800095c:	20000974 	.word	0x20000974
 8000960:	20000210 	.word	0x20000210

08000964 <showCurrentTime>:

void showCurrentTime() {
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af02      	add	r7, sp, #8

	RTC_Time.Hours;
	RTC_Time.Minutes;
	RTC_Time.Seconds;

	sprintf(temp_time_buf, "%02d: %02d: %02d", RTC_Time.Hours, RTC_Time.Minutes,
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <showCurrentTime+0x4c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <showCurrentTime+0x4c>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <showCurrentTime+0x4c>)
 8000978:	789b      	ldrb	r3, [r3, #2]
	sprintf(temp_time_buf, "%02d: %02d: %02d", RTC_Time.Hours, RTC_Time.Minutes,
 800097a:	4638      	mov	r0, r7
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	460b      	mov	r3, r1
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <showCurrentTime+0x50>)
 8000982:	f007 ffb5 	bl	80088f0 <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	204e      	movs	r0, #78	; 0x4e
 800098a:	f7ff fec9 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 800098e:	490a      	ldr	r1, [pc, #40]	; (80009b8 <showCurrentTime+0x54>)
 8000990:	204e      	movs	r0, #78	; 0x4e
 8000992:	f7ff ff06 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000996:	21c0      	movs	r1, #192	; 0xc0
 8000998:	204e      	movs	r0, #78	; 0x4e
 800099a:	f7ff fec1 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	204e      	movs	r0, #78	; 0x4e
 80009a4:	f7ff fefd 	bl	80007a2 <LCD_SendString>

//	clearLCD();
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200009e0 	.word	0x200009e0
 80009b4:	080099b8 	.word	0x080099b8
 80009b8:	080099cc 	.word	0x080099cc

080009bc <timeDisplay>:
//	LCD_SendString(LCD_ADDR, "            ");
//	LCD_SendCommand(LCD_ADDR, 0b11000000);
//	LCD_SendString(LCD_ADDR, "            ");
//}

void timeDisplay() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == NORMAL_STATE) {
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <timeDisplay+0xe4>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d114      	bne.n	80009f4 <timeDisplay+0x38>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	204e      	movs	r0, #78	; 0x4e
 80009ce:	f7ff fea7 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Current Time");
 80009d2:	4934      	ldr	r1, [pc, #208]	; (8000aa4 <timeDisplay+0xe8>)
 80009d4:	204e      	movs	r0, #78	; 0x4e
 80009d6:	f7ff fee4 	bl	80007a2 <LCD_SendString>

		hours = ctime.hours;
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <timeDisplay+0xec>)
 80009dc:	f993 3000 	ldrsb.w	r3, [r3]
 80009e0:	71fb      	strb	r3, [r7, #7]
		minutes = ctime.minutes;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <timeDisplay+0xec>)
 80009e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009e8:	71bb      	strb	r3, [r7, #6]
		seconds = ctime.seconds;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <timeDisplay+0xec>)
 80009ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80009f0:	717b      	strb	r3, [r7, #5]
 80009f2:	e030      	b.n	8000a56 <timeDisplay+0x9a>
	} else if (current_state.mode == TIME_SETTING) {
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <timeDisplay+0xe4>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d114      	bne.n	8000a26 <timeDisplay+0x6a>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	204e      	movs	r0, #78	; 0x4e
 8000a00:	f7ff fe8e 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting");
 8000a04:	4929      	ldr	r1, [pc, #164]	; (8000aac <timeDisplay+0xf0>)
 8000a06:	204e      	movs	r0, #78	; 0x4e
 8000a08:	f7ff fecb 	bl	80007a2 <LCD_SendString>

		hours = stime.hours;
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <timeDisplay+0xf4>)
 8000a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a12:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <timeDisplay+0xf4>)
 8000a16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a1a:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <timeDisplay+0xf4>)
 8000a1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a22:	717b      	strb	r3, [r7, #5]
 8000a24:	e017      	b.n	8000a56 <timeDisplay+0x9a>
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <timeDisplay+0xe4>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d113      	bne.n	8000a56 <timeDisplay+0x9a>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	204e      	movs	r0, #78	; 0x4e
 8000a32:	f7ff fe75 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 8000a36:	491f      	ldr	r1, [pc, #124]	; (8000ab4 <timeDisplay+0xf8>)
 8000a38:	204e      	movs	r0, #78	; 0x4e
 8000a3a:	f7ff feb2 	bl	80007a2 <LCD_SendString>

		hours = atime.hours;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <timeDisplay+0xfc>)
 8000a40:	f993 3000 	ldrsb.w	r3, [r3]
 8000a44:	71fb      	strb	r3, [r7, #7]
		minutes = atime.minutes;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <timeDisplay+0xfc>)
 8000a48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a4c:	71bb      	strb	r3, [r7, #6]
		seconds = atime.seconds;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <timeDisplay+0xfc>)
 8000a50:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a54:	717b      	strb	r3, [r7, #5]
	}

	if (hours >= 12) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0b      	cmp	r3, #11
 8000a5a:	d90b      	bls.n	8000a74 <timeDisplay+0xb8>
		sprintf(timeStr, "PM %02d:%02d:%02d", hours - 12, minutes, seconds);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f1a3 020c 	sub.w	r2, r3, #12
 8000a62:	79b9      	ldrb	r1, [r7, #6]
 8000a64:	797b      	ldrb	r3, [r7, #5]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4914      	ldr	r1, [pc, #80]	; (8000abc <timeDisplay+0x100>)
 8000a6c:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <timeDisplay+0x104>)
 8000a6e:	f007 ff3f 	bl	80088f0 <siprintf>
 8000a72:	e008      	b.n	8000a86 <timeDisplay+0xca>
	} else {
		sprintf(timeStr, "AM %02d:%02d:%02d", hours, minutes, seconds);
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	79b9      	ldrb	r1, [r7, #6]
 8000a78:	797b      	ldrb	r3, [r7, #5]
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	4911      	ldr	r1, [pc, #68]	; (8000ac4 <timeDisplay+0x108>)
 8000a80:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <timeDisplay+0x104>)
 8000a82:	f007 ff35 	bl	80088f0 <siprintf>
	}

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a86:	21c0      	movs	r1, #192	; 0xc0
 8000a88:	204e      	movs	r0, #78	; 0x4e
 8000a8a:	f7ff fe49 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 8000a8e:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <timeDisplay+0x104>)
 8000a90:	204e      	movs	r0, #78	; 0x4e
 8000a92:	f7ff fe86 	bl	80007a2 <LCD_SendString>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200009ac 	.word	0x200009ac
 8000aa4:	080099cc 	.word	0x080099cc
 8000aa8:	200009d0 	.word	0x200009d0
 8000aac:	080099dc 	.word	0x080099dc
 8000ab0:	200009d4 	.word	0x200009d4
 8000ab4:	080099ec 	.word	0x080099ec
 8000ab8:	200009d8 	.word	0x200009d8
 8000abc:	080099fc 	.word	0x080099fc
 8000ac0:	200009b0 	.word	0x200009b0
 8000ac4:	08009a10 	.word	0x08009a10

08000ac8 <joyStick_btn_chk>:

void joyStick_btn_chk() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
//	if (xy[0] > 2750 && xy[1] < 3000) {
//		current_state.button = NO_KEY;

//	printf("%d %d \r\n", xy[0], xy[1]);

	if (xy[0] < 50) {
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <joyStick_btn_chk+0x68>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b31      	cmp	r3, #49	; 0x31
 8000ad2:	d806      	bhi.n	8000ae2 <joyStick_btn_chk+0x1a>
		current_state.button = UP;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <joyStick_btn_chk+0x6c>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	705a      	strb	r2, [r3, #1]
		printf("up\r\n");
 8000ada:	4817      	ldr	r0, [pc, #92]	; (8000b38 <joyStick_btn_chk+0x70>)
 8000adc:	f007 fecc 	bl	8008878 <puts>
		current_state.button = DOWN;
		printf("down\r\n");
	}

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
}
 8000ae0:	e023      	b.n	8000b2a <joyStick_btn_chk+0x62>
	} else if (xy[1] < 50) {
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <joyStick_btn_chk+0x68>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b31      	cmp	r3, #49	; 0x31
 8000ae8:	d806      	bhi.n	8000af8 <joyStick_btn_chk+0x30>
		current_state.button = LEFT;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <joyStick_btn_chk+0x6c>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	705a      	strb	r2, [r3, #1]
		printf("left\r\n");
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <joyStick_btn_chk+0x74>)
 8000af2:	f007 fec1 	bl	8008878 <puts>
}
 8000af6:	e018      	b.n	8000b2a <joyStick_btn_chk+0x62>
	} else if (xy[1] > 3000) {
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <joyStick_btn_chk+0x68>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d906      	bls.n	8000b12 <joyStick_btn_chk+0x4a>
		current_state.button = RIGHT;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <joyStick_btn_chk+0x6c>)
 8000b06:	2203      	movs	r2, #3
 8000b08:	705a      	strb	r2, [r3, #1]
		printf("right\r\n");
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <joyStick_btn_chk+0x78>)
 8000b0c:	f007 feb4 	bl	8008878 <puts>
}
 8000b10:	e00b      	b.n	8000b2a <joyStick_btn_chk+0x62>
	} else if (xy[0] > 3000) {
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <joyStick_btn_chk+0x68>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d905      	bls.n	8000b2a <joyStick_btn_chk+0x62>
		current_state.button = DOWN;
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <joyStick_btn_chk+0x6c>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	705a      	strb	r2, [r3, #1]
		printf("down\r\n");
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <joyStick_btn_chk+0x7c>)
 8000b26:	f007 fea7 	bl	8008878 <puts>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000974 	.word	0x20000974
 8000b34:	200009ac 	.word	0x200009ac
 8000b38:	08009a24 	.word	0x08009a24
 8000b3c:	08009a28 	.word	0x08009a28
 8000b40:	08009a30 	.word	0x08009a30
 8000b44:	08009a38 	.word	0x08009a38

08000b48 <time_set_mode>:
void time_set_mode() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

//	printf("Get in time set mode!!\r\n");
//	HAL_ADC_Start_IT(&hadc1);
//	HAL_TIM_Base_Start_IT(&htim3);

	int position = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]

//	joyStick_btn_chk();

	if (position == 0) {
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12f      	bne.n	8000bb8 <time_set_mode+0x70>
		printf("This is position 0\r\n");
 8000b58:	4899      	ldr	r0, [pc, #612]	; (8000dc0 <time_set_mode+0x278>)
 8000b5a:	f007 fe8d 	bl	8008878 <puts>
//		joyStick_btn_chk();
		switch (current_state.button) {
 8000b5e:	4b99      	ldr	r3, [pc, #612]	; (8000dc4 <time_set_mode+0x27c>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d00c      	beq.n	8000b80 <time_set_mode+0x38>
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	f300 8111 	bgt.w	8000d8e <time_set_mode+0x246>
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d007      	beq.n	8000b80 <time_set_mode+0x38>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f2c0 810c 	blt.w	8000d8e <time_set_mode+0x246>
 8000b76:	3b01      	subs	r3, #1
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	f200 8108 	bhi.w	8000d8e <time_set_mode+0x246>
 8000b7e:	e002      	b.n	8000b86 <time_set_mode+0x3e>
		case NO_KEY:
		case RIGHT:
			position = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
			break;
 8000b84:	e116      	b.n	8000db4 <time_set_mode+0x26c>
		case UP:
		case DOWN:
			if (stime.hours >= 12) {
 8000b86:	4b90      	ldr	r3, [pc, #576]	; (8000dc8 <time_set_mode+0x280>)
 8000b88:	f993 3000 	ldrsb.w	r3, [r3]
 8000b8c:	2b0b      	cmp	r3, #11
 8000b8e:	dd09      	ble.n	8000ba4 <time_set_mode+0x5c>
				stime.hours -= 12;
 8000b90:	4b8d      	ldr	r3, [pc, #564]	; (8000dc8 <time_set_mode+0x280>)
 8000b92:	f993 3000 	ldrsb.w	r3, [r3]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3b0c      	subs	r3, #12
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <time_set_mode+0x280>)
 8000ba0:	701a      	strb	r2, [r3, #0]
			} else {
				stime.hours += 12;
			}
			break;
 8000ba2:	e107      	b.n	8000db4 <time_set_mode+0x26c>
				stime.hours += 12;
 8000ba4:	4b88      	ldr	r3, [pc, #544]	; (8000dc8 <time_set_mode+0x280>)
 8000ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	330c      	adds	r3, #12
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	b25a      	sxtb	r2, r3
 8000bb2:	4b85      	ldr	r3, [pc, #532]	; (8000dc8 <time_set_mode+0x280>)
 8000bb4:	701a      	strb	r2, [r3, #0]
			break;
 8000bb6:	e0fd      	b.n	8000db4 <time_set_mode+0x26c>
			break;
		}

	}

	else if (position == 1) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d140      	bne.n	8000c40 <time_set_mode+0xf8>
		printf("This is position 1\r\n");
 8000bbe:	4883      	ldr	r0, [pc, #524]	; (8000dcc <time_set_mode+0x284>)
 8000bc0:	f007 fe5a 	bl	8008878 <puts>
//		joyStick_btn_chk();
		switch (current_state.button) {
 8000bc4:	4b7f      	ldr	r3, [pc, #508]	; (8000dc4 <time_set_mode+0x27c>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	f200 80e2 	bhi.w	8000d92 <time_set_mode+0x24a>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <time_set_mode+0x8c>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000be9 	.word	0x08000be9
 8000bd8:	08000bf5 	.word	0x08000bf5
 8000bdc:	08000c1b 	.word	0x08000c1b
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	08000bef 	.word	0x08000bef
		case NO_KEY:
		case RIGHT:
			position = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
			break;
 8000bec:	e0e2      	b.n	8000db4 <time_set_mode+0x26c>
		case LEFT:
			position = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
			break;
 8000bf2:	e0df      	b.n	8000db4 <time_set_mode+0x26c>
		case UP:
			stime.hours++;
 8000bf4:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <time_set_mode+0x280>)
 8000bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b25a      	sxtb	r2, r3
 8000c02:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <time_set_mode+0x280>)
 8000c04:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000c06:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <time_set_mode+0x280>)
 8000c08:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0c:	2b0b      	cmp	r3, #11
 8000c0e:	f340 80c2 	ble.w	8000d96 <time_set_mode+0x24e>
				stime.hours = 0;
 8000c12:	4b6d      	ldr	r3, [pc, #436]	; (8000dc8 <time_set_mode+0x280>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c18:	e0bd      	b.n	8000d96 <time_set_mode+0x24e>
		case DOWN:
			stime.hours--;
 8000c1a:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <time_set_mode+0x280>)
 8000c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <time_set_mode+0x280>)
 8000c2a:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000c2c:	4b66      	ldr	r3, [pc, #408]	; (8000dc8 <time_set_mode+0x280>)
 8000c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f280 80b1 	bge.w	8000d9a <time_set_mode+0x252>
				stime.hours = 11;
 8000c38:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <time_set_mode+0x280>)
 8000c3a:	220b      	movs	r2, #11
 8000c3c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c3e:	e0ac      	b.n	8000d9a <time_set_mode+0x252>
		default:
			break;
		}
	}

	else if (position == 2) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d13f      	bne.n	8000cc6 <time_set_mode+0x17e>
		printf("This is position 2\r\n");
 8000c46:	4862      	ldr	r0, [pc, #392]	; (8000dd0 <time_set_mode+0x288>)
 8000c48:	f007 fe16 	bl	8008878 <puts>
//		joyStick_btn_chk();
		switch (current_state.button) {
 8000c4c:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <time_set_mode+0x27c>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	f200 80a4 	bhi.w	8000d9e <time_set_mode+0x256>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <time_set_mode+0x114>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c71 	.word	0x08000c71
 8000c60:	08000c7d 	.word	0x08000c7d
 8000c64:	08000ca3 	.word	0x08000ca3
 8000c68:	08000c71 	.word	0x08000c71
 8000c6c:	08000c77 	.word	0x08000c77
		case NO_KEY:
		case RIGHT:
			position = 3;
 8000c70:	2303      	movs	r3, #3
 8000c72:	607b      	str	r3, [r7, #4]
			break;
 8000c74:	e09e      	b.n	8000db4 <time_set_mode+0x26c>
		case LEFT:
			position = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
			break;
 8000c7a:	e09b      	b.n	8000db4 <time_set_mode+0x26c>
		case UP:
			stime.minutes++;
 8000c7c:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <time_set_mode+0x280>)
 8000c7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <time_set_mode+0x280>)
 8000c8c:	705a      	strb	r2, [r3, #1]
			if (stime.minutes >= 60) {
 8000c8e:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <time_set_mode+0x280>)
 8000c90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c94:	2b3b      	cmp	r3, #59	; 0x3b
 8000c96:	f340 8084 	ble.w	8000da2 <time_set_mode+0x25a>
				stime.minutes = 0;
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <time_set_mode+0x280>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000ca0:	e07f      	b.n	8000da2 <time_set_mode+0x25a>
		case DOWN:
			stime.minutes--;
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <time_set_mode+0x280>)
 8000ca4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <time_set_mode+0x280>)
 8000cb2:	705a      	strb	r2, [r3, #1]
			if (stime.minutes < 0) {
 8000cb4:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <time_set_mode+0x280>)
 8000cb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da73      	bge.n	8000da6 <time_set_mode+0x25e>
				stime.minutes = 59;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <time_set_mode+0x280>)
 8000cc0:	223b      	movs	r2, #59	; 0x3b
 8000cc2:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000cc4:	e06f      	b.n	8000da6 <time_set_mode+0x25e>
		default:
			break;
		}
	} else if (position == 3) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d173      	bne.n	8000db4 <time_set_mode+0x26c>
		printf("This is position 3\r\n");
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <time_set_mode+0x28c>)
 8000cce:	f007 fdd3 	bl	8008878 <puts>
//		joyStick_btn_chk();
		switch (current_state.button) {
 8000cd2:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <time_set_mode+0x27c>)
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d867      	bhi.n	8000daa <time_set_mode+0x262>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <time_set_mode+0x198>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000cf5 	.word	0x08000cf5
 8000ce4:	08000d47 	.word	0x08000d47
 8000ce8:	08000d6b 	.word	0x08000d6b
 8000cec:	08000cf5 	.word	0x08000cf5
 8000cf0:	08000d41 	.word	0x08000d41
		case NO_KEY:
		case RIGHT:
			position = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]

			ctime.hours = stime.hours;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <time_set_mode+0x280>)
 8000cfa:	f993 2000 	ldrsb.w	r2, [r3]
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <time_set_mode+0x290>)
 8000d00:	701a      	strb	r2, [r3, #0]
			ctime.minutes = stime.minutes;
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <time_set_mode+0x280>)
 8000d04:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d08:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <time_set_mode+0x290>)
 8000d0a:	705a      	strb	r2, [r3, #1]
			ctime.seconds = stime.seconds;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <time_set_mode+0x280>)
 8000d0e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <time_set_mode+0x290>)
 8000d14:	709a      	strb	r2, [r3, #2]

			default_nvitem.setting_time.hours = stime.hours;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <time_set_mode+0x280>)
 8000d18:	f993 2000 	ldrsb.w	r2, [r3]
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <time_set_mode+0x294>)
 8000d1e:	711a      	strb	r2, [r3, #4]
			default_nvitem.setting_time.minutes = stime.minutes;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <time_set_mode+0x280>)
 8000d22:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <time_set_mode+0x294>)
 8000d28:	715a      	strb	r2, [r3, #5]
			default_nvitem.setting_time.seconds = stime.seconds;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <time_set_mode+0x280>)
 8000d2c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <time_set_mode+0x294>)
 8000d32:	719a      	strb	r2, [r3, #6]
			update_nvitems();
 8000d34:	f7ff fda4 	bl	8000880 <update_nvitems>
			current_state.mode = NORMAL_STATE;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <time_set_mode+0x27c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
			break;
 8000d3e:	e039      	b.n	8000db4 <time_set_mode+0x26c>
		case LEFT:
			position = 2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
			break;
 8000d44:	e036      	b.n	8000db4 <time_set_mode+0x26c>
		case UP:
			stime.seconds++;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <time_set_mode+0x280>)
 8000d48:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <time_set_mode+0x280>)
 8000d56:	709a      	strb	r2, [r3, #2]
			if (stime.seconds >= 60) {
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <time_set_mode+0x280>)
 8000d5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d5e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d60:	dd25      	ble.n	8000dae <time_set_mode+0x266>
				stime.hours = 0;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <time_set_mode+0x280>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d68:	e021      	b.n	8000dae <time_set_mode+0x266>
		case DOWN:
			stime.seconds--;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <time_set_mode+0x280>)
 8000d6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	b25a      	sxtb	r2, r3
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <time_set_mode+0x280>)
 8000d7a:	709a      	strb	r2, [r3, #2]
			if (stime.seconds < 0) {
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <time_set_mode+0x280>)
 8000d7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da15      	bge.n	8000db2 <time_set_mode+0x26a>
				stime.seconds = 59;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <time_set_mode+0x280>)
 8000d88:	223b      	movs	r2, #59	; 0x3b
 8000d8a:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000d8c:	e011      	b.n	8000db2 <time_set_mode+0x26a>
			break;
 8000d8e:	bf00      	nop
 8000d90:	e010      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000d92:	bf00      	nop
 8000d94:	e00e      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000d96:	bf00      	nop
 8000d98:	e00c      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000d9a:	bf00      	nop
 8000d9c:	e00a      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000d9e:	bf00      	nop
 8000da0:	e008      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000da2:	bf00      	nop
 8000da4:	e006      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000da6:	bf00      	nop
 8000da8:	e004      	b.n	8000db4 <time_set_mode+0x26c>
		default:
			break;
 8000daa:	bf00      	nop
 8000dac:	e002      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <time_set_mode+0x26c>
			break;
 8000db2:	bf00      	nop
	}

//	printf("position=%d hours=%d minutes=%d seconds=%d\r\n", position,
//			stime.hours, stime.minutes, stime.seconds);

	timeDisplay();
 8000db4:	f7ff fe02 	bl	80009bc <timeDisplay>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08009a40 	.word	0x08009a40
 8000dc4:	200009ac 	.word	0x200009ac
 8000dc8:	200009d4 	.word	0x200009d4
 8000dcc:	08009a54 	.word	0x08009a54
 8000dd0:	08009a68 	.word	0x08009a68
 8000dd4:	08009a7c 	.word	0x08009a7c
 8000dd8:	200009d0 	.word	0x200009d0
 8000ddc:	20000000 	.word	0x20000000

08000de0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000de6:	f001 f813 	bl	8001e10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dea:	f000 f83b 	bl	8000e64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dee:	f000 fad7 	bl	80013a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000df2:	f000 fab5 	bl	8001360 <MX_DMA_Init>
	MX_ETH_Init();
 8000df6:	f000 f925 	bl	8001044 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000dfa:	f000 fa59 	bl	80012b0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 fa81 	bl	8001304 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000e02:	f000 f8bf 	bl	8000f84 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000e06:	f000 f96b 	bl	80010e0 <MX_I2C1_Init>
	MX_RTC_Init();
 8000e0a:	f000 f9a9 	bl	8001160 <MX_RTC_Init>
	MX_TIM3_Init();
 8000e0e:	f000 fa01 	bl	8001214 <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000e12:	f000 f893 	bl	8000f3c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000e16:	2202      	movs	r2, #2
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <main+0x74>)
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <main+0x78>)
 8000e1c:	f001 fac0 	bl	80023a0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0x78>)
 8000e22:	f001 f8cf 	bl	8001fc4 <HAL_ADC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <main+0x7c>)
 8000e28:	f005 fcb6 	bl	8006798 <HAL_TIM_Base_Start_IT>
	init();
 8000e2c:	f7ff fcd3 	bl	80007d6 <init>

	current_state.mode = NORMAL_STATE;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <main+0x80>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
		// RTC test
//	  get_time();
//	  HAL_Delay(1000);

//		joyStick_btn_chk();
		get_RTC_time();
 8000e36:	f7ff fced 	bl	8000814 <get_RTC_time>
		if (current_state.mode == NORMAL_STATE) {
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <main+0x80>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <main+0x66>
			showCurrentTime();
 8000e42:	f7ff fd8f 	bl	8000964 <showCurrentTime>
		}

		if (current_state.mode == TIME_SETTING) {
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <main+0x80>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d1f3      	bne.n	8000e36 <main+0x56>
			time_set_mode();
 8000e4e:	f7ff fe7b 	bl	8000b48 <time_set_mode>
		get_RTC_time();
 8000e52:	e7f0      	b.n	8000e36 <main+0x56>
 8000e54:	20000974 	.word	0x20000974
 8000e58:	20000210 	.word	0x20000210
 8000e5c:	200003dc 	.word	0x200003dc
 8000e60:	200009ac 	.word	0x200009ac

08000e64 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 fe34 	bl	8008ae0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ec4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000edc:	23a8      	movs	r3, #168	; 0xa8
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 faad 	bl	800544c <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x98>
		Error_Handler();
 8000ef8:	f000 fba6 	bl	8001648 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2105      	movs	r1, #5
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fd0e 	bl	800593c <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0xc6>
		Error_Handler();
 8000f26:	f000 fb8f 	bl	8001648 <Error_Handler>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3750      	adds	r7, #80	; 0x50
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2027      	movs	r0, #39	; 0x27
 8000f46:	f001 fef8 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f4a:	2027      	movs	r0, #39	; 0x27
 8000f4c:	f001 ff11 	bl	8002d72 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2028      	movs	r0, #40	; 0x28
 8000f56:	f001 fef0 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f001 ff09 	bl	8002d72 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	201d      	movs	r0, #29
 8000f66:	f001 fee8 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f6a:	201d      	movs	r0, #29
 8000f6c:	f001 ff01 	bl	8002d72 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2012      	movs	r0, #18
 8000f76:	f001 fee0 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f7a:	2012      	movs	r0, #18
 8000f7c:	f001 fef9 	bl	8002d72 <HAL_NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_ADC1_Init+0xb8>)
 8000f98:	4a29      	ldr	r2, [pc, #164]	; (8001040 <MX_ADC1_Init+0xbc>)
 8000f9a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_ADC1_Init+0xb8>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_ADC1_Init+0xb8>)
 8000fea:	f000 ffa7 	bl	8001f3c <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000ff4:	f000 fb28 	bl	8001648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000ff8:	230d      	movs	r3, #13
 8000ffa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001000:	2304      	movs	r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_ADC1_Init+0xb8>)
 800100a:	f001 fb01 	bl	8002610 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
		Error_Handler();
 8001014:	f000 fb18 	bl	8001648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001018:	230a      	movs	r3, #10
 800101a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_ADC1_Init+0xb8>)
 8001026:	f001 faf3 	bl	8002610 <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0xb0>
		Error_Handler();
 8001030:	f000 fb0a 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000210 	.word	0x20000210
 8001040:	40012000 	.word	0x40012000

08001044 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ETH_Init+0x84>)
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <MX_ETH_Init+0x88>)
 800104c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_ETH_Init+0x8c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_ETH_Init+0x8c>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ETH_Init+0x8c>)
 800105c:	22e1      	movs	r2, #225	; 0xe1
 800105e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_ETH_Init+0x8c>)
 8001062:	2200      	movs	r2, #0
 8001064:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_ETH_Init+0x8c>)
 8001068:	2200      	movs	r2, #0
 800106a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_ETH_Init+0x8c>)
 800106e:	2200      	movs	r2, #0
 8001070:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_ETH_Init+0x84>)
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <MX_ETH_Init+0x8c>)
 8001076:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ETH_Init+0x84>)
 800107a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800107e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ETH_Init+0x84>)
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <MX_ETH_Init+0x90>)
 8001084:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_ETH_Init+0x84>)
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_ETH_Init+0x94>)
 800108a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_ETH_Init+0x84>)
 800108e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001092:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_ETH_Init+0x84>)
 8001096:	f002 fa89 	bl	80035ac <HAL_ETH_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ETH_Init+0x60>
		Error_Handler();
 80010a0:	f000 fad2 	bl	8001648 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80010a4:	2238      	movs	r2, #56	; 0x38
 80010a6:	2100      	movs	r1, #0
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_ETH_Init+0x98>)
 80010aa:	f007 fd19 	bl	8008ae0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_ETH_Init+0x98>)
 80010b0:	2221      	movs	r2, #33	; 0x21
 80010b2:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_ETH_Init+0x98>)
 80010b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010ba:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_ETH_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002b8 	.word	0x200002b8
 80010cc:	40028000 	.word	0x40028000
 80010d0:	200009f4 	.word	0x200009f4
 80010d4:	20000170 	.word	0x20000170
 80010d8:	200000d0 	.word	0x200000d0
 80010dc:	20000098 	.word	0x20000098

080010e0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_I2C1_Init+0x74>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <MX_I2C1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_I2C1_Init+0x74>)
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <MX_I2C1_Init+0x7c>)
 80010ee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_I2C1_Init+0x74>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_I2C1_Init+0x74>)
 800111e:	f003 fa83 	bl	8004628 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001128:	f000 fa8e 	bl	8001648 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800112c:	2100      	movs	r1, #0
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <MX_I2C1_Init+0x74>)
 8001130:	f003 fff3 	bl	800511a <HAL_I2CEx_ConfigAnalogFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800113a:	f000 fa85 	bl	8001648 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800113e:	2100      	movs	r1, #0
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C1_Init+0x74>)
 8001142:	f004 f826 	bl	8005192 <HAL_I2CEx_ConfigDigitalFilter>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x70>
		Error_Handler();
 800114c:	f000 fa7c 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000368 	.word	0x20000368
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_RTC_Init+0xac>)
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <MX_RTC_Init+0xb0>)
 800117c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_RTC_Init+0xac>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_RTC_Init+0xac>)
 8001186:	227f      	movs	r2, #127	; 0x7f
 8001188:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_RTC_Init+0xac>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_RTC_Init+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_RTC_Init+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_RTC_Init+0xac>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80011a2:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_RTC_Init+0xac>)
 80011a4:	f004 ffaa 	bl	80060fc <HAL_RTC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_RTC_Init+0x52>
		Error_Handler();
 80011ae:	f000 fa4b 	bl	8001648 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <MX_RTC_Init+0xac>)
 80011ce:	f005 f80b 	bl	80061e8 <HAL_RTC_SetTime>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_RTC_Init+0x7c>
		Error_Handler();
 80011d8:	f000 fa36 	bl	8001648 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80011dc:	2305      	movs	r3, #5
 80011de:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 80011e0:	2311      	movs	r3, #17
 80011e2:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 80011e4:	2310      	movs	r3, #16
 80011e6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 80011e8:	2323      	movs	r3, #35	; 0x23
 80011ea:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80011ec:	463b      	mov	r3, r7
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_RTC_Init+0xac>)
 80011f4:	f005 f8f0 	bl	80063d8 <HAL_RTC_SetDate>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_RTC_Init+0xa2>
		Error_Handler();
 80011fe:	f000 fa23 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200003bc 	.word	0x200003bc
 8001210:	40002800 	.word	0x40002800

08001214 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_TIM3_Init+0x98>)
 8001234:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001238:	f242 7210 	movw	r2, #10000	; 0x2710
 800123c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 900;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001246:	f44f 7261 	mov.w	r2, #900	; 0x384
 800124a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM3_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_TIM3_Init+0x94>)
 800125a:	f005 fa4d 	bl	80066f8 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001264:	f000 f9f0 	bl	8001648 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001276:	f005 fc07 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001280:	f000 f9e2 	bl	8001648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001284:	2320      	movs	r3, #32
 8001286:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001292:	f005 fe23 	bl	8006edc <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800129c:	f000 f9d4 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200003dc 	.word	0x200003dc
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_USART3_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012e8:	f005 fe88 	bl	8006ffc <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80012f2:	f000 f9a9 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000424 	.word	0x20000424
 8001300:	40004800 	.word	0x40004800

08001304 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800130e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001312:	2204      	movs	r2, #4
 8001314:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001318:	2202      	movs	r2, #2
 800131a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001324:	2202      	movs	r2, #2
 8001326:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132a:	2201      	movs	r2, #1
 800132c:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133c:	2201      	movs	r2, #1
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	f003 ff62 	bl	8005210 <HAL_PCD_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001352:	f000 f979 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000468 	.word	0x20000468

08001360 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_DMA_Init+0x3c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <MX_DMA_Init+0x3c>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_DMA_Init+0x3c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2038      	movs	r0, #56	; 0x38
 8001388:	f001 fcd7 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800138c:	2038      	movs	r0, #56	; 0x38
 800138e:	f001 fcf0 	bl	8002d72 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <MX_GPIO_Init+0x190>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <MX_GPIO_Init+0x190>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <MX_GPIO_Init+0x190>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <MX_GPIO_Init+0x190>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a55      	ldr	r2, [pc, #340]	; (8001530 <MX_GPIO_Init+0x190>)
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <MX_GPIO_Init+0x190>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0320 	and.w	r3, r3, #32
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <MX_GPIO_Init+0x190>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <MX_GPIO_Init+0x190>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <MX_GPIO_Init+0x190>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_GPIO_Init+0x190>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <MX_GPIO_Init+0x190>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <MX_GPIO_Init+0x190>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <MX_GPIO_Init+0x190>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <MX_GPIO_Init+0x190>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_GPIO_Init+0x190>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <MX_GPIO_Init+0x190>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a39      	ldr	r2, [pc, #228]	; (8001530 <MX_GPIO_Init+0x190>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_GPIO_Init+0x190>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_GPIO_Init+0x190>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <MX_GPIO_Init+0x190>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_GPIO_Init+0x190>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <MX_GPIO_Init+0x194>)
 8001482:	f003 f885 	bl	8004590 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001486:	2200      	movs	r2, #0
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	482b      	ldr	r0, [pc, #172]	; (8001538 <MX_GPIO_Init+0x198>)
 800148c:	f003 f880 	bl	8004590 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001494:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4825      	ldr	r0, [pc, #148]	; (800153c <MX_GPIO_Init+0x19c>)
 80014a8:	f002 feae 	bl	8004208 <HAL_GPIO_Init>

	/*Configure GPIO pin : Joy_btn_Pin */
	GPIO_InitStruct.Pin = Joy_btn_Pin;
 80014ac:	2308      	movs	r3, #8
 80014ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014b0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <MX_GPIO_Init+0x1a0>)
 80014c2:	f002 fea1 	bl	8004208 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80014c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80014ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4815      	ldr	r0, [pc, #84]	; (8001534 <MX_GPIO_Init+0x194>)
 80014e0:	f002 fe92 	bl	8004208 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014e4:	2340      	movs	r3, #64	; 0x40
 80014e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <MX_GPIO_Init+0x198>)
 80014fc:	f002 fe84 	bl	8004208 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <MX_GPIO_Init+0x198>)
 8001514:	f002 fe78 	bl	8004208 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2009      	movs	r0, #9
 800151e:	f001 fc0c 	bl	8002d3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001522:	2009      	movs	r0, #9
 8001524:	f001 fc25 	bl	8002d72 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400
 8001538:	40021800 	.word	0x40021800
 800153c:	40020800 	.word	0x40020800
 8001540:	40021400 	.word	0x40021400

08001544 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d161      	bne.n	8001618 <HAL_GPIO_EXTI_Callback+0xd4>
		// joystick sw test OK!
//	  btn_cnt++;
//	  printf("cnt = %d\r\n", btn_cnt);
//		printf("test interval=%d\r\n", interval);
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001554:	2101      	movs	r1, #1
 8001556:	4832      	ldr	r0, [pc, #200]	; (8001620 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001558:	f003 f833 	bl	80045c2 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 800155c:	f000 fcbe 	bl	8001edc <HAL_GetTick>
 8001560:	4603      	mov	r3, r0
 8001562:	4a30      	ldr	r2, [pc, #192]	; (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001564:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_GPIO_EXTI_Callback+0xe4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001572:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <HAL_GPIO_EXTI_Callback+0xe4>)
 800157a:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 800157c:	2108      	movs	r1, #8
 800157e:	482c      	ldr	r0, [pc, #176]	; (8001630 <HAL_GPIO_EXTI_Callback+0xec>)
 8001580:	f002 ffee 	bl	8004560 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d146      	bne.n	8001618 <HAL_GPIO_EXTI_Callback+0xd4>
			if (interval < 130) {
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b81      	cmp	r3, #129	; 0x81
 8001590:	d805      	bhi.n	800159e <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3303      	adds	r3, #3
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e02a      	b.n	80015f4 <HAL_GPIO_EXTI_Callback+0xb0>
			} else if (interval >= 130 && interval < 200) {
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b81      	cmp	r3, #129	; 0x81
 80015a4:	d910      	bls.n	80015c8 <HAL_GPIO_EXTI_Callback+0x84>
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2bc7      	cmp	r3, #199	; 0xc7
 80015ac:	d80c      	bhi.n	80015c8 <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4820      	ldr	r0, [pc, #128]	; (8001638 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015b6:	f007 f8f9 	bl	80087ac <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_GPIO_EXTI_Callback+0xf8>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e015      	b.n	80015f4 <HAL_GPIO_EXTI_Callback+0xb0>
//				time_set_mode();
			} else if (interval >= 300 && interval <= 1000) {
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015d0:	d310      	bcc.n	80015f4 <HAL_GPIO_EXTI_Callback+0xb0>
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015da:	d80b      	bhi.n	80015f4 <HAL_GPIO_EXTI_Callback+0xb0>
				printf("Long click!!  interval = %u\r\n",
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4817      	ldr	r0, [pc, #92]	; (8001640 <HAL_GPIO_EXTI_Callback+0xfc>)
 80015e4:	f007 f8e2 	bl	80087ac <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_GPIO_EXTI_Callback+0xf8>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	701a      	strb	r2, [r3, #0]
//				alarm_set_mode();
			}
			if (btn_cnt >= 5) {
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	dd0d      	ble.n	8001618 <HAL_GPIO_EXTI_Callback+0xd4>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <HAL_GPIO_EXTI_Callback+0x100>)
 8001608:	f007 f8d0 	bl	80087ac <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001614:	2203      	movs	r2, #3
 8001616:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020400 	.word	0x40020400
 8001624:	200009a0 	.word	0x200009a0
 8001628:	200009a4 	.word	0x200009a4
 800162c:	200009a8 	.word	0x200009a8
 8001630:	40021400 	.word	0x40021400
 8001634:	2000097c 	.word	0x2000097c
 8001638:	08009a90 	.word	0x08009a90
 800163c:	200009ac 	.word	0x200009ac
 8001640:	08009ab0 	.word	0x08009ab0
 8001644:	08009ad0 	.word	0x08009ad0

08001648 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001650:	e7fe      	b.n	8001650 <Error_Handler+0x8>
	...

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_MspInit+0x4c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x4c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <HAL_ADC_MspInit+0x110>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d171      	bne.n	80017aa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_ADC_MspInit+0x114>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800171a:	2309      	movs	r3, #9
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4823      	ldr	r0, [pc, #140]	; (80017bc <HAL_ADC_MspInit+0x118>)
 800172e:	f002 fd6b 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001732:	2308      	movs	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001736:	2303      	movs	r3, #3
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <HAL_ADC_MspInit+0x11c>)
 8001746:	f002 fd5f 	bl	8004208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_ADC_MspInit+0x124>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001768:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 800176c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001770:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001778:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 800177c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001780:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 8001790:	f001 fb0a 	bl	8002da8 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800179a:	f7ff ff55 	bl	8001648 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_ADC_MspInit+0x120>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012000 	.word	0x40012000
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	20000258 	.word	0x20000258
 80017c8:	40026410 	.word	0x40026410

080017cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a55      	ldr	r2, [pc, #340]	; (8001940 <HAL_ETH_MspInit+0x174>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	f040 80a4 	bne.w	8001938 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_ETH_MspInit+0x178>)
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a44      	ldr	r2, [pc, #272]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_ETH_MspInit+0x178>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_ETH_MspInit+0x178>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_ETH_MspInit+0x178>)
 80018a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_ETH_MspInit+0x178>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018b4:	2332      	movs	r3, #50	; 0x32
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c4:	230b      	movs	r3, #11
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <HAL_ETH_MspInit+0x17c>)
 80018d0:	f002 fc9a 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018d4:	2386      	movs	r3, #134	; 0x86
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e4:	230b      	movs	r3, #11
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	4817      	ldr	r0, [pc, #92]	; (800194c <HAL_ETH_MspInit+0x180>)
 80018f0:	f002 fc8a 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001906:	230b      	movs	r3, #11
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <HAL_ETH_MspInit+0x184>)
 8001912:	f002 fc79 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001916:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001928:	230b      	movs	r3, #11
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4808      	ldr	r0, [pc, #32]	; (8001954 <HAL_ETH_MspInit+0x188>)
 8001934:	f002 fc68 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3738      	adds	r7, #56	; 0x38
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40028000 	.word	0x40028000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40021800 	.word	0x40021800

08001958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_I2C_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12c      	bne.n	80019d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a8:	2304      	movs	r3, #4
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <HAL_I2C_MspInit+0x8c>)
 80019b4:	f002 fc28 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	2230      	movs	r2, #48	; 0x30
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 f871 	bl	8008ae0 <memset>
  if(hrtc->Instance==RTC)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_RTC_MspInit+0x4c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f9b0 	bl	8005d7c <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a22:	f7ff fe11 	bl	8001648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RTC_MspInit+0x50>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3738      	adds	r7, #56	; 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40002800 	.word	0x40002800
 8001a38:	42470e3c 	.word	0x42470e3c

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_TIM_Base_MspInit+0x3c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10d      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_UART_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_UART_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aec:	2307      	movs	r3, #7
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_UART_MspInit+0x8c>)
 8001af8:	f002 fb86 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40004800 	.word	0x40004800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020c00 	.word	0x40020c00

08001b10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b30:	d13f      	bne.n	8001bb2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b60:	230a      	movs	r3, #10
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4815      	ldr	r0, [pc, #84]	; (8001bc0 <HAL_PCD_MspInit+0xb0>)
 8001b6c:	f002 fb4c 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <HAL_PCD_MspInit+0xb0>)
 8001b86:	f002 fb3f 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b94:	6353      	str	r3, [r2, #52]	; 0x34
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_PCD_MspInit+0xac>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f950 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8001c1c:	2008      	movs	r0, #8
 8001c1e:	f002 fceb 	bl	80045f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ADC_IRQHandler+0x10>)
 8001c2e:	f000 faa7 	bl	8002180 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000210 	.word	0x20000210

08001c3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM3_IRQHandler+0x10>)
 8001c42:	f004 fe19 	bl	8006878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003dc 	.word	0x200003dc

08001c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART3_IRQHandler+0x10>)
 8001c56:	f005 fab1 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000424 	.word	0x20000424

08001c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c6c:	f002 fcc4 	bl	80045f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA2_Stream0_IRQHandler+0x10>)
 8001c7a:	f001 fa2d 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000258 	.word	0x20000258

08001c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
  }

  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
  return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f006 ff0e 	bl	8008b7c <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20030000 	.word	0x20030000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200009fc 	.word	0x200009fc
 8001d94:	20000b70 	.word	0x20000b70

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	; (8001e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de6:	f7ff ffd7 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f006 fecd 	bl	8008b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7fe fff7 	bl	8000de0 <main>
  bx  lr    
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001df4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e00:	08009b80 	.word	0x08009b80
  ldr r2, =_sbss
 8001e04:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e08:	20000b70 	.word	0x20000b70

08001e0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <CAN1_RX0_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_Init+0x40>)
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_Init+0x40>)
 8001e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_Init+0x40>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 ff73 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f808 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e44:	f7ff fc06 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023c00 	.word	0x40023c00

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x54>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_InitTick+0x58>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 ff8b 	bl	8002d8e <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 ff53 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <HAL_InitTick+0x5c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000014 	.word	0x20000014
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	20000018 	.word	0x20000018

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000001c 	.word	0x2000001c
 8001ed8:	20000a00 	.word	0x20000a00

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000a00 	.word	0x20000a00

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000001c 	.word	0x2000001c

08001f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e033      	b.n	8001fba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fba2 	bl	80016a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f82:	f023 0302 	bic.w	r3, r3, #2
 8001f86:	f043 0202 	orr.w	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fc70 	bl	8002874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8001faa:	e001      	b.n	8001fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start_IT+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0bd      	b.n	800215a <HAL_ADC_Start_IT+0x196>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_ADC_Start_IT+0x1a4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_ADC_Start_IT+0x1a8>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 8085 	bne.w	8002140 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002074:	d106      	bne.n	8002084 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f023 0206 	bic.w	r2, r3, #6
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
 8002082:	e002      	b.n	800208a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_ADC_Start_IT+0x1ac>)
 8002094:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800209e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ae:	f043 0320 	orr.w	r3, r3, #32
 80020b2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12a      	bne.n	8002116 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_ADC_Start_IT+0x1b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d015      	beq.n	80020f6 <HAL_ADC_Start_IT+0x132>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <HAL_ADC_Start_IT+0x1b4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_Start_IT+0x11c>
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_ADC_Start_IT+0x1ac>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_ADC_Start_IT+0x1b8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d136      	bne.n	8002158 <HAL_ADC_Start_IT+0x194>
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_ADC_Start_IT+0x1ac>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d130      	bne.n	8002158 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d129      	bne.n	8002158 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e020      	b.n	8002158 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_ADC_Start_IT+0x1b0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d11b      	bne.n	8002158 <HAL_ADC_Start_IT+0x194>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d114      	bne.n	8002158 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	e00b      	b.n	8002158 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f043 0210 	orr.w	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000014 	.word	0x20000014
 800216c:	431bde83 	.word	0x431bde83
 8002170:	40012300 	.word	0x40012300
 8002174:	40012000 	.word	0x40012000
 8002178:	40012100 	.word	0x40012100
 800217c:	40012200 	.word	0x40012200

08002180 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d049      	beq.n	800224a <HAL_ADC_IRQHandler+0xca>
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d046      	beq.n	800224a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12b      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d127      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f9c0 	bl	80025c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0212 	mvn.w	r2, #18
 8002248:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d057      	beq.n	8002310 <HAL_ADC_IRQHandler+0x190>
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d054      	beq.n	8002310 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d139      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d12b      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d124      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d119      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fc35 	bl	8002b70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 020c 	mvn.w	r2, #12
 800230e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10d      	bne.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f94e 	bl	80025e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0201 	mvn.w	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002364:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_IRQHandler+0x218>
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0220 	mvn.w	r2, #32
 8002386:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f937 	bl	80025fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0220 	mvn.w	r2, #32
 8002396:	601a      	str	r2, [r3, #0]
  }
}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Start_DMA+0x1e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0e9      	b.n	8002592 <HAL_ADC_Start_DMA+0x1f2>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d018      	beq.n	8002406 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_ADC_Start_DMA+0x1fc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6d      	ldr	r2, [pc, #436]	; (80025a0 <HAL_ADC_Start_DMA+0x200>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9a      	lsrs	r2, r3, #18
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d107      	bne.n	8002426 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002424:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 80a1 	bne.w	8002578 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002460:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d106      	bne.n	8002484 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
 8002482:	e002      	b.n	800248a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 8002494:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <HAL_ADC_Start_DMA+0x208>)
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4a42      	ldr	r2, [pc, #264]	; (80025ac <HAL_ADC_Start_DMA+0x20c>)
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <HAL_ADC_Start_DMA+0x210>)
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	334c      	adds	r3, #76	; 0x4c
 80024e2:	4619      	mov	r1, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f000 fd0c 	bl	8002f04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12a      	bne.n	800254e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_ADC_Start_DMA+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d015      	beq.n	800252e <HAL_ADC_Start_DMA+0x18e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <HAL_ADC_Start_DMA+0x218>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d105      	bne.n	8002518 <HAL_ADC_Start_DMA+0x178>
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_ADC_Start_DMA+0x21c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d136      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d130      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d129      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	e020      	b.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_ADC_Start_DMA+0x214>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d11b      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d114      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	e00b      	b.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0210 	orr.w	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000014 	.word	0x20000014
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	40012300 	.word	0x40012300
 80025a8:	08002a6d 	.word	0x08002a6d
 80025ac:	08002b27 	.word	0x08002b27
 80025b0:	08002b43 	.word	0x08002b43
 80025b4:	40012000 	.word	0x40012000
 80025b8:	40012100 	.word	0x40012100
 80025bc:	40012200 	.word	0x40012200

080025c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1c>
 8002628:	2302      	movs	r3, #2
 800262a:	e113      	b.n	8002854 <HAL_ADC_ConfigChannel+0x244>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b09      	cmp	r3, #9
 800263a:	d925      	bls.n	8002688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	3b1e      	subs	r3, #30
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43da      	mvns	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	400a      	ands	r2, r1
 8002660:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	4603      	mov	r3, r0
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4403      	add	r3, r0
 800267a:	3b1e      	subs	r3, #30
 800267c:	409a      	lsls	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e022      	b.n	80026ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	2207      	movs	r2, #7
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4403      	add	r3, r0
 80026c4:	409a      	lsls	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d824      	bhi.n	8002720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b05      	subs	r3, #5
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
 800271e:	e04c      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d824      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b23      	subs	r3, #35	; 0x23
 800273a:	221f      	movs	r2, #31
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b23      	subs	r3, #35	; 0x23
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
 8002770:	e023      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b41      	subs	r3, #65	; 0x41
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b41      	subs	r3, #65	; 0x41
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_ADC_ConfigChannel+0x250>)
 80027bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a28      	ldr	r2, [pc, #160]	; (8002864 <HAL_ADC_ConfigChannel+0x254>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10f      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d8>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d10b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_ADC_ConfigChannel+0x254>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12b      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_ADC_ConfigChannel+0x258>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x1f4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b11      	cmp	r3, #17
 8002802:	d122      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_ADC_ConfigChannel+0x258>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_ADC_ConfigChannel+0x25c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_ADC_ConfigChannel+0x260>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c9a      	lsrs	r2, r3, #18
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800283c:	e002      	b.n	8002844 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3b01      	subs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000
 8002868:	10000012 	.word	0x10000012
 800286c:	20000014 	.word	0x20000014
 8002870:	431bde83 	.word	0x431bde83

08002874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287c:	4b79      	ldr	r3, [pc, #484]	; (8002a64 <ADC_Init+0x1f0>)
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <ADC_Init+0x1f4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800291a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800293c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	e00f      	b.n	8002972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0202 	bic.w	r2, r2, #2
 8002980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e1b      	ldrb	r3, [r3, #24]
 800298c:	005a      	lsls	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	3b01      	subs	r3, #1
 80029cc:	035a      	lsls	r2, r3, #13
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e007      	b.n	80029e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	051a      	lsls	r2, r3, #20
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a2a:	025a      	lsls	r2, r3, #9
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	029a      	lsls	r2, r3, #10
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40012300 	.word	0x40012300
 8002a68:	0f000001 	.word	0x0f000001

08002a6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d13c      	bne.n	8002b00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d12b      	bne.n	8002af8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d127      	bne.n	8002af8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d119      	bne.n	8002af8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0220 	bic.w	r2, r2, #32
 8002ad2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff fd61 	bl	80025c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002afe:	e00e      	b.n	8002b1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fd75 	bl	80025fc <HAL_ADC_ErrorCallback>
}
 8002b12:	e004      	b.n	8002b1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff fd4d 	bl	80025d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff fd4a 	bl	80025fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f7ff ff8e 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff29 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff3e 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff8e 	bl	8002c78 <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5d 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff31 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ffa2 	bl	8002ce0 <SysTick_Config>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff f892 	bl	8001edc <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e099      	b.n	8002ef8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de4:	e00f      	b.n	8002e06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de6:	f7ff f879 	bl	8001edc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d908      	bls.n	8002e06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e078      	b.n	8002ef8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e8      	bne.n	8002de6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_DMA_Init+0x158>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d107      	bne.n	8002e70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d117      	bne.n	8002eca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb01 	bl	80034b4 <DMA_CheckFifoParam>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e016      	b.n	8002ef8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fab8 	bl	8003448 <DMA_CalcBaseAndBitshift>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	223f      	movs	r2, #63	; 0x3f
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	f010803f 	.word	0xf010803f

08002f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Start_IT+0x26>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e040      	b.n	8002fac <HAL_DMA_Start_IT+0xa8>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d12f      	bne.n	8002f9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa4a 	bl	80033ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	223f      	movs	r2, #63	; 0x3f
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0216 	orr.w	r2, r2, #22
 8002f72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e005      	b.n	8002faa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc2:	f7fe ff8b 	bl	8001edc <HAL_GetTick>
 8002fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d008      	beq.n	8002fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e052      	b.n	800308c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_Abort+0x62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003036:	e013      	b.n	8003060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003038:	f7fe ff50 	bl	8001edc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b05      	cmp	r3, #5
 8003044:	d90c      	bls.n	8003060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e015      	b.n	800308c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e4      	bne.n	8003038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	223f      	movs	r2, #63	; 0x3f
 8003074:	409a      	lsls	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00c      	b.n	80030cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2205      	movs	r2, #5
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e4:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_DMA_IRQHandler+0x248>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a8e      	ldr	r2, [pc, #568]	; (8003324 <HAL_DMA_IRQHandler+0x24c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	2208      	movs	r2, #8
 8003132:	409a      	lsls	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2201      	movs	r2, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2204      	movs	r2, #4
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2204      	movs	r2, #4
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2210      	movs	r2, #16
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d043      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d03c      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2210      	movs	r2, #16
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
 8003206:	e01f      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e016      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0208 	bic.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2220      	movs	r2, #32
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 808f 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8087 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2220      	movs	r2, #32
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b05      	cmp	r3, #5
 8003280:	d136      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x1da>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	223f      	movs	r2, #63	; 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d07e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
        }
        return;
 80032ee:	e079      	b.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01d      	beq.n	800333a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	2b00      	cmp	r3, #0
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e02c      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
 800331e:	bf00      	nop
 8003320:	20000014 	.word	0x20000014
 8003324:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e01e      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10f      	bne.n	8003368 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d032      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2205      	movs	r2, #5
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d307      	bcc.n	80033c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x2cc>
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e000      	b.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e4:	bf00      	nop
    }
  }
}
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003408:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d108      	bne.n	800342c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800342a:	e007      	b.n	800343c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3b10      	subs	r3, #16
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <DMA_CalcBaseAndBitshift+0x64>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d909      	bls.n	800348a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	659a      	str	r2, [r3, #88]	; 0x58
 8003488:	e007      	b.n	800349a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	aaaaaaab 	.word	0xaaaaaaab
 80034b0:	08009b34 	.word	0x08009b34

080034b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d856      	bhi.n	8003582 <DMA_CheckFifoParam+0xce>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <DMA_CheckFifoParam+0x28>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	080034ed 	.word	0x080034ed
 80034e8:	08003583 	.word	0x08003583
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d046      	beq.n	8003586 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fc:	e043      	b.n	8003586 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003506:	d140      	bne.n	800358a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e03d      	b.n	800358a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d121      	bne.n	800355c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d837      	bhi.n	800358e <DMA_CheckFifoParam+0xda>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <DMA_CheckFifoParam+0x70>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003535 	.word	0x08003535
 8003528:	0800353b 	.word	0x0800353b
 800352c:	08003535 	.word	0x08003535
 8003530:	0800354d 	.word	0x0800354d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e030      	b.n	800359c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d025      	beq.n	8003592 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354a:	e022      	b.n	8003592 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003554:	d11f      	bne.n	8003596 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355a:	e01c      	b.n	8003596 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d903      	bls.n	800356a <DMA_CheckFifoParam+0xb6>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d003      	beq.n	8003570 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003568:	e018      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
      break;
 800356e:	e015      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e00b      	b.n	800359a <DMA_CheckFifoParam+0xe6>
      break;
 8003582:	bf00      	nop
 8003584:	e00a      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e008      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e006      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;   
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
    }
  } 
  
  return status; 
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06c      	b.n	8003698 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2223      	movs	r2, #35	; 0x23
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe f8fb 	bl	80017cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_ETH_Init+0xf4>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	4a30      	ldr	r2, [pc, #192]	; (80036a0 <HAL_ETH_Init+0xf4>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e4:	6453      	str	r3, [r2, #68]	; 0x44
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_ETH_Init+0xf4>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_ETH_Init+0xf8>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <HAL_ETH_Init+0xf8>)
 80035f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_ETH_Init+0xf8>)
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4927      	ldr	r1, [pc, #156]	; (80036a4 <HAL_ETH_Init+0xf8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_ETH_Init+0xf8>)
 800360e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003628:	f7fe fc58 	bl	8001edc <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800362e:	e011      	b.n	8003654 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003630:	f7fe fc54 	bl	8001edc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800363e:	d909      	bls.n	8003654 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	22e0      	movs	r2, #224	; 0xe0
 800364c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e021      	b.n	8003698 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e4      	bne.n	8003630 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f958 	bl	800391c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f9ff 	bl	8003a70 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa55 	bl	8003b22 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	461a      	mov	r2, r3
 800367e:	2100      	movs	r1, #0
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9bd 	bl	8003a00 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2210      	movs	r2, #16
 8003692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800

080036a8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <ETH_SetMACConfig+0x15c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	7c1b      	ldrb	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <ETH_SetMACConfig+0x28>
 80036ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80036ce:	e000      	b.n	80036d2 <ETH_SetMACConfig+0x2a>
 80036d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	7c5b      	ldrb	r3, [r3, #17]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <ETH_SetMACConfig+0x38>
 80036da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036de:	e000      	b.n	80036e2 <ETH_SetMACConfig+0x3a>
 80036e0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80036e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80036e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	7fdb      	ldrb	r3, [r3, #31]
 80036ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80036f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80036f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	7f92      	ldrb	r2, [r2, #30]
 80036fc:	2a00      	cmp	r2, #0
 80036fe:	d102      	bne.n	8003706 <ETH_SetMACConfig+0x5e>
 8003700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003704:	e000      	b.n	8003708 <ETH_SetMACConfig+0x60>
 8003706:	2200      	movs	r2, #0
                        macconf->Speed |
 8003708:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	7f1b      	ldrb	r3, [r3, #28]
 800370e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003710:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003716:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	791b      	ldrb	r3, [r3, #4]
 800371c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800371e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003726:	2a00      	cmp	r2, #0
 8003728:	d102      	bne.n	8003730 <ETH_SetMACConfig+0x88>
 800372a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372e:	e000      	b.n	8003732 <ETH_SetMACConfig+0x8a>
 8003730:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003732:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	7bdb      	ldrb	r3, [r3, #15]
 8003738:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800373a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003740:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003748:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800374a:	4313      	orrs	r3, r2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003762:	2001      	movs	r0, #1
 8003764:	f7fe fbc6 	bl	8001ef4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800377e:	4013      	ands	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800378e:	2a00      	cmp	r2, #0
 8003790:	d101      	bne.n	8003796 <ETH_SetMACConfig+0xee>
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	e000      	b.n	8003798 <ETH_SetMACConfig+0xf0>
 8003796:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003798:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800379e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80037a6:	2a01      	cmp	r2, #1
 80037a8:	d101      	bne.n	80037ae <ETH_SetMACConfig+0x106>
 80037aa:	2208      	movs	r2, #8
 80037ac:	e000      	b.n	80037b0 <ETH_SetMACConfig+0x108>
 80037ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80037b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80037b8:	2a01      	cmp	r2, #1
 80037ba:	d101      	bne.n	80037c0 <ETH_SetMACConfig+0x118>
 80037bc:	2204      	movs	r2, #4
 80037be:	e000      	b.n	80037c2 <ETH_SetMACConfig+0x11a>
 80037c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80037c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	d101      	bne.n	80037d2 <ETH_SetMACConfig+0x12a>
 80037ce:	2202      	movs	r2, #2
 80037d0:	e000      	b.n	80037d4 <ETH_SetMACConfig+0x12c>
 80037d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037d4:	4313      	orrs	r3, r2
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7fe fb81 	bl	8001ef4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	ff20810f 	.word	0xff20810f

08003808 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <ETH_SetDMAConfig+0x110>)
 8003822:	4013      	ands	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	7b1b      	ldrb	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <ETH_SetDMAConfig+0x2c>
 800382e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003832:	e000      	b.n	8003836 <ETH_SetDMAConfig+0x2e>
 8003834:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7b5b      	ldrb	r3, [r3, #13]
 800383a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800383c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	7f52      	ldrb	r2, [r2, #29]
 8003842:	2a00      	cmp	r2, #0
 8003844:	d102      	bne.n	800384c <ETH_SetDMAConfig+0x44>
 8003846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800384a:	e000      	b.n	800384e <ETH_SetDMAConfig+0x46>
 800384c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800384e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	7b9b      	ldrb	r3, [r3, #14]
 8003854:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003856:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800385c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	7f1b      	ldrb	r3, [r3, #28]
 8003862:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003864:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	7f9b      	ldrb	r3, [r3, #30]
 800386a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800386c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003872:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800387a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800387c:	4313      	orrs	r3, r2
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388c:	461a      	mov	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800389e:	2001      	movs	r0, #1
 80038a0:	f7fe fb28 	bl	8001ef4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	461a      	mov	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	791b      	ldrb	r3, [r3, #4]
 80038b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80038c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80038c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80038d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80038da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80038e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038fc:	2001      	movs	r0, #1
 80038fe:	f7fe faf9 	bl	8001ef4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	f8de3f23 	.word	0xf8de3f23

0800391c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0a6      	sub	sp, #152	; 0x98
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003930:	2300      	movs	r3, #0
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003958:	2300      	movs	r3, #0
 800395a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003962:	2300      	movs	r3, #0
 8003964:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800397e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003988:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe86 	bl	80036a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800399c:	2301      	movs	r3, #1
 800399e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80039be:	2300      	movs	r3, #0
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80039d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80039d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff08 	bl	8003808 <ETH_SetDMAConfig>
}
 80039f8:	bf00      	nop
 80039fa:	3798      	adds	r7, #152	; 0x98
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3305      	adds	r3, #5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	3204      	adds	r2, #4
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <ETH_MACAddressConfig+0x68>)
 8003a22:	4413      	add	r3, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3303      	adds	r3, #3
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	061a      	lsls	r2, r3, #24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3302      	adds	r3, #2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	4313      	orrs	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	7812      	ldrb	r2, [r2, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <ETH_MACAddressConfig+0x6c>)
 8003a52:	4413      	add	r3, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40028040 	.word	0x40028040
 8003a6c:	40028044 	.word	0x40028044

08003a70 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e03e      	b.n	8003afc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	3206      	adds	r2, #6
 8003ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d80c      	bhi.n	8003ae0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68d9      	ldr	r1, [r3, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	e004      	b.n	8003aea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d9bd      	bls.n	8003a7e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	611a      	str	r2, [r3, #16]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e046      	b.n	8003bbe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6919      	ldr	r1, [r3, #16]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003b74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	3212      	adds	r2, #18
 8003b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d80c      	bhi.n	8003bae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6919      	ldr	r1, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60da      	str	r2, [r3, #12]
 8003bac:	e004      	b.n	8003bb8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d9b5      	bls.n	8003b30 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bee:	60da      	str	r2, [r3, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_FLASH_Program+0xa0>)
 8003c10:	7e1b      	ldrb	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_FLASH_Program+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e03b      	b.n	8003c92 <HAL_FLASH_Program+0x96>
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_FLASH_Program+0xa0>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c24:	f000 f870 	bl	8003d08 <FLASH_WaitForLastOperation>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d12b      	bne.n	8003c8a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c38:	783b      	ldrb	r3, [r7, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f000 f91b 	bl	8003e78 <FLASH_Program_Byte>
 8003c42:	e016      	b.n	8003c72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 f8ee 	bl	8003e30 <FLASH_Program_HalfWord>
 8003c54:	e00d      	b.n	8003c72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d105      	bne.n	8003c68 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	68b8      	ldr	r0, [r7, #8]
 8003c62:	f000 f8c3 	bl	8003dec <FLASH_Program_Word>
 8003c66:	e004      	b.n	8003c72 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c6c:	68b8      	ldr	r0, [r7, #8]
 8003c6e:	f000 f88b 	bl	8003d88 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c76:	f000 f847 	bl	8003d08 <FLASH_WaitForLastOperation>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_FLASH_Program+0xa4>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <HAL_FLASH_Program+0xa4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_FLASH_Program+0xa0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000a04 	.word	0x20000a04
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_FLASH_Unlock+0x38>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0b      	bge.n	8003cce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_FLASH_Unlock+0x38>)
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_FLASH_Unlock+0x3c>)
 8003cba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_FLASH_Unlock+0x38>)
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_FLASH_Unlock+0x40>)
 8003cc0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_FLASH_Unlock+0x38>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da01      	bge.n	8003cce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003cce:	79fb      	ldrb	r3, [r7, #7]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40023c00 	.word	0x40023c00
 8003ce0:	45670123 	.word	0x45670123
 8003ce4:	cdef89ab 	.word	0xcdef89ab

08003ce8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_FLASH_Lock+0x1c>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_FLASH_Lock+0x1c>)
 8003cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cf6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40023c00 	.word	0x40023c00

08003d08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <FLASH_WaitForLastOperation+0x78>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d1a:	f7fe f8df 	bl	8001edc <HAL_GetTick>
 8003d1e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d20:	e010      	b.n	8003d44 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d00c      	beq.n	8003d44 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <FLASH_WaitForLastOperation+0x38>
 8003d30:	f7fe f8d4 	bl	8001edc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d201      	bcs.n	8003d44 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e019      	b.n	8003d78 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <FLASH_WaitForLastOperation+0x7c>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e8      	bne.n	8003d22 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <FLASH_WaitForLastOperation+0x7c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <FLASH_WaitForLastOperation+0x7c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <FLASH_WaitForLastOperation+0x7c>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d6e:	f000 f8a5 	bl	8003ebc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
  
}  
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000a04 	.word	0x20000a04
 8003d84:	40023c00 	.word	0x40023c00

08003d88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003da6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003daa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <FLASH_Program_DoubleWord+0x60>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003dbe:	f3bf 8f6f 	isb	sy
}
 8003dc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	3104      	adds	r1, #4
 8003dd8:	4613      	mov	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40023c00 	.word	0x40023c00

08003dec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <FLASH_Program_Word+0x40>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	601a      	str	r2, [r3, #0]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40023c00 	.word	0x40023c00

08003e30 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <FLASH_Program_HalfWord+0x44>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	801a      	strh	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e92:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <FLASH_Program_Byte+0x40>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	701a      	strb	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023c00 	.word	0x40023c00

08003ebc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ecc:	4b2d      	ldr	r3, [pc, #180]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003ed6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003eda:	2210      	movs	r2, #16
 8003edc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003ef4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003ef8:	2220      	movs	r2, #32
 8003efa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f30:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f34:	2280      	movs	r2, #128	; 0x80
 8003f36:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f56:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f043 0320 	orr.w	r3, r3, #32
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <FLASH_SetErrorCode+0xc8>)
 8003f6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <FLASH_SetErrorCode+0xc4>)
 8003f72:	2202      	movs	r2, #2
 8003f74:	60da      	str	r2, [r3, #12]
  }
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40023c00 	.word	0x40023c00
 8003f84:	20000a04 	.word	0x20000a04

08003f88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_FLASHEx_Erase+0xdc>)
 8003f9c:	7e1b      	ldrb	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_FLASHEx_Erase+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e05a      	b.n	800405c <HAL_FLASHEx_Erase+0xd4>
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_FLASHEx_Erase+0xdc>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fb0:	f7ff feaa 	bl	8003d08 <FLASH_WaitForLastOperation>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d14a      	bne.n	8004054 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d117      	bne.n	8003ffe <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 f846 	bl	800406c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fe4:	f7ff fe90 	bl	8003d08 <FLASH_WaitForLastOperation>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_FLASHEx_Erase+0xe0>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_FLASHEx_Erase+0xe0>)
 8003ff2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ff6:	f023 0304 	bic.w	r3, r3, #4
 8003ffa:	6113      	str	r3, [r2, #16]
 8003ffc:	e028      	b.n	8004050 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	e01c      	b.n	8004040 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	4619      	mov	r1, r3
 800400e:	68b8      	ldr	r0, [r7, #8]
 8004010:	f000 f866 	bl	80040e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004018:	f7ff fe76 	bl	8003d08 <FLASH_WaitForLastOperation>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_FLASHEx_Erase+0xe0>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a10      	ldr	r2, [pc, #64]	; (8004068 <HAL_FLASHEx_Erase+0xe0>)
 8004026:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800402a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	601a      	str	r2, [r3, #0]
          break;
 8004038:	e00a      	b.n	8004050 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3301      	adds	r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4413      	add	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d3da      	bcc.n	8004006 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004050:	f000 f894 	bl	800417c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_FLASHEx_Erase+0xdc>)
 8004056:	2200      	movs	r2, #0
 8004058:	761a      	strb	r2, [r3, #24]

  return status;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000a04 	.word	0x20000a04
 8004068:	40023c00 	.word	0x40023c00

0800406c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <FLASH_MassErase+0x70>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <FLASH_MassErase+0x70>)
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d108      	bne.n	800409c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <FLASH_MassErase+0x70>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <FLASH_MassErase+0x70>)
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6113      	str	r3, [r2, #16]
 800409a:	e00f      	b.n	80040bc <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <FLASH_MassErase+0x70>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <FLASH_MassErase+0x70>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6113      	str	r3, [r2, #16]
 80040ae:	e005      	b.n	80040bc <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <FLASH_MassErase+0x70>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4a09      	ldr	r2, [pc, #36]	; (80040dc <FLASH_MassErase+0x70>)
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <FLASH_MassErase+0x70>)
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	4313      	orrs	r3, r2
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <FLASH_MassErase+0x70>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6113      	str	r3, [r2, #16]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00

080040e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e010      	b.n	800411e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d103      	bne.n	800410a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e009      	b.n	800411e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d103      	bne.n	8004118 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e002      	b.n	800411e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800411c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b0b      	cmp	r3, #11
 8004122:	d902      	bls.n	800412a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <FLASH_Erase_Sector+0x98>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	490f      	ldr	r1, [pc, #60]	; (8004178 <FLASH_Erase_Sector+0x98>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800414c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4313      	orrs	r3, r2
 8004158:	4a07      	ldr	r2, [pc, #28]	; (8004178 <FLASH_Erase_Sector+0x98>)
 800415a:	f043 0302 	orr.w	r3, r3, #2
 800415e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <FLASH_Erase_Sector+0x98>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	6113      	str	r3, [r2, #16]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40023c00 	.word	0x40023c00

0800417c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <FLASH_FlushCaches+0x88>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <FLASH_FlushCaches+0x88>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <FLASH_FlushCaches+0x88>)
 8004192:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004196:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <FLASH_FlushCaches+0x88>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <FLASH_FlushCaches+0x88>)
 800419e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <FLASH_FlushCaches+0x88>)
 80041f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f6:	6013      	str	r3, [r2, #0]
  }
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e177      	b.n	8004514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004224:	2201      	movs	r2, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	f040 8166 	bne.w	800450e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d005      	beq.n	800425a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004256:	2b02      	cmp	r3, #2
 8004258:	d130      	bne.n	80042bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	2203      	movs	r2, #3
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 0201 	and.w	r2, r3, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d017      	beq.n	80042f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d123      	bne.n	800434c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	08da      	lsrs	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3208      	adds	r2, #8
 800430c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	220f      	movs	r2, #15
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	08da      	lsrs	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3208      	adds	r2, #8
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2203      	movs	r2, #3
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0203 	and.w	r2, r3, #3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80c0 	beq.w	800450e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_GPIO_Init+0x324>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	4a65      	ldr	r2, [pc, #404]	; (800452c <HAL_GPIO_Init+0x324>)
 8004398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439c:	6453      	str	r3, [r2, #68]	; 0x44
 800439e:	4b63      	ldr	r3, [pc, #396]	; (800452c <HAL_GPIO_Init+0x324>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043aa:	4a61      	ldr	r2, [pc, #388]	; (8004530 <HAL_GPIO_Init+0x328>)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3302      	adds	r3, #2
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	220f      	movs	r2, #15
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_GPIO_Init+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d037      	beq.n	8004446 <HAL_GPIO_Init+0x23e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_GPIO_Init+0x330>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_GPIO_Init+0x23a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a56      	ldr	r2, [pc, #344]	; (800453c <HAL_GPIO_Init+0x334>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <HAL_GPIO_Init+0x236>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a55      	ldr	r2, [pc, #340]	; (8004540 <HAL_GPIO_Init+0x338>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d025      	beq.n	800443a <HAL_GPIO_Init+0x232>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a54      	ldr	r2, [pc, #336]	; (8004544 <HAL_GPIO_Init+0x33c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01f      	beq.n	8004436 <HAL_GPIO_Init+0x22e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a53      	ldr	r2, [pc, #332]	; (8004548 <HAL_GPIO_Init+0x340>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d019      	beq.n	8004432 <HAL_GPIO_Init+0x22a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_GPIO_Init+0x344>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_GPIO_Init+0x226>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a51      	ldr	r2, [pc, #324]	; (8004550 <HAL_GPIO_Init+0x348>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00d      	beq.n	800442a <HAL_GPIO_Init+0x222>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a50      	ldr	r2, [pc, #320]	; (8004554 <HAL_GPIO_Init+0x34c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <HAL_GPIO_Init+0x21e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4f      	ldr	r2, [pc, #316]	; (8004558 <HAL_GPIO_Init+0x350>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_GPIO_Init+0x21a>
 800441e:	2309      	movs	r3, #9
 8004420:	e012      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004422:	230a      	movs	r3, #10
 8004424:	e010      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004426:	2308      	movs	r3, #8
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800442a:	2307      	movs	r3, #7
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_GPIO_Init+0x328>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <HAL_GPIO_Init+0x354>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a34      	ldr	r2, [pc, #208]	; (800455c <HAL_GPIO_Init+0x354>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_GPIO_Init+0x354>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a29      	ldr	r2, [pc, #164]	; (800455c <HAL_GPIO_Init+0x354>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <HAL_GPIO_Init+0x354>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_GPIO_Init+0x354>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_GPIO_Init+0x354>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <HAL_GPIO_Init+0x354>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae84 	bls.w	8004224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40022000 	.word	0x40022000
 8004558:	40022400 	.word	0x40022400
 800455c:	40013c00 	.word	0x40013c00

08004560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e001      	b.n	8004582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
 800459c:	4613      	mov	r3, r2
 800459e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a0:	787b      	ldrb	r3, [r7, #1]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045ac:	e003      	b.n	80045b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	041a      	lsls	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	619a      	str	r2, [r3, #24]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4013      	ands	r3, r2
 80045da:	041a      	lsls	r2, r3, #16
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	43d9      	mvns	r1, r3
 80045e0:	887b      	ldrh	r3, [r7, #2]
 80045e2:	400b      	ands	r3, r1
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	619a      	str	r2, [r3, #24]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc ff94 	bl	8001544 <HAL_GPIO_EXTI_Callback>
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40013c00 	.word	0x40013c00

08004628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e12b      	b.n	8004892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd f982 	bl	8001958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800468c:	f001 fb4e 	bl	8005d2c <HAL_RCC_GetPCLK1Freq>
 8004690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a81      	ldr	r2, [pc, #516]	; (800489c <HAL_I2C_Init+0x274>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d807      	bhi.n	80046ac <HAL_I2C_Init+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a80      	ldr	r2, [pc, #512]	; (80048a0 <HAL_I2C_Init+0x278>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e006      	b.n	80046ba <HAL_I2C_Init+0x92>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	; (80048a4 <HAL_I2C_Init+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0e7      	b.n	8004892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a78      	ldr	r2, [pc, #480]	; (80048a8 <HAL_I2C_Init+0x280>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	; (800489c <HAL_I2C_Init+0x274>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <HAL_I2C_Init+0xd4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	e009      	b.n	8004710 <HAL_I2C_Init+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a69      	ldr	r2, [pc, #420]	; (80048ac <HAL_I2C_Init+0x284>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	3301      	adds	r3, #1
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	495c      	ldr	r1, [pc, #368]	; (800489c <HAL_I2C_Init+0x274>)
 800472c:	428b      	cmp	r3, r1
 800472e:	d819      	bhi.n	8004764 <HAL_I2C_Init+0x13c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e59      	subs	r1, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fbb1 f3f3 	udiv	r3, r1, r3
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004744:	400b      	ands	r3, r1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_I2C_Init+0x138>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e59      	subs	r1, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fbb1 f3f3 	udiv	r3, r1, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	e051      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004760:	2304      	movs	r3, #4
 8004762:	e04f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <HAL_I2C_Init+0x168>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e012      	b.n	80047b6 <HAL_I2C_Init+0x18e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x196>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <HAL_I2C_Init+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e58      	subs	r0, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e2:	e00f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	6809      	ldr	r1, [r1, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6911      	ldr	r1, [r2, #16]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	000186a0 	.word	0x000186a0
 80048a0:	001e847f 	.word	0x001e847f
 80048a4:	003d08ff 	.word	0x003d08ff
 80048a8:	431bde83 	.word	0x431bde83
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
 80048c0:	4613      	mov	r3, r2
 80048c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048c4:	f7fd fb0a 	bl	8001edc <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 80e0 	bne.w	8004a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2319      	movs	r3, #25
 80048de:	2201      	movs	r2, #1
 80048e0:	4970      	ldr	r1, [pc, #448]	; (8004aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fa92 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0d3      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_I2C_Master_Transmit+0x50>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e0cc      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d007      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2221      	movs	r2, #33	; 0x21
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2210      	movs	r2, #16
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a50      	ldr	r2, [pc, #320]	; (8004aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f9ca 	bl	8004d08 <I2C_MasterRequestWrite>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e08d      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004994:	e066      	b.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fb0c 	bl	8004fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06b      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	6a39      	ldr	r1, [r7, #32]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fafc 	bl	800503a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d107      	bne.n	8004a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e01a      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d194      	bne.n	8004996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00100002 	.word	0x00100002
 8004aa8:	ffff0000 	.word	0xffff0000

08004aac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004abc:	f7fd fa0e 	bl	8001edc <HAL_GetTick>
 8004ac0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f040 8111 	bne.w	8004cf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2319      	movs	r3, #25
 8004ada:	2201      	movs	r2, #1
 8004adc:	4988      	ldr	r1, [pc, #544]	; (8004d00 <HAL_I2C_IsDeviceReady+0x254>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f994 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
 8004aec:	e104      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_I2C_IsDeviceReady+0x50>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0fd      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d007      	beq.n	8004b22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2224      	movs	r2, #36	; 0x24
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a70      	ldr	r2, [pc, #448]	; (8004d04 <HAL_I2C_IsDeviceReady+0x258>)
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f952 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d103      	bne.n	8004b86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0b6      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd f99f 	bl	8001edc <HAL_GetTick>
 8004b9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bce:	e025      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fd f984 	bl	8001edc <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <HAL_I2C_IsDeviceReady+0x13a>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22a0      	movs	r2, #160	; 0xa0
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2ba0      	cmp	r3, #160	; 0xa0
 8004c26:	d005      	beq.n	8004c34 <HAL_I2C_IsDeviceReady+0x188>
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_I2C_IsDeviceReady+0x188>
 8004c2e:	7dbb      	ldrb	r3, [r7, #22]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0cd      	beq.n	8004bd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d129      	bne.n	8004c9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2319      	movs	r3, #25
 8004c76:	2201      	movs	r2, #1
 8004c78:	4921      	ldr	r1, [pc, #132]	; (8004d00 <HAL_I2C_IsDeviceReady+0x254>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f8c6 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e036      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e02c      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2319      	movs	r3, #25
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	490f      	ldr	r1, [pc, #60]	; (8004d00 <HAL_I2C_IsDeviceReady+0x254>)
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8a2 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e012      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	f4ff af32 	bcc.w	8004b46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
  }
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	00100002 	.word	0x00100002
 8004d04:	ffff0000 	.word	0xffff0000

08004d08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	460b      	mov	r3, r1
 8004d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d006      	beq.n	8004d32 <I2C_MasterRequestWrite+0x2a>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d003      	beq.n	8004d32 <I2C_MasterRequestWrite+0x2a>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d30:	d108      	bne.n	8004d44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	e00b      	b.n	8004d5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	2b12      	cmp	r3, #18
 8004d4a:	d107      	bne.n	8004d5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f84f 	bl	8004e0c <I2C_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d103      	bne.n	8004d8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e035      	b.n	8004dfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d98:	d108      	bne.n	8004dac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d9a:	897b      	ldrh	r3, [r7, #10]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da8:	611a      	str	r2, [r3, #16]
 8004daa:	e01b      	b.n	8004de4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dac:	897b      	ldrh	r3, [r7, #10]
 8004dae:	11db      	asrs	r3, r3, #7
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 0306 	and.w	r3, r3, #6
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f063 030f 	orn	r3, r3, #15
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <I2C_MasterRequestWrite+0xfc>)
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f875 	bl	8004eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e010      	b.n	8004dfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4907      	ldr	r1, [pc, #28]	; (8004e08 <I2C_MasterRequestWrite+0x100>)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f865 	bl	8004eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	00010008 	.word	0x00010008
 8004e08:	00010002 	.word	0x00010002

08004e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e1c:	e025      	b.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d021      	beq.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fd f859 	bl	8001edc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d116      	bne.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e023      	b.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10d      	bne.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	e00c      	b.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d0b6      	beq.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ec8:	e051      	b.n	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d123      	bne.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0204 	orr.w	r2, r3, #4
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e046      	b.n	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d021      	beq.n	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fc ffd7 	bl	8001edc <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d116      	bne.n	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e020      	b.n	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d10c      	bne.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e00b      	b.n	8004faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	43da      	mvns	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d18d      	bne.n	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc4:	e02d      	b.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f878 	bl	80050bc <I2C_IsAcknowledgeFailed>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e02d      	b.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d021      	beq.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fc ff7d 	bl	8001edc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d116      	bne.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e007      	b.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d1ca      	bne.n	8004fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005046:	e02d      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f837 	bl	80050bc <I2C_IsAcknowledgeFailed>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e02d      	b.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d021      	beq.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005060:	f7fc ff3c 	bl	8001edc <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d116      	bne.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e007      	b.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d1ca      	bne.n	8005048 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d11b      	bne.n	800510c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f043 0204 	orr.w	r2, r3, #4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b20      	cmp	r3, #32
 800512e:	d129      	bne.n	8005184 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0210 	bic.w	r2, r2, #16
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d12a      	bne.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	f023 030f 	bic.w	r3, r3, #15
 80051d2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	4313      	orrs	r3, r2
 80051dc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	89fa      	ldrh	r2, [r7, #14]
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005212:	b08f      	sub	sp, #60	; 0x3c
 8005214:	af0a      	add	r7, sp, #40	; 0x28
 8005216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e10f      	b.n	8005442 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fc fc67 	bl	8001b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2203      	movs	r2, #3
 8005246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f002 ff40 	bl	80080e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	687e      	ldr	r6, [r7, #4]
 800526e:	466d      	mov	r5, sp
 8005270:	f106 0410 	add.w	r4, r6, #16
 8005274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005280:	e885 0003 	stmia.w	r5, {r0, r1}
 8005284:	1d33      	adds	r3, r6, #4
 8005286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005288:	6838      	ldr	r0, [r7, #0]
 800528a:	f002 fecb 	bl	8008024 <USB_CoreInit>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0d0      	b.n	8005442 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 ff2e 	bl	8008108 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e04a      	b.n	8005348 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052b2:	7bfa      	ldrb	r2, [r7, #15]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	333d      	adds	r3, #61	; 0x3d
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	333c      	adds	r3, #60	; 0x3c
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	b298      	uxth	r0, r3
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3344      	adds	r3, #68	; 0x44
 80052ee:	4602      	mov	r2, r0
 80052f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3340      	adds	r3, #64	; 0x40
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3348      	adds	r3, #72	; 0x48
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	334c      	adds	r3, #76	; 0x4c
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3354      	adds	r3, #84	; 0x54
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	3301      	adds	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3af      	bcc.n	80052b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
 8005356:	e044      	b.n	80053e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053c6:	7bfa      	ldrb	r2, [r7, #15]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	3301      	adds	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	7bfa      	ldrb	r2, [r7, #15]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3b5      	bcc.n	8005358 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	687e      	ldr	r6, [r7, #4]
 80053f4:	466d      	mov	r5, sp
 80053f6:	f106 0410 	add.w	r4, r6, #16
 80053fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005406:	e885 0003 	stmia.w	r5, {r0, r1}
 800540a:	1d33      	adds	r3, r6, #4
 800540c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800540e:	6838      	ldr	r0, [r7, #0]
 8005410:	f002 fec6 	bl	80081a0 <USB_DevInit>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e00d      	b.n	8005442 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f003 f891 	bl	8008562 <USB_DevDisconnect>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800544c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e267      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d075      	beq.n	8005556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546a:	4b88      	ldr	r3, [pc, #544]	; (800568c <HAL_RCC_OscConfig+0x240>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00c      	beq.n	8005490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005476:	4b85      	ldr	r3, [pc, #532]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b82      	ldr	r3, [pc, #520]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548e:	d10b      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	4b7e      	ldr	r3, [pc, #504]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05b      	beq.n	8005554 <HAL_RCC_OscConfig+0x108>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d157      	bne.n	8005554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e242      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_OscConfig+0x74>
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a75      	ldr	r2, [pc, #468]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e01d      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x98>
 80054ca:	4b70      	ldr	r3, [pc, #448]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a6f      	ldr	r2, [pc, #444]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4b6d      	ldr	r3, [pc, #436]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6c      	ldr	r2, [pc, #432]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054e4:	4b69      	ldr	r3, [pc, #420]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a68      	ldr	r2, [pc, #416]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b66      	ldr	r3, [pc, #408]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a65      	ldr	r2, [pc, #404]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fc fcea 	bl	8001edc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fc fce6 	bl	8001edc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e207      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0xc0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fc fcd6 	bl	8001edc <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc fcd2 	bl	8001edc <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1f3      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	4b51      	ldr	r3, [pc, #324]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0xe8>
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d063      	beq.n	800562a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005562:	4b4a      	ldr	r3, [pc, #296]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005576:	2b08      	cmp	r3, #8
 8005578:	d11c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x240>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e1c7      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4937      	ldr	r1, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	e03a      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCC_OscConfig+0x244>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fc fc8b 	bl	8001edc <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fc fc87 	bl	8001edc <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e1a8      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4925      	ldr	r1, [pc, #148]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x244>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fc6a 	bl	8001edc <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560c:	f7fc fc66 	bl	8001edc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e187      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d036      	beq.n	80056a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <HAL_RCC_OscConfig+0x248>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fc fc4a 	bl	8001edc <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fc fc46 	bl	8001edc <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e167      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x200>
 800566a:	e01b      	b.n	80056a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <HAL_RCC_OscConfig+0x248>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fc fc33 	bl	8001edc <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	e00e      	b.n	8005698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567a:	f7fc fc2f 	bl	8001edc <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d907      	bls.n	8005698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e150      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 800568c:	40023800 	.word	0x40023800
 8005690:	42470000 	.word	0x42470000
 8005694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8097 	beq.w	80057e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b6:	4b81      	ldr	r3, [pc, #516]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b7d      	ldr	r3, [pc, #500]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	4a7c      	ldr	r2, [pc, #496]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6413      	str	r3, [r2, #64]	; 0x40
 80056d2:	4b7a      	ldr	r3, [pc, #488]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b77      	ldr	r3, [pc, #476]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b74      	ldr	r3, [pc, #464]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a73      	ldr	r2, [pc, #460]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fc fbef 	bl	8001edc <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fc fbeb 	bl	8001edc <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e10c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	4b6a      	ldr	r3, [pc, #424]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x2ea>
 8005728:	4b64      	ldr	r3, [pc, #400]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a63      	ldr	r2, [pc, #396]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	e01c      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x30c>
 800573e:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a5e      	ldr	r2, [pc, #376]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a5b      	ldr	r2, [pc, #364]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005758:	4b58      	ldr	r3, [pc, #352]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	4b55      	ldr	r3, [pc, #340]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a54      	ldr	r2, [pc, #336]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fc fbb0 	bl	8001edc <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	e00a      	b.n	8005796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fc fbac 	bl	8001edc <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0cb      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	4b49      	ldr	r3, [pc, #292]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RCC_OscConfig+0x334>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a4:	f7fc fb9a 	bl	8001edc <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fc fb96 	bl	8001edc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0b5      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c2:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ee      	bne.n	80057ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d4:	4b39      	ldr	r3, [pc, #228]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	4a38      	ldr	r2, [pc, #224]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a1 	beq.w	800592c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ea:	4b34      	ldr	r3, [pc, #208]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d05c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d141      	bne.n	8005882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7fc fb6a 	bl	8001edc <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800580c:	f7fc fb66 	bl	8001edc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e087      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	4b27      	ldr	r3, [pc, #156]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	491b      	ldr	r1, [pc, #108]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fc fb3f 	bl	8001edc <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005862:	f7fc fb3b 	bl	8001edc <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e05c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x416>
 8005880:	e054      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fc fb28 	bl	8001edc <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fb24 	bl	8001edc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e045      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x444>
 80058ae:	e03d      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e038      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_RCC_OscConfig+0x4ec>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d028      	beq.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d11a      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005900:	4293      	cmp	r3, r2
 8005902:	d111      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	3b01      	subs	r3, #1
 8005912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d107      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800

0800593c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0cc      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d90c      	bls.n	8005978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b63      	ldr	r3, [pc, #396]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0b8      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005990:	4b59      	ldr	r3, [pc, #356]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4a58      	ldr	r2, [pc, #352]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800599a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b4:	4b50      	ldr	r3, [pc, #320]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	494d      	ldr	r1, [pc, #308]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d044      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d119      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e06f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e067      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1a:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4934      	ldr	r1, [pc, #208]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fc fa56 	bl	8001edc <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a34:	f7fc fa52 	bl	8001edc <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e04f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 020c 	and.w	r2, r3, #12
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1eb      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d20c      	bcs.n	8005a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e032      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4916      	ldr	r1, [pc, #88]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	490e      	ldr	r1, [pc, #56]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ac2:	f000 f821 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	490a      	ldr	r1, [pc, #40]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	5ccb      	ldrb	r3, [r1, r3]
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc f9b6 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023c00 	.word	0x40023c00
 8005af8:	40023800 	.word	0x40023800
 8005afc:	08009b1c 	.word	0x08009b1c
 8005b00:	20000014 	.word	0x20000014
 8005b04:	20000018 	.word	0x20000018

08005b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b094      	sub	sp, #80	; 0x50
 8005b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	647b      	str	r3, [r7, #68]	; 0x44
 8005b14:	2300      	movs	r3, #0
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b18:	2300      	movs	r3, #0
 8005b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b20:	4b79      	ldr	r3, [pc, #484]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d00d      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x40>
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	f200 80e1 	bhi.w	8005cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x34>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d003      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b3a:	e0db      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b3c:	4b73      	ldr	r3, [pc, #460]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b40:	e0db      	b.n	8005cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b42:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b46:	e0d8      	b.n	8005cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b48:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b52:	4b6d      	ldr	r3, [pc, #436]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d063      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5e:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	099b      	lsrs	r3, r3, #6
 8005b64:	2200      	movs	r2, #0
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
 8005b72:	2300      	movs	r3, #0
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	f04f 0000 	mov.w	r0, #0
 8005b82:	f04f 0100 	mov.w	r1, #0
 8005b86:	0159      	lsls	r1, r3, #5
 8005b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b8c:	0150      	lsls	r0, r2, #5
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4621      	mov	r1, r4
 8005b94:	1a51      	subs	r1, r2, r1
 8005b96:	6139      	str	r1, [r7, #16]
 8005b98:	4629      	mov	r1, r5
 8005b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bac:	4659      	mov	r1, fp
 8005bae:	018b      	lsls	r3, r1, #6
 8005bb0:	4651      	mov	r1, sl
 8005bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bb6:	4651      	mov	r1, sl
 8005bb8:	018a      	lsls	r2, r1, #6
 8005bba:	4651      	mov	r1, sl
 8005bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bda:	4690      	mov	r8, r2
 8005bdc:	4699      	mov	r9, r3
 8005bde:	4623      	mov	r3, r4
 8005be0:	eb18 0303 	adds.w	r3, r8, r3
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	462b      	mov	r3, r5
 8005be8:	eb49 0303 	adc.w	r3, r9, r3
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	024b      	lsls	r3, r1, #9
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c04:	4621      	mov	r1, r4
 8005c06:	024a      	lsls	r2, r1, #9
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	2200      	movs	r2, #0
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c18:	f7fa fb42 	bl	80002a0 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4613      	mov	r3, r2
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	e058      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c26:	4b38      	ldr	r3, [pc, #224]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	099b      	lsrs	r3, r3, #6
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	4611      	mov	r1, r2
 8005c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	0159      	lsls	r1, r3, #5
 8005c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c52:	0150      	lsls	r0, r2, #5
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4641      	mov	r1, r8
 8005c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c5e:	4649      	mov	r1, r9
 8005c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c78:	ebb2 040a 	subs.w	r4, r2, sl
 8005c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	00eb      	lsls	r3, r5, #3
 8005c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c8e:	00e2      	lsls	r2, r4, #3
 8005c90:	4614      	mov	r4, r2
 8005c92:	461d      	mov	r5, r3
 8005c94:	4643      	mov	r3, r8
 8005c96:	18e3      	adds	r3, r4, r3
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	eb45 0303 	adc.w	r3, r5, r3
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cae:	4629      	mov	r1, r5
 8005cb0:	028b      	lsls	r3, r1, #10
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cb8:	4621      	mov	r1, r4
 8005cba:	028a      	lsls	r2, r1, #10
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	61fa      	str	r2, [r7, #28]
 8005cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ccc:	f7fa fae8 	bl	80002a0 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cf2:	e002      	b.n	8005cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3750      	adds	r7, #80	; 0x50
 8005d00:	46bd      	mov	sp, r7
 8005d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d06:	bf00      	nop
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	00f42400 	.word	0x00f42400
 8005d10:	007a1200 	.word	0x007a1200

08005d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000014 	.word	0x20000014

08005d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d30:	f7ff fff0 	bl	8005d14 <HAL_RCC_GetHCLKFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	0a9b      	lsrs	r3, r3, #10
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	4903      	ldr	r1, [pc, #12]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	08009b2c 	.word	0x08009b2c

08005d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d58:	f7ff ffdc 	bl	8005d14 <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0b5b      	lsrs	r3, r3, #13
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4903      	ldr	r1, [pc, #12]	; (8005d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40023800 	.word	0x40023800
 8005d78:	08009b2c 	.word	0x08009b2c

08005d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d075      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db0:	4b91      	ldr	r3, [pc, #580]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005db6:	f7fc f891 	bl	8001edc <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dbe:	f7fc f88d 	bl	8001edc <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e189      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd0:	4b8a      	ldr	r3, [pc, #552]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	019a      	lsls	r2, r3, #6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	071b      	lsls	r3, r3, #28
 8005df4:	4981      	ldr	r1, [pc, #516]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01f      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e08:	4b7c      	ldr	r3, [pc, #496]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	019a      	lsls	r2, r3, #6
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	431a      	orrs	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	071b      	lsls	r3, r3, #28
 8005e28:	4974      	ldr	r1, [pc, #464]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e30:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e36:	f023 021f 	bic.w	r2, r3, #31
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	496e      	ldr	r1, [pc, #440]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	019a      	lsls	r2, r3, #6
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	071b      	lsls	r3, r3, #28
 8005e68:	4964      	ldr	r1, [pc, #400]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e70:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e76:	f7fc f831 	bl	8001edc <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e7e:	f7fc f82d 	bl	8001edc <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e129      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e90:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d079      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eb4:	4b52      	ldr	r3, [pc, #328]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eba:	f7fc f80f 	bl	8001edc <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ec2:	f7fc f80b 	bl	8001edc <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e107      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed4:	4b49      	ldr	r3, [pc, #292]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee0:	d0ef      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d020      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eee:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef4:	0f1b      	lsrs	r3, r3, #28
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	019a      	lsls	r2, r3, #6
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	061b      	lsls	r3, r3, #24
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	071b      	lsls	r3, r3, #28
 8005f0e:	493b      	ldr	r1, [pc, #236]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	4934      	ldr	r1, [pc, #208]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01e      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	0e1b      	lsrs	r3, r3, #24
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	019a      	lsls	r2, r3, #6
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	071b      	lsls	r3, r3, #28
 8005f5c:	4927      	ldr	r1, [pc, #156]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	4922      	ldr	r1, [pc, #136]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f7a:	4b21      	ldr	r3, [pc, #132]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f80:	f7fb ffac 	bl	8001edc <HAL_GetTick>
 8005f84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f88:	f7fb ffa8 	bl	8001edc <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e0a4      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa6:	d1ef      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 808b 	beq.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fde:	f7fb ff7d 	bl	8001edc <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fe4:	e010      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fe6:	f7fb ff79 	bl	8001edc <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d909      	bls.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e075      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ff8:	42470068 	.word	0x42470068
 8005ffc:	40023800 	.word	0x40023800
 8006000:	42470070 	.word	0x42470070
 8006004:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006008:	4b38      	ldr	r3, [pc, #224]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0e8      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006014:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02f      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d028      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006042:	4b2c      	ldr	r3, [pc, #176]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d114      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800605a:	f7fb ff3f 	bl	8001edc <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006060:	e00a      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006062:	f7fb ff3b 	bl	8001edc <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006070:	4293      	cmp	r3, r2
 8006072:	d901      	bls.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e035      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ee      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006090:	d10d      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a6:	4912      	ldr	r1, [pc, #72]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]
 80060ac:	e005      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060b8:	6093      	str	r3, [r2, #8]
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c6:	490a      	ldr	r1, [pc, #40]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40007000 	.word	0x40007000
 80060f0:	40023800 	.word	0x40023800
 80060f4:	42470e40 	.word	0x42470e40
 80060f8:	424711e0 	.word	0x424711e0

080060fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e066      	b.n	80061e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7f5b      	ldrb	r3, [r3, #29]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fc60 	bl	80019e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	22ca      	movs	r2, #202	; 0xca
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2253      	movs	r2, #83	; 0x53
 800613c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa45 	bl	80065ce <RTC_EnterInitMode>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d12c      	bne.n	80061a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68d2      	ldr	r2, [r2, #12]
 8006188:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6919      	ldr	r1, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	041a      	lsls	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa4c 	bl	800663c <RTC_ExitInitMode>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d113      	bne.n	80061d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	7f1b      	ldrb	r3, [r3, #28]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_RTC_SetTime+0x1c>
 8006200:	2302      	movs	r3, #2
 8006202:	e087      	b.n	8006314 <HAL_RTC_SetTime+0x12c>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2202      	movs	r2, #2
 800620e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d126      	bne.n	8006264 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fa29 	bl	8006686 <RTC_ByteToBcd2>
 8006234:	4603      	mov	r3, r0
 8006236:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fa22 	bl	8006686 <RTC_ByteToBcd2>
 8006242:	4603      	mov	r3, r0
 8006244:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006246:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	789b      	ldrb	r3, [r3, #2]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fa1a 	bl	8006686 <RTC_ByteToBcd2>
 8006252:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006254:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	78db      	ldrb	r3, [r3, #3]
 800625c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e018      	b.n	8006296 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006284:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800628a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	78db      	ldrb	r3, [r3, #3]
 8006290:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	22ca      	movs	r2, #202	; 0xca
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2253      	movs	r2, #83	; 0x53
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f991 	bl	80065ce <RTC_EnterInitMode>
 80062ac:	4603      	mov	r3, r0
 80062ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d120      	bne.n	80062f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80062c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f9a4 	bl	800663c <RTC_ExitInitMode>
 80062f4:	4603      	mov	r3, r0
 80062f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]

  return status;
 8006312:	7cfb      	ldrb	r3, [r7, #19]
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}

0800631c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800634e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006352:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	0d9b      	lsrs	r3, r3, #22
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 f98f 	bl	80066c0 <RTC_Bcd2ToByte>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f986 	bl	80066c0 <RTC_Bcd2ToByte>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	789b      	ldrb	r3, [r3, #2]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 f97d 	bl	80066c0 <RTC_Bcd2ToByte>
 80063c6:	4603      	mov	r3, r0
 80063c8:	461a      	mov	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	7f1b      	ldrb	r3, [r3, #28]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_RTC_SetDate+0x1c>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e071      	b.n	80064d8 <HAL_RTC_SetDate+0x100>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2202      	movs	r2, #2
 80063fe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10e      	bne.n	8006424 <HAL_RTC_SetDate+0x4c>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	b2db      	uxtb	r3, r3
 800641c:	330a      	adds	r3, #10
 800641e:	b2da      	uxtb	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11c      	bne.n	8006464 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	78db      	ldrb	r3, [r3, #3]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f929 	bl	8006686 <RTC_ByteToBcd2>
 8006434:	4603      	mov	r3, r0
 8006436:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f922 	bl	8006686 <RTC_ByteToBcd2>
 8006442:	4603      	mov	r3, r0
 8006444:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006446:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	789b      	ldrb	r3, [r3, #2]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f91a 	bl	8006686 <RTC_ByteToBcd2>
 8006452:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006454:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e00e      	b.n	8006482 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006470:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006476:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	22ca      	movs	r2, #202	; 0xca
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2253      	movs	r2, #83	; 0x53
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f89b 	bl	80065ce <RTC_EnterInitMode>
 8006498:	4603      	mov	r3, r0
 800649a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f8c2 	bl	800663c <RTC_ExitInitMode>
 80064b8:	4603      	mov	r3, r0
 80064ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]

  return status;
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}

080064e0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	0c1b      	lsrs	r3, r3, #16
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	0b5b      	lsrs	r3, r3, #13
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11a      	bne.n	8006574 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	78db      	ldrb	r3, [r3, #3]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f8bc 	bl	80066c0 <RTC_Bcd2ToByte>
 8006548:	4603      	mov	r3, r0
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 f8b3 	bl	80066c0 <RTC_Bcd2ToByte>
 800655a:	4603      	mov	r3, r0
 800655c:	461a      	mov	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	789b      	ldrb	r3, [r3, #2]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f8aa 	bl	80066c0 <RTC_Bcd2ToByte>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006598:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800659a:	f7fb fc9f 	bl	8001edc <HAL_GetTick>
 800659e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065a0:	e009      	b.n	80065b6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a2:	f7fb fc9b 	bl	8001edc <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b0:	d901      	bls.n	80065b6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e007      	b.n	80065c6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ee      	beq.n	80065a2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d122      	bne.n	8006632 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065fc:	f7fb fc6e 	bl	8001edc <HAL_GetTick>
 8006600:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006602:	e00c      	b.n	800661e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006604:	f7fb fc6a 	bl	8001edc <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006612:	d904      	bls.n	800661e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2204      	movs	r2, #4
 8006618:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <RTC_EnterInitMode+0x64>
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d1e8      	bne.n	8006604 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006656:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff89 	bl	800657e <HAL_RTC_WaitForSynchro>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2204      	movs	r2, #4
 8006676:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	4603      	mov	r3, r0
 800668e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006694:	e005      	b.n	80066a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	3301      	adds	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	3b0a      	subs	r3, #10
 80066a0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	d8f6      	bhi.n	8006696 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b2db      	uxtb	r3, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	0092      	lsls	r2, r2, #2
 80066d8:	4413      	add	r3, r2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	4413      	add	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e041      	b.n	800678e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb f98c 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f000 fa96 	bl	8006c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e04e      	b.n	800684e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <HAL_TIM_Base_Start_IT+0xc4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d01d      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <HAL_TIM_Base_Start_IT+0xc8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_TIM_Base_Start_IT+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <HAL_TIM_Base_Start_IT+0xd0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1b      	ldr	r2, [pc, #108]	; (800686c <HAL_TIM_Base_Start_IT+0xd4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a19      	ldr	r2, [pc, #100]	; (8006870 <HAL_TIM_Base_Start_IT+0xd8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a18      	ldr	r2, [pc, #96]	; (8006874 <HAL_TIM_Base_Start_IT+0xdc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d111      	bne.n	800683c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b06      	cmp	r3, #6
 8006828:	d010      	beq.n	800684c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	e007      	b.n	800684c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40010000 	.word	0x40010000
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800
 8006868:	40000c00 	.word	0x40000c00
 800686c:	40010400 	.word	0x40010400
 8006870:	40014000 	.word	0x40014000
 8006874:	40001800 	.word	0x40001800

08006878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0202 	mvn.w	r2, #2
 80068a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9b5 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9a7 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9b8 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0204 	mvn.w	r2, #4
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f98b 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f97d 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f98e 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0208 	mvn.w	r2, #8
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f961 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f953 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f964 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2208      	movs	r2, #8
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f937 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f929 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f93a 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d10e      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0201 	mvn.w	r2, #1
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7f9 ff9a 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fae0 	bl	8006fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8ff 	bl	8006c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0220 	mvn.w	r2, #32
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 faaa 	bl	8006fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0b4      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x186>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006adc:	d03e      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0xd4>
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae2:	f200 8087 	bhi.w	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	f000 8086 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x172>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d87f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d01a      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xa6>
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d87b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d050      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d877      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d03c      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xfa>
 8006b08:	2b50      	cmp	r3, #80	; 0x50
 8006b0a:	d873      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d058      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d86f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d064      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d86b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d060      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d867      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d05c      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d05a      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	e062      	b.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f000 f9ad 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	609a      	str	r2, [r3, #8]
      break;
 8006b5a:	e04f      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f000 f996 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7e:	609a      	str	r2, [r3, #8]
      break;
 8006b80:	e03c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 f90a 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2150      	movs	r1, #80	; 0x50
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 f963 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e02c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f000 f929 	bl	8006e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2160      	movs	r1, #96	; 0x60
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f953 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e01c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f000 f8ea 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2140      	movs	r1, #64	; 0x40
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f943 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f000 f93a 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d00f      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d108      	bne.n	8006cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d02b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d027      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d023      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d017      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a28      	ldr	r2, [pc, #160]	; (8006d90 <TIM_Base_SetConfig+0x128>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <TIM_Base_SetConfig+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <TIM_Base_SetConfig+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <TIM_Base_SetConfig+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0xf8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d103      	bne.n	8006d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	40001800 	.word	0x40001800
 8006da0:	40001c00 	.word	0x40001c00
 8006da4:	40002000 	.word	0x40002000

08006da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0201 	bic.w	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 030a 	bic.w	r3, r3, #10
 8006de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0210 	bic.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	031b      	lsls	r3, r3, #12
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f043 0307 	orr.w	r3, r3, #7
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e05a      	b.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d022      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d01d      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a18      	ldr	r2, [pc, #96]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10c      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40000c00 	.word	0x40000c00
 8006fc8:	40010400 	.word	0x40010400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40001800 	.word	0x40001800

08006fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e03f      	b.n	800708e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa fd2c 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2224      	movs	r2, #36	; 0x24
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fd7b 	bl	8007b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b08a      	sub	sp, #40	; 0x28
 800709a:	af02      	add	r7, sp, #8
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d17c      	bne.n	80071b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Transmit+0x2c>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e075      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Transmit+0x3e>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e06e      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ea:	f7fa fef7 	bl	8001edc <HAL_GetTick>
 80070ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007104:	d108      	bne.n	8007118 <HAL_UART_Transmit+0x82>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e003      	b.n	8007120 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007128:	e02a      	b.n	8007180 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 faf9 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e036      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3302      	adds	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e007      	b.n	8007172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1cf      	bne.n	800712a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2140      	movs	r1, #64	; 0x40
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fac9 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b0ba      	sub	sp, #232	; 0xe8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10f      	bne.n	8007222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fbd3 	bl	80079c6 <UART_Receive_IT>
      return;
 8007220:	e256      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80de 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
 800722c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80d1 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0201 	orr.w	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f043 0202 	orr.w	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
 800729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f043 0204 	orr.w	r2, r3, #4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d011      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
 80072be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f043 0208 	orr.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 81ed 	beq.w	80076c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb5e 	bl	80079c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_UART_IRQHandler+0x17a>
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04f      	beq.n	80073d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa66 	bl	8007808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d141      	bne.n	80073ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007376:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800737a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1d9      	bne.n	800734a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d013      	beq.n	80073c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	4a7d      	ldr	r2, [pc, #500]	; (8007598 <HAL_UART_IRQHandler+0x3dc>)
 80073a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fb fe72 	bl	8003094 <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00e      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f99a 	bl	8007700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e00a      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f996 	bl	8007700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	e006      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f992 	bl	8007700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073e2:	e170      	b.n	80076c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	bf00      	nop
    return;
 80073e6:	e16e      	b.n	80076c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	f040 814a 	bne.w	8007686 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8143 	beq.w	8007686 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 813c 	beq.w	8007686 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	f040 80b4 	bne.w	800759c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8140 	beq.w	80076ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007452:	429a      	cmp	r2, r3
 8007454:	f080 8139 	bcs.w	80076ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800745e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746a:	f000 8088 	beq.w	800757e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800748c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800749a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800749e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1d9      	bne.n	800746e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e1      	bne.n	80074ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3314      	adds	r3, #20
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800751a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800751c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e3      	bne.n	80074f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	f023 0310 	bic.w	r3, r3, #16
 8007552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007560:	65ba      	str	r2, [r7, #88]	; 0x58
 8007562:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e3      	bne.n	800753c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	4618      	mov	r0, r3
 800757a:	f7fb fd1b 	bl	8002fb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007586:	b29b      	uxth	r3, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f8c0 	bl	8007714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007594:	e099      	b.n	80076ca <HAL_UART_IRQHandler+0x50e>
 8007596:	bf00      	nop
 8007598:	080078cf 	.word	0x080078cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 808b 	beq.w	80076ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8086 	beq.w	80076ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	330c      	adds	r3, #12
 80075c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075e6:	647a      	str	r2, [r7, #68]	; 0x44
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3314      	adds	r3, #20
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3314      	adds	r3, #20
 800761a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800761e:	633a      	str	r2, [r7, #48]	; 0x30
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e3      	bne.n	80075fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007664:	61fa      	str	r2, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	617b      	str	r3, [r7, #20]
   return(result);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e3      	bne.n	8007640 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f848 	bl	8007714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007684:	e023      	b.n	80076ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_UART_IRQHandler+0x4ea>
 8007692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f929 	bl	80078f6 <UART_Transmit_IT>
    return;
 80076a4:	e014      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <HAL_UART_IRQHandler+0x514>
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f969 	bl	8007996 <UART_EndTransmit_IT>
    return;
 80076c4:	e004      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
    return;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ce:	bf00      	nop
  }
}
 80076d0:	37e8      	adds	r7, #232	; 0xe8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b090      	sub	sp, #64	; 0x40
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e050      	b.n	80077e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d04c      	beq.n	80077e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
 800774c:	f7fa fbc6 	bl	8001edc <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007758:	429a      	cmp	r2, r3
 800775a:	d241      	bcs.n	80077e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800777c:	637a      	str	r2, [r7, #52]	; 0x34
 800777e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3314      	adds	r3, #20
 8007796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	613b      	str	r3, [r7, #16]
   return(result);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3314      	adds	r3, #20
 80077ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b0:	623a      	str	r2, [r7, #32]
 80077b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	6a3a      	ldr	r2, [r7, #32]
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e5      	bne.n	8007790 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e00f      	b.n	8007800 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4013      	ands	r3, r2
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	bf0c      	ite	eq
 80077f0:	2301      	moveq	r3, #1
 80077f2:	2300      	movne	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d09f      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3740      	adds	r7, #64	; 0x40
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b095      	sub	sp, #84	; 0x54
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	330c      	adds	r3, #12
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007830:	643a      	str	r2, [r7, #64]	; 0x40
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e5      	bne.n	8007810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3314      	adds	r3, #20
 800784a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	61fb      	str	r3, [r7, #28]
   return(result);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	64bb      	str	r3, [r7, #72]	; 0x48
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3314      	adds	r3, #20
 8007862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e5      	bne.n	8007844 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	2b01      	cmp	r3, #1
 800787e:	d119      	bne.n	80078b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	647b      	str	r3, [r7, #68]	; 0x44
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	330c      	adds	r3, #12
 800789e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078a0:	61ba      	str	r2, [r7, #24]
 80078a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	613b      	str	r3, [r7, #16]
   return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078c2:	bf00      	nop
 80078c4:	3754      	adds	r7, #84	; 0x54
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff ff09 	bl	8007700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b21      	cmp	r3, #33	; 0x21
 8007908:	d13e      	bne.n	8007988 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d114      	bne.n	800793e <UART_Transmit_IT+0x48>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d110      	bne.n	800793e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007930:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	1c9a      	adds	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	621a      	str	r2, [r3, #32]
 800793c:	e008      	b.n	8007950 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	1c59      	adds	r1, r3, #1
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6211      	str	r1, [r2, #32]
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29b      	uxth	r3, r3
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4619      	mov	r1, r3
 800795e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10f      	bne.n	8007984 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007972:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007982:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fe8e 	bl	80076d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b08c      	sub	sp, #48	; 0x30
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b22      	cmp	r3, #34	; 0x22
 80079d8:	f040 80ab 	bne.w	8007b32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e4:	d117      	bne.n	8007a16 <UART_Receive_IT+0x50>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d113      	bne.n	8007a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	1c9a      	adds	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	629a      	str	r2, [r3, #40]	; 0x28
 8007a14:	e026      	b.n	8007a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a28:	d007      	beq.n	8007a3a <UART_Receive_IT+0x74>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <UART_Receive_IT+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e008      	b.n	8007a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d15a      	bne.n	8007b2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0220 	bic.w	r2, r2, #32
 8007a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d135      	bne.n	8007b24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 0310 	bic.w	r3, r3, #16
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	623a      	str	r2, [r7, #32]
 8007ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d10a      	bne.n	8007b16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fdf9 	bl	8007714 <HAL_UARTEx_RxEventCallback>
 8007b22:	e002      	b.n	8007b2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fde1 	bl	80076ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e002      	b.n	8007b34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3730      	adds	r7, #48	; 0x30
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b40:	b0c0      	sub	sp, #256	; 0x100
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	68d9      	ldr	r1, [r3, #12]
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	ea40 0301 	orr.w	r3, r0, r1
 8007b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b94:	f021 010c 	bic.w	r1, r1, #12
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	6999      	ldr	r1, [r3, #24]
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	ea40 0301 	orr.w	r3, r0, r1
 8007bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b8f      	ldr	r3, [pc, #572]	; (8007e08 <UART_SetConfig+0x2cc>)
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d005      	beq.n	8007bdc <UART_SetConfig+0xa0>
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b8d      	ldr	r3, [pc, #564]	; (8007e0c <UART_SetConfig+0x2d0>)
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d104      	bne.n	8007be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bdc:	f7fe f8ba 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 8007be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007be4:	e003      	b.n	8007bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007be6:	f7fe f8a1 	bl	8005d2c <HAL_RCC_GetPCLK1Freq>
 8007bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf8:	f040 810c 	bne.w	8007e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c0e:	4622      	mov	r2, r4
 8007c10:	462b      	mov	r3, r5
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c16:	415b      	adcs	r3, r3
 8007c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c1e:	4621      	mov	r1, r4
 8007c20:	eb12 0801 	adds.w	r8, r2, r1
 8007c24:	4629      	mov	r1, r5
 8007c26:	eb43 0901 	adc.w	r9, r3, r1
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c3e:	4690      	mov	r8, r2
 8007c40:	4699      	mov	r9, r3
 8007c42:	4623      	mov	r3, r4
 8007c44:	eb18 0303 	adds.w	r3, r8, r3
 8007c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	eb49 0303 	adc.w	r3, r9, r3
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	18db      	adds	r3, r3, r3
 8007c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c70:	4613      	mov	r3, r2
 8007c72:	eb42 0303 	adc.w	r3, r2, r3
 8007c76:	657b      	str	r3, [r7, #84]	; 0x54
 8007c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c80:	f7f8 fb0e 	bl	80002a0 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4b61      	ldr	r3, [pc, #388]	; (8007e10 <UART_SetConfig+0x2d4>)
 8007c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	011c      	lsls	r4, r3, #4
 8007c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	1891      	adds	r1, r2, r2
 8007caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cac:	415b      	adcs	r3, r3
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8007cba:	4649      	mov	r1, r9
 8007cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd4:	4692      	mov	sl, r2
 8007cd6:	469b      	mov	fp, r3
 8007cd8:	4643      	mov	r3, r8
 8007cda:	eb1a 0303 	adds.w	r3, sl, r3
 8007cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d00:	460b      	mov	r3, r1
 8007d02:	18db      	adds	r3, r3, r3
 8007d04:	643b      	str	r3, [r7, #64]	; 0x40
 8007d06:	4613      	mov	r3, r2
 8007d08:	eb42 0303 	adc.w	r3, r2, r3
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d16:	f7f8 fac3 	bl	80002a0 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <UART_SetConfig+0x2d4>)
 8007d22:	fba3 2301 	umull	r2, r3, r3, r1
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	2264      	movs	r2, #100	; 0x64
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	1acb      	subs	r3, r1, r3
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d36:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <UART_SetConfig+0x2d4>)
 8007d38:	fba3 2302 	umull	r2, r3, r3, r2
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d44:	441c      	add	r4, r3
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d58:	4642      	mov	r2, r8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d60:	415b      	adcs	r3, r3
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d68:	4641      	mov	r1, r8
 8007d6a:	1851      	adds	r1, r2, r1
 8007d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d6e:	4649      	mov	r1, r9
 8007d70:	414b      	adcs	r3, r1
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d80:	4659      	mov	r1, fp
 8007d82:	00cb      	lsls	r3, r1, #3
 8007d84:	4651      	mov	r1, sl
 8007d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8a:	4651      	mov	r1, sl
 8007d8c:	00ca      	lsls	r2, r1, #3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	4642      	mov	r2, r8
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	460a      	mov	r2, r1
 8007da0:	eb42 0303 	adc.w	r3, r2, r3
 8007da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	18db      	adds	r3, r3, r3
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dd2:	f7f8 fa65 	bl	80002a0 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <UART_SetConfig+0x2d4>)
 8007ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	2164      	movs	r1, #100	; 0x64
 8007de4:	fb01 f303 	mul.w	r3, r1, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	3332      	adds	r3, #50	; 0x32
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <UART_SetConfig+0x2d4>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	f003 0207 	and.w	r2, r3, #7
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4422      	add	r2, r4
 8007e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e04:	e106      	b.n	8008014 <UART_SetConfig+0x4d8>
 8007e06:	bf00      	nop
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	1891      	adds	r1, r2, r2
 8007e2c:	6239      	str	r1, [r7, #32]
 8007e2e:	415b      	adcs	r3, r3
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
 8007e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e36:	4641      	mov	r1, r8
 8007e38:	1854      	adds	r4, r2, r1
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	eb43 0501 	adc.w	r5, r3, r1
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	00eb      	lsls	r3, r5, #3
 8007e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e4e:	00e2      	lsls	r2, r4, #3
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	4643      	mov	r3, r8
 8007e56:	18e3      	adds	r3, r4, r3
 8007e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	eb45 0303 	adc.w	r3, r5, r3
 8007e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e82:	4629      	mov	r1, r5
 8007e84:	008b      	lsls	r3, r1, #2
 8007e86:	4621      	mov	r1, r4
 8007e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	008a      	lsls	r2, r1, #2
 8007e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e94:	f7f8 fa04 	bl	80002a0 <__aeabi_uldivmod>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4b60      	ldr	r3, [pc, #384]	; (8008020 <UART_SetConfig+0x4e4>)
 8007e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	011c      	lsls	r4, r3, #4
 8007ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	1891      	adds	r1, r2, r2
 8007ebe:	61b9      	str	r1, [r7, #24]
 8007ec0:	415b      	adcs	r3, r3
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ec8:	4641      	mov	r1, r8
 8007eca:	1851      	adds	r1, r2, r1
 8007ecc:	6139      	str	r1, [r7, #16]
 8007ece:	4649      	mov	r1, r9
 8007ed0:	414b      	adcs	r3, r1
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	00cb      	lsls	r3, r1, #3
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eea:	4651      	mov	r1, sl
 8007eec:	00ca      	lsls	r2, r1, #3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	189b      	adds	r3, r3, r2
 8007ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007efc:	464b      	mov	r3, r9
 8007efe:	460a      	mov	r2, r1
 8007f00:	eb42 0303 	adc.w	r3, r2, r3
 8007f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f20:	4649      	mov	r1, r9
 8007f22:	008b      	lsls	r3, r1, #2
 8007f24:	4641      	mov	r1, r8
 8007f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	008a      	lsls	r2, r1, #2
 8007f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f32:	f7f8 f9b5 	bl	80002a0 <__aeabi_uldivmod>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4b38      	ldr	r3, [pc, #224]	; (8008020 <UART_SetConfig+0x4e4>)
 8007f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f42:	095b      	lsrs	r3, r3, #5
 8007f44:	2264      	movs	r2, #100	; 0x64
 8007f46:	fb02 f303 	mul.w	r3, r2, r3
 8007f4a:	1acb      	subs	r3, r1, r3
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	3332      	adds	r3, #50	; 0x32
 8007f50:	4a33      	ldr	r2, [pc, #204]	; (8008020 <UART_SetConfig+0x4e4>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f5c:	441c      	add	r4, r3
 8007f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f62:	2200      	movs	r2, #0
 8007f64:	673b      	str	r3, [r7, #112]	; 0x70
 8007f66:	677a      	str	r2, [r7, #116]	; 0x74
 8007f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	1891      	adds	r1, r2, r2
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	415b      	adcs	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	1851      	adds	r1, r2, r1
 8007f80:	6039      	str	r1, [r7, #0]
 8007f82:	4649      	mov	r1, r9
 8007f84:	414b      	adcs	r3, r1
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f94:	4659      	mov	r1, fp
 8007f96:	00cb      	lsls	r3, r1, #3
 8007f98:	4651      	mov	r1, sl
 8007f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f9e:	4651      	mov	r1, sl
 8007fa0:	00ca      	lsls	r2, r1, #3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4642      	mov	r2, r8
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fae:	464b      	mov	r3, r9
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	eb42 0303 	adc.w	r3, r2, r3
 8007fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007fc2:	667a      	str	r2, [r7, #100]	; 0x64
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	008b      	lsls	r3, r1, #2
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fda:	4641      	mov	r1, r8
 8007fdc:	008a      	lsls	r2, r1, #2
 8007fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fe2:	f7f8 f95d 	bl	80002a0 <__aeabi_uldivmod>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <UART_SetConfig+0x4e4>)
 8007fec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	2164      	movs	r1, #100	; 0x64
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	3332      	adds	r3, #50	; 0x32
 8007ffe:	4a08      	ldr	r2, [pc, #32]	; (8008020 <UART_SetConfig+0x4e4>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4422      	add	r2, r4
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800801a:	46bd      	mov	sp, r7
 800801c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008020:	51eb851f 	.word	0x51eb851f

08008024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008024:	b084      	sub	sp, #16
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	f107 001c 	add.w	r0, r7, #28
 8008032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	2b01      	cmp	r3, #1
 800803a:	d122      	bne.n	8008082 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d105      	bne.n	8008076 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 faa2 	bl	80085c0 <USB_CoreReset>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
 8008080:	e01a      	b.n	80080b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa96 	bl	80085c0 <USB_CoreReset>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	639a      	str	r2, [r3, #56]	; 0x38
 80080aa:	e005      	b.n	80080b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10b      	bne.n	80080d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f043 0206 	orr.w	r2, r3, #6
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f043 0220 	orr.w	r2, r3, #32
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080e2:	b004      	add	sp, #16
 80080e4:	4770      	bx	lr

080080e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d115      	bne.n	8008156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008136:	2001      	movs	r0, #1
 8008138:	f7f9 fedc 	bl	8001ef4 <HAL_Delay>
      ms++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa2e 	bl	80085a4 <USB_GetMode>
 8008148:	4603      	mov	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d01e      	beq.n	800818c <USB_SetCurrentMode+0x84>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b31      	cmp	r3, #49	; 0x31
 8008152:	d9f0      	bls.n	8008136 <USB_SetCurrentMode+0x2e>
 8008154:	e01a      	b.n	800818c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d115      	bne.n	8008188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008168:	2001      	movs	r0, #1
 800816a:	f7f9 fec3 	bl	8001ef4 <HAL_Delay>
      ms++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa15 	bl	80085a4 <USB_GetMode>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <USB_SetCurrentMode+0x84>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b31      	cmp	r3, #49	; 0x31
 8008184:	d9f0      	bls.n	8008168 <USB_SetCurrentMode+0x60>
 8008186:	e001      	b.n	800818c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e005      	b.n	8008198 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b32      	cmp	r3, #50	; 0x32
 8008190:	d101      	bne.n	8008196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081a0:	b084      	sub	sp, #16
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	e009      	b.n	80081d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3340      	adds	r3, #64	; 0x40
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3301      	adds	r3, #1
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b0e      	cmp	r3, #14
 80081d8:	d9f2      	bls.n	80081c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d11c      	bne.n	800821a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ee:	f043 0302 	orr.w	r3, r3, #2
 80081f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38
 8008218:	e00b      	b.n	8008232 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008244:	4619      	mov	r1, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824c:	461a      	mov	r2, r3
 800824e:	680b      	ldr	r3, [r1, #0]
 8008250:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	2b01      	cmp	r3, #1
 8008256:	d10c      	bne.n	8008272 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f965 	bl	8008530 <USB_SetDevSpeed>
 8008266:	e008      	b.n	800827a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008268:	2101      	movs	r1, #1
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f960 	bl	8008530 <USB_SetDevSpeed>
 8008270:	e003      	b.n	800827a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008272:	2103      	movs	r1, #3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f95b 	bl	8008530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800827a:	2110      	movs	r1, #16
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f8f3 	bl	8008468 <USB_FlushTxFifo>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f91f 	bl	80084d0 <USB_FlushRxFifo>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	461a      	mov	r2, r3
 80082a4:	2300      	movs	r3, #0
 80082a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ae:	461a      	mov	r2, r3
 80082b0:	2300      	movs	r3, #0
 80082b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ba:	461a      	mov	r2, r3
 80082bc:	2300      	movs	r3, #0
 80082be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	e043      	b.n	800834e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082dc:	d118      	bne.n	8008310 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	461a      	mov	r2, r3
 80082f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e013      	b.n	8008322 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	461a      	mov	r2, r3
 8008308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e008      	b.n	8008322 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	461a      	mov	r2, r3
 800831e:	2300      	movs	r3, #0
 8008320:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832e:	461a      	mov	r2, r3
 8008330:	2300      	movs	r3, #0
 8008332:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	461a      	mov	r2, r3
 8008342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008346:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	3301      	adds	r3, #1
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	429a      	cmp	r2, r3
 8008354:	d3b7      	bcc.n	80082c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008356:	2300      	movs	r3, #0
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	e043      	b.n	80083e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800836e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008372:	d118      	bne.n	80083a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	461a      	mov	r2, r3
 8008388:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	e013      	b.n	80083b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	e008      	b.n	80083b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	461a      	mov	r2, r3
 80083b4:	2300      	movs	r3, #0
 80083b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	461a      	mov	r2, r3
 80083d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	3301      	adds	r3, #1
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d3b7      	bcc.n	800835c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800840c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d105      	bne.n	8008420 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f043 0210 	orr.w	r2, r3, #16
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <USB_DevInit+0x2c4>)
 8008426:	4313      	orrs	r3, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800842c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f043 0208 	orr.w	r2, r3, #8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800843e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d107      	bne.n	8008454 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800844c:	f043 0304 	orr.w	r3, r3, #4
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008460:	b004      	add	sp, #16
 8008462:	4770      	bx	lr
 8008464:	803c3800 	.word	0x803c3800

08008468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4a13      	ldr	r2, [pc, #76]	; (80084cc <USB_FlushTxFifo+0x64>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d901      	bls.n	8008488 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e01b      	b.n	80084c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	daf2      	bge.n	8008476 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	019b      	lsls	r3, r3, #6
 8008498:	f043 0220 	orr.w	r2, r3, #32
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a08      	ldr	r2, [pc, #32]	; (80084cc <USB_FlushTxFifo+0x64>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e006      	b.n	80084c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d0f0      	beq.n	80084a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	00030d40 	.word	0x00030d40

080084d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a11      	ldr	r2, [pc, #68]	; (800852c <USB_FlushRxFifo+0x5c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d901      	bls.n	80084ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e018      	b.n	8008520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	daf2      	bge.n	80084dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2210      	movs	r2, #16
 80084fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a08      	ldr	r2, [pc, #32]	; (800852c <USB_FlushRxFifo+0x5c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d901      	bls.n	8008512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e006      	b.n	8008520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b10      	cmp	r3, #16
 800851c:	d0f0      	beq.n	8008500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	00030d40 	.word	0x00030d40

08008530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008550:	4313      	orrs	r3, r2
 8008552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008590:	f043 0302 	orr.w	r3, r3, #2
 8008594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f003 0301 	and.w	r3, r3, #1
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <USB_CoreReset+0x64>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e01b      	b.n	8008616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	daf2      	bge.n	80085cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f043 0201 	orr.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <USB_CoreReset+0x64>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d901      	bls.n	8008608 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e006      	b.n	8008616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b01      	cmp	r3, #1
 8008612:	d0f0      	beq.n	80085f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	00030d40 	.word	0x00030d40

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	; 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	; 0x5c
 8008646:	f000 fa4b 	bl	8008ae0 <memset>
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <std+0x58>)
 800864c:	6263      	str	r3, [r4, #36]	; 0x24
 800864e:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <std+0x5c>)
 8008650:	62a3      	str	r3, [r4, #40]	; 0x28
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <std+0x60>)
 8008654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <std+0x64>)
 8008658:	6323      	str	r3, [r4, #48]	; 0x30
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <std+0x68>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	429c      	cmp	r4, r3
 8008660:	d006      	beq.n	8008670 <std+0x48>
 8008662:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008666:	4294      	cmp	r4, r2
 8008668:	d002      	beq.n	8008670 <std+0x48>
 800866a:	33d0      	adds	r3, #208	; 0xd0
 800866c:	429c      	cmp	r4, r3
 800866e:	d105      	bne.n	800867c <std+0x54>
 8008670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008678:	f000 baaa 	b.w	8008bd0 <__retarget_lock_init_recursive>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08008931 	.word	0x08008931
 8008684:	08008953 	.word	0x08008953
 8008688:	0800898b 	.word	0x0800898b
 800868c:	080089af 	.word	0x080089af
 8008690:	20000a24 	.word	0x20000a24

08008694 <stdio_exit_handler>:
 8008694:	4a02      	ldr	r2, [pc, #8]	; (80086a0 <stdio_exit_handler+0xc>)
 8008696:	4903      	ldr	r1, [pc, #12]	; (80086a4 <stdio_exit_handler+0x10>)
 8008698:	4803      	ldr	r0, [pc, #12]	; (80086a8 <stdio_exit_handler+0x14>)
 800869a:	f000 b869 	b.w	8008770 <_fwalk_sglue>
 800869e:	bf00      	nop
 80086a0:	20000020 	.word	0x20000020
 80086a4:	0800972d 	.word	0x0800972d
 80086a8:	2000002c 	.word	0x2000002c

080086ac <cleanup_stdio>:
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <cleanup_stdio+0x34>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	d001      	beq.n	80086bc <cleanup_stdio+0x10>
 80086b8:	f001 f838 	bl	800972c <_fflush_r>
 80086bc:	68a1      	ldr	r1, [r4, #8]
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <cleanup_stdio+0x38>)
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <cleanup_stdio+0x1e>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f001 f831 	bl	800972c <_fflush_r>
 80086ca:	68e1      	ldr	r1, [r4, #12]
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <cleanup_stdio+0x3c>)
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d004      	beq.n	80086dc <cleanup_stdio+0x30>
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d8:	f001 b828 	b.w	800972c <_fflush_r>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	20000a24 	.word	0x20000a24
 80086e4:	20000a8c 	.word	0x20000a8c
 80086e8:	20000af4 	.word	0x20000af4

080086ec <global_stdio_init.part.0>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <global_stdio_init.part.0+0x30>)
 80086f0:	4c0b      	ldr	r4, [pc, #44]	; (8008720 <global_stdio_init.part.0+0x34>)
 80086f2:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <global_stdio_init.part.0+0x38>)
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	4620      	mov	r0, r4
 80086f8:	2200      	movs	r2, #0
 80086fa:	2104      	movs	r1, #4
 80086fc:	f7ff ff94 	bl	8008628 <std>
 8008700:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008704:	2201      	movs	r2, #1
 8008706:	2109      	movs	r1, #9
 8008708:	f7ff ff8e 	bl	8008628 <std>
 800870c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008710:	2202      	movs	r2, #2
 8008712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008716:	2112      	movs	r1, #18
 8008718:	f7ff bf86 	b.w	8008628 <std>
 800871c:	20000b5c 	.word	0x20000b5c
 8008720:	20000a24 	.word	0x20000a24
 8008724:	08008695 	.word	0x08008695

08008728 <__sfp_lock_acquire>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__sfp_lock_acquire+0x8>)
 800872a:	f000 ba52 	b.w	8008bd2 <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	20000b65 	.word	0x20000b65

08008734 <__sfp_lock_release>:
 8008734:	4801      	ldr	r0, [pc, #4]	; (800873c <__sfp_lock_release+0x8>)
 8008736:	f000 ba4d 	b.w	8008bd4 <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	20000b65 	.word	0x20000b65

08008740 <__sinit>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	f7ff fff0 	bl	8008728 <__sfp_lock_acquire>
 8008748:	6a23      	ldr	r3, [r4, #32]
 800874a:	b11b      	cbz	r3, 8008754 <__sinit+0x14>
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	f7ff bff0 	b.w	8008734 <__sfp_lock_release>
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <__sinit+0x28>)
 8008756:	6223      	str	r3, [r4, #32]
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <__sinit+0x2c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f5      	bne.n	800874c <__sinit+0xc>
 8008760:	f7ff ffc4 	bl	80086ec <global_stdio_init.part.0>
 8008764:	e7f2      	b.n	800874c <__sinit+0xc>
 8008766:	bf00      	nop
 8008768:	080086ad 	.word	0x080086ad
 800876c:	20000b5c 	.word	0x20000b5c

08008770 <_fwalk_sglue>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	4607      	mov	r7, r0
 8008776:	4688      	mov	r8, r1
 8008778:	4614      	mov	r4, r2
 800877a:	2600      	movs	r6, #0
 800877c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008780:	f1b9 0901 	subs.w	r9, r9, #1
 8008784:	d505      	bpl.n	8008792 <_fwalk_sglue+0x22>
 8008786:	6824      	ldr	r4, [r4, #0]
 8008788:	2c00      	cmp	r4, #0
 800878a:	d1f7      	bne.n	800877c <_fwalk_sglue+0xc>
 800878c:	4630      	mov	r0, r6
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d907      	bls.n	80087a8 <_fwalk_sglue+0x38>
 8008798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800879c:	3301      	adds	r3, #1
 800879e:	d003      	beq.n	80087a8 <_fwalk_sglue+0x38>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	4306      	orrs	r6, r0
 80087a8:	3568      	adds	r5, #104	; 0x68
 80087aa:	e7e9      	b.n	8008780 <_fwalk_sglue+0x10>

080087ac <iprintf>:
 80087ac:	b40f      	push	{r0, r1, r2, r3}
 80087ae:	b507      	push	{r0, r1, r2, lr}
 80087b0:	4906      	ldr	r1, [pc, #24]	; (80087cc <iprintf+0x20>)
 80087b2:	ab04      	add	r3, sp, #16
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ba:	6881      	ldr	r1, [r0, #8]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	f000 fc85 	bl	80090cc <_vfiprintf_r>
 80087c2:	b003      	add	sp, #12
 80087c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c8:	b004      	add	sp, #16
 80087ca:	4770      	bx	lr
 80087cc:	20000078 	.word	0x20000078

080087d0 <_puts_r>:
 80087d0:	6a03      	ldr	r3, [r0, #32]
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	6884      	ldr	r4, [r0, #8]
 80087d6:	4605      	mov	r5, r0
 80087d8:	460e      	mov	r6, r1
 80087da:	b90b      	cbnz	r3, 80087e0 <_puts_r+0x10>
 80087dc:	f7ff ffb0 	bl	8008740 <__sinit>
 80087e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d405      	bmi.n	80087f2 <_puts_r+0x22>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_puts_r+0x22>
 80087ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ee:	f000 f9f0 	bl	8008bd2 <__retarget_lock_acquire_recursive>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	0719      	lsls	r1, r3, #28
 80087f6:	d513      	bpl.n	8008820 <_puts_r+0x50>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	b18b      	cbz	r3, 8008820 <_puts_r+0x50>
 80087fc:	3e01      	subs	r6, #1
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008804:	3b01      	subs	r3, #1
 8008806:	60a3      	str	r3, [r4, #8]
 8008808:	b9e9      	cbnz	r1, 8008846 <_puts_r+0x76>
 800880a:	2b00      	cmp	r3, #0
 800880c:	da2e      	bge.n	800886c <_puts_r+0x9c>
 800880e:	4622      	mov	r2, r4
 8008810:	210a      	movs	r1, #10
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f8cf 	bl	80089b6 <__swbuf_r>
 8008818:	3001      	adds	r0, #1
 800881a:	d007      	beq.n	800882c <_puts_r+0x5c>
 800881c:	250a      	movs	r5, #10
 800881e:	e007      	b.n	8008830 <_puts_r+0x60>
 8008820:	4621      	mov	r1, r4
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f904 	bl	8008a30 <__swsetup_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	d0e7      	beq.n	80087fc <_puts_r+0x2c>
 800882c:	f04f 35ff 	mov.w	r5, #4294967295
 8008830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008832:	07da      	lsls	r2, r3, #31
 8008834:	d405      	bmi.n	8008842 <_puts_r+0x72>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	059b      	lsls	r3, r3, #22
 800883a:	d402      	bmi.n	8008842 <_puts_r+0x72>
 800883c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800883e:	f000 f9c9 	bl	8008bd4 <__retarget_lock_release_recursive>
 8008842:	4628      	mov	r0, r5
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	2b00      	cmp	r3, #0
 8008848:	da04      	bge.n	8008854 <_puts_r+0x84>
 800884a:	69a2      	ldr	r2, [r4, #24]
 800884c:	429a      	cmp	r2, r3
 800884e:	dc06      	bgt.n	800885e <_puts_r+0x8e>
 8008850:	290a      	cmp	r1, #10
 8008852:	d004      	beq.n	800885e <_puts_r+0x8e>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	6022      	str	r2, [r4, #0]
 800885a:	7019      	strb	r1, [r3, #0]
 800885c:	e7cf      	b.n	80087fe <_puts_r+0x2e>
 800885e:	4622      	mov	r2, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f000 f8a8 	bl	80089b6 <__swbuf_r>
 8008866:	3001      	adds	r0, #1
 8008868:	d1c9      	bne.n	80087fe <_puts_r+0x2e>
 800886a:	e7df      	b.n	800882c <_puts_r+0x5c>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	250a      	movs	r5, #10
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	701d      	strb	r5, [r3, #0]
 8008876:	e7db      	b.n	8008830 <_puts_r+0x60>

08008878 <puts>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <puts+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfa7 	b.w	80087d0 <_puts_r>
 8008882:	bf00      	nop
 8008884:	20000078 	.word	0x20000078

08008888 <sniprintf>:
 8008888:	b40c      	push	{r2, r3}
 800888a:	b530      	push	{r4, r5, lr}
 800888c:	4b17      	ldr	r3, [pc, #92]	; (80088ec <sniprintf+0x64>)
 800888e:	1e0c      	subs	r4, r1, #0
 8008890:	681d      	ldr	r5, [r3, #0]
 8008892:	b09d      	sub	sp, #116	; 0x74
 8008894:	da08      	bge.n	80088a8 <sniprintf+0x20>
 8008896:	238b      	movs	r3, #139	; 0x8b
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	b01d      	add	sp, #116	; 0x74
 80088a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a4:	b002      	add	sp, #8
 80088a6:	4770      	bx	lr
 80088a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088b0:	bf14      	ite	ne
 80088b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088b6:	4623      	moveq	r3, r4
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	9307      	str	r3, [sp, #28]
 80088bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088c0:	9002      	str	r0, [sp, #8]
 80088c2:	9006      	str	r0, [sp, #24]
 80088c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ca:	ab21      	add	r3, sp, #132	; 0x84
 80088cc:	a902      	add	r1, sp, #8
 80088ce:	4628      	mov	r0, r5
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	f000 fad3 	bl	8008e7c <_svfiprintf_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	bfbc      	itt	lt
 80088da:	238b      	movlt	r3, #139	; 0x8b
 80088dc:	602b      	strlt	r3, [r5, #0]
 80088de:	2c00      	cmp	r4, #0
 80088e0:	d0dd      	beq.n	800889e <sniprintf+0x16>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	e7d9      	b.n	800889e <sniprintf+0x16>
 80088ea:	bf00      	nop
 80088ec:	20000078 	.word	0x20000078

080088f0 <siprintf>:
 80088f0:	b40e      	push	{r1, r2, r3}
 80088f2:	b500      	push	{lr}
 80088f4:	b09c      	sub	sp, #112	; 0x70
 80088f6:	ab1d      	add	r3, sp, #116	; 0x74
 80088f8:	9002      	str	r0, [sp, #8]
 80088fa:	9006      	str	r0, [sp, #24]
 80088fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008900:	4809      	ldr	r0, [pc, #36]	; (8008928 <siprintf+0x38>)
 8008902:	9107      	str	r1, [sp, #28]
 8008904:	9104      	str	r1, [sp, #16]
 8008906:	4909      	ldr	r1, [pc, #36]	; (800892c <siprintf+0x3c>)
 8008908:	f853 2b04 	ldr.w	r2, [r3], #4
 800890c:	9105      	str	r1, [sp, #20]
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	a902      	add	r1, sp, #8
 8008914:	f000 fab2 	bl	8008e7c <_svfiprintf_r>
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	b01c      	add	sp, #112	; 0x70
 8008920:	f85d eb04 	ldr.w	lr, [sp], #4
 8008924:	b003      	add	sp, #12
 8008926:	4770      	bx	lr
 8008928:	20000078 	.word	0x20000078
 800892c:	ffff0208 	.word	0xffff0208

08008930 <__sread>:
 8008930:	b510      	push	{r4, lr}
 8008932:	460c      	mov	r4, r1
 8008934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008938:	f000 f8fc 	bl	8008b34 <_read_r>
 800893c:	2800      	cmp	r0, #0
 800893e:	bfab      	itete	ge
 8008940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008942:	89a3      	ldrhlt	r3, [r4, #12]
 8008944:	181b      	addge	r3, r3, r0
 8008946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800894a:	bfac      	ite	ge
 800894c:	6563      	strge	r3, [r4, #84]	; 0x54
 800894e:	81a3      	strhlt	r3, [r4, #12]
 8008950:	bd10      	pop	{r4, pc}

08008952 <__swrite>:
 8008952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008956:	461f      	mov	r7, r3
 8008958:	898b      	ldrh	r3, [r1, #12]
 800895a:	05db      	lsls	r3, r3, #23
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	4616      	mov	r6, r2
 8008962:	d505      	bpl.n	8008970 <__swrite+0x1e>
 8008964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008968:	2302      	movs	r3, #2
 800896a:	2200      	movs	r2, #0
 800896c:	f000 f8d0 	bl	8008b10 <_lseek_r>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	4632      	mov	r2, r6
 800897e:	463b      	mov	r3, r7
 8008980:	4628      	mov	r0, r5
 8008982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008986:	f000 b8e7 	b.w	8008b58 <_write_r>

0800898a <__sseek>:
 800898a:	b510      	push	{r4, lr}
 800898c:	460c      	mov	r4, r1
 800898e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008992:	f000 f8bd 	bl	8008b10 <_lseek_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	bf15      	itete	ne
 800899c:	6560      	strne	r0, [r4, #84]	; 0x54
 800899e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089a6:	81a3      	strheq	r3, [r4, #12]
 80089a8:	bf18      	it	ne
 80089aa:	81a3      	strhne	r3, [r4, #12]
 80089ac:	bd10      	pop	{r4, pc}

080089ae <__sclose>:
 80089ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b2:	f000 b89d 	b.w	8008af0 <_close_r>

080089b6 <__swbuf_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	460e      	mov	r6, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	4605      	mov	r5, r0
 80089be:	b118      	cbz	r0, 80089c8 <__swbuf_r+0x12>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <__swbuf_r+0x12>
 80089c4:	f7ff febc 	bl	8008740 <__sinit>
 80089c8:	69a3      	ldr	r3, [r4, #24]
 80089ca:	60a3      	str	r3, [r4, #8]
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	071a      	lsls	r2, r3, #28
 80089d0:	d525      	bpl.n	8008a1e <__swbuf_r+0x68>
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	b31b      	cbz	r3, 8008a1e <__swbuf_r+0x68>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	1a98      	subs	r0, r3, r2
 80089dc:	6963      	ldr	r3, [r4, #20]
 80089de:	b2f6      	uxtb	r6, r6
 80089e0:	4283      	cmp	r3, r0
 80089e2:	4637      	mov	r7, r6
 80089e4:	dc04      	bgt.n	80089f0 <__swbuf_r+0x3a>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f000 fe9f 	bl	800972c <_fflush_r>
 80089ee:	b9e0      	cbnz	r0, 8008a2a <__swbuf_r+0x74>
 80089f0:	68a3      	ldr	r3, [r4, #8]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	701e      	strb	r6, [r3, #0]
 80089fe:	6962      	ldr	r2, [r4, #20]
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d004      	beq.n	8008a10 <__swbuf_r+0x5a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	07db      	lsls	r3, r3, #31
 8008a0a:	d506      	bpl.n	8008a1a <__swbuf_r+0x64>
 8008a0c:	2e0a      	cmp	r6, #10
 8008a0e:	d104      	bne.n	8008a1a <__swbuf_r+0x64>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 fe8a 	bl	800972c <_fflush_r>
 8008a18:	b938      	cbnz	r0, 8008a2a <__swbuf_r+0x74>
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f805 	bl	8008a30 <__swsetup_r>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0d5      	beq.n	80089d6 <__swbuf_r+0x20>
 8008a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a2e:	e7f4      	b.n	8008a1a <__swbuf_r+0x64>

08008a30 <__swsetup_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <__swsetup_r+0xac>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	460c      	mov	r4, r1
 8008a3a:	b118      	cbz	r0, 8008a44 <__swsetup_r+0x14>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <__swsetup_r+0x14>
 8008a40:	f7ff fe7e 	bl	8008740 <__sinit>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a4a:	0718      	lsls	r0, r3, #28
 8008a4c:	d422      	bmi.n	8008a94 <__swsetup_r+0x64>
 8008a4e:	06d9      	lsls	r1, r3, #27
 8008a50:	d407      	bmi.n	8008a62 <__swsetup_r+0x32>
 8008a52:	2309      	movs	r3, #9
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	e034      	b.n	8008acc <__swsetup_r+0x9c>
 8008a62:	0758      	lsls	r0, r3, #29
 8008a64:	d512      	bpl.n	8008a8c <__swsetup_r+0x5c>
 8008a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a68:	b141      	cbz	r1, 8008a7c <__swsetup_r+0x4c>
 8008a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	d002      	beq.n	8008a78 <__swsetup_r+0x48>
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f8b0 	bl	8008bd8 <_free_r>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	2300      	movs	r3, #0
 8008a86:	6063      	str	r3, [r4, #4]
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f043 0308 	orr.w	r3, r3, #8
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	b94b      	cbnz	r3, 8008aac <__swsetup_r+0x7c>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa2:	d003      	beq.n	8008aac <__swsetup_r+0x7c>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 fe8e 	bl	80097c8 <__smakebuf_r>
 8008aac:	89a0      	ldrh	r0, [r4, #12]
 8008aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab2:	f010 0301 	ands.w	r3, r0, #1
 8008ab6:	d00a      	beq.n	8008ace <__swsetup_r+0x9e>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60a3      	str	r3, [r4, #8]
 8008abc:	6963      	ldr	r3, [r4, #20]
 8008abe:	425b      	negs	r3, r3
 8008ac0:	61a3      	str	r3, [r4, #24]
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	b943      	cbnz	r3, 8008ad8 <__swsetup_r+0xa8>
 8008ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aca:	d1c4      	bne.n	8008a56 <__swsetup_r+0x26>
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	0781      	lsls	r1, r0, #30
 8008ad0:	bf58      	it	pl
 8008ad2:	6963      	ldrpl	r3, [r4, #20]
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	e7f4      	b.n	8008ac2 <__swsetup_r+0x92>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7f7      	b.n	8008acc <__swsetup_r+0x9c>
 8008adc:	20000078 	.word	0x20000078

08008ae0 <memset>:
 8008ae0:	4402      	add	r2, r0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d100      	bne.n	8008aea <memset+0xa>
 8008ae8:	4770      	bx	lr
 8008aea:	f803 1b01 	strb.w	r1, [r3], #1
 8008aee:	e7f9      	b.n	8008ae4 <memset+0x4>

08008af0 <_close_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	; (8008b0c <_close_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f9 f8e1 	bl	8001cc2 <_close>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_close_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_close_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000b60 	.word	0x20000b60

08008b10 <_lseek_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	; (8008b30 <_lseek_r+0x20>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f9 f8f6 	bl	8001d10 <_lseek>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_lseek_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_lseek_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20000b60 	.word	0x20000b60

08008b34 <_read_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	; (8008b54 <_read_r+0x20>)
 8008b38:	4604      	mov	r4, r0
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7f9 f8a0 	bl	8001c88 <_read>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_read_r+0x1e>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_read_r+0x1e>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20000b60 	.word	0x20000b60

08008b58 <_write_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_write_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f7 fe3e 	bl	80007e8 <_write>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_write_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_write_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000b60 	.word	0x20000b60

08008b7c <__errno>:
 8008b7c:	4b01      	ldr	r3, [pc, #4]	; (8008b84 <__errno+0x8>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000078 	.word	0x20000078

08008b88 <__libc_init_array>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	4d0d      	ldr	r5, [pc, #52]	; (8008bc0 <__libc_init_array+0x38>)
 8008b8c:	4c0d      	ldr	r4, [pc, #52]	; (8008bc4 <__libc_init_array+0x3c>)
 8008b8e:	1b64      	subs	r4, r4, r5
 8008b90:	10a4      	asrs	r4, r4, #2
 8008b92:	2600      	movs	r6, #0
 8008b94:	42a6      	cmp	r6, r4
 8008b96:	d109      	bne.n	8008bac <__libc_init_array+0x24>
 8008b98:	4d0b      	ldr	r5, [pc, #44]	; (8008bc8 <__libc_init_array+0x40>)
 8008b9a:	4c0c      	ldr	r4, [pc, #48]	; (8008bcc <__libc_init_array+0x44>)
 8008b9c:	f000 fee2 	bl	8009964 <_init>
 8008ba0:	1b64      	subs	r4, r4, r5
 8008ba2:	10a4      	asrs	r4, r4, #2
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	42a6      	cmp	r6, r4
 8008ba8:	d105      	bne.n	8008bb6 <__libc_init_array+0x2e>
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb0:	4798      	blx	r3
 8008bb2:	3601      	adds	r6, #1
 8008bb4:	e7ee      	b.n	8008b94 <__libc_init_array+0xc>
 8008bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bba:	4798      	blx	r3
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	e7f2      	b.n	8008ba6 <__libc_init_array+0x1e>
 8008bc0:	08009b78 	.word	0x08009b78
 8008bc4:	08009b78 	.word	0x08009b78
 8008bc8:	08009b78 	.word	0x08009b78
 8008bcc:	08009b7c 	.word	0x08009b7c

08008bd0 <__retarget_lock_init_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_acquire_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <__retarget_lock_release_recursive>:
 8008bd4:	4770      	bx	lr
	...

08008bd8 <_free_r>:
 8008bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	d044      	beq.n	8008c68 <_free_r+0x90>
 8008bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be2:	9001      	str	r0, [sp, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f1a1 0404 	sub.w	r4, r1, #4
 8008bea:	bfb8      	it	lt
 8008bec:	18e4      	addlt	r4, r4, r3
 8008bee:	f000 f8df 	bl	8008db0 <__malloc_lock>
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <_free_r+0x94>)
 8008bf4:	9801      	ldr	r0, [sp, #4]
 8008bf6:	6813      	ldr	r3, [r2, #0]
 8008bf8:	b933      	cbnz	r3, 8008c08 <_free_r+0x30>
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	6014      	str	r4, [r2, #0]
 8008bfe:	b003      	add	sp, #12
 8008c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c04:	f000 b8da 	b.w	8008dbc <__malloc_unlock>
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	d908      	bls.n	8008c1e <_free_r+0x46>
 8008c0c:	6825      	ldr	r5, [r4, #0]
 8008c0e:	1961      	adds	r1, r4, r5
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf01      	itttt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	1949      	addeq	r1, r1, r5
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	e7ed      	b.n	8008bfa <_free_r+0x22>
 8008c1e:	461a      	mov	r2, r3
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	b10b      	cbz	r3, 8008c28 <_free_r+0x50>
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	d9fa      	bls.n	8008c1e <_free_r+0x46>
 8008c28:	6811      	ldr	r1, [r2, #0]
 8008c2a:	1855      	adds	r5, r2, r1
 8008c2c:	42a5      	cmp	r5, r4
 8008c2e:	d10b      	bne.n	8008c48 <_free_r+0x70>
 8008c30:	6824      	ldr	r4, [r4, #0]
 8008c32:	4421      	add	r1, r4
 8008c34:	1854      	adds	r4, r2, r1
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	6011      	str	r1, [r2, #0]
 8008c3a:	d1e0      	bne.n	8008bfe <_free_r+0x26>
 8008c3c:	681c      	ldr	r4, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	6053      	str	r3, [r2, #4]
 8008c42:	440c      	add	r4, r1
 8008c44:	6014      	str	r4, [r2, #0]
 8008c46:	e7da      	b.n	8008bfe <_free_r+0x26>
 8008c48:	d902      	bls.n	8008c50 <_free_r+0x78>
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	6003      	str	r3, [r0, #0]
 8008c4e:	e7d6      	b.n	8008bfe <_free_r+0x26>
 8008c50:	6825      	ldr	r5, [r4, #0]
 8008c52:	1961      	adds	r1, r4, r5
 8008c54:	428b      	cmp	r3, r1
 8008c56:	bf04      	itt	eq
 8008c58:	6819      	ldreq	r1, [r3, #0]
 8008c5a:	685b      	ldreq	r3, [r3, #4]
 8008c5c:	6063      	str	r3, [r4, #4]
 8008c5e:	bf04      	itt	eq
 8008c60:	1949      	addeq	r1, r1, r5
 8008c62:	6021      	streq	r1, [r4, #0]
 8008c64:	6054      	str	r4, [r2, #4]
 8008c66:	e7ca      	b.n	8008bfe <_free_r+0x26>
 8008c68:	b003      	add	sp, #12
 8008c6a:	bd30      	pop	{r4, r5, pc}
 8008c6c:	20000b68 	.word	0x20000b68

08008c70 <sbrk_aligned>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4e0e      	ldr	r6, [pc, #56]	; (8008cac <sbrk_aligned+0x3c>)
 8008c74:	460c      	mov	r4, r1
 8008c76:	6831      	ldr	r1, [r6, #0]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	b911      	cbnz	r1, 8008c82 <sbrk_aligned+0x12>
 8008c7c:	f000 fe1c 	bl	80098b8 <_sbrk_r>
 8008c80:	6030      	str	r0, [r6, #0]
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f000 fe17 	bl	80098b8 <_sbrk_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d00a      	beq.n	8008ca4 <sbrk_aligned+0x34>
 8008c8e:	1cc4      	adds	r4, r0, #3
 8008c90:	f024 0403 	bic.w	r4, r4, #3
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d007      	beq.n	8008ca8 <sbrk_aligned+0x38>
 8008c98:	1a21      	subs	r1, r4, r0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 fe0c 	bl	80098b8 <_sbrk_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d101      	bne.n	8008ca8 <sbrk_aligned+0x38>
 8008ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ca8:	4620      	mov	r0, r4
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	20000b6c 	.word	0x20000b6c

08008cb0 <_malloc_r>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	1ccd      	adds	r5, r1, #3
 8008cb6:	f025 0503 	bic.w	r5, r5, #3
 8008cba:	3508      	adds	r5, #8
 8008cbc:	2d0c      	cmp	r5, #12
 8008cbe:	bf38      	it	cc
 8008cc0:	250c      	movcc	r5, #12
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	db01      	blt.n	8008ccc <_malloc_r+0x1c>
 8008cc8:	42a9      	cmp	r1, r5
 8008cca:	d905      	bls.n	8008cd8 <_malloc_r+0x28>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008dac <_malloc_r+0xfc>
 8008cdc:	f000 f868 	bl	8008db0 <__malloc_lock>
 8008ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce4:	461c      	mov	r4, r3
 8008ce6:	bb5c      	cbnz	r4, 8008d40 <_malloc_r+0x90>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff ffc0 	bl	8008c70 <sbrk_aligned>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	d155      	bne.n	8008da2 <_malloc_r+0xf2>
 8008cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8008cfa:	4626      	mov	r6, r4
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	d145      	bne.n	8008d8c <_malloc_r+0xdc>
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	d048      	beq.n	8008d96 <_malloc_r+0xe6>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	4631      	mov	r1, r6
 8008d08:	4638      	mov	r0, r7
 8008d0a:	eb04 0903 	add.w	r9, r4, r3
 8008d0e:	f000 fdd3 	bl	80098b8 <_sbrk_r>
 8008d12:	4581      	cmp	r9, r0
 8008d14:	d13f      	bne.n	8008d96 <_malloc_r+0xe6>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	1a6d      	subs	r5, r5, r1
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ffa7 	bl	8008c70 <sbrk_aligned>
 8008d22:	3001      	adds	r0, #1
 8008d24:	d037      	beq.n	8008d96 <_malloc_r+0xe6>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	442b      	add	r3, r5
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d038      	beq.n	8008da6 <_malloc_r+0xf6>
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	42a2      	cmp	r2, r4
 8008d38:	d12b      	bne.n	8008d92 <_malloc_r+0xe2>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	605a      	str	r2, [r3, #4]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xb0>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d41f      	bmi.n	8008d86 <_malloc_r+0xd6>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xca>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4638      	mov	r0, r7
 8008d62:	f104 060b 	add.w	r6, r4, #11
 8008d66:	f000 f829 	bl	8008dbc <__malloc_unlock>
 8008d6a:	f026 0607 	bic.w	r6, r6, #7
 8008d6e:	1d23      	adds	r3, r4, #4
 8008d70:	1af2      	subs	r2, r6, r3
 8008d72:	d0ae      	beq.n	8008cd2 <_malloc_r+0x22>
 8008d74:	1b9b      	subs	r3, r3, r6
 8008d76:	50a3      	str	r3, [r4, r2]
 8008d78:	e7ab      	b.n	8008cd2 <_malloc_r+0x22>
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	6862      	ldr	r2, [r4, #4]
 8008d7e:	d1dd      	bne.n	8008d3c <_malloc_r+0x8c>
 8008d80:	f8c8 2000 	str.w	r2, [r8]
 8008d84:	e7ec      	b.n	8008d60 <_malloc_r+0xb0>
 8008d86:	4623      	mov	r3, r4
 8008d88:	6864      	ldr	r4, [r4, #4]
 8008d8a:	e7ac      	b.n	8008ce6 <_malloc_r+0x36>
 8008d8c:	4634      	mov	r4, r6
 8008d8e:	6876      	ldr	r6, [r6, #4]
 8008d90:	e7b4      	b.n	8008cfc <_malloc_r+0x4c>
 8008d92:	4613      	mov	r3, r2
 8008d94:	e7cc      	b.n	8008d30 <_malloc_r+0x80>
 8008d96:	230c      	movs	r3, #12
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f000 f80e 	bl	8008dbc <__malloc_unlock>
 8008da0:	e797      	b.n	8008cd2 <_malloc_r+0x22>
 8008da2:	6025      	str	r5, [r4, #0]
 8008da4:	e7dc      	b.n	8008d60 <_malloc_r+0xb0>
 8008da6:	605b      	str	r3, [r3, #4]
 8008da8:	deff      	udf	#255	; 0xff
 8008daa:	bf00      	nop
 8008dac:	20000b68 	.word	0x20000b68

08008db0 <__malloc_lock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_lock+0x8>)
 8008db2:	f7ff bf0e 	b.w	8008bd2 <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20000b64 	.word	0x20000b64

08008dbc <__malloc_unlock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__malloc_unlock+0x8>)
 8008dbe:	f7ff bf09 	b.w	8008bd4 <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000b64 	.word	0x20000b64

08008dc8 <__ssputs_r>:
 8008dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	688e      	ldr	r6, [r1, #8]
 8008dce:	461f      	mov	r7, r3
 8008dd0:	42be      	cmp	r6, r7
 8008dd2:	680b      	ldr	r3, [r1, #0]
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	4690      	mov	r8, r2
 8008dda:	d82c      	bhi.n	8008e36 <__ssputs_r+0x6e>
 8008ddc:	898a      	ldrh	r2, [r1, #12]
 8008dde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de2:	d026      	beq.n	8008e32 <__ssputs_r+0x6a>
 8008de4:	6965      	ldr	r5, [r4, #20]
 8008de6:	6909      	ldr	r1, [r1, #16]
 8008de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dec:	eba3 0901 	sub.w	r9, r3, r1
 8008df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df4:	1c7b      	adds	r3, r7, #1
 8008df6:	444b      	add	r3, r9
 8008df8:	106d      	asrs	r5, r5, #1
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	bf38      	it	cc
 8008dfe:	461d      	movcc	r5, r3
 8008e00:	0553      	lsls	r3, r2, #21
 8008e02:	d527      	bpl.n	8008e54 <__ssputs_r+0x8c>
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7ff ff53 	bl	8008cb0 <_malloc_r>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	b360      	cbz	r0, 8008e68 <__ssputs_r+0xa0>
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	464a      	mov	r2, r9
 8008e12:	f000 fd61 	bl	80098d8 <memcpy>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	6126      	str	r6, [r4, #16]
 8008e24:	6165      	str	r5, [r4, #20]
 8008e26:	444e      	add	r6, r9
 8008e28:	eba5 0509 	sub.w	r5, r5, r9
 8008e2c:	6026      	str	r6, [r4, #0]
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	463e      	mov	r6, r7
 8008e32:	42be      	cmp	r6, r7
 8008e34:	d900      	bls.n	8008e38 <__ssputs_r+0x70>
 8008e36:	463e      	mov	r6, r7
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	4632      	mov	r2, r6
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	f000 fcff 	bl	8009840 <memmove>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	4433      	add	r3, r6
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	462a      	mov	r2, r5
 8008e56:	f000 fd4d 	bl	80098f4 <_realloc_r>
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1e0      	bne.n	8008e22 <__ssputs_r+0x5a>
 8008e60:	6921      	ldr	r1, [r4, #16]
 8008e62:	4650      	mov	r0, sl
 8008e64:	f7ff feb8 	bl	8008bd8 <_free_r>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	f8ca 3000 	str.w	r3, [sl]
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7a:	e7e9      	b.n	8008e50 <__ssputs_r+0x88>

08008e7c <_svfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4698      	mov	r8, r3
 8008e82:	898b      	ldrh	r3, [r1, #12]
 8008e84:	061b      	lsls	r3, r3, #24
 8008e86:	b09d      	sub	sp, #116	; 0x74
 8008e88:	4607      	mov	r7, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	4614      	mov	r4, r2
 8008e8e:	d50e      	bpl.n	8008eae <_svfiprintf_r+0x32>
 8008e90:	690b      	ldr	r3, [r1, #16]
 8008e92:	b963      	cbnz	r3, 8008eae <_svfiprintf_r+0x32>
 8008e94:	2140      	movs	r1, #64	; 0x40
 8008e96:	f7ff ff0b 	bl	8008cb0 <_malloc_r>
 8008e9a:	6028      	str	r0, [r5, #0]
 8008e9c:	6128      	str	r0, [r5, #16]
 8008e9e:	b920      	cbnz	r0, 8008eaa <_svfiprintf_r+0x2e>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e0d0      	b.n	800904c <_svfiprintf_r+0x1d0>
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	616b      	str	r3, [r5, #20]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	2320      	movs	r3, #32
 8008eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebc:	2330      	movs	r3, #48	; 0x30
 8008ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009064 <_svfiprintf_r+0x1e8>
 8008ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec6:	f04f 0901 	mov.w	r9, #1
 8008eca:	4623      	mov	r3, r4
 8008ecc:	469a      	mov	sl, r3
 8008ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed2:	b10a      	cbz	r2, 8008ed8 <_svfiprintf_r+0x5c>
 8008ed4:	2a25      	cmp	r2, #37	; 0x25
 8008ed6:	d1f9      	bne.n	8008ecc <_svfiprintf_r+0x50>
 8008ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8008edc:	d00b      	beq.n	8008ef6 <_svfiprintf_r+0x7a>
 8008ede:	465b      	mov	r3, fp
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f7ff ff6f 	bl	8008dc8 <__ssputs_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	f000 80a9 	beq.w	8009042 <_svfiprintf_r+0x1c6>
 8008ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef2:	445a      	add	r2, fp
 8008ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80a1 	beq.w	8009042 <_svfiprintf_r+0x1c6>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0a:	f10a 0a01 	add.w	sl, sl, #1
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	9307      	str	r3, [sp, #28]
 8008f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f16:	931a      	str	r3, [sp, #104]	; 0x68
 8008f18:	4654      	mov	r4, sl
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f20:	4850      	ldr	r0, [pc, #320]	; (8009064 <_svfiprintf_r+0x1e8>)
 8008f22:	f7f7 f96d 	bl	8000200 <memchr>
 8008f26:	9a04      	ldr	r2, [sp, #16]
 8008f28:	b9d8      	cbnz	r0, 8008f62 <_svfiprintf_r+0xe6>
 8008f2a:	06d0      	lsls	r0, r2, #27
 8008f2c:	bf44      	itt	mi
 8008f2e:	2320      	movmi	r3, #32
 8008f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f34:	0711      	lsls	r1, r2, #28
 8008f36:	bf44      	itt	mi
 8008f38:	232b      	movmi	r3, #43	; 0x2b
 8008f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f42:	2b2a      	cmp	r3, #42	; 0x2a
 8008f44:	d015      	beq.n	8008f72 <_svfiprintf_r+0xf6>
 8008f46:	9a07      	ldr	r2, [sp, #28]
 8008f48:	4654      	mov	r4, sl
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f04f 0c0a 	mov.w	ip, #10
 8008f50:	4621      	mov	r1, r4
 8008f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f56:	3b30      	subs	r3, #48	; 0x30
 8008f58:	2b09      	cmp	r3, #9
 8008f5a:	d94d      	bls.n	8008ff8 <_svfiprintf_r+0x17c>
 8008f5c:	b1b0      	cbz	r0, 8008f8c <_svfiprintf_r+0x110>
 8008f5e:	9207      	str	r2, [sp, #28]
 8008f60:	e014      	b.n	8008f8c <_svfiprintf_r+0x110>
 8008f62:	eba0 0308 	sub.w	r3, r0, r8
 8008f66:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	46a2      	mov	sl, r4
 8008f70:	e7d2      	b.n	8008f18 <_svfiprintf_r+0x9c>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	1d19      	adds	r1, r3, #4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	9103      	str	r1, [sp, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfbb      	ittet	lt
 8008f7e:	425b      	neglt	r3, r3
 8008f80:	f042 0202 	orrlt.w	r2, r2, #2
 8008f84:	9307      	strge	r3, [sp, #28]
 8008f86:	9307      	strlt	r3, [sp, #28]
 8008f88:	bfb8      	it	lt
 8008f8a:	9204      	strlt	r2, [sp, #16]
 8008f8c:	7823      	ldrb	r3, [r4, #0]
 8008f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f90:	d10c      	bne.n	8008fac <_svfiprintf_r+0x130>
 8008f92:	7863      	ldrb	r3, [r4, #1]
 8008f94:	2b2a      	cmp	r3, #42	; 0x2a
 8008f96:	d134      	bne.n	8009002 <_svfiprintf_r+0x186>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	9203      	str	r2, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfb8      	it	lt
 8008fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa8:	3402      	adds	r4, #2
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009074 <_svfiprintf_r+0x1f8>
 8008fb0:	7821      	ldrb	r1, [r4, #0]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	f7f7 f923 	bl	8000200 <memchr>
 8008fba:	b138      	cbz	r0, 8008fcc <_svfiprintf_r+0x150>
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	eba0 000a 	sub.w	r0, r0, sl
 8008fc2:	2240      	movs	r2, #64	; 0x40
 8008fc4:	4082      	lsls	r2, r0
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	3401      	adds	r4, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd0:	4825      	ldr	r0, [pc, #148]	; (8009068 <_svfiprintf_r+0x1ec>)
 8008fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd6:	2206      	movs	r2, #6
 8008fd8:	f7f7 f912 	bl	8000200 <memchr>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d038      	beq.n	8009052 <_svfiprintf_r+0x1d6>
 8008fe0:	4b22      	ldr	r3, [pc, #136]	; (800906c <_svfiprintf_r+0x1f0>)
 8008fe2:	bb1b      	cbnz	r3, 800902c <_svfiprintf_r+0x1b0>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	3307      	adds	r3, #7
 8008fe8:	f023 0307 	bic.w	r3, r3, #7
 8008fec:	3308      	adds	r3, #8
 8008fee:	9303      	str	r3, [sp, #12]
 8008ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff2:	4433      	add	r3, r6
 8008ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff6:	e768      	b.n	8008eca <_svfiprintf_r+0x4e>
 8008ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7a6      	b.n	8008f50 <_svfiprintf_r+0xd4>
 8009002:	2300      	movs	r3, #0
 8009004:	3401      	adds	r4, #1
 8009006:	9305      	str	r3, [sp, #20]
 8009008:	4619      	mov	r1, r3
 800900a:	f04f 0c0a 	mov.w	ip, #10
 800900e:	4620      	mov	r0, r4
 8009010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009014:	3a30      	subs	r2, #48	; 0x30
 8009016:	2a09      	cmp	r2, #9
 8009018:	d903      	bls.n	8009022 <_svfiprintf_r+0x1a6>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0c6      	beq.n	8008fac <_svfiprintf_r+0x130>
 800901e:	9105      	str	r1, [sp, #20]
 8009020:	e7c4      	b.n	8008fac <_svfiprintf_r+0x130>
 8009022:	fb0c 2101 	mla	r1, ip, r1, r2
 8009026:	4604      	mov	r4, r0
 8009028:	2301      	movs	r3, #1
 800902a:	e7f0      	b.n	800900e <_svfiprintf_r+0x192>
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <_svfiprintf_r+0x1f4>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	4638      	mov	r0, r7
 8009038:	f3af 8000 	nop.w
 800903c:	1c42      	adds	r2, r0, #1
 800903e:	4606      	mov	r6, r0
 8009040:	d1d6      	bne.n	8008ff0 <_svfiprintf_r+0x174>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	065b      	lsls	r3, r3, #25
 8009046:	f53f af2d 	bmi.w	8008ea4 <_svfiprintf_r+0x28>
 800904a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800904c:	b01d      	add	sp, #116	; 0x74
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	ab03      	add	r3, sp, #12
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	462a      	mov	r2, r5
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <_svfiprintf_r+0x1f4>)
 800905a:	a904      	add	r1, sp, #16
 800905c:	4638      	mov	r0, r7
 800905e:	f000 f9bd 	bl	80093dc <_printf_i>
 8009062:	e7eb      	b.n	800903c <_svfiprintf_r+0x1c0>
 8009064:	08009b3c 	.word	0x08009b3c
 8009068:	08009b46 	.word	0x08009b46
 800906c:	00000000 	.word	0x00000000
 8009070:	08008dc9 	.word	0x08008dc9
 8009074:	08009b42 	.word	0x08009b42

08009078 <__sfputc_r>:
 8009078:	6893      	ldr	r3, [r2, #8]
 800907a:	3b01      	subs	r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	b410      	push	{r4}
 8009080:	6093      	str	r3, [r2, #8]
 8009082:	da08      	bge.n	8009096 <__sfputc_r+0x1e>
 8009084:	6994      	ldr	r4, [r2, #24]
 8009086:	42a3      	cmp	r3, r4
 8009088:	db01      	blt.n	800908e <__sfputc_r+0x16>
 800908a:	290a      	cmp	r1, #10
 800908c:	d103      	bne.n	8009096 <__sfputc_r+0x1e>
 800908e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009092:	f7ff bc90 	b.w	80089b6 <__swbuf_r>
 8009096:	6813      	ldr	r3, [r2, #0]
 8009098:	1c58      	adds	r0, r3, #1
 800909a:	6010      	str	r0, [r2, #0]
 800909c:	7019      	strb	r1, [r3, #0]
 800909e:	4608      	mov	r0, r1
 80090a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <__sfputs_r>:
 80090a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a8:	4606      	mov	r6, r0
 80090aa:	460f      	mov	r7, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	18d5      	adds	r5, r2, r3
 80090b0:	42ac      	cmp	r4, r5
 80090b2:	d101      	bne.n	80090b8 <__sfputs_r+0x12>
 80090b4:	2000      	movs	r0, #0
 80090b6:	e007      	b.n	80090c8 <__sfputs_r+0x22>
 80090b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090bc:	463a      	mov	r2, r7
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ffda 	bl	8009078 <__sfputc_r>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d1f3      	bne.n	80090b0 <__sfputs_r+0xa>
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090cc <_vfiprintf_r>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	460d      	mov	r5, r1
 80090d2:	b09d      	sub	sp, #116	; 0x74
 80090d4:	4614      	mov	r4, r2
 80090d6:	4698      	mov	r8, r3
 80090d8:	4606      	mov	r6, r0
 80090da:	b118      	cbz	r0, 80090e4 <_vfiprintf_r+0x18>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <_vfiprintf_r+0x18>
 80090e0:	f7ff fb2e 	bl	8008740 <__sinit>
 80090e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d405      	bmi.n	80090f6 <_vfiprintf_r+0x2a>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	059a      	lsls	r2, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_vfiprintf_r+0x2a>
 80090f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f2:	f7ff fd6e 	bl	8008bd2 <__retarget_lock_acquire_recursive>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	071b      	lsls	r3, r3, #28
 80090fa:	d501      	bpl.n	8009100 <_vfiprintf_r+0x34>
 80090fc:	692b      	ldr	r3, [r5, #16]
 80090fe:	b99b      	cbnz	r3, 8009128 <_vfiprintf_r+0x5c>
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff fc94 	bl	8008a30 <__swsetup_r>
 8009108:	b170      	cbz	r0, 8009128 <_vfiprintf_r+0x5c>
 800910a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800910c:	07dc      	lsls	r4, r3, #31
 800910e:	d504      	bpl.n	800911a <_vfiprintf_r+0x4e>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	b01d      	add	sp, #116	; 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	0598      	lsls	r0, r3, #22
 800911e:	d4f7      	bmi.n	8009110 <_vfiprintf_r+0x44>
 8009120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009122:	f7ff fd57 	bl	8008bd4 <__retarget_lock_release_recursive>
 8009126:	e7f3      	b.n	8009110 <_vfiprintf_r+0x44>
 8009128:	2300      	movs	r3, #0
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
 800912c:	2320      	movs	r3, #32
 800912e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009132:	f8cd 800c 	str.w	r8, [sp, #12]
 8009136:	2330      	movs	r3, #48	; 0x30
 8009138:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092ec <_vfiprintf_r+0x220>
 800913c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009140:	f04f 0901 	mov.w	r9, #1
 8009144:	4623      	mov	r3, r4
 8009146:	469a      	mov	sl, r3
 8009148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914c:	b10a      	cbz	r2, 8009152 <_vfiprintf_r+0x86>
 800914e:	2a25      	cmp	r2, #37	; 0x25
 8009150:	d1f9      	bne.n	8009146 <_vfiprintf_r+0x7a>
 8009152:	ebba 0b04 	subs.w	fp, sl, r4
 8009156:	d00b      	beq.n	8009170 <_vfiprintf_r+0xa4>
 8009158:	465b      	mov	r3, fp
 800915a:	4622      	mov	r2, r4
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ffa1 	bl	80090a6 <__sfputs_r>
 8009164:	3001      	adds	r0, #1
 8009166:	f000 80a9 	beq.w	80092bc <_vfiprintf_r+0x1f0>
 800916a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800916c:	445a      	add	r2, fp
 800916e:	9209      	str	r2, [sp, #36]	; 0x24
 8009170:	f89a 3000 	ldrb.w	r3, [sl]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80a1 	beq.w	80092bc <_vfiprintf_r+0x1f0>
 800917a:	2300      	movs	r3, #0
 800917c:	f04f 32ff 	mov.w	r2, #4294967295
 8009180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009184:	f10a 0a01 	add.w	sl, sl, #1
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	9307      	str	r3, [sp, #28]
 800918c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009190:	931a      	str	r3, [sp, #104]	; 0x68
 8009192:	4654      	mov	r4, sl
 8009194:	2205      	movs	r2, #5
 8009196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919a:	4854      	ldr	r0, [pc, #336]	; (80092ec <_vfiprintf_r+0x220>)
 800919c:	f7f7 f830 	bl	8000200 <memchr>
 80091a0:	9a04      	ldr	r2, [sp, #16]
 80091a2:	b9d8      	cbnz	r0, 80091dc <_vfiprintf_r+0x110>
 80091a4:	06d1      	lsls	r1, r2, #27
 80091a6:	bf44      	itt	mi
 80091a8:	2320      	movmi	r3, #32
 80091aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ae:	0713      	lsls	r3, r2, #28
 80091b0:	bf44      	itt	mi
 80091b2:	232b      	movmi	r3, #43	; 0x2b
 80091b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b8:	f89a 3000 	ldrb.w	r3, [sl]
 80091bc:	2b2a      	cmp	r3, #42	; 0x2a
 80091be:	d015      	beq.n	80091ec <_vfiprintf_r+0x120>
 80091c0:	9a07      	ldr	r2, [sp, #28]
 80091c2:	4654      	mov	r4, sl
 80091c4:	2000      	movs	r0, #0
 80091c6:	f04f 0c0a 	mov.w	ip, #10
 80091ca:	4621      	mov	r1, r4
 80091cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d0:	3b30      	subs	r3, #48	; 0x30
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d94d      	bls.n	8009272 <_vfiprintf_r+0x1a6>
 80091d6:	b1b0      	cbz	r0, 8009206 <_vfiprintf_r+0x13a>
 80091d8:	9207      	str	r2, [sp, #28]
 80091da:	e014      	b.n	8009206 <_vfiprintf_r+0x13a>
 80091dc:	eba0 0308 	sub.w	r3, r0, r8
 80091e0:	fa09 f303 	lsl.w	r3, r9, r3
 80091e4:	4313      	orrs	r3, r2
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	46a2      	mov	sl, r4
 80091ea:	e7d2      	b.n	8009192 <_vfiprintf_r+0xc6>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	1d19      	adds	r1, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9103      	str	r1, [sp, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bfbb      	ittet	lt
 80091f8:	425b      	neglt	r3, r3
 80091fa:	f042 0202 	orrlt.w	r2, r2, #2
 80091fe:	9307      	strge	r3, [sp, #28]
 8009200:	9307      	strlt	r3, [sp, #28]
 8009202:	bfb8      	it	lt
 8009204:	9204      	strlt	r2, [sp, #16]
 8009206:	7823      	ldrb	r3, [r4, #0]
 8009208:	2b2e      	cmp	r3, #46	; 0x2e
 800920a:	d10c      	bne.n	8009226 <_vfiprintf_r+0x15a>
 800920c:	7863      	ldrb	r3, [r4, #1]
 800920e:	2b2a      	cmp	r3, #42	; 0x2a
 8009210:	d134      	bne.n	800927c <_vfiprintf_r+0x1b0>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	1d1a      	adds	r2, r3, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	9203      	str	r2, [sp, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	bfb8      	it	lt
 800921e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009222:	3402      	adds	r4, #2
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092fc <_vfiprintf_r+0x230>
 800922a:	7821      	ldrb	r1, [r4, #0]
 800922c:	2203      	movs	r2, #3
 800922e:	4650      	mov	r0, sl
 8009230:	f7f6 ffe6 	bl	8000200 <memchr>
 8009234:	b138      	cbz	r0, 8009246 <_vfiprintf_r+0x17a>
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	eba0 000a 	sub.w	r0, r0, sl
 800923c:	2240      	movs	r2, #64	; 0x40
 800923e:	4082      	lsls	r2, r0
 8009240:	4313      	orrs	r3, r2
 8009242:	3401      	adds	r4, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924a:	4829      	ldr	r0, [pc, #164]	; (80092f0 <_vfiprintf_r+0x224>)
 800924c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009250:	2206      	movs	r2, #6
 8009252:	f7f6 ffd5 	bl	8000200 <memchr>
 8009256:	2800      	cmp	r0, #0
 8009258:	d03f      	beq.n	80092da <_vfiprintf_r+0x20e>
 800925a:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <_vfiprintf_r+0x228>)
 800925c:	bb1b      	cbnz	r3, 80092a6 <_vfiprintf_r+0x1da>
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	3307      	adds	r3, #7
 8009262:	f023 0307 	bic.w	r3, r3, #7
 8009266:	3308      	adds	r3, #8
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	443b      	add	r3, r7
 800926e:	9309      	str	r3, [sp, #36]	; 0x24
 8009270:	e768      	b.n	8009144 <_vfiprintf_r+0x78>
 8009272:	fb0c 3202 	mla	r2, ip, r2, r3
 8009276:	460c      	mov	r4, r1
 8009278:	2001      	movs	r0, #1
 800927a:	e7a6      	b.n	80091ca <_vfiprintf_r+0xfe>
 800927c:	2300      	movs	r3, #0
 800927e:	3401      	adds	r4, #1
 8009280:	9305      	str	r3, [sp, #20]
 8009282:	4619      	mov	r1, r3
 8009284:	f04f 0c0a 	mov.w	ip, #10
 8009288:	4620      	mov	r0, r4
 800928a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928e:	3a30      	subs	r2, #48	; 0x30
 8009290:	2a09      	cmp	r2, #9
 8009292:	d903      	bls.n	800929c <_vfiprintf_r+0x1d0>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0c6      	beq.n	8009226 <_vfiprintf_r+0x15a>
 8009298:	9105      	str	r1, [sp, #20]
 800929a:	e7c4      	b.n	8009226 <_vfiprintf_r+0x15a>
 800929c:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a0:	4604      	mov	r4, r0
 80092a2:	2301      	movs	r3, #1
 80092a4:	e7f0      	b.n	8009288 <_vfiprintf_r+0x1bc>
 80092a6:	ab03      	add	r3, sp, #12
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	462a      	mov	r2, r5
 80092ac:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <_vfiprintf_r+0x22c>)
 80092ae:	a904      	add	r1, sp, #16
 80092b0:	4630      	mov	r0, r6
 80092b2:	f3af 8000 	nop.w
 80092b6:	4607      	mov	r7, r0
 80092b8:	1c78      	adds	r0, r7, #1
 80092ba:	d1d6      	bne.n	800926a <_vfiprintf_r+0x19e>
 80092bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x202>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x202>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7ff fc83 	bl	8008bd4 <__retarget_lock_release_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	065b      	lsls	r3, r3, #25
 80092d2:	f53f af1d 	bmi.w	8009110 <_vfiprintf_r+0x44>
 80092d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d8:	e71c      	b.n	8009114 <_vfiprintf_r+0x48>
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <_vfiprintf_r+0x22c>)
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	4630      	mov	r0, r6
 80092e6:	f000 f879 	bl	80093dc <_printf_i>
 80092ea:	e7e4      	b.n	80092b6 <_vfiprintf_r+0x1ea>
 80092ec:	08009b3c 	.word	0x08009b3c
 80092f0:	08009b46 	.word	0x08009b46
 80092f4:	00000000 	.word	0x00000000
 80092f8:	080090a7 	.word	0x080090a7
 80092fc:	08009b42 	.word	0x08009b42

08009300 <_printf_common>:
 8009300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009304:	4616      	mov	r6, r2
 8009306:	4699      	mov	r9, r3
 8009308:	688a      	ldr	r2, [r1, #8]
 800930a:	690b      	ldr	r3, [r1, #16]
 800930c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009310:	4293      	cmp	r3, r2
 8009312:	bfb8      	it	lt
 8009314:	4613      	movlt	r3, r2
 8009316:	6033      	str	r3, [r6, #0]
 8009318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800931c:	4607      	mov	r7, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b10a      	cbz	r2, 8009326 <_printf_common+0x26>
 8009322:	3301      	adds	r3, #1
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	0699      	lsls	r1, r3, #26
 800932a:	bf42      	ittt	mi
 800932c:	6833      	ldrmi	r3, [r6, #0]
 800932e:	3302      	addmi	r3, #2
 8009330:	6033      	strmi	r3, [r6, #0]
 8009332:	6825      	ldr	r5, [r4, #0]
 8009334:	f015 0506 	ands.w	r5, r5, #6
 8009338:	d106      	bne.n	8009348 <_printf_common+0x48>
 800933a:	f104 0a19 	add.w	sl, r4, #25
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	6832      	ldr	r2, [r6, #0]
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	42ab      	cmp	r3, r5
 8009346:	dc26      	bgt.n	8009396 <_printf_common+0x96>
 8009348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800934c:	1e13      	subs	r3, r2, #0
 800934e:	6822      	ldr	r2, [r4, #0]
 8009350:	bf18      	it	ne
 8009352:	2301      	movne	r3, #1
 8009354:	0692      	lsls	r2, r2, #26
 8009356:	d42b      	bmi.n	80093b0 <_printf_common+0xb0>
 8009358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800935c:	4649      	mov	r1, r9
 800935e:	4638      	mov	r0, r7
 8009360:	47c0      	blx	r8
 8009362:	3001      	adds	r0, #1
 8009364:	d01e      	beq.n	80093a4 <_printf_common+0xa4>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	f003 0306 	and.w	r3, r3, #6
 800936e:	2b04      	cmp	r3, #4
 8009370:	bf02      	ittt	eq
 8009372:	68e5      	ldreq	r5, [r4, #12]
 8009374:	6833      	ldreq	r3, [r6, #0]
 8009376:	1aed      	subeq	r5, r5, r3
 8009378:	68a3      	ldr	r3, [r4, #8]
 800937a:	bf0c      	ite	eq
 800937c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009380:	2500      	movne	r5, #0
 8009382:	4293      	cmp	r3, r2
 8009384:	bfc4      	itt	gt
 8009386:	1a9b      	subgt	r3, r3, r2
 8009388:	18ed      	addgt	r5, r5, r3
 800938a:	2600      	movs	r6, #0
 800938c:	341a      	adds	r4, #26
 800938e:	42b5      	cmp	r5, r6
 8009390:	d11a      	bne.n	80093c8 <_printf_common+0xc8>
 8009392:	2000      	movs	r0, #0
 8009394:	e008      	b.n	80093a8 <_printf_common+0xa8>
 8009396:	2301      	movs	r3, #1
 8009398:	4652      	mov	r2, sl
 800939a:	4649      	mov	r1, r9
 800939c:	4638      	mov	r0, r7
 800939e:	47c0      	blx	r8
 80093a0:	3001      	adds	r0, #1
 80093a2:	d103      	bne.n	80093ac <_printf_common+0xac>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ac:	3501      	adds	r5, #1
 80093ae:	e7c6      	b.n	800933e <_printf_common+0x3e>
 80093b0:	18e1      	adds	r1, r4, r3
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	2030      	movs	r0, #48	; 0x30
 80093b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ba:	4422      	add	r2, r4
 80093bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093c4:	3302      	adds	r3, #2
 80093c6:	e7c7      	b.n	8009358 <_printf_common+0x58>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4622      	mov	r2, r4
 80093cc:	4649      	mov	r1, r9
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c0      	blx	r8
 80093d2:	3001      	adds	r0, #1
 80093d4:	d0e6      	beq.n	80093a4 <_printf_common+0xa4>
 80093d6:	3601      	adds	r6, #1
 80093d8:	e7d9      	b.n	800938e <_printf_common+0x8e>
	...

080093dc <_printf_i>:
 80093dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	7e0f      	ldrb	r7, [r1, #24]
 80093e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093e4:	2f78      	cmp	r7, #120	; 0x78
 80093e6:	4691      	mov	r9, r2
 80093e8:	4680      	mov	r8, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	469a      	mov	sl, r3
 80093ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093f2:	d807      	bhi.n	8009404 <_printf_i+0x28>
 80093f4:	2f62      	cmp	r7, #98	; 0x62
 80093f6:	d80a      	bhi.n	800940e <_printf_i+0x32>
 80093f8:	2f00      	cmp	r7, #0
 80093fa:	f000 80d4 	beq.w	80095a6 <_printf_i+0x1ca>
 80093fe:	2f58      	cmp	r7, #88	; 0x58
 8009400:	f000 80c0 	beq.w	8009584 <_printf_i+0x1a8>
 8009404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800940c:	e03a      	b.n	8009484 <_printf_i+0xa8>
 800940e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009412:	2b15      	cmp	r3, #21
 8009414:	d8f6      	bhi.n	8009404 <_printf_i+0x28>
 8009416:	a101      	add	r1, pc, #4	; (adr r1, 800941c <_printf_i+0x40>)
 8009418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800941c:	08009475 	.word	0x08009475
 8009420:	08009489 	.word	0x08009489
 8009424:	08009405 	.word	0x08009405
 8009428:	08009405 	.word	0x08009405
 800942c:	08009405 	.word	0x08009405
 8009430:	08009405 	.word	0x08009405
 8009434:	08009489 	.word	0x08009489
 8009438:	08009405 	.word	0x08009405
 800943c:	08009405 	.word	0x08009405
 8009440:	08009405 	.word	0x08009405
 8009444:	08009405 	.word	0x08009405
 8009448:	0800958d 	.word	0x0800958d
 800944c:	080094b5 	.word	0x080094b5
 8009450:	08009547 	.word	0x08009547
 8009454:	08009405 	.word	0x08009405
 8009458:	08009405 	.word	0x08009405
 800945c:	080095af 	.word	0x080095af
 8009460:	08009405 	.word	0x08009405
 8009464:	080094b5 	.word	0x080094b5
 8009468:	08009405 	.word	0x08009405
 800946c:	08009405 	.word	0x08009405
 8009470:	0800954f 	.word	0x0800954f
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	1d1a      	adds	r2, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009484:	2301      	movs	r3, #1
 8009486:	e09f      	b.n	80095c8 <_printf_i+0x1ec>
 8009488:	6820      	ldr	r0, [r4, #0]
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	0607      	lsls	r7, r0, #24
 800948e:	f103 0104 	add.w	r1, r3, #4
 8009492:	6029      	str	r1, [r5, #0]
 8009494:	d501      	bpl.n	800949a <_printf_i+0xbe>
 8009496:	681e      	ldr	r6, [r3, #0]
 8009498:	e003      	b.n	80094a2 <_printf_i+0xc6>
 800949a:	0646      	lsls	r6, r0, #25
 800949c:	d5fb      	bpl.n	8009496 <_printf_i+0xba>
 800949e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	da03      	bge.n	80094ae <_printf_i+0xd2>
 80094a6:	232d      	movs	r3, #45	; 0x2d
 80094a8:	4276      	negs	r6, r6
 80094aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ae:	485a      	ldr	r0, [pc, #360]	; (8009618 <_printf_i+0x23c>)
 80094b0:	230a      	movs	r3, #10
 80094b2:	e012      	b.n	80094da <_printf_i+0xfe>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	6820      	ldr	r0, [r4, #0]
 80094b8:	1d19      	adds	r1, r3, #4
 80094ba:	6029      	str	r1, [r5, #0]
 80094bc:	0605      	lsls	r5, r0, #24
 80094be:	d501      	bpl.n	80094c4 <_printf_i+0xe8>
 80094c0:	681e      	ldr	r6, [r3, #0]
 80094c2:	e002      	b.n	80094ca <_printf_i+0xee>
 80094c4:	0641      	lsls	r1, r0, #25
 80094c6:	d5fb      	bpl.n	80094c0 <_printf_i+0xe4>
 80094c8:	881e      	ldrh	r6, [r3, #0]
 80094ca:	4853      	ldr	r0, [pc, #332]	; (8009618 <_printf_i+0x23c>)
 80094cc:	2f6f      	cmp	r7, #111	; 0x6f
 80094ce:	bf0c      	ite	eq
 80094d0:	2308      	moveq	r3, #8
 80094d2:	230a      	movne	r3, #10
 80094d4:	2100      	movs	r1, #0
 80094d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094da:	6865      	ldr	r5, [r4, #4]
 80094dc:	60a5      	str	r5, [r4, #8]
 80094de:	2d00      	cmp	r5, #0
 80094e0:	bfa2      	ittt	ge
 80094e2:	6821      	ldrge	r1, [r4, #0]
 80094e4:	f021 0104 	bicge.w	r1, r1, #4
 80094e8:	6021      	strge	r1, [r4, #0]
 80094ea:	b90e      	cbnz	r6, 80094f0 <_printf_i+0x114>
 80094ec:	2d00      	cmp	r5, #0
 80094ee:	d04b      	beq.n	8009588 <_printf_i+0x1ac>
 80094f0:	4615      	mov	r5, r2
 80094f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094f6:	fb03 6711 	mls	r7, r3, r1, r6
 80094fa:	5dc7      	ldrb	r7, [r0, r7]
 80094fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009500:	4637      	mov	r7, r6
 8009502:	42bb      	cmp	r3, r7
 8009504:	460e      	mov	r6, r1
 8009506:	d9f4      	bls.n	80094f2 <_printf_i+0x116>
 8009508:	2b08      	cmp	r3, #8
 800950a:	d10b      	bne.n	8009524 <_printf_i+0x148>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	07de      	lsls	r6, r3, #31
 8009510:	d508      	bpl.n	8009524 <_printf_i+0x148>
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	6861      	ldr	r1, [r4, #4]
 8009516:	4299      	cmp	r1, r3
 8009518:	bfde      	ittt	le
 800951a:	2330      	movle	r3, #48	; 0x30
 800951c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009524:	1b52      	subs	r2, r2, r5
 8009526:	6122      	str	r2, [r4, #16]
 8009528:	f8cd a000 	str.w	sl, [sp]
 800952c:	464b      	mov	r3, r9
 800952e:	aa03      	add	r2, sp, #12
 8009530:	4621      	mov	r1, r4
 8009532:	4640      	mov	r0, r8
 8009534:	f7ff fee4 	bl	8009300 <_printf_common>
 8009538:	3001      	adds	r0, #1
 800953a:	d14a      	bne.n	80095d2 <_printf_i+0x1f6>
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	b004      	add	sp, #16
 8009542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	f043 0320 	orr.w	r3, r3, #32
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	4833      	ldr	r0, [pc, #204]	; (800961c <_printf_i+0x240>)
 8009550:	2778      	movs	r7, #120	; 0x78
 8009552:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	6829      	ldr	r1, [r5, #0]
 800955a:	061f      	lsls	r7, r3, #24
 800955c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009560:	d402      	bmi.n	8009568 <_printf_i+0x18c>
 8009562:	065f      	lsls	r7, r3, #25
 8009564:	bf48      	it	mi
 8009566:	b2b6      	uxthmi	r6, r6
 8009568:	07df      	lsls	r7, r3, #31
 800956a:	bf48      	it	mi
 800956c:	f043 0320 	orrmi.w	r3, r3, #32
 8009570:	6029      	str	r1, [r5, #0]
 8009572:	bf48      	it	mi
 8009574:	6023      	strmi	r3, [r4, #0]
 8009576:	b91e      	cbnz	r6, 8009580 <_printf_i+0x1a4>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	f023 0320 	bic.w	r3, r3, #32
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	2310      	movs	r3, #16
 8009582:	e7a7      	b.n	80094d4 <_printf_i+0xf8>
 8009584:	4824      	ldr	r0, [pc, #144]	; (8009618 <_printf_i+0x23c>)
 8009586:	e7e4      	b.n	8009552 <_printf_i+0x176>
 8009588:	4615      	mov	r5, r2
 800958a:	e7bd      	b.n	8009508 <_printf_i+0x12c>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	6826      	ldr	r6, [r4, #0]
 8009590:	6961      	ldr	r1, [r4, #20]
 8009592:	1d18      	adds	r0, r3, #4
 8009594:	6028      	str	r0, [r5, #0]
 8009596:	0635      	lsls	r5, r6, #24
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	d501      	bpl.n	80095a0 <_printf_i+0x1c4>
 800959c:	6019      	str	r1, [r3, #0]
 800959e:	e002      	b.n	80095a6 <_printf_i+0x1ca>
 80095a0:	0670      	lsls	r0, r6, #25
 80095a2:	d5fb      	bpl.n	800959c <_printf_i+0x1c0>
 80095a4:	8019      	strh	r1, [r3, #0]
 80095a6:	2300      	movs	r3, #0
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	4615      	mov	r5, r2
 80095ac:	e7bc      	b.n	8009528 <_printf_i+0x14c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	1d1a      	adds	r2, r3, #4
 80095b2:	602a      	str	r2, [r5, #0]
 80095b4:	681d      	ldr	r5, [r3, #0]
 80095b6:	6862      	ldr	r2, [r4, #4]
 80095b8:	2100      	movs	r1, #0
 80095ba:	4628      	mov	r0, r5
 80095bc:	f7f6 fe20 	bl	8000200 <memchr>
 80095c0:	b108      	cbz	r0, 80095c6 <_printf_i+0x1ea>
 80095c2:	1b40      	subs	r0, r0, r5
 80095c4:	6060      	str	r0, [r4, #4]
 80095c6:	6863      	ldr	r3, [r4, #4]
 80095c8:	6123      	str	r3, [r4, #16]
 80095ca:	2300      	movs	r3, #0
 80095cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d0:	e7aa      	b.n	8009528 <_printf_i+0x14c>
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	462a      	mov	r2, r5
 80095d6:	4649      	mov	r1, r9
 80095d8:	4640      	mov	r0, r8
 80095da:	47d0      	blx	sl
 80095dc:	3001      	adds	r0, #1
 80095de:	d0ad      	beq.n	800953c <_printf_i+0x160>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	079b      	lsls	r3, r3, #30
 80095e4:	d413      	bmi.n	800960e <_printf_i+0x232>
 80095e6:	68e0      	ldr	r0, [r4, #12]
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	4298      	cmp	r0, r3
 80095ec:	bfb8      	it	lt
 80095ee:	4618      	movlt	r0, r3
 80095f0:	e7a6      	b.n	8009540 <_printf_i+0x164>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4632      	mov	r2, r6
 80095f6:	4649      	mov	r1, r9
 80095f8:	4640      	mov	r0, r8
 80095fa:	47d0      	blx	sl
 80095fc:	3001      	adds	r0, #1
 80095fe:	d09d      	beq.n	800953c <_printf_i+0x160>
 8009600:	3501      	adds	r5, #1
 8009602:	68e3      	ldr	r3, [r4, #12]
 8009604:	9903      	ldr	r1, [sp, #12]
 8009606:	1a5b      	subs	r3, r3, r1
 8009608:	42ab      	cmp	r3, r5
 800960a:	dcf2      	bgt.n	80095f2 <_printf_i+0x216>
 800960c:	e7eb      	b.n	80095e6 <_printf_i+0x20a>
 800960e:	2500      	movs	r5, #0
 8009610:	f104 0619 	add.w	r6, r4, #25
 8009614:	e7f5      	b.n	8009602 <_printf_i+0x226>
 8009616:	bf00      	nop
 8009618:	08009b4d 	.word	0x08009b4d
 800961c:	08009b5e 	.word	0x08009b5e

08009620 <__sflush_r>:
 8009620:	898a      	ldrh	r2, [r1, #12]
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	4605      	mov	r5, r0
 8009628:	0710      	lsls	r0, r2, #28
 800962a:	460c      	mov	r4, r1
 800962c:	d458      	bmi.n	80096e0 <__sflush_r+0xc0>
 800962e:	684b      	ldr	r3, [r1, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc05      	bgt.n	8009640 <__sflush_r+0x20>
 8009634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009636:	2b00      	cmp	r3, #0
 8009638:	dc02      	bgt.n	8009640 <__sflush_r+0x20>
 800963a:	2000      	movs	r0, #0
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009642:	2e00      	cmp	r6, #0
 8009644:	d0f9      	beq.n	800963a <__sflush_r+0x1a>
 8009646:	2300      	movs	r3, #0
 8009648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800964c:	682f      	ldr	r7, [r5, #0]
 800964e:	6a21      	ldr	r1, [r4, #32]
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	d032      	beq.n	80096ba <__sflush_r+0x9a>
 8009654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	075a      	lsls	r2, r3, #29
 800965a:	d505      	bpl.n	8009668 <__sflush_r+0x48>
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	1ac0      	subs	r0, r0, r3
 8009660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009662:	b10b      	cbz	r3, 8009668 <__sflush_r+0x48>
 8009664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009666:	1ac0      	subs	r0, r0, r3
 8009668:	2300      	movs	r3, #0
 800966a:	4602      	mov	r2, r0
 800966c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800966e:	6a21      	ldr	r1, [r4, #32]
 8009670:	4628      	mov	r0, r5
 8009672:	47b0      	blx	r6
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	d106      	bne.n	8009688 <__sflush_r+0x68>
 800967a:	6829      	ldr	r1, [r5, #0]
 800967c:	291d      	cmp	r1, #29
 800967e:	d82b      	bhi.n	80096d8 <__sflush_r+0xb8>
 8009680:	4a29      	ldr	r2, [pc, #164]	; (8009728 <__sflush_r+0x108>)
 8009682:	410a      	asrs	r2, r1
 8009684:	07d6      	lsls	r6, r2, #31
 8009686:	d427      	bmi.n	80096d8 <__sflush_r+0xb8>
 8009688:	2200      	movs	r2, #0
 800968a:	6062      	str	r2, [r4, #4]
 800968c:	04d9      	lsls	r1, r3, #19
 800968e:	6922      	ldr	r2, [r4, #16]
 8009690:	6022      	str	r2, [r4, #0]
 8009692:	d504      	bpl.n	800969e <__sflush_r+0x7e>
 8009694:	1c42      	adds	r2, r0, #1
 8009696:	d101      	bne.n	800969c <__sflush_r+0x7c>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b903      	cbnz	r3, 800969e <__sflush_r+0x7e>
 800969c:	6560      	str	r0, [r4, #84]	; 0x54
 800969e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096a0:	602f      	str	r7, [r5, #0]
 80096a2:	2900      	cmp	r1, #0
 80096a4:	d0c9      	beq.n	800963a <__sflush_r+0x1a>
 80096a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096aa:	4299      	cmp	r1, r3
 80096ac:	d002      	beq.n	80096b4 <__sflush_r+0x94>
 80096ae:	4628      	mov	r0, r5
 80096b0:	f7ff fa92 	bl	8008bd8 <_free_r>
 80096b4:	2000      	movs	r0, #0
 80096b6:	6360      	str	r0, [r4, #52]	; 0x34
 80096b8:	e7c0      	b.n	800963c <__sflush_r+0x1c>
 80096ba:	2301      	movs	r3, #1
 80096bc:	4628      	mov	r0, r5
 80096be:	47b0      	blx	r6
 80096c0:	1c41      	adds	r1, r0, #1
 80096c2:	d1c8      	bne.n	8009656 <__sflush_r+0x36>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0c5      	beq.n	8009656 <__sflush_r+0x36>
 80096ca:	2b1d      	cmp	r3, #29
 80096cc:	d001      	beq.n	80096d2 <__sflush_r+0xb2>
 80096ce:	2b16      	cmp	r3, #22
 80096d0:	d101      	bne.n	80096d6 <__sflush_r+0xb6>
 80096d2:	602f      	str	r7, [r5, #0]
 80096d4:	e7b1      	b.n	800963a <__sflush_r+0x1a>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	e7ad      	b.n	800963c <__sflush_r+0x1c>
 80096e0:	690f      	ldr	r7, [r1, #16]
 80096e2:	2f00      	cmp	r7, #0
 80096e4:	d0a9      	beq.n	800963a <__sflush_r+0x1a>
 80096e6:	0793      	lsls	r3, r2, #30
 80096e8:	680e      	ldr	r6, [r1, #0]
 80096ea:	bf08      	it	eq
 80096ec:	694b      	ldreq	r3, [r1, #20]
 80096ee:	600f      	str	r7, [r1, #0]
 80096f0:	bf18      	it	ne
 80096f2:	2300      	movne	r3, #0
 80096f4:	eba6 0807 	sub.w	r8, r6, r7
 80096f8:	608b      	str	r3, [r1, #8]
 80096fa:	f1b8 0f00 	cmp.w	r8, #0
 80096fe:	dd9c      	ble.n	800963a <__sflush_r+0x1a>
 8009700:	6a21      	ldr	r1, [r4, #32]
 8009702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009704:	4643      	mov	r3, r8
 8009706:	463a      	mov	r2, r7
 8009708:	4628      	mov	r0, r5
 800970a:	47b0      	blx	r6
 800970c:	2800      	cmp	r0, #0
 800970e:	dc06      	bgt.n	800971e <__sflush_r+0xfe>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e78e      	b.n	800963c <__sflush_r+0x1c>
 800971e:	4407      	add	r7, r0
 8009720:	eba8 0800 	sub.w	r8, r8, r0
 8009724:	e7e9      	b.n	80096fa <__sflush_r+0xda>
 8009726:	bf00      	nop
 8009728:	dfbffffe 	.word	0xdfbffffe

0800972c <_fflush_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	690b      	ldr	r3, [r1, #16]
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	b913      	cbnz	r3, 800973c <_fflush_r+0x10>
 8009736:	2500      	movs	r5, #0
 8009738:	4628      	mov	r0, r5
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	b118      	cbz	r0, 8009746 <_fflush_r+0x1a>
 800973e:	6a03      	ldr	r3, [r0, #32]
 8009740:	b90b      	cbnz	r3, 8009746 <_fflush_r+0x1a>
 8009742:	f7fe fffd 	bl	8008740 <__sinit>
 8009746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0f3      	beq.n	8009736 <_fflush_r+0xa>
 800974e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009750:	07d0      	lsls	r0, r2, #31
 8009752:	d404      	bmi.n	800975e <_fflush_r+0x32>
 8009754:	0599      	lsls	r1, r3, #22
 8009756:	d402      	bmi.n	800975e <_fflush_r+0x32>
 8009758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800975a:	f7ff fa3a 	bl	8008bd2 <__retarget_lock_acquire_recursive>
 800975e:	4628      	mov	r0, r5
 8009760:	4621      	mov	r1, r4
 8009762:	f7ff ff5d 	bl	8009620 <__sflush_r>
 8009766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009768:	07da      	lsls	r2, r3, #31
 800976a:	4605      	mov	r5, r0
 800976c:	d4e4      	bmi.n	8009738 <_fflush_r+0xc>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	059b      	lsls	r3, r3, #22
 8009772:	d4e1      	bmi.n	8009738 <_fflush_r+0xc>
 8009774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009776:	f7ff fa2d 	bl	8008bd4 <__retarget_lock_release_recursive>
 800977a:	e7dd      	b.n	8009738 <_fflush_r+0xc>

0800977c <__swhatbuf_r>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	460c      	mov	r4, r1
 8009780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009784:	2900      	cmp	r1, #0
 8009786:	b096      	sub	sp, #88	; 0x58
 8009788:	4615      	mov	r5, r2
 800978a:	461e      	mov	r6, r3
 800978c:	da0d      	bge.n	80097aa <__swhatbuf_r+0x2e>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009794:	f04f 0100 	mov.w	r1, #0
 8009798:	bf0c      	ite	eq
 800979a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800979e:	2340      	movne	r3, #64	; 0x40
 80097a0:	2000      	movs	r0, #0
 80097a2:	6031      	str	r1, [r6, #0]
 80097a4:	602b      	str	r3, [r5, #0]
 80097a6:	b016      	add	sp, #88	; 0x58
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	466a      	mov	r2, sp
 80097ac:	f000 f862 	bl	8009874 <_fstat_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dbec      	blt.n	800978e <__swhatbuf_r+0x12>
 80097b4:	9901      	ldr	r1, [sp, #4]
 80097b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097be:	4259      	negs	r1, r3
 80097c0:	4159      	adcs	r1, r3
 80097c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c6:	e7eb      	b.n	80097a0 <__swhatbuf_r+0x24>

080097c8 <__smakebuf_r>:
 80097c8:	898b      	ldrh	r3, [r1, #12]
 80097ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097cc:	079d      	lsls	r5, r3, #30
 80097ce:	4606      	mov	r6, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	d507      	bpl.n	80097e4 <__smakebuf_r+0x1c>
 80097d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	2301      	movs	r3, #1
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	b002      	add	sp, #8
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	ab01      	add	r3, sp, #4
 80097e6:	466a      	mov	r2, sp
 80097e8:	f7ff ffc8 	bl	800977c <__swhatbuf_r>
 80097ec:	9900      	ldr	r1, [sp, #0]
 80097ee:	4605      	mov	r5, r0
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fa5d 	bl	8008cb0 <_malloc_r>
 80097f6:	b948      	cbnz	r0, 800980c <__smakebuf_r+0x44>
 80097f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097fc:	059a      	lsls	r2, r3, #22
 80097fe:	d4ef      	bmi.n	80097e0 <__smakebuf_r+0x18>
 8009800:	f023 0303 	bic.w	r3, r3, #3
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	e7e3      	b.n	80097d4 <__smakebuf_r+0xc>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	6163      	str	r3, [r4, #20]
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	6120      	str	r0, [r4, #16]
 800981e:	b15b      	cbz	r3, 8009838 <__smakebuf_r+0x70>
 8009820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009824:	4630      	mov	r0, r6
 8009826:	f000 f837 	bl	8009898 <_isatty_r>
 800982a:	b128      	cbz	r0, 8009838 <__smakebuf_r+0x70>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	431d      	orrs	r5, r3
 800983c:	81a5      	strh	r5, [r4, #12]
 800983e:	e7cf      	b.n	80097e0 <__smakebuf_r+0x18>

08009840 <memmove>:
 8009840:	4288      	cmp	r0, r1
 8009842:	b510      	push	{r4, lr}
 8009844:	eb01 0402 	add.w	r4, r1, r2
 8009848:	d902      	bls.n	8009850 <memmove+0x10>
 800984a:	4284      	cmp	r4, r0
 800984c:	4623      	mov	r3, r4
 800984e:	d807      	bhi.n	8009860 <memmove+0x20>
 8009850:	1e43      	subs	r3, r0, #1
 8009852:	42a1      	cmp	r1, r4
 8009854:	d008      	beq.n	8009868 <memmove+0x28>
 8009856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800985a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800985e:	e7f8      	b.n	8009852 <memmove+0x12>
 8009860:	4402      	add	r2, r0
 8009862:	4601      	mov	r1, r0
 8009864:	428a      	cmp	r2, r1
 8009866:	d100      	bne.n	800986a <memmove+0x2a>
 8009868:	bd10      	pop	{r4, pc}
 800986a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800986e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009872:	e7f7      	b.n	8009864 <memmove+0x24>

08009874 <_fstat_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4d07      	ldr	r5, [pc, #28]	; (8009894 <_fstat_r+0x20>)
 8009878:	2300      	movs	r3, #0
 800987a:	4604      	mov	r4, r0
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	f7f8 fa2a 	bl	8001cda <_fstat>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	d102      	bne.n	8009890 <_fstat_r+0x1c>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	b103      	cbz	r3, 8009890 <_fstat_r+0x1c>
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	bd38      	pop	{r3, r4, r5, pc}
 8009892:	bf00      	nop
 8009894:	20000b60 	.word	0x20000b60

08009898 <_isatty_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d06      	ldr	r5, [pc, #24]	; (80098b4 <_isatty_r+0x1c>)
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	f7f8 fa29 	bl	8001cfa <_isatty>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_isatty_r+0x1a>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_isatty_r+0x1a>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20000b60 	.word	0x20000b60

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	; (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f8 fa32 	bl	8001d2c <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000b60 	.word	0x20000b60

080098d8 <memcpy>:
 80098d8:	440a      	add	r2, r1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e0:	d100      	bne.n	80098e4 <memcpy+0xc>
 80098e2:	4770      	bx	lr
 80098e4:	b510      	push	{r4, lr}
 80098e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ee:	4291      	cmp	r1, r2
 80098f0:	d1f9      	bne.n	80098e6 <memcpy+0xe>
 80098f2:	bd10      	pop	{r4, pc}

080098f4 <_realloc_r>:
 80098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	4680      	mov	r8, r0
 80098fa:	4614      	mov	r4, r2
 80098fc:	460e      	mov	r6, r1
 80098fe:	b921      	cbnz	r1, 800990a <_realloc_r+0x16>
 8009900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	4611      	mov	r1, r2
 8009906:	f7ff b9d3 	b.w	8008cb0 <_malloc_r>
 800990a:	b92a      	cbnz	r2, 8009918 <_realloc_r+0x24>
 800990c:	f7ff f964 	bl	8008bd8 <_free_r>
 8009910:	4625      	mov	r5, r4
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	f000 f81b 	bl	8009952 <_malloc_usable_size_r>
 800991c:	4284      	cmp	r4, r0
 800991e:	4607      	mov	r7, r0
 8009920:	d802      	bhi.n	8009928 <_realloc_r+0x34>
 8009922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009926:	d812      	bhi.n	800994e <_realloc_r+0x5a>
 8009928:	4621      	mov	r1, r4
 800992a:	4640      	mov	r0, r8
 800992c:	f7ff f9c0 	bl	8008cb0 <_malloc_r>
 8009930:	4605      	mov	r5, r0
 8009932:	2800      	cmp	r0, #0
 8009934:	d0ed      	beq.n	8009912 <_realloc_r+0x1e>
 8009936:	42bc      	cmp	r4, r7
 8009938:	4622      	mov	r2, r4
 800993a:	4631      	mov	r1, r6
 800993c:	bf28      	it	cs
 800993e:	463a      	movcs	r2, r7
 8009940:	f7ff ffca 	bl	80098d8 <memcpy>
 8009944:	4631      	mov	r1, r6
 8009946:	4640      	mov	r0, r8
 8009948:	f7ff f946 	bl	8008bd8 <_free_r>
 800994c:	e7e1      	b.n	8009912 <_realloc_r+0x1e>
 800994e:	4635      	mov	r5, r6
 8009950:	e7df      	b.n	8009912 <_realloc_r+0x1e>

08009952 <_malloc_usable_size_r>:
 8009952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009956:	1f18      	subs	r0, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbc      	itt	lt
 800995c:	580b      	ldrlt	r3, [r1, r0]
 800995e:	18c0      	addlt	r0, r0, r3
 8009960:	4770      	bx	lr
	...

08009964 <_init>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr

08009970 <_fini>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr
