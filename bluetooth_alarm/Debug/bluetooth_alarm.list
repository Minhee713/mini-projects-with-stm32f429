
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b138  0800b138  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b140  0800b140  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800b148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          00000b78  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ce8  20000ce8  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e8a7  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f66  00000000  00000000  0003ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b80  00000000  00000000  000429f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001597  00000000  00000000  00044570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029945  00000000  00000000  00045b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021347  00000000  00000000  0006f44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb069  00000000  00000000  00090793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008040  00000000  00000000  0018b7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0019383c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800adcc 	.word	0x0800adcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	0800adcc 	.word	0x0800adcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f007 ff95 	bl	80084fe <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 fea9 	bl	8005340 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f009 fb73 	bl	8009cf0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f007 ff6e 	bl	80084fe <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f007 ff66 	bl	80084fe <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f007 ff56 	bl	80084fe <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800adf4 	.word	0x0800adf4
 8000660:	20000564 	.word	0x20000564
 8000664:	20000460 	.word	0x20000460
 8000668:	0800ade4 	.word	0x0800ade4
 800066c:	0800adec 	.word	0x0800adec
 8000670:	0800adf0 	.word	0x0800adf0

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 fe55 	bl	8005340 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f004 fd1e 	bl	8005144 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f002 f919 	bl	8002944 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000460 	.word	0x20000460

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f007 fe7d 	bl	80084fe <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000564 	.word	0x20000564

08000814 <get_time>:

//char temp_alarm_buf[30];


void get_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <get_time+0x50>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <get_time+0x54>)
 8000820:	f006 f9c6 	bl	8006bb0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	4911      	ldr	r1, [pc, #68]	; (800086c <get_time+0x58>)
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <get_time+0x54>)
 800082a:	f006 faa3 	bl	8006d74 <HAL_RTC_GetDate>

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <get_time+0x50>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	461a      	mov	r2, r3
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <get_time+0x5c>)
 800083c:	441a      	add	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <get_time+0x50>)
 8000840:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000842:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <get_time+0x50>)
 8000846:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000848:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <get_time+0x50>)
 800084c:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	4603      	mov	r3, r0
 8000854:	4907      	ldr	r1, [pc, #28]	; (8000874 <get_time+0x60>)
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <get_time+0x64>)
 8000858:	f009 fa7e 	bl	8009d58 <siprintf>

//	sprintf((char*) temp_alarm_buf, "%s %02d: %02d: %02d",
//			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
//			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000b28 	.word	0x20000b28
 8000868:	200004b4 	.word	0x200004b4
 800086c:	20000b24 	.word	0x20000b24
 8000870:	20000094 	.word	0x20000094
 8000874:	0800ae0c 	.word	0x0800ae0c
 8000878:	20000af4 	.word	0x20000af4

0800087c <showCurrentTime>:

void showCurrentTime() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	204e      	movs	r0, #78	; 0x4e
 8000884:	f7ff ff4c 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <showCurrentTime+0x28>)
 800088a:	204e      	movs	r0, #78	; 0x4e
 800088c:	f7ff ff89 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000890:	21c0      	movs	r1, #192	; 0xc0
 8000892:	204e      	movs	r0, #78	; 0x4e
 8000894:	f7ff ff44 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 8000898:	4903      	ldr	r1, [pc, #12]	; (80008a8 <showCurrentTime+0x2c>)
 800089a:	204e      	movs	r0, #78	; 0x4e
 800089c:	f7ff ff81 	bl	80007a2 <LCD_SendString>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800ae20 	.word	0x0800ae20
 80008a8:	20000af4 	.word	0x20000af4

080008ac <lcd_clear>:

void lcd_clear() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00000001);
 80008b0:	2101      	movs	r1, #1
 80008b2:	204e      	movs	r0, #78	; 0x4e
 80008b4:	f7ff ff34 	bl	8000720 <LCD_SendCommand>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <readFlash>:

uint8_t readFlash(uint32_t addr) {
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t value = *(uint8_t*) addr;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	73fb      	strb	r3, [r7, #15]

//	printf("flash value=%d\r\n", value);

	return value;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <update_nvitems>:

HAL_StatusTypeDef update_nvitems(void) {
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();
 80008e4:	f003 fe28 	bl	8004538 <HAL_FLASH_Unlock>

	FirstSector = ADDR_FLASH_SECTOR_10;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <update_nvitems+0xc8>)
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FirstSector;
 80008f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fa:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	60fb      	str	r3, [r7, #12]

//	printf("\r\n--------------erase-----------\r\n");

//	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK) {
 8000900:	f107 0214 	add.w	r2, r7, #20
 8000904:	463b      	mov	r3, r7
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f003 ff87 	bl	800481c <HAL_FLASHEx_Erase>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d107      	bne.n	8000924 <update_nvitems+0x4c>
		printf("\r\n--------------erase complete-----------\r\n");
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <update_nvitems+0xcc>)
 8000916:	f009 f9e3 	bl	8009ce0 <puts>
	} else {
		printf("\r\n--------------erase error-----------\r\n");
		return error;
	}

	ptr = (uint8_t*) &default_nvitem;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <update_nvitems+0xd0>)
 800091c:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
 8000922:	e030      	b.n	8000986 <update_nvitems+0xae>
		printf("\r\n--------------erase error-----------\r\n");
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <update_nvitems+0xd4>)
 8000926:	f009 f9db 	bl	8009ce0 <puts>
		return error;
 800092a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092e:	e032      	b.n	8000996 <update_nvitems+0xbe>
		Address = (uint8_t*) nv_items + i;
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000936:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 800093a:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*) ptr + i);
 800093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2200      	movs	r2, #0
 8000948:	461c      	mov	r4, r3
 800094a:	4615      	mov	r5, r2
 800094c:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
 8000950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000954:	6a39      	ldr	r1, [r7, #32]
 8000956:	2000      	movs	r0, #0
 8000958:	f003 fd9a 	bl	8004490 <HAL_FLASH_Program>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		printf("DATA: %ld\r\n", Data);
 8000962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <update_nvitems+0xd8>)
 8000968:	f009 f954 	bl	8009c14 <iprintf>

		if (error != HAL_OK) {
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <update_nvitems+0xa8>
			printf("\r\n--------------overwrite error-----------\r\n");
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <update_nvitems+0xdc>)
 8000976:	f009 f9b3 	bl	8009ce0 <puts>
			return error;
 800097a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097e:	e00a      	b.n	8000996 <update_nvitems+0xbe>
	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	3301      	adds	r3, #1
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
 8000986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000988:	2b06      	cmp	r3, #6
 800098a:	d9d1      	bls.n	8000930 <update_nvitems+0x58>
		}
	}
	printf("\r\n--------------overwrite complete-----------\r\n");
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <update_nvitems+0xe0>)
 800098e:	f009 f9a7 	bl	8009ce0 <puts>
	HAL_FLASH_Lock();
 8000992:	f003 fdf3 	bl	800457c <HAL_FLASH_Lock>
}
 8000996:	4618      	mov	r0, r3
 8000998:	3738      	adds	r7, #56	; 0x38
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	080c0000 	.word	0x080c0000
 80009a4:	0800ae30 	.word	0x0800ae30
 80009a8:	20000b64 	.word	0x20000b64
 80009ac:	0800ae5c 	.word	0x0800ae5c
 80009b0:	0800ae84 	.word	0x0800ae84
 80009b4:	0800ae90 	.word	0x0800ae90
 80009b8:	0800aebc 	.word	0x0800aebc

080009bc <timeDisplay>:

void timeDisplay() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == TIME_SETTING) {
 80009c2:	4b51      	ldr	r3, [pc, #324]	; (8000b08 <timeDisplay+0x14c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d114      	bne.n	80009f4 <timeDisplay+0x38>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	204e      	movs	r0, #78	; 0x4e
 80009ce:	f7ff fea7 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting");
 80009d2:	494e      	ldr	r1, [pc, #312]	; (8000b0c <timeDisplay+0x150>)
 80009d4:	204e      	movs	r0, #78	; 0x4e
 80009d6:	f7ff fee4 	bl	80007a2 <LCD_SendString>

		hours = stime.hours;
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <timeDisplay+0x154>)
 80009dc:	f993 3000 	ldrsb.w	r3, [r3]
 80009e0:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <timeDisplay+0x154>)
 80009e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009e8:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <timeDisplay+0x154>)
 80009ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80009f0:	717b      	strb	r3, [r7, #5]
 80009f2:	e017      	b.n	8000a24 <timeDisplay+0x68>
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 80009f4:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <timeDisplay+0x14c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d113      	bne.n	8000a24 <timeDisplay+0x68>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	204e      	movs	r0, #78	; 0x4e
 8000a00:	f7ff fe8e 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 8000a04:	4943      	ldr	r1, [pc, #268]	; (8000b14 <timeDisplay+0x158>)
 8000a06:	204e      	movs	r0, #78	; 0x4e
 8000a08:	f7ff fecb 	bl	80007a2 <LCD_SendString>

		hours = atime.hours;
 8000a0c:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <timeDisplay+0x15c>)
 8000a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a12:	71fb      	strb	r3, [r7, #7]
		minutes = atime.minutes;
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <timeDisplay+0x15c>)
 8000a16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a1a:	71bb      	strb	r3, [r7, #6]
		seconds = atime.seconds;
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <timeDisplay+0x15c>)
 8000a1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a22:	717b      	strb	r3, [r7, #5]
	}

	if (hours >= 12) {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b0b      	cmp	r3, #11
 8000a28:	d933      	bls.n	8000a92 <timeDisplay+0xd6>
		if (current_state.mode == TIME_SETTING) {
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <timeDisplay+0x14c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d115      	bne.n	8000a5e <timeDisplay+0xa2>
			sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <timeDisplay+0x160>)
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a38      	ldr	r2, [pc, #224]	; (8000b20 <timeDisplay+0x164>)
 8000a40:	1899      	adds	r1, r3, r2
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f1a3 000c 	sub.w	r0, r3, #12
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	797a      	ldrb	r2, [r7, #5]
 8000a4c:	9201      	str	r2, [sp, #4]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4603      	mov	r3, r0
 8000a52:	460a      	mov	r2, r1
 8000a54:	4933      	ldr	r1, [pc, #204]	; (8000b24 <timeDisplay+0x168>)
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <timeDisplay+0x16c>)
 8000a58:	f009 f97e 	bl	8009d58 <siprintf>
 8000a5c:	e048      	b.n	8000af0 <timeDisplay+0x134>
					hours - 12, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <timeDisplay+0x14c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d144      	bne.n	8000af0 <timeDisplay+0x134>
			sprintf(timeStr, "%s %02d: %02d: %02d",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours - 12, minutes,
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <timeDisplay+0x170>)
 8000a68:	78db      	ldrb	r3, [r3, #3]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <timeDisplay+0x164>)
 8000a74:	1899      	adds	r1, r3, r2
			sprintf(timeStr, "%s %02d: %02d: %02d",
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f1a3 000c 	sub.w	r0, r3, #12
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	797a      	ldrb	r2, [r7, #5]
 8000a80:	9201      	str	r2, [sp, #4]
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4603      	mov	r3, r0
 8000a86:	460a      	mov	r2, r1
 8000a88:	4926      	ldr	r1, [pc, #152]	; (8000b24 <timeDisplay+0x168>)
 8000a8a:	4827      	ldr	r0, [pc, #156]	; (8000b28 <timeDisplay+0x16c>)
 8000a8c:	f009 f964 	bl	8009d58 <siprintf>
 8000a90:	e02e      	b.n	8000af0 <timeDisplay+0x134>
					seconds);
		}
	} else {
		if (current_state.mode == TIME_SETTING) {
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <timeDisplay+0x14c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d113      	bne.n	8000ac2 <timeDisplay+0x106>
			sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <timeDisplay+0x160>)
 8000a9c:	78db      	ldrb	r3, [r3, #3]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <timeDisplay+0x164>)
 8000aa8:	1899      	adds	r1, r3, r2
 8000aaa:	79f8      	ldrb	r0, [r7, #7]
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	797a      	ldrb	r2, [r7, #5]
 8000ab0:	9201      	str	r2, [sp, #4]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	491a      	ldr	r1, [pc, #104]	; (8000b24 <timeDisplay+0x168>)
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <timeDisplay+0x16c>)
 8000abc:	f009 f94c 	bl	8009d58 <siprintf>
 8000ac0:	e016      	b.n	8000af0 <timeDisplay+0x134>
					hours, minutes, seconds);
		} else if (current_state.mode == ALARM_TIME_SETTING) {
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <timeDisplay+0x14c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d112      	bne.n	8000af0 <timeDisplay+0x134>
			sprintf(timeStr, "%s %02d: %02d: %02d",
					ampm[RTC_Alarm.AlarmTime.TimeFormat], hours, minutes,
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <timeDisplay+0x170>)
 8000acc:	78db      	ldrb	r3, [r3, #3]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <timeDisplay+0x164>)
 8000ad8:	1899      	adds	r1, r3, r2
			sprintf(timeStr, "%s %02d: %02d: %02d",
 8000ada:	79f8      	ldrb	r0, [r7, #7]
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	797a      	ldrb	r2, [r7, #5]
 8000ae0:	9201      	str	r2, [sp, #4]
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	490e      	ldr	r1, [pc, #56]	; (8000b24 <timeDisplay+0x168>)
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <timeDisplay+0x16c>)
 8000aec:	f009 f934 	bl	8009d58 <siprintf>
					seconds);
		}
	}

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000af0:	21c0      	movs	r1, #192	; 0xc0
 8000af2:	204e      	movs	r0, #78	; 0x4e
 8000af4:	f7ff fe14 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 8000af8:	490b      	ldr	r1, [pc, #44]	; (8000b28 <timeDisplay+0x16c>)
 8000afa:	204e      	movs	r0, #78	; 0x4e
 8000afc:	f7ff fe51 	bl	80007a2 <LCD_SendString>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000b14 	.word	0x20000b14
 8000b0c:	0800aeec 	.word	0x0800aeec
 8000b10:	20000b1c 	.word	0x20000b1c
 8000b14:	0800aefc 	.word	0x0800aefc
 8000b18:	20000b20 	.word	0x20000b20
 8000b1c:	20000b28 	.word	0x20000b28
 8000b20:	20000094 	.word	0x20000094
 8000b24:	0800ae0c 	.word	0x0800ae0c
 8000b28:	20000ad4 	.word	0x20000ad4
 8000b2c:	20000b3c 	.word	0x20000b3c

08000b30 <musicOn>:

void musicOn() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
//	start = 1;
//	seq = 0;

	HAL_TIM_Base_Start_IT(&htim2);
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <musicOn+0x18>)
 8000b36:	f006 fc0b 	bl	8007350 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <musicOn+0x1c>)
 8000b3e:	f006 fcff 	bl	8007540 <HAL_TIM_PWM_Start>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200004d4 	.word	0x200004d4
 8000b4c:	2000051c 	.word	0x2000051c

08000b50 <schoolBellPlay>:

void schoolBellPlay() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint16_t melody = (uint16_t) (1000000 / schoolBell[seq].freq);
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <schoolBellPlay+0xa4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <schoolBellPlay+0xa8>)
 8000b5e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <schoolBellPlay+0xac>)
 8000b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b6a:	80fb      	strh	r3, [r7, #6]

//	musicOn();

	if (stop == 1) {
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <schoolBellPlay+0xb0>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10c      	bne.n	8000b8e <schoolBellPlay+0x3e>
		TIM2->ARR = 2000;
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4820      	ldr	r0, [pc, #128]	; (8000c04 <schoolBellPlay+0xb4>)
 8000b82:	f006 fda5 	bl	80076d0 <HAL_TIM_PWM_Stop>
		stop = 0;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <schoolBellPlay+0xb0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
			stop = 1;
			seq++;
		}
	}
}
 8000b8c:	e02e      	b.n	8000bec <schoolBellPlay+0x9c>
		if (seq == SCHOOL_MEL_NUM) {
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <schoolBellPlay+0xa4>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b18      	cmp	r3, #24
 8000b94:	d107      	bne.n	8000ba6 <schoolBellPlay+0x56>
			HAL_TIM_Base_Stop_IT(&htim2);
 8000b96:	481c      	ldr	r0, [pc, #112]	; (8000c08 <schoolBellPlay+0xb8>)
 8000b98:	f006 fc4a 	bl	8007430 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4819      	ldr	r0, [pc, #100]	; (8000c04 <schoolBellPlay+0xb4>)
 8000ba0:	f006 fd96 	bl	80076d0 <HAL_TIM_PWM_Stop>
}
 8000ba4:	e022      	b.n	8000bec <schoolBellPlay+0x9c>
			TIM3->ARR = melody;
 8000ba6:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <schoolBellPlay+0xbc>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR3 = melody / 2;
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <schoolBellPlay+0xbc>)
 8000bb4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->ARR = schoolBell[seq].delay * 2000;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <schoolBellPlay+0xa4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <schoolBellPlay+0xa8>)
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	885b      	ldrh	r3, [r3, #2]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bc8:	fb03 f202 	mul.w	r2, r3, r2
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <schoolBellPlay+0xb4>)
 8000bd6:	f006 fcb3 	bl	8007540 <HAL_TIM_PWM_Start>
			stop = 1;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <schoolBellPlay+0xb0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			seq++;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <schoolBellPlay+0xa4>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <schoolBellPlay+0xa4>)
 8000bea:	701a      	strb	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000018c 	.word	0x2000018c
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	000f4240 	.word	0x000f4240
 8000c00:	2000018d 	.word	0x2000018d
 8000c04:	2000051c 	.word	0x2000051c
 8000c08:	200004d4 	.word	0x200004d4
 8000c0c:	40000400 	.word	0x40000400

08000c10 <nabiPlay>:

void nabiPlay() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint16_t melody = (uint16_t) (1000000 / nabi[seq].freq);
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <nabiPlay+0xa4>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <nabiPlay+0xa8>)
 8000c1e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <nabiPlay+0xac>)
 8000c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c2a:	80fb      	strh	r3, [r7, #6]

//	musicOn();

	if (stop == 1) {
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <nabiPlay+0xb0>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10c      	bne.n	8000c4e <nabiPlay+0x3e>
		TIM2->ARR = 2000;
 8000c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <nabiPlay+0xb4>)
 8000c42:	f006 fd45 	bl	80076d0 <HAL_TIM_PWM_Stop>
		stop = 0;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <nabiPlay+0xb0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
			stop = 1;
			seq++;
		}
	}
}
 8000c4c:	e02e      	b.n	8000cac <nabiPlay+0x9c>
		if (seq == NABI_MEL_NUM) {
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <nabiPlay+0xa4>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b0d      	cmp	r3, #13
 8000c54:	d107      	bne.n	8000c66 <nabiPlay+0x56>
			HAL_TIM_Base_Stop_IT(&htim2);
 8000c56:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <nabiPlay+0xb8>)
 8000c58:	f006 fbea 	bl	8007430 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4819      	ldr	r0, [pc, #100]	; (8000cc4 <nabiPlay+0xb4>)
 8000c60:	f006 fd36 	bl	80076d0 <HAL_TIM_PWM_Stop>
}
 8000c64:	e022      	b.n	8000cac <nabiPlay+0x9c>
			TIM3->ARR = melody;
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <nabiPlay+0xbc>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR3 = melody / 2;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <nabiPlay+0xbc>)
 8000c74:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->ARR = nabi[seq].delay * 2000;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <nabiPlay+0xa4>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <nabiPlay+0xa8>)
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	885b      	ldrh	r3, [r3, #2]
 8000c82:	461a      	mov	r2, r3
 8000c84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c88:	fb03 f202 	mul.w	r2, r3, r2
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c92:	2108      	movs	r1, #8
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <nabiPlay+0xb4>)
 8000c96:	f006 fc53 	bl	8007540 <HAL_TIM_PWM_Start>
			stop = 1;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <nabiPlay+0xb0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
			seq++;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <nabiPlay+0xa4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <nabiPlay+0xa4>)
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000018c 	.word	0x2000018c
 8000cb8:	20000060 	.word	0x20000060
 8000cbc:	000f4240 	.word	0x000f4240
 8000cc0:	2000018d 	.word	0x2000018d
 8000cc4:	2000051c 	.word	0x2000051c
 8000cc8:	200004d4 	.word	0x200004d4
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <musicDisplay>:

void musicDisplay(int musicNumber) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	char music_str[30];

	sprintf(music_str, "%d. %s", musicNumber,
			alarmMusic[musicNumber].musicTitle);
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	00da      	lsls	r2, r3, #3
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <musicDisplay+0x54>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3301      	adds	r3, #1
	sprintf(music_str, "%d. %s", musicNumber,
 8000cea:	f107 0008 	add.w	r0, r7, #8
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	490d      	ldr	r1, [pc, #52]	; (8000d28 <musicDisplay+0x58>)
 8000cf2:	f009 f831 	bl	8009d58 <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	204e      	movs	r0, #78	; 0x4e
 8000cfa:	f7ff fd11 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Music Setting");
 8000cfe:	490b      	ldr	r1, [pc, #44]	; (8000d2c <musicDisplay+0x5c>)
 8000d00:	204e      	movs	r0, #78	; 0x4e
 8000d02:	f7ff fd4e 	bl	80007a2 <LCD_SendString>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000d06:	21c0      	movs	r1, #192	; 0xc0
 8000d08:	204e      	movs	r0, #78	; 0x4e
 8000d0a:	f7ff fd09 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, music_str);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	204e      	movs	r0, #78	; 0x4e
 8000d16:	f7ff fd44 	bl	80007a2 <LCD_SendString>
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	0800af0c 	.word	0x0800af0c
 8000d2c:	0800af14 	.word	0x0800af14

08000d30 <musicPlay>:

enum MUSIC_LIST musicList;
void musicPlay(int musicNumber) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

	switch(musicNumber) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d812      	bhi.n	8000d64 <musicPlay+0x34>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <musicPlay+0x14>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000d5f 	.word	0x08000d5f
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d65 	.word	0x08000d65
 8000d54:	08000d65 	.word	0x08000d65
	case 0:
//		musicList = MUSIC_NUM_0;
		schoolBellPlay();
 8000d58:	f7ff fefa 	bl	8000b50 <schoolBellPlay>
		break;
 8000d5c:	e003      	b.n	8000d66 <musicPlay+0x36>
	case 1:
//		musicList = MUSIC_NUM_1;
		nabiPlay();
 8000d5e:	f7ff ff57 	bl	8000c10 <nabiPlay>
		break;
 8000d62:	e000      	b.n	8000d66 <musicPlay+0x36>
		break;
	case 4:
//		musicList = MUSIC_NUM_4;
		break;
	default:
		break;
 8000d64:	bf00      	nop

	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop

08000d70 <joyStick_btn_chk>:

enum CLOCK_BUTTON joyStick_btn_chk() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);
	if (xy[1] > 4000) {
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <joyStick_btn_chk+0x58>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d7c:	d904      	bls.n	8000d88 <joyStick_btn_chk+0x18>
		printf("up\r\n");
 8000d7e:	4813      	ldr	r0, [pc, #76]	; (8000dcc <joyStick_btn_chk+0x5c>)
 8000d80:	f008 ffae 	bl	8009ce0 <puts>
		return UP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e01d      	b.n	8000dc4 <joyStick_btn_chk+0x54>
	}
	if (xy[1] < 1000) {
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <joyStick_btn_chk+0x58>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d90:	d204      	bcs.n	8000d9c <joyStick_btn_chk+0x2c>
		printf("down\r\n");
 8000d92:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <joyStick_btn_chk+0x60>)
 8000d94:	f008 ffa4 	bl	8009ce0 <puts>
		return DOWN;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e013      	b.n	8000dc4 <joyStick_btn_chk+0x54>
	}
	if (xy[0] > 4000) {
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <joyStick_btn_chk+0x58>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000da4:	d904      	bls.n	8000db0 <joyStick_btn_chk+0x40>
		printf("left\r\n");
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <joyStick_btn_chk+0x64>)
 8000da8:	f008 ff9a 	bl	8009ce0 <puts>
		return LEFT;
 8000dac:	2304      	movs	r3, #4
 8000dae:	e009      	b.n	8000dc4 <joyStick_btn_chk+0x54>
	}
	if (xy[0] < 1000) {
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <joyStick_btn_chk+0x58>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db8:	d204      	bcs.n	8000dc4 <joyStick_btn_chk+0x54>
		printf("right\r\n");
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <joyStick_btn_chk+0x68>)
 8000dbc:	f008 ff90 	bl	8009ce0 <puts>
		return RIGHT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e7ff      	b.n	8000dc4 <joyStick_btn_chk+0x54>
	}
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000ab4 	.word	0x20000ab4
 8000dcc:	0800af24 	.word	0x0800af24
 8000dd0:	0800af28 	.word	0x0800af28
 8000dd4:	0800af30 	.word	0x0800af30
 8000dd8:	0800af38 	.word	0x0800af38

08000ddc <time_set_mode>:

void time_set_mode() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
 8000de2:	f7ff ffc5 	bl	8000d70 <joyStick_btn_chk>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	if (t_position == 0) {
 8000dea:	4ba1      	ldr	r3, [pc, #644]	; (8001070 <time_set_mode+0x294>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d12b      	bne.n	8000e4a <time_set_mode+0x6e>
		printf("t_position 0 \r\n");
 8000df2:	48a0      	ldr	r0, [pc, #640]	; (8001074 <time_set_mode+0x298>)
 8000df4:	f008 ff74 	bl	8009ce0 <puts>
		switch (t_button) {
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d002      	beq.n	8000e04 <time_set_mode+0x28>
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d01f      	beq.n	8000e42 <time_set_mode+0x66>
			break;
		case RIGHT:
			t_position = 1;
			break;
		default:
			break;
 8000e02:	e12f      	b.n	8001064 <time_set_mode+0x288>
			if (stime.hours >= 12) {
 8000e04:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <time_set_mode+0x29c>)
 8000e06:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0a:	2b0b      	cmp	r3, #11
 8000e0c:	dd0c      	ble.n	8000e28 <time_set_mode+0x4c>
				stime.hours -= 12;
 8000e0e:	4b9a      	ldr	r3, [pc, #616]	; (8001078 <time_set_mode+0x29c>)
 8000e10:	f993 3000 	ldrsb.w	r3, [r3]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3b0c      	subs	r3, #12
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b25a      	sxtb	r2, r3
 8000e1c:	4b96      	ldr	r3, [pc, #600]	; (8001078 <time_set_mode+0x29c>)
 8000e1e:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 8000e20:	4b96      	ldr	r3, [pc, #600]	; (800107c <time_set_mode+0x2a0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	70da      	strb	r2, [r3, #3]
			break;
 8000e26:	e11d      	b.n	8001064 <time_set_mode+0x288>
				stime.hours += 12;
 8000e28:	4b93      	ldr	r3, [pc, #588]	; (8001078 <time_set_mode+0x29c>)
 8000e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	330c      	adds	r3, #12
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	4b90      	ldr	r3, [pc, #576]	; (8001078 <time_set_mode+0x29c>)
 8000e38:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 1;
 8000e3a:	4b90      	ldr	r3, [pc, #576]	; (800107c <time_set_mode+0x2a0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	70da      	strb	r2, [r3, #3]
			break;
 8000e40:	e110      	b.n	8001064 <time_set_mode+0x288>
			t_position = 1;
 8000e42:	4b8b      	ldr	r3, [pc, #556]	; (8001070 <time_set_mode+0x294>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
			break;
 8000e48:	e10c      	b.n	8001064 <time_set_mode+0x288>
		}
	} else if (t_position == 1) {
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <time_set_mode+0x294>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d143      	bne.n	8000eda <time_set_mode+0xfe>
		printf("t_position 1 \r\n");
 8000e52:	488b      	ldr	r0, [pc, #556]	; (8001080 <time_set_mode+0x2a4>)
 8000e54:	f008 ff44 	bl	8009ce0 <puts>
		switch (t_button) {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	f200 80f4 	bhi.w	800104a <time_set_mode+0x26e>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <time_set_mode+0x8c>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000e89 	.word	0x08000e89
 8000e6c:	08000eb5 	.word	0x08000eb5
 8000e70:	08000e79 	.word	0x08000e79
 8000e74:	08000e81 	.word	0x08000e81
		case RIGHT:
			t_position = 2;
 8000e78:	4b7d      	ldr	r3, [pc, #500]	; (8001070 <time_set_mode+0x294>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
			break;
 8000e7e:	e0f1      	b.n	8001064 <time_set_mode+0x288>
		case LEFT:
			t_position = 0;
 8000e80:	4b7b      	ldr	r3, [pc, #492]	; (8001070 <time_set_mode+0x294>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
			break;
 8000e86:	e0ed      	b.n	8001064 <time_set_mode+0x288>
		case UP:
			stime.hours++;
 8000e88:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <time_set_mode+0x29c>)
 8000e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <time_set_mode+0x29c>)
 8000e98:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000e9a:	4b77      	ldr	r3, [pc, #476]	; (8001078 <time_set_mode+0x29c>)
 8000e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea0:	2b0b      	cmp	r3, #11
 8000ea2:	f340 80d4 	ble.w	800104e <time_set_mode+0x272>
				stime.hours = 0;
 8000ea6:	4b74      	ldr	r3, [pc, #464]	; (8001078 <time_set_mode+0x29c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 8000eac:	4b73      	ldr	r3, [pc, #460]	; (800107c <time_set_mode+0x2a0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000eb2:	e0cc      	b.n	800104e <time_set_mode+0x272>
		case DOWN:
			stime.hours--;
 8000eb4:	4b70      	ldr	r3, [pc, #448]	; (8001078 <time_set_mode+0x29c>)
 8000eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	b25a      	sxtb	r2, r3
 8000ec2:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <time_set_mode+0x29c>)
 8000ec4:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000ec6:	4b6c      	ldr	r3, [pc, #432]	; (8001078 <time_set_mode+0x29c>)
 8000ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f280 80bc 	bge.w	800104a <time_set_mode+0x26e>
				stime.hours = 11;
 8000ed2:	4b69      	ldr	r3, [pc, #420]	; (8001078 <time_set_mode+0x29c>)
 8000ed4:	220b      	movs	r2, #11
 8000ed6:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000ed8:	e0b7      	b.n	800104a <time_set_mode+0x26e>
		}

	} else if (t_position == 2) {
 8000eda:	4b65      	ldr	r3, [pc, #404]	; (8001070 <time_set_mode+0x294>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d13e      	bne.n	8000f60 <time_set_mode+0x184>
		printf("t_position 2 \r\n");
 8000ee2:	4868      	ldr	r0, [pc, #416]	; (8001084 <time_set_mode+0x2a8>)
 8000ee4:	f008 fefc 	bl	8009ce0 <puts>
		switch (t_button) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	f200 80b0 	bhi.w	8001052 <time_set_mode+0x276>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <time_set_mode+0x11c>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f3d 	.word	0x08000f3d
 8000f00:	08000f09 	.word	0x08000f09
 8000f04:	08000f11 	.word	0x08000f11
		case RIGHT:
			t_position = 3;
 8000f08:	4b59      	ldr	r3, [pc, #356]	; (8001070 <time_set_mode+0x294>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	601a      	str	r2, [r3, #0]
			break;
 8000f0e:	e0a9      	b.n	8001064 <time_set_mode+0x288>
		case LEFT:
			t_position = 1;
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <time_set_mode+0x294>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
		case UP:
			stime.minutes++;
 8000f16:	4b58      	ldr	r3, [pc, #352]	; (8001078 <time_set_mode+0x29c>)
 8000f18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <time_set_mode+0x29c>)
 8000f26:	705a      	strb	r2, [r3, #1]
			if (stime.minutes >= 60) {
 8000f28:	4b53      	ldr	r3, [pc, #332]	; (8001078 <time_set_mode+0x29c>)
 8000f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f2e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f30:	f340 8091 	ble.w	8001056 <time_set_mode+0x27a>
				stime.minutes = 0;
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <time_set_mode+0x29c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000f3a:	e08c      	b.n	8001056 <time_set_mode+0x27a>
		case DOWN:
			stime.minutes--;
 8000f3c:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <time_set_mode+0x29c>)
 8000f3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	b25a      	sxtb	r2, r3
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <time_set_mode+0x29c>)
 8000f4c:	705a      	strb	r2, [r3, #1]
			if (stime.minutes < 0) {
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <time_set_mode+0x29c>)
 8000f50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da7c      	bge.n	8001052 <time_set_mode+0x276>
				stime.minutes = 59;
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <time_set_mode+0x29c>)
 8000f5a:	223b      	movs	r2, #59	; 0x3b
 8000f5c:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 8000f5e:	e078      	b.n	8001052 <time_set_mode+0x276>
		}
	} else if (t_position == 3) {
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <time_set_mode+0x294>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d17d      	bne.n	8001064 <time_set_mode+0x288>
		printf("t_position 3 \r\n");
 8000f68:	4847      	ldr	r0, [pc, #284]	; (8001088 <time_set_mode+0x2ac>)
 8000f6a:	f008 feb9 	bl	8009ce0 <puts>
		switch (t_button) {
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d871      	bhi.n	800105a <time_set_mode+0x27e>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <time_set_mode+0x1a0>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08001003 	.word	0x08001003
 8000f80:	08001027 	.word	0x08001027
 8000f84:	08000f8d 	.word	0x08000f8d
 8000f88:	08000ffb 	.word	0x08000ffb
		case RIGHT:

			default_nvitem.setting_time.hours = stime.hours;
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <time_set_mode+0x29c>)
 8000f8e:	f993 2000 	ldrsb.w	r2, [r3]
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <time_set_mode+0x2b0>)
 8000f94:	701a      	strb	r2, [r3, #0]
			default_nvitem.setting_time.minutes = stime.minutes;
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <time_set_mode+0x29c>)
 8000f98:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <time_set_mode+0x2b0>)
 8000f9e:	705a      	strb	r2, [r3, #1]
			default_nvitem.setting_time.seconds = stime.seconds;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <time_set_mode+0x29c>)
 8000fa2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <time_set_mode+0x2b0>)
 8000fa8:	709a      	strb	r2, [r3, #2]

			RTC_Time.Hours = default_nvitem.setting_time.hours;
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <time_set_mode+0x2b0>)
 8000fac:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <time_set_mode+0x2a0>)
 8000fb4:	701a      	strb	r2, [r3, #0]
			RTC_Time.Minutes = default_nvitem.setting_time.minutes;
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <time_set_mode+0x2b0>)
 8000fb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <time_set_mode+0x2a0>)
 8000fc0:	705a      	strb	r2, [r3, #1]
			RTC_Time.Seconds = default_nvitem.setting_time.seconds;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <time_set_mode+0x2b0>)
 8000fc4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <time_set_mode+0x2a0>)
 8000fcc:	709a      	strb	r2, [r3, #2]
			RTC_Time.Hours %= 12;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <time_set_mode+0x2a0>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <time_set_mode+0x2b4>)
 8000fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd8:	08d9      	lsrs	r1, r3, #3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	440b      	add	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <time_set_mode+0x2a0>)
 8000fe8:	701a      	strb	r2, [r3, #0]

			update_nvitems();
 8000fea:	f7ff fc75 	bl	80008d8 <update_nvitems>
			lcd_clear();
 8000fee:	f7ff fc5d 	bl	80008ac <lcd_clear>

			current_state.mode = NORMAL_STATE;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <time_set_mode+0x2b8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e034      	b.n	8001064 <time_set_mode+0x288>
		case LEFT:
			t_position = 2;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <time_set_mode+0x294>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	601a      	str	r2, [r3, #0]
			break;
 8001000:	e030      	b.n	8001064 <time_set_mode+0x288>
		case UP:
			stime.seconds++;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <time_set_mode+0x29c>)
 8001004:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	b25a      	sxtb	r2, r3
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <time_set_mode+0x29c>)
 8001012:	709a      	strb	r2, [r3, #2]
			if (stime.seconds >= 60) {
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <time_set_mode+0x29c>)
 8001016:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800101a:	2b3b      	cmp	r3, #59	; 0x3b
 800101c:	dd1f      	ble.n	800105e <time_set_mode+0x282>
				stime.seconds = 0;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <time_set_mode+0x29c>)
 8001020:	2200      	movs	r2, #0
 8001022:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001024:	e01b      	b.n	800105e <time_set_mode+0x282>
		case DOWN:
			stime.seconds--;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <time_set_mode+0x29c>)
 8001028:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	b25a      	sxtb	r2, r3
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <time_set_mode+0x29c>)
 8001036:	709a      	strb	r2, [r3, #2]
			if (stime.seconds < 0) {
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <time_set_mode+0x29c>)
 800103a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0f      	bge.n	8001062 <time_set_mode+0x286>
				stime.seconds = 59;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <time_set_mode+0x29c>)
 8001044:	223b      	movs	r2, #59	; 0x3b
 8001046:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001048:	e00b      	b.n	8001062 <time_set_mode+0x286>
			break;
 800104a:	bf00      	nop
 800104c:	e00a      	b.n	8001064 <time_set_mode+0x288>
			break;
 800104e:	bf00      	nop
 8001050:	e008      	b.n	8001064 <time_set_mode+0x288>
			break;
 8001052:	bf00      	nop
 8001054:	e006      	b.n	8001064 <time_set_mode+0x288>
			break;
 8001056:	bf00      	nop
 8001058:	e004      	b.n	8001064 <time_set_mode+0x288>
		default:
			break;
 800105a:	bf00      	nop
 800105c:	e002      	b.n	8001064 <time_set_mode+0x288>
			break;
 800105e:	bf00      	nop
 8001060:	e000      	b.n	8001064 <time_set_mode+0x288>
			break;
 8001062:	bf00      	nop

		}
	}
	timeDisplay();
 8001064:	f7ff fcaa 	bl	80009bc <timeDisplay>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000acc 	.word	0x20000acc
 8001074:	0800af40 	.word	0x0800af40
 8001078:	20000b1c 	.word	0x20000b1c
 800107c:	20000b28 	.word	0x20000b28
 8001080:	0800af50 	.word	0x0800af50
 8001084:	0800af60 	.word	0x0800af60
 8001088:	0800af70 	.word	0x0800af70
 800108c:	20000b64 	.word	0x20000b64
 8001090:	aaaaaaab 	.word	0xaaaaaaab
 8001094:	20000b14 	.word	0x20000b14

08001098 <alarm_set_mode>:

void alarm_set_mode(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8

	enum CLOCK_BUTTON al_button;

	al_button = joyStick_btn_chk();
 800109e:	f7ff fe67 	bl	8000d70 <joyStick_btn_chk>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]

	if (al_position == 0) {
 80010a6:	4baa      	ldr	r3, [pc, #680]	; (8001350 <alarm_set_mode+0x2b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d12b      	bne.n	8001106 <alarm_set_mode+0x6e>
		printf("al_position 0 \r\n");
 80010ae:	48a9      	ldr	r0, [pc, #676]	; (8001354 <alarm_set_mode+0x2bc>)
 80010b0:	f008 fe16 	bl	8009ce0 <puts>
		switch (al_button) {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d002      	beq.n	80010c0 <alarm_set_mode+0x28>
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d01f      	beq.n	80010fe <alarm_set_mode+0x66>
			break;
		case RIGHT:
			al_position = 1;
			break;
		default:
			break;
 80010be:	e160      	b.n	8001382 <alarm_set_mode+0x2ea>
			if (atime.hours >= 12) {
 80010c0:	4ba5      	ldr	r3, [pc, #660]	; (8001358 <alarm_set_mode+0x2c0>)
 80010c2:	f993 3000 	ldrsb.w	r3, [r3]
 80010c6:	2b0b      	cmp	r3, #11
 80010c8:	dd0c      	ble.n	80010e4 <alarm_set_mode+0x4c>
				atime.hours -= 12;
 80010ca:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <alarm_set_mode+0x2c0>)
 80010cc:	f993 3000 	ldrsb.w	r3, [r3]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	3b0c      	subs	r3, #12
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	4b9f      	ldr	r3, [pc, #636]	; (8001358 <alarm_set_mode+0x2c0>)
 80010da:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 0;
 80010dc:	4b9f      	ldr	r3, [pc, #636]	; (800135c <alarm_set_mode+0x2c4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	70da      	strb	r2, [r3, #3]
			break;
 80010e2:	e14e      	b.n	8001382 <alarm_set_mode+0x2ea>
				atime.hours += 12;
 80010e4:	4b9c      	ldr	r3, [pc, #624]	; (8001358 <alarm_set_mode+0x2c0>)
 80010e6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	330c      	adds	r3, #12
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	4b99      	ldr	r3, [pc, #612]	; (8001358 <alarm_set_mode+0x2c0>)
 80010f4:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 1;
 80010f6:	4b99      	ldr	r3, [pc, #612]	; (800135c <alarm_set_mode+0x2c4>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	70da      	strb	r2, [r3, #3]
			break;
 80010fc:	e141      	b.n	8001382 <alarm_set_mode+0x2ea>
			al_position = 1;
 80010fe:	4b94      	ldr	r3, [pc, #592]	; (8001350 <alarm_set_mode+0x2b8>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
			break;
 8001104:	e13d      	b.n	8001382 <alarm_set_mode+0x2ea>
		}
	} else if (al_position == 1) {
 8001106:	4b92      	ldr	r3, [pc, #584]	; (8001350 <alarm_set_mode+0x2b8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d143      	bne.n	8001196 <alarm_set_mode+0xfe>
		printf("al_position 1 \r\n");
 800110e:	4894      	ldr	r0, [pc, #592]	; (8001360 <alarm_set_mode+0x2c8>)
 8001110:	f008 fde6 	bl	8009ce0 <puts>
		switch (al_button) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b01      	subs	r3, #1
 8001118:	2b03      	cmp	r3, #3
 800111a:	f200 810d 	bhi.w	8001338 <alarm_set_mode+0x2a0>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <alarm_set_mode+0x8c>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	08001145 	.word	0x08001145
 8001128:	08001171 	.word	0x08001171
 800112c:	08001135 	.word	0x08001135
 8001130:	0800113d 	.word	0x0800113d
		case RIGHT:
			al_position = 2;
 8001134:	4b86      	ldr	r3, [pc, #536]	; (8001350 <alarm_set_mode+0x2b8>)
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
			break;
 800113a:	e122      	b.n	8001382 <alarm_set_mode+0x2ea>
		case LEFT:
			al_position = 0;
 800113c:	4b84      	ldr	r3, [pc, #528]	; (8001350 <alarm_set_mode+0x2b8>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
			break;
 8001142:	e11e      	b.n	8001382 <alarm_set_mode+0x2ea>
		case UP:
			atime.hours++;
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <alarm_set_mode+0x2c0>)
 8001146:	f993 3000 	ldrsb.w	r3, [r3]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3301      	adds	r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	b25a      	sxtb	r2, r3
 8001152:	4b81      	ldr	r3, [pc, #516]	; (8001358 <alarm_set_mode+0x2c0>)
 8001154:	701a      	strb	r2, [r3, #0]
			if (atime.hours >= 12) {
 8001156:	4b80      	ldr	r3, [pc, #512]	; (8001358 <alarm_set_mode+0x2c0>)
 8001158:	f993 3000 	ldrsb.w	r3, [r3]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	f340 80ed 	ble.w	800133c <alarm_set_mode+0x2a4>
				atime.hours = 0;
 8001162:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <alarm_set_mode+0x2c0>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
				RTC_Alarm.AlarmTime.TimeFormat = 0;
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <alarm_set_mode+0x2c4>)
 800116a:	2200      	movs	r2, #0
 800116c:	70da      	strb	r2, [r3, #3]
			}
			break;
 800116e:	e0e5      	b.n	800133c <alarm_set_mode+0x2a4>
		case DOWN:
			atime.hours--;
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <alarm_set_mode+0x2c0>)
 8001172:	f993 3000 	ldrsb.w	r3, [r3]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b25a      	sxtb	r2, r3
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <alarm_set_mode+0x2c0>)
 8001180:	701a      	strb	r2, [r3, #0]
			if (atime.hours < 0) {
 8001182:	4b75      	ldr	r3, [pc, #468]	; (8001358 <alarm_set_mode+0x2c0>)
 8001184:	f993 3000 	ldrsb.w	r3, [r3]
 8001188:	2b00      	cmp	r3, #0
 800118a:	f280 80d5 	bge.w	8001338 <alarm_set_mode+0x2a0>
				atime.hours = 11;
 800118e:	4b72      	ldr	r3, [pc, #456]	; (8001358 <alarm_set_mode+0x2c0>)
 8001190:	220b      	movs	r2, #11
 8001192:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8001194:	e0d0      	b.n	8001338 <alarm_set_mode+0x2a0>
		}

	} else if (al_position == 2) {
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <alarm_set_mode+0x2b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d13f      	bne.n	800121e <alarm_set_mode+0x186>
		printf("al_position 2 \r\n");
 800119e:	4871      	ldr	r0, [pc, #452]	; (8001364 <alarm_set_mode+0x2cc>)
 80011a0:	f008 fd9e 	bl	8009ce0 <puts>
		switch (al_button) {
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	f200 80c9 	bhi.w	8001340 <alarm_set_mode+0x2a8>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <alarm_set_mode+0x11c>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d3 	.word	0x080011d3
 80011b8:	080011f9 	.word	0x080011f9
 80011bc:	080011c5 	.word	0x080011c5
 80011c0:	080011cd 	.word	0x080011cd
		case RIGHT:
			al_position = 3;
 80011c4:	4b62      	ldr	r3, [pc, #392]	; (8001350 <alarm_set_mode+0x2b8>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	601a      	str	r2, [r3, #0]
			break;
 80011ca:	e0da      	b.n	8001382 <alarm_set_mode+0x2ea>
		case LEFT:
			al_position = 1;
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <alarm_set_mode+0x2b8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		case UP:
			atime.minutes++;
 80011d2:	4b61      	ldr	r3, [pc, #388]	; (8001358 <alarm_set_mode+0x2c0>)
 80011d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <alarm_set_mode+0x2c0>)
 80011e2:	705a      	strb	r2, [r3, #1]
			if (atime.minutes >= 60) {
 80011e4:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <alarm_set_mode+0x2c0>)
 80011e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011ea:	2b3b      	cmp	r3, #59	; 0x3b
 80011ec:	f340 80aa 	ble.w	8001344 <alarm_set_mode+0x2ac>
				atime.minutes = 0;
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <alarm_set_mode+0x2c0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	705a      	strb	r2, [r3, #1]
			}
			break;
 80011f6:	e0a5      	b.n	8001344 <alarm_set_mode+0x2ac>
		case DOWN:
			atime.minutes--;
 80011f8:	4b57      	ldr	r3, [pc, #348]	; (8001358 <alarm_set_mode+0x2c0>)
 80011fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	b25a      	sxtb	r2, r3
 8001206:	4b54      	ldr	r3, [pc, #336]	; (8001358 <alarm_set_mode+0x2c0>)
 8001208:	705a      	strb	r2, [r3, #1]
			if (atime.minutes < 0) {
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <alarm_set_mode+0x2c0>)
 800120c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f280 8095 	bge.w	8001340 <alarm_set_mode+0x2a8>
				atime.minutes = 59;
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <alarm_set_mode+0x2c0>)
 8001218:	223b      	movs	r2, #59	; 0x3b
 800121a:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 800121c:	e090      	b.n	8001340 <alarm_set_mode+0x2a8>
		}
	} else if (al_position == 3) {
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <alarm_set_mode+0x2b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b03      	cmp	r3, #3
 8001224:	f040 80ad 	bne.w	8001382 <alarm_set_mode+0x2ea>
		printf("al_position 3 \r\n");
 8001228:	484f      	ldr	r0, [pc, #316]	; (8001368 <alarm_set_mode+0x2d0>)
 800122a:	f008 fd59 	bl	8009ce0 <puts>
		switch (al_button) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	3b01      	subs	r3, #1
 8001232:	2b03      	cmp	r3, #3
 8001234:	f200 8088 	bhi.w	8001348 <alarm_set_mode+0x2b0>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <alarm_set_mode+0x1a8>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	080012f1 	.word	0x080012f1
 8001244:	08001315 	.word	0x08001315
 8001248:	08001251 	.word	0x08001251
 800124c:	080012e9 	.word	0x080012e9
		case RIGHT:

			default_nvitem.alarm_time.hours = atime.hours;
 8001250:	4b41      	ldr	r3, [pc, #260]	; (8001358 <alarm_set_mode+0x2c0>)
 8001252:	f993 2000 	ldrsb.w	r2, [r3]
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <alarm_set_mode+0x2d4>)
 8001258:	70da      	strb	r2, [r3, #3]
			default_nvitem.alarm_time.minutes = atime.minutes;
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <alarm_set_mode+0x2c0>)
 800125c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <alarm_set_mode+0x2d4>)
 8001262:	711a      	strb	r2, [r3, #4]
			default_nvitem.alarm_time.seconds = atime.seconds;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <alarm_set_mode+0x2c0>)
 8001266:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <alarm_set_mode+0x2d4>)
 800126c:	715a      	strb	r2, [r3, #5]

			RTC_Alarm.AlarmTime.Hours = default_nvitem.alarm_time.hours;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <alarm_set_mode+0x2d4>)
 8001270:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <alarm_set_mode+0x2c4>)
 8001278:	701a      	strb	r2, [r3, #0]
			RTC_Alarm.AlarmTime.Minutes = default_nvitem.alarm_time.minutes;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <alarm_set_mode+0x2d4>)
 800127c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <alarm_set_mode+0x2c4>)
 8001284:	705a      	strb	r2, [r3, #1]
			RTC_Alarm.AlarmTime.Seconds = default_nvitem.alarm_time.seconds;
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <alarm_set_mode+0x2d4>)
 8001288:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <alarm_set_mode+0x2c4>)
 8001290:	709a      	strb	r2, [r3, #2]
			RTC_Alarm.AlarmTime.Hours %= 12;
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <alarm_set_mode+0x2c4>)
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <alarm_set_mode+0x2d8>)
 8001298:	fba3 1302 	umull	r1, r3, r3, r2
 800129c:	08d9      	lsrs	r1, r3, #3
 800129e:	460b      	mov	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	440b      	add	r3, r1
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <alarm_set_mode+0x2c4>)
 80012ac:	701a      	strb	r2, [r3, #0]

			printf("rtc alarm time %s %d: %d: %d\r\n", ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours, RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <alarm_set_mode+0x2c4>)
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <alarm_set_mode+0x2dc>)
 80012bc:	1899      	adds	r1, r3, r2
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <alarm_set_mode+0x2c4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <alarm_set_mode+0x2c4>)
 80012c6:	785b      	ldrb	r3, [r3, #1]
 80012c8:	4618      	mov	r0, r3
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <alarm_set_mode+0x2c4>)
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	4829      	ldr	r0, [pc, #164]	; (8001378 <alarm_set_mode+0x2e0>)
 80012d4:	f008 fc9e 	bl	8009c14 <iprintf>

			update_nvitems();
 80012d8:	f7ff fafe 	bl	80008d8 <update_nvitems>
			lcd_clear();
 80012dc:	f7ff fae6 	bl	80008ac <lcd_clear>

			current_state.mode = NORMAL_STATE;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <alarm_set_mode+0x2e4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
			break;
 80012e6:	e04c      	b.n	8001382 <alarm_set_mode+0x2ea>
		case LEFT:
			al_position = 2;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <alarm_set_mode+0x2b8>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	601a      	str	r2, [r3, #0]
			break;
 80012ee:	e048      	b.n	8001382 <alarm_set_mode+0x2ea>
		case UP:
			atime.seconds++;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <alarm_set_mode+0x2c0>)
 80012f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <alarm_set_mode+0x2c0>)
 8001300:	709a      	strb	r2, [r3, #2]
			if (atime.seconds >= 60) {
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <alarm_set_mode+0x2c0>)
 8001304:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001308:	2b3b      	cmp	r3, #59	; 0x3b
 800130a:	dd1f      	ble.n	800134c <alarm_set_mode+0x2b4>
				atime.seconds = 0;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <alarm_set_mode+0x2c0>)
 800130e:	2200      	movs	r2, #0
 8001310:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001312:	e01b      	b.n	800134c <alarm_set_mode+0x2b4>
		case DOWN:
			atime.seconds--;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <alarm_set_mode+0x2c0>)
 8001316:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3b01      	subs	r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	b25a      	sxtb	r2, r3
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <alarm_set_mode+0x2c0>)
 8001324:	709a      	strb	r2, [r3, #2]
			if (atime.seconds < 0) {
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <alarm_set_mode+0x2c0>)
 8001328:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da27      	bge.n	8001380 <alarm_set_mode+0x2e8>
				atime.seconds = 59;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <alarm_set_mode+0x2c0>)
 8001332:	223b      	movs	r2, #59	; 0x3b
 8001334:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001336:	e023      	b.n	8001380 <alarm_set_mode+0x2e8>
			break;
 8001338:	bf00      	nop
 800133a:	e022      	b.n	8001382 <alarm_set_mode+0x2ea>
			break;
 800133c:	bf00      	nop
 800133e:	e020      	b.n	8001382 <alarm_set_mode+0x2ea>
			break;
 8001340:	bf00      	nop
 8001342:	e01e      	b.n	8001382 <alarm_set_mode+0x2ea>
			break;
 8001344:	bf00      	nop
 8001346:	e01c      	b.n	8001382 <alarm_set_mode+0x2ea>
		default:
			break;
 8001348:	bf00      	nop
 800134a:	e01a      	b.n	8001382 <alarm_set_mode+0x2ea>
			break;
 800134c:	bf00      	nop
 800134e:	e018      	b.n	8001382 <alarm_set_mode+0x2ea>
 8001350:	20000ad0 	.word	0x20000ad0
 8001354:	0800af80 	.word	0x0800af80
 8001358:	20000b20 	.word	0x20000b20
 800135c:	20000b3c 	.word	0x20000b3c
 8001360:	0800af90 	.word	0x0800af90
 8001364:	0800afa0 	.word	0x0800afa0
 8001368:	0800afb0 	.word	0x0800afb0
 800136c:	20000b64 	.word	0x20000b64
 8001370:	aaaaaaab 	.word	0xaaaaaaab
 8001374:	20000094 	.word	0x20000094
 8001378:	0800afc0 	.word	0x0800afc0
 800137c:	20000b14 	.word	0x20000b14
			break;
 8001380:	bf00      	nop

		}
	}
	timeDisplay();
 8001382:	f7ff fb1b 	bl	80009bc <timeDisplay>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop

08001390 <music_set_mode>:

void music_set_mode() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
	enum CLOCK_BUTTON mu_button;
	int mu_position, mu_cnt;

	mu_button = joyStick_btn_chk();
 8001396:	f7ff fceb 	bl	8000d70 <joyStick_btn_chk>
 800139a:	4603      	mov	r3, r0
 800139c:	72fb      	strb	r3, [r7, #11]
	mu_position = current_state.music_num;
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <music_set_mode+0xac>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
	mu_cnt = sizeof(alarmMusic) / sizeof(alarmMusic[0]);
 80013a4:	2305      	movs	r3, #5
 80013a6:	607b      	str	r3, [r7, #4]

	switch (mu_button) {
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d01a      	beq.n	80013e4 <music_set_mode+0x54>
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	dc23      	bgt.n	80013fa <music_set_mode+0x6a>
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d002      	beq.n	80013bc <music_set_mode+0x2c>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d00a      	beq.n	80013d0 <music_set_mode+0x40>
		update_nvitems();
		lcd_clear();

		current_state.mode = NORMAL_STATE;
	default:
		break;
 80013ba:	e01e      	b.n	80013fa <music_set_mode+0x6a>
		mu_position++;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
		if (mu_position == mu_cnt) {
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d119      	bne.n	80013fe <music_set_mode+0x6e>
			mu_position = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
		break;
 80013ce:	e016      	b.n	80013fe <music_set_mode+0x6e>
		mu_position--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
		if (mu_position < 0) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da12      	bge.n	8001402 <music_set_mode+0x72>
			mu_position = mu_cnt - 1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
		break;
 80013e2:	e00e      	b.n	8001402 <music_set_mode+0x72>
		default_nvitem.alarm_music_num = mu_position;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <music_set_mode+0xb0>)
 80013ea:	719a      	strb	r2, [r3, #6]
		update_nvitems();
 80013ec:	f7ff fa74 	bl	80008d8 <update_nvitems>
		lcd_clear();
 80013f0:	f7ff fa5c 	bl	80008ac <lcd_clear>
		current_state.mode = NORMAL_STATE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <music_set_mode+0xac>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		break;
 80013fa:	bf00      	nop
 80013fc:	e002      	b.n	8001404 <music_set_mode+0x74>
		break;
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <music_set_mode+0x74>
		break;
 8001402:	bf00      	nop
	}

	current_state.music_num = mu_position;
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <music_set_mode+0xac>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

	musicDisplay(mu_position);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fc60 	bl	8000cd0 <musicDisplay>
	musicPlay(mu_position);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff fc8d 	bl	8000d30 <musicPlay>

	printf("%d. %s\r\n", mu_position, alarmMusic[mu_position].musicTitle);
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00da      	lsls	r2, r3, #3
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <music_set_mode+0xb4>)
 8001424:	4413      	add	r3, r2
 8001426:	3301      	adds	r3, #1
 8001428:	461a      	mov	r2, r3
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <music_set_mode+0xb8>)
 800142e:	f008 fbf1 	bl	8009c14 <iprintf>

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000b14 	.word	0x20000b14
 8001440:	20000b64 	.word	0x20000b64
 8001444:	2000009c 	.word	0x2000009c
 8001448:	0800afe0 	.word	0x0800afe0

0800144c <init_getFlashTime>:




void init_getFlashTime() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	RTC_Time.Hours = readFlash(FLASH_USER_START_ADDR);
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <init_getFlashTime+0x54>)
 8001452:	f7ff fa33 	bl	80008bc <readFlash>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <init_getFlashTime+0x58>)
 800145c:	701a      	strb	r2, [r3, #0]
	RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 1);
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <init_getFlashTime+0x5c>)
 8001460:	f7ff fa2c 	bl	80008bc <readFlash>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <init_getFlashTime+0x58>)
 800146a:	705a      	strb	r2, [r3, #1]
	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <init_getFlashTime+0x60>)
 800146e:	f7ff fa25 	bl	80008bc <readFlash>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <init_getFlashTime+0x58>)
 8001478:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800147a:	2200      	movs	r2, #0
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <init_getFlashTime+0x58>)
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <init_getFlashTime+0x64>)
 8001480:	f005 fafc 	bl	8006a7c <HAL_RTC_SetTime>

	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <init_getFlashTime+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <init_getFlashTime+0x58>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	461a      	mov	r2, r3
			RTC_Time.Seconds);
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <init_getFlashTime+0x58>)
 8001492:	789b      	ldrb	r3, [r3, #2]
	printf("Setting time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes,
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <init_getFlashTime+0x68>)
 8001496:	f008 fbbd 	bl	8009c14 <iprintf>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	080c0000 	.word	0x080c0000
 80014a4:	20000b28 	.word	0x20000b28
 80014a8:	080c0001 	.word	0x080c0001
 80014ac:	080c0002 	.word	0x080c0002
 80014b0:	200004b4 	.word	0x200004b4
 80014b4:	0800afec 	.word	0x0800afec

080014b8 <init_getFlashAlarm>:

void init_getFlashAlarm() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	RTC_Alarm.AlarmTime.Hours = readFlash(FLASH_USER_START_ADDR + 3);
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <init_getFlashAlarm+0x54>)
 80014be:	f7ff f9fd 	bl	80008bc <readFlash>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <init_getFlashAlarm+0x58>)
 80014c8:	701a      	strb	r2, [r3, #0]
	RTC_Alarm.AlarmTime.Minutes = readFlash(FLASH_USER_START_ADDR + 4);
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <init_getFlashAlarm+0x5c>)
 80014cc:	f7ff f9f6 	bl	80008bc <readFlash>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <init_getFlashAlarm+0x58>)
 80014d6:	705a      	strb	r2, [r3, #1]
	RTC_Alarm.AlarmTime.Seconds = readFlash(FLASH_USER_START_ADDR + 5);
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <init_getFlashAlarm+0x60>)
 80014da:	f7ff f9ef 	bl	80008bc <readFlash>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <init_getFlashAlarm+0x58>)
 80014e4:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 80014e6:	2200      	movs	r2, #0
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <init_getFlashAlarm+0x64>)
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <init_getFlashAlarm+0x68>)
 80014ec:	f005 fac6 	bl	8006a7c <HAL_RTC_SetTime>

	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <init_getFlashAlarm+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <init_getFlashAlarm+0x58>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 80014fa:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <init_getFlashAlarm+0x58>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
	printf("Setting Alarm time: %d : %d : %d \r\n", RTC_Alarm.AlarmTime.Hours,
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <init_getFlashAlarm+0x6c>)
 8001502:	f008 fb87 	bl	8009c14 <iprintf>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	080c0003 	.word	0x080c0003
 8001510:	20000b3c 	.word	0x20000b3c
 8001514:	080c0004 	.word	0x080c0004
 8001518:	080c0005 	.word	0x080c0005
 800151c:	20000b28 	.word	0x20000b28
 8001520:	200004b4 	.word	0x200004b4
 8001524:	0800b00c 	.word	0x0800b00c

08001528 <init_getFlashMusic>:

void init_getFlashMusic() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	current_state.music_num = readFlash(FLASH_USER_START_ADDR + 6);
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <init_getFlashMusic+0x38>)
 800152e:	f7ff f9c5 	bl	80008bc <readFlash>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <init_getFlashMusic+0x3c>)
 8001538:	605a      	str	r2, [r3, #4]

	printf("Setting Music: %d %s\r\n", current_state.music_num,
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <init_getFlashMusic+0x3c>)
 800153c:	6859      	ldr	r1, [r3, #4]
			alarmMusic[current_state.music_num].musicTitle);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <init_getFlashMusic+0x3c>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	00da      	lsls	r2, r3, #3
 800154a:	1ad2      	subs	r2, r2, r3
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <init_getFlashMusic+0x40>)
 800154e:	4413      	add	r3, r2
 8001550:	3301      	adds	r3, #1
	printf("Setting Music: %d %s\r\n", current_state.music_num,
 8001552:	461a      	mov	r2, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <init_getFlashMusic+0x44>)
 8001556:	f008 fb5d 	bl	8009c14 <iprintf>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	080c0006 	.word	0x080c0006
 8001564:	20000b14 	.word	0x20000b14
 8001568:	2000009c 	.word	0x2000009c
 800156c:	0800b030 	.word	0x0800b030

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f001 f974 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f85c 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fbae 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001580:	f000 fb8c 	bl	8001c9c <MX_DMA_Init>
  MX_ETH_Init();
 8001584:	f000 f94e 	bl	8001824 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001588:	f000 fb30 	bl	8001bec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800158c:	f000 fb58 	bl	8001c40 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001590:	f000 f8e8 	bl	8001764 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001594:	f000 f994 	bl	80018c0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001598:	f000 f9d2 	bl	8001940 <MX_RTC_Init>
  MX_TIM2_Init();
 800159c:	f000 fa64 	bl	8001a68 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a0:	f000 faae 	bl	8001b00 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015a4:	f000 f8b2 	bl	800170c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 80015a8:	2202      	movs	r2, #2
 80015aa:	491d      	ldr	r1, [pc, #116]	; (8001620 <main+0xb0>)
 80015ac:	481d      	ldr	r0, [pc, #116]	; (8001624 <main+0xb4>)
 80015ae:	f001 fb41 	bl	8002c34 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_IT(&hadc1);
//	HAL_TIM_Base_Start_IT(&htim3);
	init();
 80015b2:	f7ff f910 	bl	80007d6 <init>

	init_getFlashTime();
 80015b6:	f7ff ff49 	bl	800144c <init_getFlashTime>
	init_getFlashAlarm();
 80015ba:	f7ff ff7d 	bl	80014b8 <init_getFlashAlarm>
	init_getFlashMusic();
 80015be:	f7ff ffb3 	bl	8001528 <init_getFlashMusic>
	lcd_clear();
 80015c2:	f7ff f973 	bl	80008ac <lcd_clear>
	current_state.mode = NORMAL_STATE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <main+0xb8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (current_state.mode) {
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <main+0xb8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d823      	bhi.n	800161c <main+0xac>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <main+0x6c>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015f7 	.word	0x080015f7
 80015e4:	08001607 	.word	0x08001607
 80015e8:	08001617 	.word	0x08001617
		case NORMAL_STATE:
			get_time();
 80015ec:	f7ff f912 	bl	8000814 <get_time>
			showCurrentTime();
 80015f0:	f7ff f944 	bl	800087c <showCurrentTime>
			break;
 80015f4:	e013      	b.n	800161e <main+0xae>
		case TIME_SETTING:
			time_set_mode();
 80015f6:	f7ff fbf1 	bl	8000ddc <time_set_mode>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 80015fa:	2200      	movs	r2, #0
 80015fc:	490b      	ldr	r1, [pc, #44]	; (800162c <main+0xbc>)
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <main+0xc0>)
 8001600:	f005 fa3c 	bl	8006a7c <HAL_RTC_SetTime>
			break;
 8001604:	e00b      	b.n	800161e <main+0xae>
		case ALARM_TIME_SETTING:
			alarm_set_mode();
 8001606:	f7ff fd47 	bl	8001098 <alarm_set_mode>
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800160a:	2200      	movs	r2, #0
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <main+0xbc>)
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <main+0xc0>)
 8001610:	f005 fa34 	bl	8006a7c <HAL_RTC_SetTime>
			break;
 8001614:	e003      	b.n	800161e <main+0xae>
		case MUSIC_SELECT:
			music_set_mode();
 8001616:	f7ff febb 	bl	8001390 <music_set_mode>
			break;
 800161a:	e000      	b.n	800161e <main+0xae>
		default:
			break;
 800161c:	bf00      	nop
		switch (current_state.mode) {
 800161e:	e7d5      	b.n	80015cc <main+0x5c>
 8001620:	20000ab4 	.word	0x20000ab4
 8001624:	20000308 	.word	0x20000308
 8001628:	20000b14 	.word	0x20000b14
 800162c:	20000b28 	.word	0x20000b28
 8001630:	200004b4 	.word	0x200004b4

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f008 fc80 	bl	8009f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <SystemClock_Config+0xd0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <SystemClock_Config+0xd0>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <SystemClock_Config+0xd0>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <SystemClock_Config+0xd4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <SystemClock_Config+0xd4>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <SystemClock_Config+0xd4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001690:	2305      	movs	r3, #5
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800169a:	2301      	movs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016ac:	23a8      	movs	r3, #168	; 0xa8
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016b4:	2307      	movs	r3, #7
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fb0f 	bl	8005ce0 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c8:	f000 fc8e 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2105      	movs	r1, #5
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fd70 	bl	80061d0 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016f6:	f000 fc77 	bl	8001fe8 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2027      	movs	r0, #39	; 0x27
 8001716:	f001 ff5a 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800171a:	2027      	movs	r0, #39	; 0x27
 800171c:	f001 ff73 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2028      	movs	r0, #40	; 0x28
 8001726:	f001 ff52 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172a:	2028      	movs	r0, #40	; 0x28
 800172c:	f001 ff6b 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2012      	movs	r0, #18
 8001736:	f001 ff4a 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800173a:	2012      	movs	r0, #18
 800173c:	f001 ff63 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2029      	movs	r0, #41	; 0x29
 8001746:	f001 ff42 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800174a:	2029      	movs	r0, #41	; 0x29
 800174c:	f001 ff5b 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	201c      	movs	r0, #28
 8001756:	f001 ff3a 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175a:	201c      	movs	r0, #28
 800175c:	f001 ff53 	bl	8003606 <HAL_NVIC_EnableIRQ>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <MX_ADC1_Init+0xb4>)
 8001778:	4a28      	ldr	r2, [pc, #160]	; (800181c <MX_ADC1_Init+0xb8>)
 800177a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_ADC1_Init+0xb4>)
 800177e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <MX_ADC1_Init+0xb4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_ADC1_Init+0xb4>)
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_ADC1_Init+0xb4>)
 8001792:	2201      	movs	r2, #1
 8001794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MX_ADC1_Init+0xb4>)
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <MX_ADC1_Init+0xbc>)
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c4:	4814      	ldr	r0, [pc, #80]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017c6:	f001 f8e1 	bl	800298c <HAL_ADC_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017d0:	f000 fc0a 	bl	8001fe8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017d4:	230a      	movs	r3, #10
 80017d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80017dc:	2304      	movs	r3, #4
 80017de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_ADC1_Init+0xb4>)
 80017e6:	f001 fb5d 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017f0:	f000 fbfa 	bl	8001fe8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80017f4:	230d      	movs	r3, #13
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_ADC1_Init+0xb4>)
 8001802:	f001 fb4f 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800180c:	f000 fbec 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000308 	.word	0x20000308
 800181c:	40012000 	.word	0x40012000
 8001820:	0f000001 	.word	0x0f000001

08001824 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_ETH_Init+0x84>)
 800182a:	4a20      	ldr	r2, [pc, #128]	; (80018ac <MX_ETH_Init+0x88>)
 800182c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_ETH_Init+0x8c>)
 800183c:	22e1      	movs	r2, #225	; 0xe1
 800183e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001842:	2200      	movs	r2, #0
 8001844:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001848:	2200      	movs	r2, #0
 800184a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_ETH_Init+0x8c>)
 800184e:	2200      	movs	r2, #0
 8001850:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_ETH_Init+0x84>)
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001856:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_ETH_Init+0x84>)
 800185a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800185e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_ETH_Init+0x84>)
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <MX_ETH_Init+0x90>)
 8001864:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_ETH_Init+0x84>)
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <MX_ETH_Init+0x94>)
 800186a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_ETH_Init+0x84>)
 800186e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001872:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_ETH_Init+0x84>)
 8001876:	f002 fae3 	bl	8003e40 <HAL_ETH_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001880:	f000 fbb2 	bl	8001fe8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001884:	2238      	movs	r2, #56	; 0x38
 8001886:	2100      	movs	r1, #0
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_ETH_Init+0x98>)
 800188a:	f008 fb5d 	bl	8009f48 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_ETH_Init+0x98>)
 8001890:	2221      	movs	r2, #33	; 0x21
 8001892:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_ETH_Init+0x98>)
 8001896:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800189a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_ETH_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200003b0 	.word	0x200003b0
 80018ac:	40028000 	.word	0x40028000
 80018b0:	20000b6c 	.word	0x20000b6c
 80018b4:	20000268 	.word	0x20000268
 80018b8:	200001c8 	.word	0x200001c8
 80018bc:	20000190 	.word	0x20000190

080018c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_I2C1_Init+0x74>)
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <MX_I2C1_Init+0x78>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_I2C1_Init+0x74>)
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <MX_I2C1_Init+0x7c>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_I2C1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_I2C1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_I2C1_Init+0x74>)
 80018de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_I2C1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_I2C1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_I2C1_Init+0x74>)
 80018fe:	f003 fadd 	bl	8004ebc <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fb6e 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_I2C1_Init+0x74>)
 8001910:	f004 f84d 	bl	80059ae <HAL_I2CEx_ConfigAnalogFilter>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800191a:	f000 fb65 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_I2C1_Init+0x74>)
 8001922:	f004 f880 	bl	8005a26 <HAL_I2CEx_ConfigDigitalFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 fb5c 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000460 	.word	0x20000460
 8001938:	40005400 	.word	0x40005400
 800193c:	000186a0 	.word	0x000186a0

08001940 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	; 0x40
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2228      	movs	r2, #40	; 0x28
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f008 faf1 	bl	8009f48 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001968:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <MX_RTC_Init+0x120>)
 800196a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <MX_RTC_Init+0x11c>)
 800196e:	2240      	movs	r2, #64	; 0x40
 8001970:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001972:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001974:	227f      	movs	r2, #127	; 0x7f
 8001976:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <MX_RTC_Init+0x11c>)
 800197a:	22ff      	movs	r2, #255	; 0xff
 800197c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <MX_RTC_Init+0x11c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001990:	4832      	ldr	r0, [pc, #200]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001992:	f004 fffd 	bl	8006990 <HAL_RTC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800199c:	f000 fb24 	bl	8001fe8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	2201      	movs	r2, #1
 80019c6:	4619      	mov	r1, r3
 80019c8:	4824      	ldr	r0, [pc, #144]	; (8001a5c <MX_RTC_Init+0x11c>)
 80019ca:	f005 f857 	bl	8006a7c <HAL_RTC_SetTime>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80019d4:	f000 fb08 	bl	8001fe8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80019d8:	2304      	movs	r3, #4
 80019da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 80019de:	2311      	movs	r3, #17
 80019e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x16;
 80019e4:	2316      	movs	r3, #22
 80019e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 80019ea:	2323      	movs	r3, #35	; 0x23
 80019ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <MX_RTC_Init+0x11c>)
 80019fa:	f005 f937 	bl	8006c6c <HAL_RTC_SetDate>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001a04:	f000 faf0 	bl	8001fe8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x20;
 8001a14:	2320      	movs	r3, #32
 8001a16:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_RTC_Init+0x124>)
 8001a26:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_RTC_Init+0x11c>)
 8001a44:	f005 f9e6 	bl	8006e14 <HAL_RTC_SetAlarm_IT>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001a4e:	f000 facb 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3740      	adds	r7, #64	; 0x40
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200004b4 	.word	0x200004b4
 8001a60:	40002800 	.word	0x40002800
 8001a64:	80808000 	.word	0x80808000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM2_Init+0x94>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_TIM2_Init+0x94>)
 8001a8e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <MX_TIM2_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_TIM2_Init+0x94>)
 8001a9c:	22c7      	movs	r2, #199	; 0xc7
 8001a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_TIM2_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_TIM2_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_TIM2_Init+0x94>)
 8001aae:	f005 fc00 	bl	80072b2 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f000 fa96 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_TIM2_Init+0x94>)
 8001aca:	f006 f83b 	bl	8007b44 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f000 fa88 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_TIM2_Init+0x94>)
 8001ae6:	f006 fc2d 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 fa7a 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200004d4 	.word	0x200004d4

08001b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_TIM3_Init+0xe8>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b38:	220f      	movs	r2, #15
 8001b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b44:	22c7      	movs	r2, #199	; 0xc7
 8001b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b54:	4823      	ldr	r0, [pc, #140]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b56:	f005 fbac 	bl	80072b2 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001b60:	f000 fa42 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b72:	f005 ffe7 	bl	8007b44 <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001b7c:	f000 fa34 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b82:	f005 fc84 	bl	800748e <HAL_TIM_PWM_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001b8c:	f000 fa2c 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001ba0:	f006 fbd0 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001baa:	f000 fa1d 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	; 0x60
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001bc6:	f005 fefb 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001bd0:	f000 fa0a 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001bd6:	f000 fc37 	bl	8002448 <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3738      	adds	r7, #56	; 0x38
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000051c 	.word	0x2000051c
 8001be8:	40000400 	.word	0x40000400

08001bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART3_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c24:	f006 fc1e 	bl	8008464 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f9db 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000564 	.word	0x20000564
 8001c3c:	40004800 	.word	0x40004800

08001c40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c84:	f003 ff0e 	bl	8005aa4 <HAL_PCD_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f9ab 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200005a8 	.word	0x200005a8

08001c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2038      	movs	r0, #56	; 0x38
 8001cc4:	f001 fc83 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cc8:	2038      	movs	r0, #56	; 0x38
 8001cca:	f001 fc9c 	bl	8003606 <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a39      	ldr	r2, [pc, #228]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a32      	ldr	r2, [pc, #200]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <MX_GPIO_Init+0x190>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001dbc:	482c      	ldr	r0, [pc, #176]	; (8001e70 <MX_GPIO_Init+0x194>)
 8001dbe:	f003 f831 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	482b      	ldr	r0, [pc, #172]	; (8001e74 <MX_GPIO_Init+0x198>)
 8001dc8:	f003 f82c 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4825      	ldr	r0, [pc, #148]	; (8001e78 <MX_GPIO_Init+0x19c>)
 8001de4:	f002 fe5a 	bl	8004a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Joy_btn_Pin */
  GPIO_InitStruct.Pin = Joy_btn_Pin;
 8001de8:	2308      	movs	r3, #8
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001dec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481f      	ldr	r0, [pc, #124]	; (8001e7c <MX_GPIO_Init+0x1a0>)
 8001dfe:	f002 fe4d 	bl	8004a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001e02:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4815      	ldr	r0, [pc, #84]	; (8001e70 <MX_GPIO_Init+0x194>)
 8001e1c:	f002 fe3e 	bl	8004a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e20:	2340      	movs	r3, #64	; 0x40
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	480f      	ldr	r0, [pc, #60]	; (8001e74 <MX_GPIO_Init+0x198>)
 8001e38:	f002 fe30 	bl	8004a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <MX_GPIO_Init+0x198>)
 8001e50:	f002 fe24 	bl	8004a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2009      	movs	r0, #9
 8001e5a:	f001 fbb8 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e5e:	2009      	movs	r0, #9
 8001e60:	f001 fbd1 	bl	8003606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e64:	bf00      	nop
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40021400 	.word	0x40021400

08001e80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d164      	bne.n	8001f5a <HAL_GPIO_EXTI_Callback+0xda>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e94:	4833      	ldr	r0, [pc, #204]	; (8001f64 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001e96:	f002 ffde 	bl	8004e56 <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 8001e9a:	f000 fd47 	bl	800292c <HAL_GetTick>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a31      	ldr	r2, [pc, #196]	; (8001f68 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ea2:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_GPIO_EXTI_Callback+0xec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001eb0:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2d      	ldr	r2, [pc, #180]	; (8001f6c <HAL_GPIO_EXTI_Callback+0xec>)
 8001eb8:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 8001eba:	2108      	movs	r1, #8
 8001ebc:	482d      	ldr	r0, [pc, #180]	; (8001f74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ebe:	f002 ff99 	bl	8004df4 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d148      	bne.n	8001f5a <HAL_GPIO_EXTI_Callback+0xda>
			if (interval < 130) {
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b81      	cmp	r3, #129	; 0x81
 8001ece:	d805      	bhi.n	8001edc <HAL_GPIO_EXTI_Callback+0x5c>
				btn_cnt += 3;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e02a      	b.n	8001f32 <HAL_GPIO_EXTI_Callback+0xb2>
			} else if (interval >= 130 && interval < 200) {
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b81      	cmp	r3, #129	; 0x81
 8001ee2:	d910      	bls.n	8001f06 <HAL_GPIO_EXTI_Callback+0x86>
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eea:	d80c      	bhi.n	8001f06 <HAL_GPIO_EXTI_Callback+0x86>
				printf("One click!!  interval = %u\r\n",
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4822      	ldr	r0, [pc, #136]	; (8001f7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ef4:	f007 fe8e 	bl	8009c14 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e015      	b.n	8001f32 <HAL_GPIO_EXTI_Callback+0xb2>
			} else if (interval >= 300 && interval <= 1000) {
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f0e:	d310      	bcc.n	8001f32 <HAL_GPIO_EXTI_Callback+0xb2>
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f18:	d80b      	bhi.n	8001f32 <HAL_GPIO_EXTI_Callback+0xb2>
				printf("Long click!!  interval = %u\r\n",
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4818      	ldr	r0, [pc, #96]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x104>)
 8001f22:	f007 fe77 	bl	8009c14 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
			}
			if (btn_cnt >= 5) {
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	dd0f      	ble.n	8001f5a <HAL_GPIO_EXTI_Callback+0xda>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x108>)
 8001f46:	f007 fe65 	bl	8009c14 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
				musicOn(); // FOR TEST
 8001f50:	f7fe fdee 	bl	8000b30 <musicOn>
				current_state.mode = MUSIC_SELECT;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f56:	2203      	movs	r2, #3
 8001f58:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40020400 	.word	0x40020400
 8001f68:	20000abc 	.word	0x20000abc
 8001f6c:	20000ac0 	.word	0x20000ac0
 8001f70:	20000ac4 	.word	0x20000ac4
 8001f74:	40021400 	.word	0x40021400
 8001f78:	20000ac8 	.word	0x20000ac8
 8001f7c:	0800b048 	.word	0x0800b048
 8001f80:	20000b14 	.word	0x20000b14
 8001f84:	0800b068 	.word	0x0800b068
 8001f88:	0800b088 	.word	0x0800b088

08001f8c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
			ampm[RTC_Alarm.AlarmTime.TimeFormat], RTC_Alarm.AlarmTime.Hours,
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_RTC_AlarmAEventCallback+0x40>)
 8001fa2:	1899      	adds	r1, r3, r2
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 8001fa8:	461a      	mov	r2, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001fac:	785b      	ldrb	r3, [r3, #1]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 8001fae:	4618      	mov	r0, r3
			RTC_Alarm.AlarmTime.Minutes, RTC_Alarm.AlarmTime.Seconds);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001fb2:	789b      	ldrb	r3, [r3, #2]
	printf("Alarm!! Alarm time: %s %d: %d: %d \r\n",
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001fba:	f007 fe2b 	bl	8009c14 <iprintf>
//	start = 1;
//	seq = 0;
//
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000b3c 	.word	0x20000b3c
 8001fcc:	20000094 	.word	0x20000094
 8001fd0:	0800b0bc 	.word	0x0800b0bc

08001fd4 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
//		break;
//	default:
//		break;
//	}

}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ff0:	e7fe      	b.n	8001ff0 <Error_Handler+0x8>
	...

08001ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_MspInit+0x4c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a0f      	ldr	r2, [pc, #60]	; (8002040 <HAL_MspInit+0x4c>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_MspInit+0x4c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x4c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x4c>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <HAL_ADC_MspInit+0x110>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d171      	bne.n	800214a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_ADC_MspInit+0x114>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a3a      	ldr	r2, [pc, #232]	; (8002158 <HAL_ADC_MspInit+0x114>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_ADC_MspInit+0x114>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_ADC_MspInit+0x114>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_ADC_MspInit+0x114>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <HAL_ADC_MspInit+0x114>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_ADC_MspInit+0x114>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <HAL_ADC_MspInit+0x114>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_ADC_MspInit+0x114>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80020ba:	2309      	movs	r3, #9
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020be:	2303      	movs	r3, #3
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	4823      	ldr	r0, [pc, #140]	; (800215c <HAL_ADC_MspInit+0x118>)
 80020ce:	f002 fce5 	bl	8004a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d2:	2308      	movs	r3, #8
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d6:	2303      	movs	r3, #3
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 80020e6:	f002 fcd9 	bl	8004a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_ADC_MspInit+0x120>)
 80020ec:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_ADC_MspInit+0x124>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_ADC_MspInit+0x120>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_ADC_MspInit+0x120>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_ADC_MspInit+0x120>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002108:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_ADC_MspInit+0x120>)
 800210c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002110:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002114:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002118:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_ADC_MspInit+0x120>)
 800211c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002120:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_ADC_MspInit+0x120>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002130:	f001 fa84 	bl	800363c <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800213a:	f7ff ff55 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_ADC_MspInit+0x120>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40012000 	.word	0x40012000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020800 	.word	0x40020800
 8002160:	40020000 	.word	0x40020000
 8002164:	20000350 	.word	0x20000350
 8002168:	40026410 	.word	0x40026410

0800216c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	; 0x38
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a55      	ldr	r2, [pc, #340]	; (80022e0 <HAL_ETH_MspInit+0x174>)
 800218a:	4293      	cmp	r3, r2
 800218c:	f040 80a4 	bne.w	80022d8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 800219a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6313      	str	r3, [r2, #48]	; 0x30
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	6313      	str	r3, [r2, #48]	; 0x30
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 8002242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002246:	6313      	str	r3, [r2, #48]	; 0x30
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_ETH_MspInit+0x178>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002254:	2332      	movs	r3, #50	; 0x32
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002264:	230b      	movs	r3, #11
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	481e      	ldr	r0, [pc, #120]	; (80022e8 <HAL_ETH_MspInit+0x17c>)
 8002270:	f002 fc14 	bl	8004a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002274:	2386      	movs	r3, #134	; 0x86
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002284:	230b      	movs	r3, #11
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	4817      	ldr	r0, [pc, #92]	; (80022ec <HAL_ETH_MspInit+0x180>)
 8002290:	f002 fc04 	bl	8004a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022a6:	230b      	movs	r3, #11
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ae:	4619      	mov	r1, r3
 80022b0:	480f      	ldr	r0, [pc, #60]	; (80022f0 <HAL_ETH_MspInit+0x184>)
 80022b2:	f002 fbf3 	bl	8004a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80022b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022c8:	230b      	movs	r3, #11
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4808      	ldr	r0, [pc, #32]	; (80022f4 <HAL_ETH_MspInit+0x188>)
 80022d4:	f002 fbe2 	bl	8004a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3738      	adds	r7, #56	; 0x38
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40028000 	.word	0x40028000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40021800 	.word	0x40021800

080022f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_I2C_MspInit+0x84>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12c      	bne.n	8002374 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_I2C_MspInit+0x88>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_I2C_MspInit+0x88>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_I2C_MspInit+0x88>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233c:	2312      	movs	r3, #18
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002348:	2304      	movs	r3, #4
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	480c      	ldr	r0, [pc, #48]	; (8002384 <HAL_I2C_MspInit+0x8c>)
 8002354:	f002 fba2 	bl	8004a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_I2C_MspInit+0x88>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_I2C_MspInit+0x88>)
 8002362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_I2C_MspInit+0x88>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40005400 	.word	0x40005400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	2230      	movs	r2, #48	; 0x30
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fdd5 	bl	8009f48 <memset>
  if(hrtc->Instance==RTC)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RTC_MspInit+0x4c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d111      	bne.n	80023cc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023a8:	2320      	movs	r3, #32
 80023aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 f92a 	bl	8006610 <HAL_RCCEx_PeriphCLKConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023c2:	f7ff fe11 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RTC_MspInit+0x50>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3738      	adds	r7, #56	; 0x38
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40002800 	.word	0x40002800
 80023d8:	42470e3c 	.word	0x42470e3c

080023dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800240a:	e012      	b.n	8002432 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_TIM_Base_MspInit+0x68>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10d      	bne.n	8002432 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_TIM_Base_MspInit+0x64>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40000400 	.word	0x40000400

08002448 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_TIM_MspPostInit+0x68>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d11d      	bne.n	80024a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_TIM_MspPostInit+0x6c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_TIM_MspPostInit+0x6c>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_TIM_MspPostInit+0x6c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002486:	2301      	movs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002496:	2302      	movs	r3, #2
 8002498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <HAL_TIM_MspPostInit+0x70>)
 80024a2:	f002 fafb 	bl	8004a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400

080024bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_UART_MspInit+0x84>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12c      	bne.n	8002538 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_UART_MspInit+0x88>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_UART_MspInit+0x88>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_UART_MspInit+0x88>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_UART_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_UART_MspInit+0x88>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_UART_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002528:	2307      	movs	r3, #7
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_UART_MspInit+0x8c>)
 8002534:	f002 fab2 	bl	8004a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40004800 	.word	0x40004800
 8002544:	40023800 	.word	0x40023800
 8002548:	40020c00 	.word	0x40020c00

0800254c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256c:	d13f      	bne.n	80025ee <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800258a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800259c:	230a      	movs	r3, #10
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4815      	ldr	r0, [pc, #84]	; (80025fc <HAL_PCD_MspInit+0xb0>)
 80025a8:	f002 fa78 	bl	8004a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	480e      	ldr	r0, [pc, #56]	; (80025fc <HAL_PCD_MspInit+0xb0>)
 80025c2:	f002 fa6b 	bl	8004a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	6353      	str	r3, [r2, #52]	; 0x34
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_PCD_MspInit+0xac>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264c:	f000 f95a 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8002658:	2008      	movs	r0, #8
 800265a:	f002 fc17 	bl	8004e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <ADC_IRQHandler+0x10>)
 800266a:	f000 f9d2 	bl	8002a12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000308 	.word	0x20000308

08002678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM2_IRQHandler+0x10>)
 800267e:	f005 f897 	bl	80077b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200004d4 	.word	0x200004d4

0800268c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <USART3_IRQHandler+0x10>)
 8002692:	f005 ffc7 	bl	8008624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000564 	.word	0x20000564

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80026a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026a8:	f002 fbf0 	bl	8004e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <RTC_Alarm_IRQHandler+0x10>)
 80026b6:	f004 fcef 	bl	8007098 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200004b4 	.word	0x200004b4

080026c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <DMA2_Stream0_IRQHandler+0x10>)
 80026ca:	f001 f94f 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000350 	.word	0x20000350

080026d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e00a      	b.n	8002700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ea:	f3af 8000 	nop.w
 80026ee:	4601      	mov	r1, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	60ba      	str	r2, [r7, #8]
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbf0      	blt.n	80026ea <_read+0x12>
  }

  return len;
 8002708:	687b      	ldr	r3, [r7, #4]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273a:	605a      	str	r2, [r3, #4]
  return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_isatty>:

int _isatty(int file)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <_sbrk+0x5c>)
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <_sbrk+0x60>)
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <_sbrk+0x64>)
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <_sbrk+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d207      	bcs.n	80027bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ac:	f007 fc1a 	bl	8009fe4 <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	220c      	movs	r2, #12
 80027b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e009      	b.n	80027d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <_sbrk+0x64>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <_sbrk+0x64>)
 80027cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20030000 	.word	0x20030000
 80027dc:	00000400 	.word	0x00000400
 80027e0:	20000b74 	.word	0x20000b74
 80027e4:	20000ce8 	.word	0x20000ce8

080027e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <SystemInit+0x20>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <SystemInit+0x20>)
 80027f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002844 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002812:	490e      	ldr	r1, [pc, #56]	; (800284c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002828:	4c0b      	ldr	r4, [pc, #44]	; (8002858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002836:	f7ff ffd7 	bl	80027e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f007 fbd9 	bl	8009ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe fe97 	bl	8001570 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002844:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002850:	0800b148 	.word	0x0800b148
  ldr r2, =_sbss
 8002854:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002858:	20000ce8 	.word	0x20000ce8

0800285c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <CAN1_RX0_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 fe95 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	2000      	movs	r0, #0
 8002890:	f000 f808 	bl	80028a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fbae 	bl	8001ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_InitTick+0x54>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_InitTick+0x58>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fead 	bl	8003622 <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 fe75 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_InitTick+0x5c>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000108 	.word	0x20000108
 80028fc:	20000110 	.word	0x20000110
 8002900:	2000010c 	.word	0x2000010c

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000110 	.word	0x20000110
 8002928:	20000b78 	.word	0x20000b78

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000b78 	.word	0x20000b78

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000110 	.word	0x20000110

0800298c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e033      	b.n	8002a0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fb4a 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d2:	f023 0302 	bic.w	r3, r3, #2
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fb92 	bl	8003108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
 80029fa:	e001      	b.n	8002a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d049      	beq.n	8002adc <HAL_ADC_IRQHandler+0xca>
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d046      	beq.n	8002adc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d12b      	bne.n	8002acc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d127      	bne.n	8002acc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d119      	bne.n	8002acc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0220 	bic.w	r2, r2, #32
 8002aa6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f9c1 	bl	8002e54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0212 	mvn.w	r2, #18
 8002ada:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d057      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x190>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d054      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d139      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d12b      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d124      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11d      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fc36 	bl	8003404 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 020c 	mvn.w	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d017      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x1d6>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10d      	bne.n	8002be8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f94f 	bl	8002e7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0201 	mvn.w	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x218>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f043 0202 	orr.w	r2, r3, #2
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0220 	mvn.w	r2, #32
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f938 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0220 	mvn.w	r2, #32
 8002c28:	601a      	str	r2, [r3, #0]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Start_DMA+0x1e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0e9      	b.n	8002e26 <HAL_ADC_Start_DMA+0x1f2>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d018      	beq.n	8002c9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c78:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_ADC_Start_DMA+0x1fc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6d      	ldr	r2, [pc, #436]	; (8002e34 <HAL_ADC_Start_DMA+0x200>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0c9a      	lsrs	r2, r3, #18
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca8:	d107      	bne.n	8002cba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	f040 80a1 	bne.w	8002e0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	d106      	bne.n	8002d18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f023 0206 	bic.w	r2, r3, #6
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
 8002d16:	e002      	b.n	8002d1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_ADC_Start_DMA+0x204>)
 8002d28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_ADC_Start_DMA+0x208>)
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	4a42      	ldr	r2, [pc, #264]	; (8002e40 <HAL_ADC_Start_DMA+0x20c>)
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a41      	ldr	r2, [pc, #260]	; (8002e44 <HAL_ADC_Start_DMA+0x210>)
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	334c      	adds	r3, #76	; 0x4c
 8002d76:	4619      	mov	r1, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f000 fd0c 	bl	8003798 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12a      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <HAL_ADC_Start_DMA+0x214>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d015      	beq.n	8002dc2 <HAL_ADC_Start_DMA+0x18e>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <HAL_ADC_Start_DMA+0x218>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d105      	bne.n	8002dac <HAL_ADC_Start_DMA+0x178>
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_ADC_Start_DMA+0x204>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <HAL_ADC_Start_DMA+0x21c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d136      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_ADC_Start_DMA+0x204>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d130      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d129      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e020      	b.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_ADC_Start_DMA+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d11b      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d114      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e00b      	b.n	8002e24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000108 	.word	0x20000108
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	40012300 	.word	0x40012300
 8002e3c:	08003301 	.word	0x08003301
 8002e40:	080033bb 	.word	0x080033bb
 8002e44:	080033d7 	.word	0x080033d7
 8002e48:	40012000 	.word	0x40012000
 8002e4c:	40012100 	.word	0x40012100
 8002e50:	40012200 	.word	0x40012200

08002e54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e113      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x244>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d925      	bls.n	8002f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3b1e      	subs	r3, #30
 8002f10:	409a      	lsls	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e022      	b.n	8002f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	2207      	movs	r2, #7
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4403      	add	r3, r0
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d824      	bhi.n	8002fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b05      	subs	r3, #5
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e04c      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d824      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b23      	subs	r3, #35	; 0x23
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	; 0x23
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
 8003004:	e023      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b41      	subs	r3, #65	; 0x41
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	; 0x41
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_ADC_ConfigChannel+0x250>)
 8003050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_ADC_ConfigChannel+0x254>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10f      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1d8>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b12      	cmp	r3, #18
 8003062:	d10b      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_ADC_ConfigChannel+0x254>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12b      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_ADC_ConfigChannel+0x258>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b11      	cmp	r3, #17
 8003096:	d122      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_ADC_ConfigChannel+0x258>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_ADC_ConfigChannel+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_ADC_ConfigChannel+0x260>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	0c9a      	lsrs	r2, r3, #18
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012300 	.word	0x40012300
 80030f8:	40012000 	.word	0x40012000
 80030fc:	10000012 	.word	0x10000012
 8003100:	20000108 	.word	0x20000108
 8003104:	431bde83 	.word	0x431bde83

08003108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003110:	4b79      	ldr	r3, [pc, #484]	; (80032f8 <ADC_Init+0x1f0>)
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800313c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	4a58      	ldr	r2, [pc, #352]	; (80032fc <ADC_Init+0x1f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	e00f      	b.n	8003206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0202 	bic.w	r2, r2, #2
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e1b      	ldrb	r3, [r3, #24]
 8003220:	005a      	lsls	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	3b01      	subs	r3, #1
 8003260:	035a      	lsls	r2, r3, #13
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	e007      	b.n	800327c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	3b01      	subs	r3, #1
 8003298:	051a      	lsls	r2, r3, #20
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032be:	025a      	lsls	r2, r3, #9
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	029a      	lsls	r2, r3, #10
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012300 	.word	0x40012300
 80032fc:	0f000001 	.word	0x0f000001

08003300 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d13c      	bne.n	8003394 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d12b      	bne.n	800338c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d127      	bne.n	800338c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003354:	2b00      	cmp	r3, #0
 8003356:	d119      	bne.n	800338c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0220 	bic.w	r2, r2, #32
 8003366:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fd61 	bl	8002e54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003392:	e00e      	b.n	80033b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff fd75 	bl	8002e90 <HAL_ADC_ErrorCallback>
}
 80033a6:	e004      	b.n	80033b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff fd4d 	bl	8002e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fd4a 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	60d3      	str	r3, [r2, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff3e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff8e 	bl	800350c <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5d 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff31 	bl	800347c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffa2 	bl	8003574 <SysTick_Config>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff f970 	bl	800292c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e099      	b.n	800378c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003678:	e00f      	b.n	800369a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367a:	f7ff f957 	bl	800292c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b05      	cmp	r3, #5
 8003686:	d908      	bls.n	800369a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e078      	b.n	800378c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e8      	bne.n	800367a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_DMA_Init+0x158>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4313      	orrs	r3, r2
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0307 	bic.w	r3, r3, #7
 800371a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b04      	cmp	r3, #4
 800372c:	d117      	bne.n	800375e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb01 	bl	8003d48 <DMA_CheckFifoParam>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800375a:	2301      	movs	r3, #1
 800375c:	e016      	b.n	800378c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fab8 	bl	8003cdc <DMA_CalcBaseAndBitshift>
 800376c:	4603      	mov	r3, r0
 800376e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	223f      	movs	r2, #63	; 0x3f
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	f010803f 	.word	0xf010803f

08003798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_DMA_Start_IT+0x26>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e040      	b.n	8003840 <HAL_DMA_Start_IT+0xa8>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d12f      	bne.n	8003832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa4a 	bl	8003c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	223f      	movs	r2, #63	; 0x3f
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0216 	orr.w	r2, r2, #22
 8003806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e005      	b.n	800383e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003856:	f7ff f869 	bl	800292c <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d008      	beq.n	800387a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e052      	b.n	8003920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0216 	bic.w	r2, r2, #22
 8003888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <HAL_DMA_Abort+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ca:	e013      	b.n	80038f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038cc:	f7ff f82e 	bl	800292c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d90c      	bls.n	80038f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e015      	b.n	8003920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e4      	bne.n	80038cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	223f      	movs	r2, #63	; 0x3f
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00c      	b.n	8003960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2205      	movs	r2, #5
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003978:	4b8e      	ldr	r3, [pc, #568]	; (8003bb4 <HAL_DMA_IRQHandler+0x248>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a8e      	ldr	r2, [pc, #568]	; (8003bb8 <HAL_DMA_IRQHandler+0x24c>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2208      	movs	r2, #8
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0204 	bic.w	r2, r2, #4
 80039be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2208      	movs	r2, #8
 80039c6:	409a      	lsls	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	2201      	movs	r2, #1
 80039fc:	409a      	lsls	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2204      	movs	r2, #4
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2204      	movs	r2, #4
 8003a32:	409a      	lsls	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2210      	movs	r2, #16
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d043      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03c      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2210      	movs	r2, #16
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d024      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e01f      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e016      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0208 	bic.w	r2, r2, #8
 8003aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 808f 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8087 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2220      	movs	r2, #32
 8003b04:	409a      	lsls	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d136      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0216 	bic.w	r2, r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x1da>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	223f      	movs	r2, #63	; 0x3f
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d07e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
        }
        return;
 8003b82:	e079      	b.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	e02c      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
 8003bb2:	bf00      	nop
 8003bb4:	20000108 	.word	0x20000108
 8003bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e01e      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10f      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0210 	bic.w	r2, r2, #16
 8003bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2205      	movs	r2, #5
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d307      	bcc.n	8003c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x2cc>
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
 8003c76:	e000      	b.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c78:	bf00      	nop
    }
  }
}
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d108      	bne.n	8003cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cbe:	e007      	b.n	8003cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b10      	subs	r3, #16
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <DMA_CalcBaseAndBitshift+0x64>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d909      	bls.n	8003d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d1c:	e007      	b.n	8003d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	aaaaaaab 	.word	0xaaaaaaab
 8003d44:	0800b0fc 	.word	0x0800b0fc

08003d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d856      	bhi.n	8003e16 <DMA_CheckFifoParam+0xce>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <DMA_CheckFifoParam+0x28>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d93 	.word	0x08003d93
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003e17 	.word	0x08003e17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d046      	beq.n	8003e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e043      	b.n	8003e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9a:	d140      	bne.n	8003e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e03d      	b.n	8003e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d121      	bne.n	8003df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d837      	bhi.n	8003e22 <DMA_CheckFifoParam+0xda>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <DMA_CheckFifoParam+0x70>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dcf 	.word	0x08003dcf
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003de1 	.word	0x08003de1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e030      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d025      	beq.n	8003e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e022      	b.n	8003e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dee:	e01c      	b.n	8003e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d903      	bls.n	8003dfe <DMA_CheckFifoParam+0xb6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dfc:	e018      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e015      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e00b      	b.n	8003e2e <DMA_CheckFifoParam+0xe6>
      break;
 8003e16:	bf00      	nop
 8003e18:	e00a      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e008      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e006      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06c      	b.n	8003f2c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2223      	movs	r2, #35	; 0x23
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fe f981 	bl	800216c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_ETH_Init+0xf4>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_ETH_Init+0xf4>)
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_ETH_Init+0xf4>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_ETH_Init+0xf8>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <HAL_ETH_Init+0xf8>)
 8003e8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_ETH_Init+0xf8>)
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4927      	ldr	r1, [pc, #156]	; (8003f38 <HAL_ETH_Init+0xf8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_ETH_Init+0xf8>)
 8003ea2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebc:	f7fe fd36 	bl	800292c <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ec2:	e011      	b.n	8003ee8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ec4:	f7fe fd32 	bl	800292c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ed2:	d909      	bls.n	8003ee8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	22e0      	movs	r2, #224	; 0xe0
 8003ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e021      	b.n	8003f2c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e4      	bne.n	8003ec4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f958 	bl	80041b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f9ff 	bl	8004304 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa55 	bl	80043b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	461a      	mov	r2, r3
 8003f12:	2100      	movs	r1, #0
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9bd 	bl	8004294 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2210      	movs	r2, #16
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40013800 	.word	0x40013800

08003f3c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4b51      	ldr	r3, [pc, #324]	; (8004098 <ETH_SetMACConfig+0x15c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	7c1b      	ldrb	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <ETH_SetMACConfig+0x28>
 8003f5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f62:	e000      	b.n	8003f66 <ETH_SetMACConfig+0x2a>
 8003f64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	7c5b      	ldrb	r3, [r3, #17]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <ETH_SetMACConfig+0x38>
 8003f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f72:	e000      	b.n	8003f76 <ETH_SetMACConfig+0x3a>
 8003f74:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	7fdb      	ldrb	r3, [r3, #31]
 8003f82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	7f92      	ldrb	r2, [r2, #30]
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	d102      	bne.n	8003f9a <ETH_SetMACConfig+0x5e>
 8003f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f98:	e000      	b.n	8003f9c <ETH_SetMACConfig+0x60>
 8003f9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	7f1b      	ldrb	r3, [r3, #28]
 8003fa2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003fa4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003faa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003fb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	d102      	bne.n	8003fc4 <ETH_SetMACConfig+0x88>
 8003fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc2:	e000      	b.n	8003fc6 <ETH_SetMACConfig+0x8a>
 8003fc4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fc6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	7bdb      	ldrb	r3, [r3, #15]
 8003fcc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fdc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7fe fca4 	bl	8002944 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004022:	2a00      	cmp	r2, #0
 8004024:	d101      	bne.n	800402a <ETH_SetMACConfig+0xee>
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	e000      	b.n	800402c <ETH_SetMACConfig+0xf0>
 800402a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800402c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800403a:	2a01      	cmp	r2, #1
 800403c:	d101      	bne.n	8004042 <ETH_SetMACConfig+0x106>
 800403e:	2208      	movs	r2, #8
 8004040:	e000      	b.n	8004044 <ETH_SetMACConfig+0x108>
 8004042:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004044:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800404c:	2a01      	cmp	r2, #1
 800404e:	d101      	bne.n	8004054 <ETH_SetMACConfig+0x118>
 8004050:	2204      	movs	r2, #4
 8004052:	e000      	b.n	8004056 <ETH_SetMACConfig+0x11a>
 8004054:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004056:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800405e:	2a01      	cmp	r2, #1
 8004060:	d101      	bne.n	8004066 <ETH_SetMACConfig+0x12a>
 8004062:	2202      	movs	r2, #2
 8004064:	e000      	b.n	8004068 <ETH_SetMACConfig+0x12c>
 8004066:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004068:	4313      	orrs	r3, r2
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004080:	2001      	movs	r0, #1
 8004082:	f7fe fc5f 	bl	8002944 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	ff20810f 	.word	0xff20810f

0800409c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <ETH_SetDMAConfig+0x110>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	7b1b      	ldrb	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <ETH_SetDMAConfig+0x2c>
 80040c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040c6:	e000      	b.n	80040ca <ETH_SetDMAConfig+0x2e>
 80040c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7b5b      	ldrb	r3, [r3, #13]
 80040ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	7f52      	ldrb	r2, [r2, #29]
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d102      	bne.n	80040e0 <ETH_SetDMAConfig+0x44>
 80040da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040de:	e000      	b.n	80040e2 <ETH_SetDMAConfig+0x46>
 80040e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	7b9b      	ldrb	r3, [r3, #14]
 80040e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	7f1b      	ldrb	r3, [r3, #28]
 80040f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80040f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	7f9b      	ldrb	r3, [r3, #30]
 80040fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004100:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004106:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800410e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004110:	4313      	orrs	r3, r2
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	461a      	mov	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004132:	2001      	movs	r0, #1
 8004134:	f7fe fc06 	bl	8002944 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004150:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004156:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800415c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004164:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004166:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800416e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004174:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800417e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004182:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004190:	2001      	movs	r0, #1
 8004192:	f7fe fbd7 	bl	8002944 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	f8de3f23 	.word	0xf8de3f23

080041b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b0a6      	sub	sp, #152	; 0x98
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041ec:	2300      	movs	r3, #0
 80041ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800421c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff fe86 	bl	8003f3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004230:	2301      	movs	r3, #1
 8004232:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004234:	2301      	movs	r3, #1
 8004236:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800423e:	2301      	movs	r3, #1
 8004240:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004252:	2300      	movs	r3, #0
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800425c:	2301      	movs	r3, #1
 800425e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004264:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800426a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800426c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004270:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004278:	2300      	movs	r3, #0
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff08 	bl	800409c <ETH_SetDMAConfig>
}
 800428c:	bf00      	nop
 800428e:	3798      	adds	r7, #152	; 0x98
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3305      	adds	r3, #5
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	3204      	adds	r2, #4
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <ETH_MACAddressConfig+0x68>)
 80042b6:	4413      	add	r3, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3303      	adds	r3, #3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	061a      	lsls	r2, r3, #24
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3302      	adds	r3, #2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3301      	adds	r3, #1
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	4313      	orrs	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <ETH_MACAddressConfig+0x6c>)
 80042e6:	4413      	add	r3, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6013      	str	r3, [r2, #0]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40028040 	.word	0x40028040
 8004300:	40028044 	.word	0x40028044

08004304 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e03e      	b.n	8004390 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68d9      	ldr	r1, [r3, #12]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	3206      	adds	r2, #6
 8004344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d80c      	bhi.n	8004374 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68d9      	ldr	r1, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	e004      	b.n	800437e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d9bd      	bls.n	8004312 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	611a      	str	r2, [r3, #16]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e046      	b.n	8004452 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6919      	ldr	r1, [r3, #16]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	440b      	add	r3, r1
 80043d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004400:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004408:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	3212      	adds	r2, #18
 800441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d80c      	bhi.n	8004442 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6919      	ldr	r1, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e004      	b.n	800444c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d9b5      	bls.n	80043c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004482:	60da      	str	r2, [r3, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_FLASH_Program+0xa0>)
 80044a4:	7e1b      	ldrb	r3, [r3, #24]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_FLASH_Program+0x1e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e03b      	b.n	8004526 <HAL_FLASH_Program+0x96>
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_FLASH_Program+0xa0>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044b8:	f000 f870 	bl	800459c <FLASH_WaitForLastOperation>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d12b      	bne.n	800451e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80044cc:	783b      	ldrb	r3, [r7, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f000 f91b 	bl	800470c <FLASH_Program_Byte>
 80044d6:	e016      	b.n	8004506 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80044de:	883b      	ldrh	r3, [r7, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f000 f8ee 	bl	80046c4 <FLASH_Program_HalfWord>
 80044e8:	e00d      	b.n	8004506 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d105      	bne.n	80044fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f000 f8c3 	bl	8004680 <FLASH_Program_Word>
 80044fa:	e004      	b.n	8004506 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f000 f88b 	bl	800461c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004506:	f24c 3050 	movw	r0, #50000	; 0xc350
 800450a:	f000 f847 	bl	800459c <FLASH_WaitForLastOperation>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_FLASH_Program+0xa4>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_FLASH_Program+0xa4>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_FLASH_Program+0xa0>)
 8004520:	2200      	movs	r2, #0
 8004522:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004524:	7dfb      	ldrb	r3, [r7, #23]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000b7c 	.word	0x20000b7c
 8004534:	40023c00 	.word	0x40023c00

08004538 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_FLASH_Unlock+0x38>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0b      	bge.n	8004562 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_FLASH_Unlock+0x38>)
 800454c:	4a09      	ldr	r2, [pc, #36]	; (8004574 <HAL_FLASH_Unlock+0x3c>)
 800454e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_FLASH_Unlock+0x38>)
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_FLASH_Unlock+0x40>)
 8004554:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_FLASH_Unlock+0x38>)
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da01      	bge.n	8004562 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004562:	79fb      	ldrb	r3, [r7, #7]
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40023c00 	.word	0x40023c00
 8004574:	45670123 	.word	0x45670123
 8004578:	cdef89ab 	.word	0xcdef89ab

0800457c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_FLASH_Lock+0x1c>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <HAL_FLASH_Lock+0x1c>)
 8004586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800458a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40023c00 	.word	0x40023c00

0800459c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <FLASH_WaitForLastOperation+0x78>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80045ae:	f7fe f9bd 	bl	800292c <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80045b4:	e010      	b.n	80045d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d00c      	beq.n	80045d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <FLASH_WaitForLastOperation+0x38>
 80045c4:	f7fe f9b2 	bl	800292c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d201      	bcs.n	80045d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e019      	b.n	800460c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <FLASH_WaitForLastOperation+0x7c>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e8      	bne.n	80045b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <FLASH_WaitForLastOperation+0x7c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <FLASH_WaitForLastOperation+0x7c>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <FLASH_WaitForLastOperation+0x7c>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004602:	f000 f8a5 	bl	8004750 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
  
}  
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000b7c 	.word	0x20000b7c
 8004618:	40023c00 	.word	0x40023c00

0800461c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004628:	4b14      	ldr	r3, [pc, #80]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	4a10      	ldr	r2, [pc, #64]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 800463a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800463e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004640:	4b0e      	ldr	r3, [pc, #56]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <FLASH_Program_DoubleWord+0x60>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004652:	f3bf 8f6f 	isb	sy
}
 8004656:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	000a      	movs	r2, r1
 8004666:	2300      	movs	r3, #0
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	3104      	adds	r1, #4
 800466c:	4613      	mov	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40023c00 	.word	0x40023c00

08004680 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <FLASH_Program_Word+0x40>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <FLASH_Program_Word+0x40>)
 8004690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004694:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <FLASH_Program_Word+0x40>)
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <FLASH_Program_Word+0x40>)
 800469c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <FLASH_Program_Word+0x40>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <FLASH_Program_Word+0x40>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40023c00 	.word	0x40023c00

080046c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	4a06      	ldr	r2, [pc, #24]	; (8004708 <FLASH_Program_HalfWord+0x44>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	801a      	strh	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40023c00 	.word	0x40023c00

0800470c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <FLASH_Program_Byte+0x40>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	4a0b      	ldr	r2, [pc, #44]	; (800474c <FLASH_Program_Byte+0x40>)
 800471e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <FLASH_Program_Byte+0x40>)
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <FLASH_Program_Byte+0x40>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <FLASH_Program_Byte+0x40>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	4a06      	ldr	r2, [pc, #24]	; (800474c <FLASH_Program_Byte+0x40>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	701a      	strb	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023c00 	.word	0x40023c00

08004750 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 800476a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 800476e:	2210      	movs	r2, #16
 8004770:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f043 0308 	orr.w	r3, r3, #8
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 8004788:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800478a:	4b22      	ldr	r3, [pc, #136]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 800478c:	2220      	movs	r2, #32
 800478e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004790:	4b20      	ldr	r3, [pc, #128]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800479c:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047aa:	2240      	movs	r2, #64	; 0x40
 80047ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80047ae:	4b19      	ldr	r3, [pc, #100]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047c4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047c8:	2280      	movs	r2, #128	; 0x80
 80047ca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f043 0320 	orr.w	r3, r3, #32
 8004800:	4a05      	ldr	r2, [pc, #20]	; (8004818 <FLASH_SetErrorCode+0xc8>)
 8004802:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <FLASH_SetErrorCode+0xc4>)
 8004806:	2202      	movs	r2, #2
 8004808:	60da      	str	r2, [r3, #12]
  }
}
 800480a:	bf00      	nop
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40023c00 	.word	0x40023c00
 8004818:	20000b7c 	.word	0x20000b7c

0800481c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_FLASHEx_Erase+0xdc>)
 8004830:	7e1b      	ldrb	r3, [r3, #24]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_FLASHEx_Erase+0x1e>
 8004836:	2302      	movs	r3, #2
 8004838:	e05a      	b.n	80048f0 <HAL_FLASHEx_Erase+0xd4>
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_FLASHEx_Erase+0xdc>)
 800483c:	2201      	movs	r2, #1
 800483e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004844:	f7ff feaa 	bl	800459c <FLASH_WaitForLastOperation>
 8004848:	4603      	mov	r3, r0
 800484a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14a      	bne.n	80048e8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d117      	bne.n	8004892 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 f846 	bl	8004900 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004878:	f7ff fe90 	bl	800459c <FLASH_WaitForLastOperation>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004880:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_FLASHEx_Erase+0xe0>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_FLASHEx_Erase+0xe0>)
 8004886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800488a:	f023 0304 	bic.w	r3, r3, #4
 800488e:	6113      	str	r3, [r2, #16]
 8004890:	e028      	b.n	80048e4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	e01c      	b.n	80048d4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	68b8      	ldr	r0, [r7, #8]
 80048a4:	f000 f866 	bl	8004974 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048ac:	f7ff fe76 	bl	800459c <FLASH_WaitForLastOperation>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_FLASHEx_Erase+0xe0>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a10      	ldr	r2, [pc, #64]	; (80048fc <HAL_FLASHEx_Erase+0xe0>)
 80048ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80048be:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	601a      	str	r2, [r3, #0]
          break;
 80048cc:	e00a      	b.n	80048e4 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3da      	bcc.n	800489a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80048e4:	f000 f894 	bl	8004a10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <HAL_FLASHEx_Erase+0xdc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	761a      	strb	r2, [r3, #24]

  return status;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000b7c 	.word	0x20000b7c
 80048fc:	40023c00 	.word	0x40023c00

08004900 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <FLASH_MassErase+0x70>)
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <FLASH_MassErase+0x70>)
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d108      	bne.n	8004930 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <FLASH_MassErase+0x70>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4a13      	ldr	r2, [pc, #76]	; (8004970 <FLASH_MassErase+0x70>)
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6113      	str	r3, [r2, #16]
 800492e:	e00f      	b.n	8004950 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d106      	bne.n	8004944 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <FLASH_MassErase+0x70>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <FLASH_MassErase+0x70>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6113      	str	r3, [r2, #16]
 8004942:	e005      	b.n	8004950 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <FLASH_MassErase+0x70>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <FLASH_MassErase+0x70>)
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <FLASH_MassErase+0x70>)
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	4313      	orrs	r3, r2
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <FLASH_MassErase+0x70>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6113      	str	r3, [r2, #16]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023c00 	.word	0x40023c00

08004974 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e010      	b.n	80049b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d103      	bne.n	800499e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e009      	b.n	80049b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d103      	bne.n	80049ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80049a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e002      	b.n	80049b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80049ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0b      	cmp	r3, #11
 80049b6:	d902      	bls.n	80049be <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	490f      	ldr	r1, [pc, #60]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049ee:	f043 0302 	orr.w	r3, r3, #2
 80049f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <FLASH_Erase_Sector+0x98>)
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fe:	6113      	str	r3, [r2, #16]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40023c00 	.word	0x40023c00

08004a10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004a14:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <FLASH_FlushCaches+0x88>)
 8004a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8a:	6013      	str	r3, [r2, #0]
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00

08004a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	; 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e177      	b.n	8004da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab8:	2201      	movs	r2, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	f040 8166 	bne.w	8004da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d005      	beq.n	8004aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d130      	bne.n	8004b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 0201 	and.w	r2, r3, #1
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d017      	beq.n	8004b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d123      	bne.n	8004be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	08da      	lsrs	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3208      	adds	r2, #8
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	220f      	movs	r2, #15
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	08da      	lsrs	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3208      	adds	r2, #8
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	2203      	movs	r2, #3
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0203 	and.w	r2, r3, #3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80c0 	beq.w	8004da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b66      	ldr	r3, [pc, #408]	; (8004dc0 <HAL_GPIO_Init+0x324>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	4a65      	ldr	r2, [pc, #404]	; (8004dc0 <HAL_GPIO_Init+0x324>)
 8004c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c30:	6453      	str	r3, [r2, #68]	; 0x44
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_GPIO_Init+0x324>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3e:	4a61      	ldr	r2, [pc, #388]	; (8004dc4 <HAL_GPIO_Init+0x328>)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	3302      	adds	r3, #2
 8004c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	220f      	movs	r2, #15
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_GPIO_Init+0x32c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d037      	beq.n	8004cda <HAL_GPIO_Init+0x23e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a57      	ldr	r2, [pc, #348]	; (8004dcc <HAL_GPIO_Init+0x330>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d031      	beq.n	8004cd6 <HAL_GPIO_Init+0x23a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a56      	ldr	r2, [pc, #344]	; (8004dd0 <HAL_GPIO_Init+0x334>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02b      	beq.n	8004cd2 <HAL_GPIO_Init+0x236>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a55      	ldr	r2, [pc, #340]	; (8004dd4 <HAL_GPIO_Init+0x338>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d025      	beq.n	8004cce <HAL_GPIO_Init+0x232>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a54      	ldr	r2, [pc, #336]	; (8004dd8 <HAL_GPIO_Init+0x33c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01f      	beq.n	8004cca <HAL_GPIO_Init+0x22e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a53      	ldr	r2, [pc, #332]	; (8004ddc <HAL_GPIO_Init+0x340>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d019      	beq.n	8004cc6 <HAL_GPIO_Init+0x22a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a52      	ldr	r2, [pc, #328]	; (8004de0 <HAL_GPIO_Init+0x344>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_GPIO_Init+0x226>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a51      	ldr	r2, [pc, #324]	; (8004de4 <HAL_GPIO_Init+0x348>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00d      	beq.n	8004cbe <HAL_GPIO_Init+0x222>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <HAL_GPIO_Init+0x34c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <HAL_GPIO_Init+0x21e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a4f      	ldr	r2, [pc, #316]	; (8004dec <HAL_GPIO_Init+0x350>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_GPIO_Init+0x21a>
 8004cb2:	2309      	movs	r3, #9
 8004cb4:	e012      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	e010      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	e00e      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	e00c      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cc2:	2306      	movs	r3, #6
 8004cc4:	e00a      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cc6:	2305      	movs	r3, #5
 8004cc8:	e008      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	e006      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e004      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e002      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_GPIO_Init+0x240>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	f002 0203 	and.w	r2, r2, #3
 8004ce2:	0092      	lsls	r2, r2, #2
 8004ce4:	4093      	lsls	r3, r2
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cec:	4935      	ldr	r1, [pc, #212]	; (8004dc4 <HAL_GPIO_Init+0x328>)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d1e:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d4e:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_GPIO_Init+0x354>)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	f67f ae84 	bls.w	8004ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40013800 	.word	0x40013800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40020400 	.word	0x40020400
 8004dd0:	40020800 	.word	0x40020800
 8004dd4:	40020c00 	.word	0x40020c00
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40021400 	.word	0x40021400
 8004de0:	40021800 	.word	0x40021800
 8004de4:	40021c00 	.word	0x40021c00
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40022400 	.word	0x40022400
 8004df0:	40013c00 	.word	0x40013c00

08004df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e001      	b.n	8004e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
 8004e30:	4613      	mov	r3, r2
 8004e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e40:	e003      	b.n	8004e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	041a      	lsls	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	619a      	str	r2, [r3, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	041a      	lsls	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43d9      	mvns	r1, r3
 8004e74:	887b      	ldrh	r3, [r7, #2]
 8004e76:	400b      	ands	r3, r1
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	619a      	str	r2, [r3, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d006      	beq.n	8004eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc ffe8 	bl	8001e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40013c00 	.word	0x40013c00

08004ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e12b      	b.n	8005126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fd fa08 	bl	80022f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f20:	f001 fb4e 	bl	80065c0 <HAL_RCC_GetPCLK1Freq>
 8004f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4a81      	ldr	r2, [pc, #516]	; (8005130 <HAL_I2C_Init+0x274>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d807      	bhi.n	8004f40 <HAL_I2C_Init+0x84>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a80      	ldr	r2, [pc, #512]	; (8005134 <HAL_I2C_Init+0x278>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	bf94      	ite	ls
 8004f38:	2301      	movls	r3, #1
 8004f3a:	2300      	movhi	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e006      	b.n	8004f4e <HAL_I2C_Init+0x92>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a7d      	ldr	r2, [pc, #500]	; (8005138 <HAL_I2C_Init+0x27c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	bf94      	ite	ls
 8004f48:	2301      	movls	r3, #1
 8004f4a:	2300      	movhi	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e0e7      	b.n	8005126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a78      	ldr	r2, [pc, #480]	; (800513c <HAL_I2C_Init+0x280>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0c9b      	lsrs	r3, r3, #18
 8004f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a6a      	ldr	r2, [pc, #424]	; (8005130 <HAL_I2C_Init+0x274>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d802      	bhi.n	8004f90 <HAL_I2C_Init+0xd4>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	e009      	b.n	8004fa4 <HAL_I2C_Init+0xe8>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	4a69      	ldr	r2, [pc, #420]	; (8005140 <HAL_I2C_Init+0x284>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	099b      	lsrs	r3, r3, #6
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	495c      	ldr	r1, [pc, #368]	; (8005130 <HAL_I2C_Init+0x274>)
 8004fc0:	428b      	cmp	r3, r1
 8004fc2:	d819      	bhi.n	8004ff8 <HAL_I2C_Init+0x13c>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1e59      	subs	r1, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fd8:	400b      	ands	r3, r1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_I2C_Init+0x138>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1e59      	subs	r1, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff2:	e051      	b.n	8005098 <HAL_I2C_Init+0x1dc>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	e04f      	b.n	8005098 <HAL_I2C_Init+0x1dc>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d111      	bne.n	8005024 <HAL_I2C_Init+0x168>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1e58      	subs	r0, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	440b      	add	r3, r1
 800500e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005012:	3301      	adds	r3, #1
 8005014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e012      	b.n	800504a <HAL_I2C_Init+0x18e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e58      	subs	r0, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	0099      	lsls	r1, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	fbb0 f3f3 	udiv	r3, r0, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_I2C_Init+0x196>
 800504e:	2301      	movs	r3, #1
 8005050:	e022      	b.n	8005098 <HAL_I2C_Init+0x1dc>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10e      	bne.n	8005078 <HAL_I2C_Init+0x1bc>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1e58      	subs	r0, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6859      	ldr	r1, [r3, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	440b      	add	r3, r1
 8005068:	fbb0 f3f3 	udiv	r3, r0, r3
 800506c:	3301      	adds	r3, #1
 800506e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	e00f      	b.n	8005098 <HAL_I2C_Init+0x1dc>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1e58      	subs	r0, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	0099      	lsls	r1, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	fbb0 f3f3 	udiv	r3, r0, r3
 800508e:	3301      	adds	r3, #1
 8005090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	6809      	ldr	r1, [r1, #0]
 800509c:	4313      	orrs	r3, r2
 800509e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6911      	ldr	r1, [r2, #16]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68d2      	ldr	r2, [r2, #12]
 80050d2:	4311      	orrs	r1, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	430b      	orrs	r3, r1
 80050da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	000186a0 	.word	0x000186a0
 8005134:	001e847f 	.word	0x001e847f
 8005138:	003d08ff 	.word	0x003d08ff
 800513c:	431bde83 	.word	0x431bde83
 8005140:	10624dd3 	.word	0x10624dd3

08005144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	461a      	mov	r2, r3
 8005150:	460b      	mov	r3, r1
 8005152:	817b      	strh	r3, [r7, #10]
 8005154:	4613      	mov	r3, r2
 8005156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005158:	f7fd fbe8 	bl	800292c <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 80e0 	bne.w	800532c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2319      	movs	r3, #25
 8005172:	2201      	movs	r2, #1
 8005174:	4970      	ldr	r1, [pc, #448]	; (8005338 <HAL_I2C_Master_Transmit+0x1f4>)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fa92 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	e0d3      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_I2C_Master_Transmit+0x50>
 8005190:	2302      	movs	r3, #2
 8005192:	e0cc      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d007      	beq.n	80051ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2221      	movs	r2, #33	; 0x21
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2210      	movs	r2, #16
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	893a      	ldrh	r2, [r7, #8]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a50      	ldr	r2, [pc, #320]	; (800533c <HAL_I2C_Master_Transmit+0x1f8>)
 80051fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051fc:	8979      	ldrh	r1, [r7, #10]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f9ca 	bl	800559c <I2C_MasterRequestWrite>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e08d      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005228:	e066      	b.n	80052f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	6a39      	ldr	r1, [r7, #32]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fb0c 	bl	800584c <I2C_WaitOnTXEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b04      	cmp	r3, #4
 8005240:	d107      	bne.n	8005252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e06b      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d11b      	bne.n	80052cc <HAL_I2C_Master_Transmit+0x188>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	6a39      	ldr	r1, [r7, #32]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fafc 	bl	80058ce <I2C_WaitOnBTFFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d107      	bne.n	80052f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e01a      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d194      	bne.n	800522a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	00100002 	.word	0x00100002
 800533c:	ffff0000 	.word	0xffff0000

08005340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	460b      	mov	r3, r1
 800534e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7fd faec 	bl	800292c <HAL_GetTick>
 8005354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b20      	cmp	r3, #32
 8005364:	f040 8111 	bne.w	800558a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2319      	movs	r3, #25
 800536e:	2201      	movs	r2, #1
 8005370:	4988      	ldr	r1, [pc, #544]	; (8005594 <HAL_I2C_IsDeviceReady+0x254>)
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f994 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
 8005380:	e104      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_I2C_IsDeviceReady+0x50>
 800538c:	2302      	movs	r3, #2
 800538e:	e0fd      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d007      	beq.n	80053b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2224      	movs	r2, #36	; 0x24
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a70      	ldr	r2, [pc, #448]	; (8005598 <HAL_I2C_IsDeviceReady+0x258>)
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f952 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005410:	d103      	bne.n	800541a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0b6      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800541e:	897b      	ldrh	r3, [r7, #10]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800542c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800542e:	f7fd fa7d 	bl	800292c <HAL_GetTick>
 8005432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005462:	e025      	b.n	80054b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005464:	f7fd fa62 	bl	800292c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <HAL_I2C_IsDeviceReady+0x13a>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22a0      	movs	r2, #160	; 0xa0
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2ba0      	cmp	r3, #160	; 0xa0
 80054ba:	d005      	beq.n	80054c8 <HAL_I2C_IsDeviceReady+0x188>
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_I2C_IsDeviceReady+0x188>
 80054c2:	7dbb      	ldrb	r3, [r7, #22]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0cd      	beq.n	8005464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d129      	bne.n	8005532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2319      	movs	r3, #25
 800550a:	2201      	movs	r2, #1
 800550c:	4921      	ldr	r1, [pc, #132]	; (8005594 <HAL_I2C_IsDeviceReady+0x254>)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8c6 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e036      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e02c      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800554a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2319      	movs	r3, #25
 8005552:	2201      	movs	r2, #1
 8005554:	490f      	ldr	r1, [pc, #60]	; (8005594 <HAL_I2C_IsDeviceReady+0x254>)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f8a2 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e012      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3301      	adds	r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	f4ff af32 	bcc.w	80053da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000

0800559c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	460b      	mov	r3, r1
 80055aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d006      	beq.n	80055c6 <I2C_MasterRequestWrite+0x2a>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d003      	beq.n	80055c6 <I2C_MasterRequestWrite+0x2a>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055c4:	d108      	bne.n	80055d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e00b      	b.n	80055f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	2b12      	cmp	r3, #18
 80055de:	d107      	bne.n	80055f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f84f 	bl	80056a0 <I2C_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d103      	bne.n	8005620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e035      	b.n	8005690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562c:	d108      	bne.n	8005640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800562e:	897b      	ldrh	r3, [r7, #10]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	e01b      	b.n	8005678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005640:	897b      	ldrh	r3, [r7, #10]
 8005642:	11db      	asrs	r3, r3, #7
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0306 	and.w	r3, r3, #6
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f063 030f 	orn	r3, r3, #15
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	490e      	ldr	r1, [pc, #56]	; (8005698 <I2C_MasterRequestWrite+0xfc>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f875 	bl	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e010      	b.n	8005690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800566e:	897b      	ldrh	r3, [r7, #10]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4907      	ldr	r1, [pc, #28]	; (800569c <I2C_MasterRequestWrite+0x100>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f865 	bl	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	00010008 	.word	0x00010008
 800569c:	00010002 	.word	0x00010002

080056a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b0:	e025      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d021      	beq.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fd f937 	bl	800292c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d116      	bne.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f043 0220 	orr.w	r2, r3, #32
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e023      	b.n	8005746 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10d      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	43da      	mvns	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	e00c      	b.n	800573e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d0b6      	beq.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800575c:	e051      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576c:	d123      	bne.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005786:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e046      	b.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d021      	beq.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd f8b5 	bl	800292c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e020      	b.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10c      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	43da      	mvns	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e00b      	b.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d18d      	bne.n	800575e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005858:	e02d      	b.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f878 	bl	8005950 <I2C_IsAcknowledgeFailed>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e02d      	b.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d021      	beq.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fd f85b 	bl	800292c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d116      	bne.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e007      	b.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d1ca      	bne.n	800585a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058da:	e02d      	b.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f837 	bl	8005950 <I2C_IsAcknowledgeFailed>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e02d      	b.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d021      	beq.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f4:	f7fd f81a 	bl	800292c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d302      	bcc.n	800590a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d116      	bne.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e007      	b.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d1ca      	bne.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005966:	d11b      	bne.n	80059a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005970:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d129      	bne.n	8005a18 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0210 	bic.w	r2, r2, #16
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d12a      	bne.n	8005a96 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a60:	89fb      	ldrh	r3, [r7, #14]
 8005a62:	f023 030f 	bic.w	r3, r3, #15
 8005a66:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	89fa      	ldrh	r2, [r7, #14]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	b08f      	sub	sp, #60	; 0x3c
 8005aa8:	af0a      	add	r7, sp, #40	; 0x28
 8005aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e10f      	b.n	8005cd6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fc fd3b 	bl	800254c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f003 fd2a 	bl	800954e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	687e      	ldr	r6, [r7, #4]
 8005b02:	466d      	mov	r5, sp
 8005b04:	f106 0410 	add.w	r4, r6, #16
 8005b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b18:	1d33      	adds	r3, r6, #4
 8005b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1c:	6838      	ldr	r0, [r7, #0]
 8005b1e:	f003 fcb5 	bl	800948c <USB_CoreInit>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0d0      	b.n	8005cd6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f003 fd18 	bl	8009570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]
 8005b44:	e04a      	b.n	8005bdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	333d      	adds	r3, #61	; 0x3d
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	333c      	adds	r3, #60	; 0x3c
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b6e:	7bfa      	ldrb	r2, [r7, #15]
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	b298      	uxth	r0, r3
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	3344      	adds	r3, #68	; 0x44
 8005b82:	4602      	mov	r2, r0
 8005b84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3340      	adds	r3, #64	; 0x40
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b9a:	7bfa      	ldrb	r2, [r7, #15]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3348      	adds	r3, #72	; 0x48
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bae:	7bfa      	ldrb	r2, [r7, #15]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	334c      	adds	r3, #76	; 0x4c
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bc2:	7bfa      	ldrb	r2, [r7, #15]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3354      	adds	r3, #84	; 0x54
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3af      	bcc.n	8005b46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e044      	b.n	8005c76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c02:	7bfa      	ldrb	r2, [r7, #15]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c5a:	7bfa      	ldrb	r2, [r7, #15]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	3301      	adds	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d3b5      	bcc.n	8005bec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	687e      	ldr	r6, [r7, #4]
 8005c88:	466d      	mov	r5, sp
 8005c8a:	f106 0410 	add.w	r4, r6, #16
 8005c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c9e:	1d33      	adds	r3, r6, #4
 8005ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ca2:	6838      	ldr	r0, [r7, #0]
 8005ca4:	f003 fcb0 	bl	8009608 <USB_DevInit>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00d      	b.n	8005cd6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f003 fe7b 	bl	80099ca <USB_DevDisconnect>

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e267      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d075      	beq.n	8005dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfe:	4b88      	ldr	r3, [pc, #544]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d00c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0a:	4b85      	ldr	r3, [pc, #532]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d112      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d16:	4b82      	ldr	r3, [pc, #520]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d22:	d10b      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d24:	4b7e      	ldr	r3, [pc, #504]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05b      	beq.n	8005de8 <HAL_RCC_OscConfig+0x108>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d157      	bne.n	8005de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e242      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d106      	bne.n	8005d54 <HAL_RCC_OscConfig+0x74>
 8005d46:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a75      	ldr	r2, [pc, #468]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e01d      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x98>
 8005d5e:	4b70      	ldr	r3, [pc, #448]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6f      	ldr	r2, [pc, #444]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a6c      	ldr	r2, [pc, #432]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e00b      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d78:	4b69      	ldr	r3, [pc, #420]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a68      	ldr	r2, [pc, #416]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4b66      	ldr	r3, [pc, #408]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a65      	ldr	r2, [pc, #404]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fc fdc8 	bl	800292c <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da0:	f7fc fdc4 	bl	800292c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b64      	cmp	r3, #100	; 0x64
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e207      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	4b5b      	ldr	r3, [pc, #364]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0xc0>
 8005dbe:	e014      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fc fdb4 	bl	800292c <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fc fdb0 	bl	800292c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1f3      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dda:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0xe8>
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d063      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df6:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e02:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d11c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0e:	4b44      	ldr	r3, [pc, #272]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d116      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1c7      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e32:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4937      	ldr	r1, [pc, #220]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e46:	e03a      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e50:	4b34      	ldr	r3, [pc, #208]	; (8005f24 <HAL_RCC_OscConfig+0x244>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fc fd69 	bl	800292c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5e:	f7fc fd65 	bl	800292c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e1a8      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4925      	ldr	r1, [pc, #148]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]
 8005e90:	e015      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e92:	4b24      	ldr	r3, [pc, #144]	; (8005f24 <HAL_RCC_OscConfig+0x244>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fc fd48 	bl	800292c <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fc fd44 	bl	800292c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e187      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d036      	beq.n	8005f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <HAL_RCC_OscConfig+0x248>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fc fd28 	bl	800292c <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee0:	f7fc fd24 	bl	800292c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e167      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x200>
 8005efe:	e01b      	b.n	8005f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_RCC_OscConfig+0x248>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f06:	f7fc fd11 	bl	800292c <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f0c:	e00e      	b.n	8005f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0e:	f7fc fd0d 	bl	800292c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d907      	bls.n	8005f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e150      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
 8005f20:	40023800 	.word	0x40023800
 8005f24:	42470000 	.word	0x42470000
 8005f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f2c:	4b88      	ldr	r3, [pc, #544]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ea      	bne.n	8005f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8097 	beq.w	8006074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4a:	4b81      	ldr	r3, [pc, #516]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f56:	2300      	movs	r3, #0
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	4b7d      	ldr	r3, [pc, #500]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	4a7c      	ldr	r2, [pc, #496]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6413      	str	r3, [r2, #64]	; 0x40
 8005f66:	4b7a      	ldr	r3, [pc, #488]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f72:	2301      	movs	r3, #1
 8005f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f76:	4b77      	ldr	r3, [pc, #476]	; (8006154 <HAL_RCC_OscConfig+0x474>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d118      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f82:	4b74      	ldr	r3, [pc, #464]	; (8006154 <HAL_RCC_OscConfig+0x474>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a73      	ldr	r2, [pc, #460]	; (8006154 <HAL_RCC_OscConfig+0x474>)
 8005f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f8e:	f7fc fccd 	bl	800292c <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f96:	f7fc fcc9 	bl	800292c <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e10c      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa8:	4b6a      	ldr	r3, [pc, #424]	; (8006154 <HAL_RCC_OscConfig+0x474>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_OscConfig+0x2ea>
 8005fbc:	4b64      	ldr	r3, [pc, #400]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	4a63      	ldr	r2, [pc, #396]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc8:	e01c      	b.n	8006004 <HAL_RCC_OscConfig+0x324>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x30c>
 8005fd2:	4b5f      	ldr	r3, [pc, #380]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a5e      	ldr	r2, [pc, #376]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	f043 0304 	orr.w	r3, r3, #4
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fde:	4b5c      	ldr	r3, [pc, #368]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a5b      	ldr	r2, [pc, #364]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fea:	e00b      	b.n	8006004 <HAL_RCC_OscConfig+0x324>
 8005fec:	4b58      	ldr	r3, [pc, #352]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a57      	ldr	r2, [pc, #348]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff8:	4b55      	ldr	r3, [pc, #340]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a54      	ldr	r2, [pc, #336]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	f023 0304 	bic.w	r3, r3, #4
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600c:	f7fc fc8e 	bl	800292c <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006012:	e00a      	b.n	800602a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fc fc8a 	bl	800292c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e0cb      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602a:	4b49      	ldr	r3, [pc, #292]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0ee      	beq.n	8006014 <HAL_RCC_OscConfig+0x334>
 8006036:	e014      	b.n	8006062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006038:	f7fc fc78 	bl	800292c <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603e:	e00a      	b.n	8006056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fc fc74 	bl	800292c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e0b5      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1ee      	bne.n	8006040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006068:	4b39      	ldr	r3, [pc, #228]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	4a38      	ldr	r2, [pc, #224]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 800606e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a1 	beq.w	80061c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800607e:	4b34      	ldr	r3, [pc, #208]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b08      	cmp	r3, #8
 8006088:	d05c      	beq.n	8006144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d141      	bne.n	8006116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <HAL_RCC_OscConfig+0x478>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006098:	f7fc fc48 	bl	800292c <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a0:	f7fc fc44 	bl	800292c <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e087      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b2:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	019b      	lsls	r3, r3, #6
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	3b01      	subs	r3, #1
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	061b      	lsls	r3, r3, #24
 80060e2:	491b      	ldr	r1, [pc, #108]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e8:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <HAL_RCC_OscConfig+0x478>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ee:	f7fc fc1d 	bl	800292c <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f6:	f7fc fc19 	bl	800292c <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e05c      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006108:	4b11      	ldr	r3, [pc, #68]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x416>
 8006114:	e054      	b.n	80061c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <HAL_RCC_OscConfig+0x478>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7fc fc06 	bl	800292c <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006124:	f7fc fc02 	bl	800292c <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e045      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	4b06      	ldr	r3, [pc, #24]	; (8006150 <HAL_RCC_OscConfig+0x470>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0x444>
 8006142:	e03d      	b.n	80061c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d107      	bne.n	800615c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e038      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
 8006150:	40023800 	.word	0x40023800
 8006154:	40007000 	.word	0x40007000
 8006158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCC_OscConfig+0x4ec>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d028      	beq.n	80061bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d121      	bne.n	80061bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d11a      	bne.n	80061bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006194:	4293      	cmp	r3, r2
 8006196:	d111      	bne.n	80061bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	3b01      	subs	r3, #1
 80061a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800

080061d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0cc      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b68      	ldr	r3, [pc, #416]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d90c      	bls.n	800620c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b65      	ldr	r3, [pc, #404]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fa:	4b63      	ldr	r3, [pc, #396]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0b8      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d020      	beq.n	800625a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a58      	ldr	r2, [pc, #352]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800622e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800623c:	4b53      	ldr	r3, [pc, #332]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4a52      	ldr	r2, [pc, #328]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006248:	4b50      	ldr	r3, [pc, #320]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	494d      	ldr	r1, [pc, #308]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	4313      	orrs	r3, r2
 8006258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d044      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	4b47      	ldr	r3, [pc, #284]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d119      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e07f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d003      	beq.n	800628e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628e:	4b3f      	ldr	r3, [pc, #252]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e06f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629e:	4b3b      	ldr	r3, [pc, #236]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e067      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ae:	4b37      	ldr	r3, [pc, #220]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 0203 	bic.w	r2, r3, #3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4934      	ldr	r1, [pc, #208]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062c0:	f7fc fb34 	bl	800292c <HAL_GetTick>
 80062c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	e00a      	b.n	80062de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c8:	f7fc fb30 	bl	800292c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e04f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062de:	4b2b      	ldr	r3, [pc, #172]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 020c 	and.w	r2, r3, #12
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d1eb      	bne.n	80062c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d20c      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e032      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006324:	4b19      	ldr	r3, [pc, #100]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4916      	ldr	r1, [pc, #88]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	490e      	ldr	r1, [pc, #56]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006356:	f000 f821 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800635a:	4602      	mov	r2, r0
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	490a      	ldr	r1, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x1c0>)
 8006368:	5ccb      	ldrb	r3, [r1, r3]
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <HAL_RCC_ClockConfig+0x1c4>)
 8006370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_RCC_ClockConfig+0x1c8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fc fa94 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40023c00 	.word	0x40023c00
 800638c:	40023800 	.word	0x40023800
 8006390:	0800b0e4 	.word	0x0800b0e4
 8006394:	20000108 	.word	0x20000108
 8006398:	2000010c 	.word	0x2000010c

0800639c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a0:	b094      	sub	sp, #80	; 0x50
 80063a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	647b      	str	r3, [r7, #68]	; 0x44
 80063a8:	2300      	movs	r3, #0
 80063aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ac:	2300      	movs	r3, #0
 80063ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063b4:	4b79      	ldr	r3, [pc, #484]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d00d      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x40>
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	f200 80e1 	bhi.w	8006588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0x34>
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d003      	beq.n	80063d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ce:	e0db      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063d0:	4b73      	ldr	r3, [pc, #460]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063d4:	e0db      	b.n	800658e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063d6:	4b73      	ldr	r3, [pc, #460]	; (80065a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063da:	e0d8      	b.n	800658e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063dc:	4b6f      	ldr	r3, [pc, #444]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063e6:	4b6d      	ldr	r3, [pc, #436]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d063      	beq.n	80064ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f2:	4b6a      	ldr	r3, [pc, #424]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	2200      	movs	r2, #0
 80063fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
 8006406:	2300      	movs	r3, #0
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800640e:	4622      	mov	r2, r4
 8006410:	462b      	mov	r3, r5
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	0159      	lsls	r1, r3, #5
 800641c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006420:	0150      	lsls	r0, r2, #5
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4621      	mov	r1, r4
 8006428:	1a51      	subs	r1, r2, r1
 800642a:	6139      	str	r1, [r7, #16]
 800642c:	4629      	mov	r1, r5
 800642e:	eb63 0301 	sbc.w	r3, r3, r1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006440:	4659      	mov	r1, fp
 8006442:	018b      	lsls	r3, r1, #6
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800644a:	4651      	mov	r1, sl
 800644c:	018a      	lsls	r2, r1, #6
 800644e:	4651      	mov	r1, sl
 8006450:	ebb2 0801 	subs.w	r8, r2, r1
 8006454:	4659      	mov	r1, fp
 8006456:	eb63 0901 	sbc.w	r9, r3, r1
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800646a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800646e:	4690      	mov	r8, r2
 8006470:	4699      	mov	r9, r3
 8006472:	4623      	mov	r3, r4
 8006474:	eb18 0303 	adds.w	r3, r8, r3
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	462b      	mov	r3, r5
 800647c:	eb49 0303 	adc.w	r3, r9, r3
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800648e:	4629      	mov	r1, r5
 8006490:	024b      	lsls	r3, r1, #9
 8006492:	4621      	mov	r1, r4
 8006494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006498:	4621      	mov	r1, r4
 800649a:	024a      	lsls	r2, r1, #9
 800649c:	4610      	mov	r0, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a2:	2200      	movs	r2, #0
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ac:	f7f9 fef8 	bl	80002a0 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4613      	mov	r3, r2
 80064b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b8:	e058      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ba:	4b38      	ldr	r3, [pc, #224]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	099b      	lsrs	r3, r3, #6
 80064c0:	2200      	movs	r2, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	4611      	mov	r1, r2
 80064c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	2300      	movs	r3, #0
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	f04f 0000 	mov.w	r0, #0
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	0159      	lsls	r1, r3, #5
 80064e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e6:	0150      	lsls	r0, r2, #5
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4641      	mov	r1, r8
 80064ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80064f2:	4649      	mov	r1, r9
 80064f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800650c:	ebb2 040a 	subs.w	r4, r2, sl
 8006510:	eb63 050b 	sbc.w	r5, r3, fp
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	00eb      	lsls	r3, r5, #3
 800651e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006522:	00e2      	lsls	r2, r4, #3
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	4643      	mov	r3, r8
 800652a:	18e3      	adds	r3, r4, r3
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	464b      	mov	r3, r9
 8006530:	eb45 0303 	adc.w	r3, r5, r3
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006542:	4629      	mov	r1, r5
 8006544:	028b      	lsls	r3, r1, #10
 8006546:	4621      	mov	r1, r4
 8006548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800654c:	4621      	mov	r1, r4
 800654e:	028a      	lsls	r2, r1, #10
 8006550:	4610      	mov	r0, r2
 8006552:	4619      	mov	r1, r3
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	2200      	movs	r2, #0
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	61fa      	str	r2, [r7, #28]
 800655c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006560:	f7f9 fe9e 	bl	80002a0 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4613      	mov	r3, r2
 800656a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <HAL_RCC_GetSysClockFreq+0x200>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	0c1b      	lsrs	r3, r3, #16
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	3301      	adds	r3, #1
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800657c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800657e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006586:	e002      	b.n	800658e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800658a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800658c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006590:	4618      	mov	r0, r3
 8006592:	3750      	adds	r7, #80	; 0x50
 8006594:	46bd      	mov	sp, r7
 8006596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800
 80065a0:	00f42400 	.word	0x00f42400
 80065a4:	007a1200 	.word	0x007a1200

080065a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065ac:	4b03      	ldr	r3, [pc, #12]	; (80065bc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ae:	681b      	ldr	r3, [r3, #0]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000108 	.word	0x20000108

080065c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065c4:	f7ff fff0 	bl	80065a8 <HAL_RCC_GetHCLKFreq>
 80065c8:	4602      	mov	r2, r0
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	0a9b      	lsrs	r3, r3, #10
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	4903      	ldr	r1, [pc, #12]	; (80065e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065d6:	5ccb      	ldrb	r3, [r1, r3]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40023800 	.word	0x40023800
 80065e4:	0800b0f4 	.word	0x0800b0f4

080065e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065ec:	f7ff ffdc 	bl	80065a8 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0b5b      	lsrs	r3, r3, #13
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4903      	ldr	r1, [pc, #12]	; (800660c <HAL_RCC_GetPCLK2Freq+0x24>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40023800 	.word	0x40023800
 800660c:	0800b0f4 	.word	0x0800b0f4

08006610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	d075      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006644:	4b91      	ldr	r3, [pc, #580]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800664a:	f7fc f96f 	bl	800292c <HAL_GetTick>
 800664e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006650:	e008      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006652:	f7fc f96b 	bl	800292c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e189      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006664:	4b8a      	ldr	r3, [pc, #552]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d009      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	071b      	lsls	r3, r3, #28
 8006688:	4981      	ldr	r1, [pc, #516]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01f      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800669c:	4b7c      	ldr	r3, [pc, #496]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a2:	0f1b      	lsrs	r3, r3, #28
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	019a      	lsls	r2, r3, #6
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	061b      	lsls	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	071b      	lsls	r3, r3, #28
 80066bc:	4974      	ldr	r1, [pc, #464]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066c4:	4b72      	ldr	r3, [pc, #456]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ca:	f023 021f 	bic.w	r2, r3, #31
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	496e      	ldr	r1, [pc, #440]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	019a      	lsls	r2, r3, #6
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	061b      	lsls	r3, r3, #24
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	071b      	lsls	r3, r3, #28
 80066fc:	4964      	ldr	r1, [pc, #400]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006704:	4b61      	ldr	r3, [pc, #388]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800670a:	f7fc f90f 	bl	800292c <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006712:	f7fc f90b 	bl	800292c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e129      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006724:	4b5a      	ldr	r3, [pc, #360]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006744:	2b00      	cmp	r3, #0
 8006746:	d079      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006748:	4b52      	ldr	r3, [pc, #328]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800674e:	f7fc f8ed 	bl	800292c <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006756:	f7fc f8e9 	bl	800292c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e107      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006768:	4b49      	ldr	r3, [pc, #292]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d0ef      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006782:	4b43      	ldr	r3, [pc, #268]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	0f1b      	lsrs	r3, r3, #28
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	019a      	lsls	r2, r3, #6
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	431a      	orrs	r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	071b      	lsls	r3, r3, #28
 80067a2:	493b      	ldr	r1, [pc, #236]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067aa:	4b39      	ldr	r3, [pc, #228]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	4934      	ldr	r1, [pc, #208]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01e      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067d0:	4b2f      	ldr	r3, [pc, #188]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d6:	0e1b      	lsrs	r3, r3, #24
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	019a      	lsls	r2, r3, #6
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	061b      	lsls	r3, r3, #24
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	071b      	lsls	r3, r3, #28
 80067f0:	4927      	ldr	r1, [pc, #156]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	4922      	ldr	r1, [pc, #136]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800680e:	4b21      	ldr	r3, [pc, #132]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006814:	f7fc f88a 	bl	800292c <HAL_GetTick>
 8006818:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800681c:	f7fc f886 	bl	800292c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e0a4      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800682e:	4b18      	ldr	r3, [pc, #96]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683a:	d1ef      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 808b 	beq.w	8006960 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4a0f      	ldr	r2, [pc, #60]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006858:	6413      	str	r3, [r2, #64]	; 0x40
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800686c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006870:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006872:	f7fc f85b 	bl	800292c <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006878:	e010      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800687a:	f7fc f857 	bl	800292c <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d909      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e075      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800688c:	42470068 	.word	0x42470068
 8006890:	40023800 	.word	0x40023800
 8006894:	42470070 	.word	0x42470070
 8006898:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800689c:	4b38      	ldr	r3, [pc, #224]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0e8      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068a8:	4b36      	ldr	r3, [pc, #216]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d02f      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d028      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068d6:	4b2c      	ldr	r3, [pc, #176]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068e2:	4b28      	ldr	r3, [pc, #160]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d114      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068ee:	f7fc f81d 	bl	800292c <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fc f819 	bl	800292c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e035      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006924:	d10d      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006926:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693a:	4912      	ldr	r1, [pc, #72]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]
 8006940:	e005      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006948:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800694c:	6093      	str	r3, [r2, #8]
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695a:	490a      	ldr	r1, [pc, #40]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800695c:	4313      	orrs	r3, r2
 800695e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006974:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40007000 	.word	0x40007000
 8006984:	40023800 	.word	0x40023800
 8006988:	42470e40 	.word	0x42470e40
 800698c:	424711e0 	.word	0x424711e0

08006990 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e066      	b.n	8006a74 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7f5b      	ldrb	r3, [r3, #29]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb fce6 	bl	8002388 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ca      	movs	r2, #202	; 0xca
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2253      	movs	r2, #83	; 0x53
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fbce 	bl	8007174 <RTC_EnterInitMode>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d12c      	bne.n	8006a3c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68d2      	ldr	r2, [r2, #12]
 8006a1c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6919      	ldr	r1, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	041a      	lsls	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbd5 	bl	80071e2 <RTC_ExitInitMode>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d113      	bne.n	8006a6a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22ff      	movs	r2, #255	; 0xff
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	7f1b      	ldrb	r3, [r3, #28]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_RTC_SetTime+0x1c>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e087      	b.n	8006ba8 <HAL_RTC_SetTime+0x12c>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d126      	bne.n	8006af8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fbb2 	bl	800722c <RTC_ByteToBcd2>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fbab 	bl	800722c <RTC_ByteToBcd2>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ada:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	789b      	ldrb	r3, [r3, #2]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fba3 	bl	800722c <RTC_ByteToBcd2>
 8006ae6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ae8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e018      	b.n	8006b2a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b18:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b1e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	22ca      	movs	r2, #202	; 0xca
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2253      	movs	r2, #83	; 0x53
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fb1a 	bl	8007174 <RTC_EnterInitMode>
 8006b40:	4603      	mov	r3, r0
 8006b42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d120      	bne.n	8006b8c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6899      	ldr	r1, [r3, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fb2d 	bl	80071e2 <RTC_ExitInitMode>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b8c:	7cfb      	ldrb	r3, [r7, #19]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	771a      	strb	r2, [r3, #28]

  return status;
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}

08006bb0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006be6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	0c1b      	lsrs	r3, r3, #16
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	0d9b      	lsrs	r3, r3, #22
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11a      	bne.n	8006c62 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fb18 	bl	8007266 <RTC_Bcd2ToByte>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fb0f 	bl	8007266 <RTC_Bcd2ToByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	789b      	ldrb	r3, [r3, #2]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fb06 	bl	8007266 <RTC_Bcd2ToByte>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7f1b      	ldrb	r3, [r3, #28]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_RTC_SetDate+0x1c>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e071      	b.n	8006d6c <HAL_RTC_SetDate+0x100>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2202      	movs	r2, #2
 8006c92:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10e      	bne.n	8006cb8 <HAL_RTC_SetDate+0x4c>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d008      	beq.n	8006cb8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	330a      	adds	r3, #10
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d11c      	bne.n	8006cf8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	78db      	ldrb	r3, [r3, #3]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fab2 	bl	800722c <RTC_ByteToBcd2>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 faab 	bl	800722c <RTC_ByteToBcd2>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cda:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	789b      	ldrb	r3, [r3, #2]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 faa3 	bl	800722c <RTC_ByteToBcd2>
 8006ce6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ce8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e00e      	b.n	8006d16 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	78db      	ldrb	r3, [r3, #3]
 8006cfc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d04:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d0a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	22ca      	movs	r2, #202	; 0xca
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2253      	movs	r2, #83	; 0x53
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fa24 	bl	8007174 <RTC_EnterInitMode>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d30:	7cfb      	ldrb	r3, [r7, #19]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fa4b 	bl	80071e2 <RTC_ExitInitMode>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	771a      	strb	r2, [r3, #28]

  return status;
 8006d6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd90      	pop	{r4, r7, pc}

08006d74 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	0c1b      	lsrs	r3, r3, #16
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	0b5b      	lsrs	r3, r3, #13
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11a      	bne.n	8006e08 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fa45 	bl	8007266 <RTC_Bcd2ToByte>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fa3c 	bl	8007266 <RTC_Bcd2ToByte>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	789b      	ldrb	r3, [r3, #2]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fa33 	bl	8007266 <RTC_Bcd2ToByte>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006e20:	4b9a      	ldr	r3, [pc, #616]	; (800708c <HAL_RTC_SetAlarm_IT+0x278>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a9a      	ldr	r2, [pc, #616]	; (8007090 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	0adb      	lsrs	r3, r3, #11
 8006e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e30:	fb02 f303 	mul.w	r3, r2, r3
 8006e34:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	7f1b      	ldrb	r3, [r3, #28]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_RTC_SetAlarm_IT+0x36>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e11c      	b.n	8007084 <HAL_RTC_SetAlarm_IT+0x270>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2202      	movs	r2, #2
 8006e54:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d137      	bne.n	8006ecc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f9d9 	bl	800722c <RTC_ByteToBcd2>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 f9d2 	bl	800722c <RTC_ByteToBcd2>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006e8c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	789b      	ldrb	r3, [r3, #2]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f9ca 	bl	800722c <RTC_ByteToBcd2>
 8006e98:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e9a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006ea4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f9bc 	bl	800722c <RTC_ByteToBcd2>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006eb8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006ec0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e023      	b.n	8006f14 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006eec:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006ef2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	78db      	ldrb	r3, [r3, #3]
 8006ef8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006efa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006f04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006f0a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006f10:	4313      	orrs	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	22ca      	movs	r2, #202	; 0xca
 8006f26:	625a      	str	r2, [r3, #36]	; 0x24
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2253      	movs	r2, #83	; 0x53
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f38:	d141      	bne.n	8006fbe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f48:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006f5a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	617a      	str	r2, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	22ff      	movs	r2, #255	; 0xff
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2203      	movs	r2, #3
 8006f72:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e082      	b.n	8007084 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0e7      	beq.n	8006f5c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006faa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	e04b      	b.n	8007056 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fcc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006fde:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006fe0:	4b2a      	ldr	r3, [pc, #168]	; (800708c <HAL_RTC_SetAlarm_IT+0x278>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	0adb      	lsrs	r3, r3, #11
 8006fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ff0:	fb02 f303 	mul.w	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	617a      	str	r2, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	22ff      	movs	r2, #255	; 0xff
 8007006:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2203      	movs	r2, #3
 800700c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e035      	b.n	8007084 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0e7      	beq.n	8006ff6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007044:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007054:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <HAL_RTC_SetAlarm_IT+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <HAL_RTC_SetAlarm_IT+0x280>)
 800705c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007060:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <HAL_RTC_SetAlarm_IT+0x280>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <HAL_RTC_SetAlarm_IT+0x280>)
 8007068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	22ff      	movs	r2, #255	; 0xff
 8007074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3724      	adds	r7, #36	; 0x24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd90      	pop	{r4, r7, pc}
 800708c:	20000108 	.word	0x20000108
 8007090:	10624dd3 	.word	0x10624dd3
 8007094:	40013c00 	.word	0x40013c00

08007098 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d012      	beq.n	80070d4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fa ff65 	bl	8001f8c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80070d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d012      	beq.n	8007108 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f8d4 	bl	800729e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007106:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RTC_AlarmIRQHandler+0x88>)
 800710a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800710e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	775a      	strb	r2, [r3, #29]
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40013c00 	.word	0x40013c00

08007124 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800713e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007140:	f7fb fbf4 	bl	800292c <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007146:	e009      	b.n	800715c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007148:	f7fb fbf0 	bl	800292c <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007156:	d901      	bls.n	800715c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e007      	b.n	800716c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0ee      	beq.n	8007148 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d122      	bne.n	80071d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071a2:	f7fb fbc3 	bl	800292c <HAL_GetTick>
 80071a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071a8:	e00c      	b.n	80071c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071aa:	f7fb fbbf 	bl	800292c <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b8:	d904      	bls.n	80071c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2204      	movs	r2, #4
 80071be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <RTC_EnterInitMode+0x64>
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d1e8      	bne.n	80071aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ff89 	bl	8007124 <HAL_RTC_WaitForSynchro>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2204      	movs	r2, #4
 800721c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800723a:	e005      	b.n	8007248 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	3301      	adds	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	3b0a      	subs	r3, #10
 8007246:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b09      	cmp	r3, #9
 800724c:	d8f6      	bhi.n	800723c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	b2da      	uxtb	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	4313      	orrs	r3, r2
 8007258:	b2db      	uxtb	r3, r3
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	4603      	mov	r3, r0
 800726e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	091b      	lsrs	r3, r3, #4
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	0092      	lsls	r2, r2, #2
 800727e:	4413      	add	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	b2da      	uxtb	r2, r3
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4413      	add	r3, r2
 8007290:	b2db      	uxtb	r3, r3
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e041      	b.n	8007348 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fb f87f 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f000 fd17 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d001      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e04e      	b.n	8007406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a23      	ldr	r2, [pc, #140]	; (8007414 <HAL_TIM_Base_Start_IT+0xc4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d01d      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1f      	ldr	r2, [pc, #124]	; (8007418 <HAL_TIM_Base_Start_IT+0xc8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1e      	ldr	r2, [pc, #120]	; (800741c <HAL_TIM_Base_Start_IT+0xcc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <HAL_TIM_Base_Start_IT+0xd0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <HAL_TIM_Base_Start_IT+0xd4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	; (8007428 <HAL_TIM_Base_Start_IT+0xd8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a18      	ldr	r2, [pc, #96]	; (800742c <HAL_TIM_Base_Start_IT+0xdc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d111      	bne.n	80073f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d010      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0201 	orr.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f2:	e007      	b.n	8007404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40010000 	.word	0x40010000
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40010400 	.word	0x40010400
 8007428:	40014000 	.word	0x40014000
 800742c:	40001800 	.word	0x40001800

08007430 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6a1a      	ldr	r2, [r3, #32]
 800744e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007452:	4013      	ands	r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10f      	bne.n	8007478 <HAL_TIM_Base_Stop_IT+0x48>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	f240 4344 	movw	r3, #1092	; 0x444
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <HAL_TIM_Base_Stop_IT+0x48>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e041      	b.n	8007524 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f839 	bl	800752c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 fc29 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_TIM_PWM_Start+0x24>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	e022      	b.n	80075aa <HAL_TIM_PWM_Start+0x6a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b04      	cmp	r3, #4
 8007568:	d109      	bne.n	800757e <HAL_TIM_PWM_Start+0x3e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	e015      	b.n	80075aa <HAL_TIM_PWM_Start+0x6a>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b08      	cmp	r3, #8
 8007582:	d109      	bne.n	8007598 <HAL_TIM_PWM_Start+0x58>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	bf14      	ite	ne
 8007590:	2301      	movne	r3, #1
 8007592:	2300      	moveq	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	e008      	b.n	80075aa <HAL_TIM_PWM_Start+0x6a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	bf14      	ite	ne
 80075a4:	2301      	movne	r3, #1
 80075a6:	2300      	moveq	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e07c      	b.n	80076ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <HAL_TIM_PWM_Start+0x82>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c0:	e013      	b.n	80075ea <HAL_TIM_PWM_Start+0xaa>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x92>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075d0:	e00b      	b.n	80075ea <HAL_TIM_PWM_Start+0xaa>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start+0xa2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e0:	e003      	b.n	80075ea <HAL_TIM_PWM_Start+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fe80 	bl	80082f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <HAL_TIM_PWM_Start+0x174>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIM_PWM_Start+0xcc>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <HAL_TIM_PWM_Start+0x178>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d101      	bne.n	8007610 <HAL_TIM_PWM_Start+0xd0>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <HAL_TIM_PWM_Start+0xd2>
 8007610:	2300      	movs	r3, #0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <HAL_TIM_PWM_Start+0x174>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d022      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007638:	d01d      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_TIM_PWM_Start+0x17c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_TIM_PWM_Start+0x180>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIM_PWM_Start+0x184>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00e      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <HAL_TIM_PWM_Start+0x178>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_TIM_PWM_Start+0x188>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_TIM_PWM_Start+0x136>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <HAL_TIM_PWM_Start+0x18c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d111      	bne.n	800769a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b06      	cmp	r3, #6
 8007686:	d010      	beq.n	80076aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	e007      	b.n	80076aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fe08 	bl	80082f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <HAL_TIM_PWM_Stop+0xd8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_TIM_PWM_Stop+0x2c>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2d      	ldr	r2, [pc, #180]	; (80077ac <HAL_TIM_PWM_Stop+0xdc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_TIM_PWM_Stop+0x30>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_TIM_PWM_Stop+0x32>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d017      	beq.n	8007736 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_TIM_PWM_Stop+0x66>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	f240 4344 	movw	r3, #1092	; 0x444
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d107      	bne.n	8007736 <HAL_TIM_PWM_Stop+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a1a      	ldr	r2, [r3, #32]
 800773c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007740:	4013      	ands	r3, r2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10f      	bne.n	8007766 <HAL_TIM_PWM_Stop+0x96>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	f240 4344 	movw	r3, #1092	; 0x444
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <HAL_TIM_PWM_Stop+0x96>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <HAL_TIM_PWM_Stop+0xa6>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007774:	e013      	b.n	800779e <HAL_TIM_PWM_Stop+0xce>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d104      	bne.n	8007786 <HAL_TIM_PWM_Stop+0xb6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007784:	e00b      	b.n	800779e <HAL_TIM_PWM_Stop+0xce>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d104      	bne.n	8007796 <HAL_TIM_PWM_Stop+0xc6>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007794:	e003      	b.n	800779e <HAL_TIM_PWM_Stop+0xce>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40010400 	.word	0x40010400

080077b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0202 	mvn.w	r2, #2
 80077dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa77 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa69 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fa7a 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b04      	cmp	r3, #4
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b04      	cmp	r3, #4
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0204 	mvn.w	r2, #4
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa4d 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa3f 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fa50 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b08      	cmp	r3, #8
 800786c:	d122      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b08      	cmp	r3, #8
 800787a:	d11b      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0208 	mvn.w	r2, #8
 8007884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2204      	movs	r2, #4
 800788a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa23 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 80078a0:	e005      	b.n	80078ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa15 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa26 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d122      	bne.n	8007908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d11b      	bne.n	8007908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0210 	mvn.w	r2, #16
 80078d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2208      	movs	r2, #8
 80078de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9f9 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 80078f4:	e005      	b.n	8007902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9eb 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9fc 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d10e      	bne.n	8007934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b01      	cmp	r3, #1
 8007922:	d107      	bne.n	8007934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0201 	mvn.w	r2, #1
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fa fb50 	bl	8001fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d10e      	bne.n	8007960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d107      	bne.n	8007960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fd78 	bl	8008450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d10e      	bne.n	800798c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d107      	bne.n	800798c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9c1 	bl	8007d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b20      	cmp	r3, #32
 8007998:	d10e      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d107      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f06f 0220 	mvn.w	r2, #32
 80079b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fd42 	bl	800843c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079da:	2302      	movs	r3, #2
 80079dc:	e0ae      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	f200 809f 	bhi.w	8007b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079ee:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007b2d 	.word	0x08007b2d
 80079fc:	08007b2d 	.word	0x08007b2d
 8007a00:	08007b2d 	.word	0x08007b2d
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007b2d 	.word	0x08007b2d
 8007a0c:	08007b2d 	.word	0x08007b2d
 8007a10:	08007b2d 	.word	0x08007b2d
 8007a14:	08007aab 	.word	0x08007aab
 8007a18:	08007b2d 	.word	0x08007b2d
 8007a1c:	08007b2d 	.word	0x08007b2d
 8007a20:	08007b2d 	.word	0x08007b2d
 8007a24:	08007aeb 	.word	0x08007aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fa18 	bl	8007e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0208 	orr.w	r2, r2, #8
 8007a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0204 	bic.w	r2, r2, #4
 8007a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6999      	ldr	r1, [r3, #24]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	619a      	str	r2, [r3, #24]
      break;
 8007a66:	e064      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fa68 	bl	8007f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6999      	ldr	r1, [r3, #24]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	619a      	str	r2, [r3, #24]
      break;
 8007aa8:	e043      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fabd 	bl	8008030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0208 	orr.w	r2, r2, #8
 8007ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0204 	bic.w	r2, r2, #4
 8007ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69d9      	ldr	r1, [r3, #28]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	61da      	str	r2, [r3, #28]
      break;
 8007ae8:	e023      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fb11 	bl	8008118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69d9      	ldr	r1, [r3, #28]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	021a      	lsls	r2, r3, #8
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	61da      	str	r2, [r3, #28]
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIM_ConfigClockSource+0x1c>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e0b4      	b.n	8007cca <HAL_TIM_ConfigClockSource+0x186>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b98:	d03e      	beq.n	8007c18 <HAL_TIM_ConfigClockSource+0xd4>
 8007b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9e:	f200 8087 	bhi.w	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	f000 8086 	beq.w	8007cb6 <HAL_TIM_ConfigClockSource+0x172>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d87f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b70      	cmp	r3, #112	; 0x70
 8007bb2:	d01a      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0xa6>
 8007bb4:	2b70      	cmp	r3, #112	; 0x70
 8007bb6:	d87b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b60      	cmp	r3, #96	; 0x60
 8007bba:	d050      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x11a>
 8007bbc:	2b60      	cmp	r3, #96	; 0x60
 8007bbe:	d877      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b50      	cmp	r3, #80	; 0x50
 8007bc2:	d03c      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0xfa>
 8007bc4:	2b50      	cmp	r3, #80	; 0x50
 8007bc6:	d873      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d058      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x13a>
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d86f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	d064      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d86b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d060      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d867      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d05c      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d05a      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007be8:	e062      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f000 fb5d 	bl	80082b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	609a      	str	r2, [r3, #8]
      break;
 8007c16:	e04f      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f000 fb46 	bl	80082b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c3a:	609a      	str	r2, [r3, #8]
      break;
 8007c3c:	e03c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 faba 	bl	80081c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2150      	movs	r1, #80	; 0x50
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fb13 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e02c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 fad9 	bl	8008222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2160      	movs	r1, #96	; 0x60
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fb03 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e01c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6859      	ldr	r1, [r3, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f000 fa9a 	bl	80081c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2140      	movs	r1, #64	; 0x40
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 faf3 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007c9c:	e00c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f000 faea 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007cae:	e003      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e000      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
	...

08007d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a40      	ldr	r2, [pc, #256]	; (8007e38 <TIM_Base_SetConfig+0x114>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d013      	beq.n	8007d64 <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d42:	d00f      	beq.n	8007d64 <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a3d      	ldr	r2, [pc, #244]	; (8007e3c <TIM_Base_SetConfig+0x118>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a3c      	ldr	r2, [pc, #240]	; (8007e40 <TIM_Base_SetConfig+0x11c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a3b      	ldr	r2, [pc, #236]	; (8007e44 <TIM_Base_SetConfig+0x120>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a3a      	ldr	r2, [pc, #232]	; (8007e48 <TIM_Base_SetConfig+0x124>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d108      	bne.n	8007d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <TIM_Base_SetConfig+0x114>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d02b      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d027      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2c      	ldr	r2, [pc, #176]	; (8007e3c <TIM_Base_SetConfig+0x118>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d023      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2b      	ldr	r2, [pc, #172]	; (8007e40 <TIM_Base_SetConfig+0x11c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01f      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <TIM_Base_SetConfig+0x120>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d01b      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a29      	ldr	r2, [pc, #164]	; (8007e48 <TIM_Base_SetConfig+0x124>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d017      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a28      	ldr	r2, [pc, #160]	; (8007e4c <TIM_Base_SetConfig+0x128>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a27      	ldr	r2, [pc, #156]	; (8007e50 <TIM_Base_SetConfig+0x12c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00f      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <TIM_Base_SetConfig+0x130>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a25      	ldr	r2, [pc, #148]	; (8007e58 <TIM_Base_SetConfig+0x134>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d007      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <TIM_Base_SetConfig+0x138>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a23      	ldr	r2, [pc, #140]	; (8007e60 <TIM_Base_SetConfig+0x13c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d108      	bne.n	8007de8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a0a      	ldr	r2, [pc, #40]	; (8007e38 <TIM_Base_SetConfig+0x114>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_Base_SetConfig+0xf8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a0c      	ldr	r2, [pc, #48]	; (8007e48 <TIM_Base_SetConfig+0x124>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d103      	bne.n	8007e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	615a      	str	r2, [r3, #20]
}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	40000800 	.word	0x40000800
 8007e44:	40000c00 	.word	0x40000c00
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800
 8007e58:	40001800 	.word	0x40001800
 8007e5c:	40001c00 	.word	0x40001c00
 8007e60:	40002000 	.word	0x40002000

08007e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0201 	bic.w	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f023 0302 	bic.w	r3, r3, #2
 8007eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <TIM_OC1_SetConfig+0xd8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_OC1_SetConfig+0x64>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <TIM_OC1_SetConfig+0xdc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10c      	bne.n	8007ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f023 0308 	bic.w	r3, r3, #8
 8007ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f023 0304 	bic.w	r3, r3, #4
 8007ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <TIM_OC1_SetConfig+0xd8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d003      	beq.n	8007ef2 <TIM_OC1_SetConfig+0x8e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <TIM_OC1_SetConfig+0xdc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d111      	bne.n	8007f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	621a      	str	r2, [r3, #32]
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40010400 	.word	0x40010400

08007f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f023 0210 	bic.w	r2, r3, #16
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0320 	bic.w	r3, r3, #32
 8007f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a22      	ldr	r2, [pc, #136]	; (8008028 <TIM_OC2_SetConfig+0xe4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_OC2_SetConfig+0x68>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	; (800802c <TIM_OC2_SetConfig+0xe8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d10d      	bne.n	8007fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <TIM_OC2_SetConfig+0xe4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC2_SetConfig+0x94>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a16      	ldr	r2, [pc, #88]	; (800802c <TIM_OC2_SetConfig+0xe8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d113      	bne.n	8008000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010000 	.word	0x40010000
 800802c:	40010400 	.word	0x40010400

08008030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a21      	ldr	r2, [pc, #132]	; (8008110 <TIM_OC3_SetConfig+0xe0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d003      	beq.n	8008096 <TIM_OC3_SetConfig+0x66>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a20      	ldr	r2, [pc, #128]	; (8008114 <TIM_OC3_SetConfig+0xe4>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d10d      	bne.n	80080b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800809c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a16      	ldr	r2, [pc, #88]	; (8008110 <TIM_OC3_SetConfig+0xe0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC3_SetConfig+0x92>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <TIM_OC3_SetConfig+0xe4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d113      	bne.n	80080ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	621a      	str	r2, [r3, #32]
}
 8008104:	bf00      	nop
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	40010000 	.word	0x40010000
 8008114:	40010400 	.word	0x40010400

08008118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a12      	ldr	r2, [pc, #72]	; (80081bc <TIM_OC4_SetConfig+0xa4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d003      	beq.n	8008180 <TIM_OC4_SetConfig+0x68>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a11      	ldr	r2, [pc, #68]	; (80081c0 <TIM_OC4_SetConfig+0xa8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d109      	bne.n	8008194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	019b      	lsls	r3, r3, #6
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40010400 	.word	0x40010400

080081c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f023 0201 	bic.w	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f023 030a 	bic.w	r3, r3, #10
 8008200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	f023 0210 	bic.w	r2, r3, #16
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800824c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	031b      	lsls	r3, r3, #12
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800825e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	f043 0307 	orr.w	r3, r3, #7
 80082a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	021a      	lsls	r2, r3, #8
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	431a      	orrs	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4313      	orrs	r3, r2
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	609a      	str	r2, [r3, #8]
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 031f 	and.w	r3, r3, #31
 800830a:	2201      	movs	r2, #1
 800830c:	fa02 f303 	lsl.w	r3, r2, r3
 8008310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	43db      	mvns	r3, r3
 800831a:	401a      	ands	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1a      	ldr	r2, [r3, #32]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	fa01 f303 	lsl.w	r3, r1, r3
 8008330:	431a      	orrs	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008358:	2302      	movs	r3, #2
 800835a:	e05a      	b.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a21      	ldr	r2, [pc, #132]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a8:	d01d      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1a      	ldr	r2, [pc, #104]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a18      	ldr	r2, [pc, #96]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a17      	ldr	r2, [pc, #92]	; (8008434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a15      	ldr	r2, [pc, #84]	; (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d10c      	bne.n	8008400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	40010400 	.word	0x40010400
 8008434:	40014000 	.word	0x40014000
 8008438:	40001800 	.word	0x40001800

0800843c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e03f      	b.n	80084f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fa f816 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	; 0x24
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fd7b 	bl	8008fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695a      	ldr	r2, [r3, #20]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b08a      	sub	sp, #40	; 0x28
 8008502:	af02      	add	r7, sp, #8
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	603b      	str	r3, [r7, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b20      	cmp	r3, #32
 800851c:	d17c      	bne.n	8008618 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_UART_Transmit+0x2c>
 8008524:	88fb      	ldrh	r3, [r7, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e075      	b.n	800861a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008534:	2b01      	cmp	r3, #1
 8008536:	d101      	bne.n	800853c <HAL_UART_Transmit+0x3e>
 8008538:	2302      	movs	r3, #2
 800853a:	e06e      	b.n	800861a <HAL_UART_Transmit+0x11c>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2221      	movs	r2, #33	; 0x21
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008552:	f7fa f9eb 	bl	800292c <HAL_GetTick>
 8008556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	88fa      	ldrh	r2, [r7, #6]
 800855c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	88fa      	ldrh	r2, [r7, #6]
 8008562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856c:	d108      	bne.n	8008580 <HAL_UART_Transmit+0x82>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e003      	b.n	8008588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008590:	e02a      	b.n	80085e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2200      	movs	r2, #0
 800859a:	2180      	movs	r1, #128	; 0x80
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 faf9 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e036      	b.n	800861a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	3302      	adds	r3, #2
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	e007      	b.n	80085da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	3301      	adds	r3, #1
 80085d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085de:	b29b      	uxth	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1cf      	bne.n	8008592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2200      	movs	r2, #0
 80085fa:	2140      	movs	r1, #64	; 0x40
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fac9 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e006      	b.n	800861a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b0ba      	sub	sp, #232	; 0xe8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800864a:	2300      	movs	r3, #0
 800864c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008650:	2300      	movs	r3, #0
 8008652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10f      	bne.n	800868a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <HAL_UART_IRQHandler+0x66>
 8008676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbd3 	bl	8008e2e <UART_Receive_IT>
      return;
 8008688:	e256      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800868a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 80de 	beq.w	8008850 <HAL_UART_IRQHandler+0x22c>
 8008694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80d1 	beq.w	8008850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <HAL_UART_IRQHandler+0xae>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f043 0201 	orr.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <HAL_UART_IRQHandler+0xd2>
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f043 0202 	orr.w	r2, r3, #2
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <HAL_UART_IRQHandler+0xf6>
 8008702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	f043 0204 	orr.w	r2, r3, #4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d011      	beq.n	800874a <HAL_UART_IRQHandler+0x126>
 8008726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f043 0208 	orr.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 81ed 	beq.w	8008b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_UART_IRQHandler+0x14e>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb5e 	bl	8008e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <HAL_UART_IRQHandler+0x17a>
 8008796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04f      	beq.n	800883e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa66 	bl	8008c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d141      	bne.n	8008836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3314      	adds	r3, #20
 80087b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3314      	adds	r3, #20
 80087da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1d9      	bne.n	80087b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	4a7d      	ldr	r2, [pc, #500]	; (8008a00 <HAL_UART_IRQHandler+0x3dc>)
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	4618      	mov	r0, r3
 8008814:	f7fb f888 	bl	8003928 <HAL_DMA_Abort_IT>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d016      	beq.n	800884c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e00e      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f99a 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e00a      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f996 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e006      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f992 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800884a:	e170      	b.n	8008b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	bf00      	nop
    return;
 800884e:	e16e      	b.n	8008b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	2b01      	cmp	r3, #1
 8008856:	f040 814a 	bne.w	8008aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	f003 0310 	and.w	r3, r3, #16
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8143 	beq.w	8008aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 813c 	beq.w	8008aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	f040 80b4 	bne.w	8008a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8140 	beq.w	8008b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ba:	429a      	cmp	r2, r3
 80088bc:	f080 8139 	bcs.w	8008b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d2:	f000 8088 	beq.w	80089e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800890e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800891a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1d9      	bne.n	80088d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3314      	adds	r3, #20
 8008928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800894a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800894e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e1      	bne.n	8008922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3314      	adds	r3, #20
 8008964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800896e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3314      	adds	r3, #20
 800897e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e3      	bne.n	800895e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	330c      	adds	r3, #12
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b6:	f023 0310 	bic.w	r3, r3, #16
 80089ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80089ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e3      	bne.n	80089a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fa ff31 	bl	8003848 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8c0 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089fc:	e099      	b.n	8008b32 <HAL_UART_IRQHandler+0x50e>
 80089fe:	bf00      	nop
 8008a00:	08008d37 	.word	0x08008d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 808b 	beq.w	8008b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8086 	beq.w	8008b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e3      	bne.n	8008a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3314      	adds	r3, #20
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	623b      	str	r3, [r7, #32]
   return(result);
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a86:	633a      	str	r2, [r7, #48]	; 0x30
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e3      	bne.n	8008a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008acc:	61fa      	str	r2, [r7, #28]
 8008ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	69b9      	ldr	r1, [r7, #24]
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e3      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f848 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aec:	e023      	b.n	8008b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_UART_IRQHandler+0x4ea>
 8008afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f929 	bl	8008d5e <UART_Transmit_IT>
    return;
 8008b0c:	e014      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <HAL_UART_IRQHandler+0x514>
 8008b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f969 	bl	8008dfe <UART_EndTransmit_IT>
    return;
 8008b2c:	e004      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
    return;
 8008b2e:	bf00      	nop
 8008b30:	e002      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
      return;
 8008b32:	bf00      	nop
 8008b34:	e000      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
      return;
 8008b36:	bf00      	nop
  }
}
 8008b38:	37e8      	adds	r7, #232	; 0xe8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b090      	sub	sp, #64	; 0x40
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba4:	e050      	b.n	8008c48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d04c      	beq.n	8008c48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bb4:	f7f9 feba 	bl	800292c <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d241      	bcs.n	8008c48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	330c      	adds	r3, #12
 8008be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008be4:	637a      	str	r2, [r7, #52]	; 0x34
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	613b      	str	r3, [r7, #16]
   return(result);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f023 0301 	bic.w	r3, r3, #1
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3314      	adds	r3, #20
 8008c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c18:	623a      	str	r2, [r7, #32]
 8008c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	69f9      	ldr	r1, [r7, #28]
 8008c1e:	6a3a      	ldr	r2, [r7, #32]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e5      	bne.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e00f      	b.n	8008c68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4013      	ands	r3, r2
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	bf0c      	ite	eq
 8008c58:	2301      	moveq	r3, #1
 8008c5a:	2300      	movne	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	461a      	mov	r2, r3
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d09f      	beq.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3740      	adds	r7, #64	; 0x40
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b095      	sub	sp, #84	; 0x54
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	330c      	adds	r3, #12
 8008c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c98:	643a      	str	r2, [r7, #64]	; 0x40
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3314      	adds	r3, #20
 8008cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d119      	bne.n	8008d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	330c      	adds	r3, #12
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f023 0310 	bic.w	r3, r3, #16
 8008cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d08:	61ba      	str	r2, [r7, #24]
 8008d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e5      	bne.n	8008ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d2a:	bf00      	nop
 8008d2c:	3754      	adds	r7, #84	; 0x54
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff ff09 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b21      	cmp	r3, #33	; 0x21
 8008d70:	d13e      	bne.n	8008df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d114      	bne.n	8008da6 <UART_Transmit_IT+0x48>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d110      	bne.n	8008da6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	1c9a      	adds	r2, r3, #2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]
 8008da4:	e008      	b.n	8008db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	1c59      	adds	r1, r3, #1
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6211      	str	r1, [r2, #32]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10f      	bne.n	8008dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e000      	b.n	8008df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008df0:	2302      	movs	r3, #2
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fe8e 	bl	8008b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b08c      	sub	sp, #48	; 0x30
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b22      	cmp	r3, #34	; 0x22
 8008e40:	f040 80ab 	bne.w	8008f9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4c:	d117      	bne.n	8008e7e <UART_Receive_IT+0x50>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d113      	bne.n	8008e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	1c9a      	adds	r2, r3, #2
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e7c:	e026      	b.n	8008ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e90:	d007      	beq.n	8008ea2 <UART_Receive_IT+0x74>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10a      	bne.n	8008eb0 <UART_Receive_IT+0x82>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	e008      	b.n	8008ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d15a      	bne.n	8008f96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0220 	bic.w	r2, r2, #32
 8008eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695a      	ldr	r2, [r3, #20]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d135      	bne.n	8008f8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	613b      	str	r3, [r7, #16]
   return(result);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	623a      	str	r2, [r7, #32]
 8008f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	69f9      	ldr	r1, [r7, #28]
 8008f4c:	6a3a      	ldr	r2, [r7, #32]
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e5      	bne.n	8008f26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d10a      	bne.n	8008f7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fdf9 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
 8008f8a:	e002      	b.n	8008f92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fde1 	bl	8008b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e002      	b.n	8008f9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e000      	b.n	8008f9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f9a:	2302      	movs	r3, #2
  }
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3730      	adds	r7, #48	; 0x30
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa8:	b0c0      	sub	sp, #256	; 0x100
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc0:	68d9      	ldr	r1, [r3, #12]
 8008fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	ea40 0301 	orr.w	r3, r0, r1
 8008fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ffc:	f021 010c 	bic.w	r1, r1, #12
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800900a:	430b      	orrs	r3, r1
 800900c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800900e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901e:	6999      	ldr	r1, [r3, #24]
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	ea40 0301 	orr.w	r3, r0, r1
 800902a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b8f      	ldr	r3, [pc, #572]	; (8009270 <UART_SetConfig+0x2cc>)
 8009034:	429a      	cmp	r2, r3
 8009036:	d005      	beq.n	8009044 <UART_SetConfig+0xa0>
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b8d      	ldr	r3, [pc, #564]	; (8009274 <UART_SetConfig+0x2d0>)
 8009040:	429a      	cmp	r2, r3
 8009042:	d104      	bne.n	800904e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fd fad0 	bl	80065e8 <HAL_RCC_GetPCLK2Freq>
 8009048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800904c:	e003      	b.n	8009056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800904e:	f7fd fab7 	bl	80065c0 <HAL_RCC_GetPCLK1Freq>
 8009052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009060:	f040 810c 	bne.w	800927c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009068:	2200      	movs	r2, #0
 800906a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800906e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009076:	4622      	mov	r2, r4
 8009078:	462b      	mov	r3, r5
 800907a:	1891      	adds	r1, r2, r2
 800907c:	65b9      	str	r1, [r7, #88]	; 0x58
 800907e:	415b      	adcs	r3, r3
 8009080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009086:	4621      	mov	r1, r4
 8009088:	eb12 0801 	adds.w	r8, r2, r1
 800908c:	4629      	mov	r1, r5
 800908e:	eb43 0901 	adc.w	r9, r3, r1
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800909e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090a6:	4690      	mov	r8, r2
 80090a8:	4699      	mov	r9, r3
 80090aa:	4623      	mov	r3, r4
 80090ac:	eb18 0303 	adds.w	r3, r8, r3
 80090b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b4:	462b      	mov	r3, r5
 80090b6:	eb49 0303 	adc.w	r3, r9, r3
 80090ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090d2:	460b      	mov	r3, r1
 80090d4:	18db      	adds	r3, r3, r3
 80090d6:	653b      	str	r3, [r7, #80]	; 0x50
 80090d8:	4613      	mov	r3, r2
 80090da:	eb42 0303 	adc.w	r3, r2, r3
 80090de:	657b      	str	r3, [r7, #84]	; 0x54
 80090e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090e8:	f7f7 f8da 	bl	80002a0 <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4b61      	ldr	r3, [pc, #388]	; (8009278 <UART_SetConfig+0x2d4>)
 80090f2:	fba3 2302 	umull	r2, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	011c      	lsls	r4, r3, #4
 80090fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800910c:	4642      	mov	r2, r8
 800910e:	464b      	mov	r3, r9
 8009110:	1891      	adds	r1, r2, r2
 8009112:	64b9      	str	r1, [r7, #72]	; 0x48
 8009114:	415b      	adcs	r3, r3
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800911c:	4641      	mov	r1, r8
 800911e:	eb12 0a01 	adds.w	sl, r2, r1
 8009122:	4649      	mov	r1, r9
 8009124:	eb43 0b01 	adc.w	fp, r3, r1
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800913c:	4692      	mov	sl, r2
 800913e:	469b      	mov	fp, r3
 8009140:	4643      	mov	r3, r8
 8009142:	eb1a 0303 	adds.w	r3, sl, r3
 8009146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800914a:	464b      	mov	r3, r9
 800914c:	eb4b 0303 	adc.w	r3, fp, r3
 8009150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009168:	460b      	mov	r3, r1
 800916a:	18db      	adds	r3, r3, r3
 800916c:	643b      	str	r3, [r7, #64]	; 0x40
 800916e:	4613      	mov	r3, r2
 8009170:	eb42 0303 	adc.w	r3, r2, r3
 8009174:	647b      	str	r3, [r7, #68]	; 0x44
 8009176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800917a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800917e:	f7f7 f88f 	bl	80002a0 <__aeabi_uldivmod>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4611      	mov	r1, r2
 8009188:	4b3b      	ldr	r3, [pc, #236]	; (8009278 <UART_SetConfig+0x2d4>)
 800918a:	fba3 2301 	umull	r2, r3, r3, r1
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	2264      	movs	r2, #100	; 0x64
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	1acb      	subs	r3, r1, r3
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800919e:	4b36      	ldr	r3, [pc, #216]	; (8009278 <UART_SetConfig+0x2d4>)
 80091a0:	fba3 2302 	umull	r2, r3, r3, r2
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091ac:	441c      	add	r4, r3
 80091ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091c0:	4642      	mov	r2, r8
 80091c2:	464b      	mov	r3, r9
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80091c8:	415b      	adcs	r3, r3
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d0:	4641      	mov	r1, r8
 80091d2:	1851      	adds	r1, r2, r1
 80091d4:	6339      	str	r1, [r7, #48]	; 0x30
 80091d6:	4649      	mov	r1, r9
 80091d8:	414b      	adcs	r3, r1
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091e8:	4659      	mov	r1, fp
 80091ea:	00cb      	lsls	r3, r1, #3
 80091ec:	4651      	mov	r1, sl
 80091ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091f2:	4651      	mov	r1, sl
 80091f4:	00ca      	lsls	r2, r1, #3
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	4642      	mov	r2, r8
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009204:	464b      	mov	r3, r9
 8009206:	460a      	mov	r2, r1
 8009208:	eb42 0303 	adc.w	r3, r2, r3
 800920c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800921c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009224:	460b      	mov	r3, r1
 8009226:	18db      	adds	r3, r3, r3
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
 800922a:	4613      	mov	r3, r2
 800922c:	eb42 0303 	adc.w	r3, r2, r3
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800923a:	f7f7 f831 	bl	80002a0 <__aeabi_uldivmod>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <UART_SetConfig+0x2d4>)
 8009244:	fba3 1302 	umull	r1, r3, r3, r2
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	2164      	movs	r1, #100	; 0x64
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	3332      	adds	r3, #50	; 0x32
 8009256:	4a08      	ldr	r2, [pc, #32]	; (8009278 <UART_SetConfig+0x2d4>)
 8009258:	fba2 2303 	umull	r2, r3, r2, r3
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	f003 0207 	and.w	r2, r3, #7
 8009262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4422      	add	r2, r4
 800926a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800926c:	e106      	b.n	800947c <UART_SetConfig+0x4d8>
 800926e:	bf00      	nop
 8009270:	40011000 	.word	0x40011000
 8009274:	40011400 	.word	0x40011400
 8009278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800927c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009280:	2200      	movs	r2, #0
 8009282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800928a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800928e:	4642      	mov	r2, r8
 8009290:	464b      	mov	r3, r9
 8009292:	1891      	adds	r1, r2, r2
 8009294:	6239      	str	r1, [r7, #32]
 8009296:	415b      	adcs	r3, r3
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
 800929a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800929e:	4641      	mov	r1, r8
 80092a0:	1854      	adds	r4, r2, r1
 80092a2:	4649      	mov	r1, r9
 80092a4:	eb43 0501 	adc.w	r5, r3, r1
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	00eb      	lsls	r3, r5, #3
 80092b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092b6:	00e2      	lsls	r2, r4, #3
 80092b8:	4614      	mov	r4, r2
 80092ba:	461d      	mov	r5, r3
 80092bc:	4643      	mov	r3, r8
 80092be:	18e3      	adds	r3, r4, r3
 80092c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092c4:	464b      	mov	r3, r9
 80092c6:	eb45 0303 	adc.w	r3, r5, r3
 80092ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092ea:	4629      	mov	r1, r5
 80092ec:	008b      	lsls	r3, r1, #2
 80092ee:	4621      	mov	r1, r4
 80092f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092f4:	4621      	mov	r1, r4
 80092f6:	008a      	lsls	r2, r1, #2
 80092f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092fc:	f7f6 ffd0 	bl	80002a0 <__aeabi_uldivmod>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4b60      	ldr	r3, [pc, #384]	; (8009488 <UART_SetConfig+0x4e4>)
 8009306:	fba3 2302 	umull	r2, r3, r3, r2
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	011c      	lsls	r4, r3, #4
 800930e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009312:	2200      	movs	r2, #0
 8009314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800931c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	1891      	adds	r1, r2, r2
 8009326:	61b9      	str	r1, [r7, #24]
 8009328:	415b      	adcs	r3, r3
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009330:	4641      	mov	r1, r8
 8009332:	1851      	adds	r1, r2, r1
 8009334:	6139      	str	r1, [r7, #16]
 8009336:	4649      	mov	r1, r9
 8009338:	414b      	adcs	r3, r1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009348:	4659      	mov	r1, fp
 800934a:	00cb      	lsls	r3, r1, #3
 800934c:	4651      	mov	r1, sl
 800934e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009352:	4651      	mov	r1, sl
 8009354:	00ca      	lsls	r2, r1, #3
 8009356:	4610      	mov	r0, r2
 8009358:	4619      	mov	r1, r3
 800935a:	4603      	mov	r3, r0
 800935c:	4642      	mov	r2, r8
 800935e:	189b      	adds	r3, r3, r2
 8009360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009364:	464b      	mov	r3, r9
 8009366:	460a      	mov	r2, r1
 8009368:	eb42 0303 	adc.w	r3, r2, r3
 800936c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	67bb      	str	r3, [r7, #120]	; 0x78
 800937a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009388:	4649      	mov	r1, r9
 800938a:	008b      	lsls	r3, r1, #2
 800938c:	4641      	mov	r1, r8
 800938e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009392:	4641      	mov	r1, r8
 8009394:	008a      	lsls	r2, r1, #2
 8009396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800939a:	f7f6 ff81 	bl	80002a0 <__aeabi_uldivmod>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4611      	mov	r1, r2
 80093a4:	4b38      	ldr	r3, [pc, #224]	; (8009488 <UART_SetConfig+0x4e4>)
 80093a6:	fba3 2301 	umull	r2, r3, r3, r1
 80093aa:	095b      	lsrs	r3, r3, #5
 80093ac:	2264      	movs	r2, #100	; 0x64
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	1acb      	subs	r3, r1, r3
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	3332      	adds	r3, #50	; 0x32
 80093b8:	4a33      	ldr	r2, [pc, #204]	; (8009488 <UART_SetConfig+0x4e4>)
 80093ba:	fba2 2303 	umull	r2, r3, r2, r3
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c4:	441c      	add	r4, r3
 80093c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ca:	2200      	movs	r2, #0
 80093cc:	673b      	str	r3, [r7, #112]	; 0x70
 80093ce:	677a      	str	r2, [r7, #116]	; 0x74
 80093d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093d4:	4642      	mov	r2, r8
 80093d6:	464b      	mov	r3, r9
 80093d8:	1891      	adds	r1, r2, r2
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	415b      	adcs	r3, r3
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e4:	4641      	mov	r1, r8
 80093e6:	1851      	adds	r1, r2, r1
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	4649      	mov	r1, r9
 80093ec:	414b      	adcs	r3, r1
 80093ee:	607b      	str	r3, [r7, #4]
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093fc:	4659      	mov	r1, fp
 80093fe:	00cb      	lsls	r3, r1, #3
 8009400:	4651      	mov	r1, sl
 8009402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009406:	4651      	mov	r1, sl
 8009408:	00ca      	lsls	r2, r1, #3
 800940a:	4610      	mov	r0, r2
 800940c:	4619      	mov	r1, r3
 800940e:	4603      	mov	r3, r0
 8009410:	4642      	mov	r2, r8
 8009412:	189b      	adds	r3, r3, r2
 8009414:	66bb      	str	r3, [r7, #104]	; 0x68
 8009416:	464b      	mov	r3, r9
 8009418:	460a      	mov	r2, r1
 800941a:	eb42 0303 	adc.w	r3, r2, r3
 800941e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	663b      	str	r3, [r7, #96]	; 0x60
 800942a:	667a      	str	r2, [r7, #100]	; 0x64
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009438:	4649      	mov	r1, r9
 800943a:	008b      	lsls	r3, r1, #2
 800943c:	4641      	mov	r1, r8
 800943e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009442:	4641      	mov	r1, r8
 8009444:	008a      	lsls	r2, r1, #2
 8009446:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800944a:	f7f6 ff29 	bl	80002a0 <__aeabi_uldivmod>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <UART_SetConfig+0x4e4>)
 8009454:	fba3 1302 	umull	r1, r3, r3, r2
 8009458:	095b      	lsrs	r3, r3, #5
 800945a:	2164      	movs	r1, #100	; 0x64
 800945c:	fb01 f303 	mul.w	r3, r1, r3
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	3332      	adds	r3, #50	; 0x32
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <UART_SetConfig+0x4e4>)
 8009468:	fba2 2303 	umull	r2, r3, r2, r3
 800946c:	095b      	lsrs	r3, r3, #5
 800946e:	f003 020f 	and.w	r2, r3, #15
 8009472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4422      	add	r2, r4
 800947a:	609a      	str	r2, [r3, #8]
}
 800947c:	bf00      	nop
 800947e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009488:	51eb851f 	.word	0x51eb851f

0800948c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800948c:	b084      	sub	sp, #16
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	f107 001c 	add.w	r0, r7, #28
 800949a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d122      	bne.n	80094ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80094b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d105      	bne.n	80094de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 faa2 	bl	8009a28 <USB_CoreReset>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]
 80094e8:	e01a      	b.n	8009520 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa96 	bl	8009a28 <USB_CoreReset>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
 8009512:	e005      	b.n	8009520 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	2b01      	cmp	r3, #1
 8009524:	d10b      	bne.n	800953e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f043 0206 	orr.w	r2, r3, #6
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f043 0220 	orr.w	r2, r3, #32
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800954a:	b004      	add	sp, #16
 800954c:	4770      	bx	lr

0800954e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f023 0201 	bic.w	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d115      	bne.n	80095be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800959e:	2001      	movs	r0, #1
 80095a0:	f7f9 f9d0 	bl	8002944 <HAL_Delay>
      ms++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa2e 	bl	8009a0c <USB_GetMode>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d01e      	beq.n	80095f4 <USB_SetCurrentMode+0x84>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b31      	cmp	r3, #49	; 0x31
 80095ba:	d9f0      	bls.n	800959e <USB_SetCurrentMode+0x2e>
 80095bc:	e01a      	b.n	80095f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d115      	bne.n	80095f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095d0:	2001      	movs	r0, #1
 80095d2:	f7f9 f9b7 	bl	8002944 <HAL_Delay>
      ms++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa15 	bl	8009a0c <USB_GetMode>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <USB_SetCurrentMode+0x84>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b31      	cmp	r3, #49	; 0x31
 80095ec:	d9f0      	bls.n	80095d0 <USB_SetCurrentMode+0x60>
 80095ee:	e001      	b.n	80095f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e005      	b.n	8009600 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b32      	cmp	r3, #50	; 0x32
 80095f8:	d101      	bne.n	80095fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009608:	b084      	sub	sp, #16
 800960a:	b580      	push	{r7, lr}
 800960c:	b086      	sub	sp, #24
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009622:	2300      	movs	r3, #0
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	e009      	b.n	800963c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3340      	adds	r3, #64	; 0x40
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	2200      	movs	r2, #0
 8009634:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3301      	adds	r3, #1
 800963a:	613b      	str	r3, [r7, #16]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b0e      	cmp	r3, #14
 8009640:	d9f2      	bls.n	8009628 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d11c      	bne.n	8009682 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009656:	f043 0302 	orr.w	r3, r3, #2
 800965a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
 8009680:	e00b      	b.n	800969a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096a0:	461a      	mov	r2, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ac:	4619      	mov	r1, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b4:	461a      	mov	r2, r3
 80096b6:	680b      	ldr	r3, [r1, #0]
 80096b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d10c      	bne.n	80096da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096c6:	2100      	movs	r1, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f965 	bl	8009998 <USB_SetDevSpeed>
 80096ce:	e008      	b.n	80096e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096d0:	2101      	movs	r1, #1
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f960 	bl	8009998 <USB_SetDevSpeed>
 80096d8:	e003      	b.n	80096e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096da:	2103      	movs	r1, #3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f95b 	bl	8009998 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096e2:	2110      	movs	r1, #16
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8f3 	bl	80098d0 <USB_FlushTxFifo>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f91f 	bl	8009938 <USB_FlushRxFifo>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	461a      	mov	r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009716:	461a      	mov	r2, r3
 8009718:	2300      	movs	r3, #0
 800971a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	461a      	mov	r2, r3
 8009724:	2300      	movs	r3, #0
 8009726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009728:	2300      	movs	r3, #0
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	e043      	b.n	80097b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009744:	d118      	bne.n	8009778 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	461a      	mov	r2, r3
 800975a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e013      	b.n	800978a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976e:	461a      	mov	r2, r3
 8009770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	e008      	b.n	800978a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	461a      	mov	r2, r3
 8009786:	2300      	movs	r3, #0
 8009788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009796:	461a      	mov	r2, r3
 8009798:	2300      	movs	r3, #0
 800979a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	461a      	mov	r2, r3
 80097aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3301      	adds	r3, #1
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3b7      	bcc.n	800972e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	e043      	b.n	800984c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097da:	d118      	bne.n	800980e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	461a      	mov	r2, r3
 80097f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	e013      	b.n	8009820 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009804:	461a      	mov	r2, r3
 8009806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	e008      	b.n	8009820 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981a:	461a      	mov	r2, r3
 800981c:	2300      	movs	r3, #0
 800981e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982c:	461a      	mov	r2, r3
 800982e:	2300      	movs	r3, #0
 8009830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983e:	461a      	mov	r2, r3
 8009840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	3301      	adds	r3, #1
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	d3b7      	bcc.n	80097c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f043 0210 	orr.w	r2, r3, #16
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <USB_DevInit+0x2c4>)
 800988e:	4313      	orrs	r3, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f043 0208 	orr.w	r2, r3, #8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d107      	bne.n	80098bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098b4:	f043 0304 	orr.w	r3, r3, #4
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098c8:	b004      	add	sp, #16
 80098ca:	4770      	bx	lr
 80098cc:	803c3800 	.word	0x803c3800

080098d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3301      	adds	r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4a13      	ldr	r2, [pc, #76]	; (8009934 <USB_FlushTxFifo+0x64>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d901      	bls.n	80098f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e01b      	b.n	8009928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	daf2      	bge.n	80098de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	019b      	lsls	r3, r3, #6
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4a08      	ldr	r2, [pc, #32]	; (8009934 <USB_FlushTxFifo+0x64>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d901      	bls.n	800991a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e006      	b.n	8009928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b20      	cmp	r3, #32
 8009924:	d0f0      	beq.n	8009908 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	00030d40 	.word	0x00030d40

08009938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3301      	adds	r3, #1
 8009948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a11      	ldr	r2, [pc, #68]	; (8009994 <USB_FlushRxFifo+0x5c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d901      	bls.n	8009956 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e018      	b.n	8009988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	daf2      	bge.n	8009944 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2210      	movs	r2, #16
 8009966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4a08      	ldr	r2, [pc, #32]	; (8009994 <USB_FlushRxFifo+0x5c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d901      	bls.n	800997a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e006      	b.n	8009988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0310 	and.w	r3, r3, #16
 8009982:	2b10      	cmp	r3, #16
 8009984:	d0f0      	beq.n	8009968 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	00030d40 	.word	0x00030d40

08009998 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	68f9      	ldr	r1, [r7, #12]
 80099b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b8:	4313      	orrs	r3, r2
 80099ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f8:	f043 0302 	orr.w	r3, r3, #2
 80099fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	f003 0301 	and.w	r3, r3, #1
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <USB_CoreReset+0x64>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d901      	bls.n	8009a46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e01b      	b.n	8009a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	daf2      	bge.n	8009a34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f043 0201 	orr.w	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <USB_CoreReset+0x64>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d901      	bls.n	8009a70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e006      	b.n	8009a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d0f0      	beq.n	8009a5e <USB_CoreReset+0x36>

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	00030d40 	.word	0x00030d40

08009a90 <std>:
 8009a90:	2300      	movs	r3, #0
 8009a92:	b510      	push	{r4, lr}
 8009a94:	4604      	mov	r4, r0
 8009a96:	e9c0 3300 	strd	r3, r3, [r0]
 8009a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a9e:	6083      	str	r3, [r0, #8]
 8009aa0:	8181      	strh	r1, [r0, #12]
 8009aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8009aa4:	81c2      	strh	r2, [r0, #14]
 8009aa6:	6183      	str	r3, [r0, #24]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	2208      	movs	r2, #8
 8009aac:	305c      	adds	r0, #92	; 0x5c
 8009aae:	f000 fa4b 	bl	8009f48 <memset>
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <std+0x58>)
 8009ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <std+0x5c>)
 8009ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aba:	4b0d      	ldr	r3, [pc, #52]	; (8009af0 <std+0x60>)
 8009abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009abe:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <std+0x64>)
 8009ac0:	6323      	str	r3, [r4, #48]	; 0x30
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <std+0x68>)
 8009ac4:	6224      	str	r4, [r4, #32]
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	d006      	beq.n	8009ad8 <std+0x48>
 8009aca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009ace:	4294      	cmp	r4, r2
 8009ad0:	d002      	beq.n	8009ad8 <std+0x48>
 8009ad2:	33d0      	adds	r3, #208	; 0xd0
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d105      	bne.n	8009ae4 <std+0x54>
 8009ad8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae0:	f000 baaa 	b.w	800a038 <__retarget_lock_init_recursive>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08009d99 	.word	0x08009d99
 8009aec:	08009dbb 	.word	0x08009dbb
 8009af0:	08009df3 	.word	0x08009df3
 8009af4:	08009e17 	.word	0x08009e17
 8009af8:	20000b9c 	.word	0x20000b9c

08009afc <stdio_exit_handler>:
 8009afc:	4a02      	ldr	r2, [pc, #8]	; (8009b08 <stdio_exit_handler+0xc>)
 8009afe:	4903      	ldr	r1, [pc, #12]	; (8009b0c <stdio_exit_handler+0x10>)
 8009b00:	4803      	ldr	r0, [pc, #12]	; (8009b10 <stdio_exit_handler+0x14>)
 8009b02:	f000 b869 	b.w	8009bd8 <_fwalk_sglue>
 8009b06:	bf00      	nop
 8009b08:	20000114 	.word	0x20000114
 8009b0c:	0800ab95 	.word	0x0800ab95
 8009b10:	20000120 	.word	0x20000120

08009b14 <cleanup_stdio>:
 8009b14:	6841      	ldr	r1, [r0, #4]
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <cleanup_stdio+0x34>)
 8009b18:	4299      	cmp	r1, r3
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	d001      	beq.n	8009b24 <cleanup_stdio+0x10>
 8009b20:	f001 f838 	bl	800ab94 <_fflush_r>
 8009b24:	68a1      	ldr	r1, [r4, #8]
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <cleanup_stdio+0x38>)
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	d002      	beq.n	8009b32 <cleanup_stdio+0x1e>
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f001 f831 	bl	800ab94 <_fflush_r>
 8009b32:	68e1      	ldr	r1, [r4, #12]
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <cleanup_stdio+0x3c>)
 8009b36:	4299      	cmp	r1, r3
 8009b38:	d004      	beq.n	8009b44 <cleanup_stdio+0x30>
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b40:	f001 b828 	b.w	800ab94 <_fflush_r>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	bf00      	nop
 8009b48:	20000b9c 	.word	0x20000b9c
 8009b4c:	20000c04 	.word	0x20000c04
 8009b50:	20000c6c 	.word	0x20000c6c

08009b54 <global_stdio_init.part.0>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <global_stdio_init.part.0+0x30>)
 8009b58:	4c0b      	ldr	r4, [pc, #44]	; (8009b88 <global_stdio_init.part.0+0x34>)
 8009b5a:	4a0c      	ldr	r2, [pc, #48]	; (8009b8c <global_stdio_init.part.0+0x38>)
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	2200      	movs	r2, #0
 8009b62:	2104      	movs	r1, #4
 8009b64:	f7ff ff94 	bl	8009a90 <std>
 8009b68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	2109      	movs	r1, #9
 8009b70:	f7ff ff8e 	bl	8009a90 <std>
 8009b74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b78:	2202      	movs	r2, #2
 8009b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b7e:	2112      	movs	r1, #18
 8009b80:	f7ff bf86 	b.w	8009a90 <std>
 8009b84:	20000cd4 	.word	0x20000cd4
 8009b88:	20000b9c 	.word	0x20000b9c
 8009b8c:	08009afd 	.word	0x08009afd

08009b90 <__sfp_lock_acquire>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__sfp_lock_acquire+0x8>)
 8009b92:	f000 ba52 	b.w	800a03a <__retarget_lock_acquire_recursive>
 8009b96:	bf00      	nop
 8009b98:	20000cdd 	.word	0x20000cdd

08009b9c <__sfp_lock_release>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__sfp_lock_release+0x8>)
 8009b9e:	f000 ba4d 	b.w	800a03c <__retarget_lock_release_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20000cdd 	.word	0x20000cdd

08009ba8 <__sinit>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	4604      	mov	r4, r0
 8009bac:	f7ff fff0 	bl	8009b90 <__sfp_lock_acquire>
 8009bb0:	6a23      	ldr	r3, [r4, #32]
 8009bb2:	b11b      	cbz	r3, 8009bbc <__sinit+0x14>
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f7ff bff0 	b.w	8009b9c <__sfp_lock_release>
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <__sinit+0x28>)
 8009bbe:	6223      	str	r3, [r4, #32]
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <__sinit+0x2c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1f5      	bne.n	8009bb4 <__sinit+0xc>
 8009bc8:	f7ff ffc4 	bl	8009b54 <global_stdio_init.part.0>
 8009bcc:	e7f2      	b.n	8009bb4 <__sinit+0xc>
 8009bce:	bf00      	nop
 8009bd0:	08009b15 	.word	0x08009b15
 8009bd4:	20000cd4 	.word	0x20000cd4

08009bd8 <_fwalk_sglue>:
 8009bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bdc:	4607      	mov	r7, r0
 8009bde:	4688      	mov	r8, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	2600      	movs	r6, #0
 8009be4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be8:	f1b9 0901 	subs.w	r9, r9, #1
 8009bec:	d505      	bpl.n	8009bfa <_fwalk_sglue+0x22>
 8009bee:	6824      	ldr	r4, [r4, #0]
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	d1f7      	bne.n	8009be4 <_fwalk_sglue+0xc>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d907      	bls.n	8009c10 <_fwalk_sglue+0x38>
 8009c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c04:	3301      	adds	r3, #1
 8009c06:	d003      	beq.n	8009c10 <_fwalk_sglue+0x38>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c0      	blx	r8
 8009c0e:	4306      	orrs	r6, r0
 8009c10:	3568      	adds	r5, #104	; 0x68
 8009c12:	e7e9      	b.n	8009be8 <_fwalk_sglue+0x10>

08009c14 <iprintf>:
 8009c14:	b40f      	push	{r0, r1, r2, r3}
 8009c16:	b507      	push	{r0, r1, r2, lr}
 8009c18:	4906      	ldr	r1, [pc, #24]	; (8009c34 <iprintf+0x20>)
 8009c1a:	ab04      	add	r3, sp, #16
 8009c1c:	6808      	ldr	r0, [r1, #0]
 8009c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c22:	6881      	ldr	r1, [r0, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	f000 fc85 	bl	800a534 <_vfiprintf_r>
 8009c2a:	b003      	add	sp, #12
 8009c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c30:	b004      	add	sp, #16
 8009c32:	4770      	bx	lr
 8009c34:	2000016c 	.word	0x2000016c

08009c38 <_puts_r>:
 8009c38:	6a03      	ldr	r3, [r0, #32]
 8009c3a:	b570      	push	{r4, r5, r6, lr}
 8009c3c:	6884      	ldr	r4, [r0, #8]
 8009c3e:	4605      	mov	r5, r0
 8009c40:	460e      	mov	r6, r1
 8009c42:	b90b      	cbnz	r3, 8009c48 <_puts_r+0x10>
 8009c44:	f7ff ffb0 	bl	8009ba8 <__sinit>
 8009c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4a:	07db      	lsls	r3, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_puts_r+0x22>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_puts_r+0x22>
 8009c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c56:	f000 f9f0 	bl	800a03a <__retarget_lock_acquire_recursive>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	0719      	lsls	r1, r3, #28
 8009c5e:	d513      	bpl.n	8009c88 <_puts_r+0x50>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	b18b      	cbz	r3, 8009c88 <_puts_r+0x50>
 8009c64:	3e01      	subs	r6, #1
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	b9e9      	cbnz	r1, 8009cae <_puts_r+0x76>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da2e      	bge.n	8009cd4 <_puts_r+0x9c>
 8009c76:	4622      	mov	r2, r4
 8009c78:	210a      	movs	r1, #10
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 f8cf 	bl	8009e1e <__swbuf_r>
 8009c80:	3001      	adds	r0, #1
 8009c82:	d007      	beq.n	8009c94 <_puts_r+0x5c>
 8009c84:	250a      	movs	r5, #10
 8009c86:	e007      	b.n	8009c98 <_puts_r+0x60>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f904 	bl	8009e98 <__swsetup_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0e7      	beq.n	8009c64 <_puts_r+0x2c>
 8009c94:	f04f 35ff 	mov.w	r5, #4294967295
 8009c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c9a:	07da      	lsls	r2, r3, #31
 8009c9c:	d405      	bmi.n	8009caa <_puts_r+0x72>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	059b      	lsls	r3, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_puts_r+0x72>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca6:	f000 f9c9 	bl	800a03c <__retarget_lock_release_recursive>
 8009caa:	4628      	mov	r0, r5
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da04      	bge.n	8009cbc <_puts_r+0x84>
 8009cb2:	69a2      	ldr	r2, [r4, #24]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	dc06      	bgt.n	8009cc6 <_puts_r+0x8e>
 8009cb8:	290a      	cmp	r1, #10
 8009cba:	d004      	beq.n	8009cc6 <_puts_r+0x8e>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	6022      	str	r2, [r4, #0]
 8009cc2:	7019      	strb	r1, [r3, #0]
 8009cc4:	e7cf      	b.n	8009c66 <_puts_r+0x2e>
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f8a8 	bl	8009e1e <__swbuf_r>
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d1c9      	bne.n	8009c66 <_puts_r+0x2e>
 8009cd2:	e7df      	b.n	8009c94 <_puts_r+0x5c>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	250a      	movs	r5, #10
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	701d      	strb	r5, [r3, #0]
 8009cde:	e7db      	b.n	8009c98 <_puts_r+0x60>

08009ce0 <puts>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <puts+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f7ff bfa7 	b.w	8009c38 <_puts_r>
 8009cea:	bf00      	nop
 8009cec:	2000016c 	.word	0x2000016c

08009cf0 <sniprintf>:
 8009cf0:	b40c      	push	{r2, r3}
 8009cf2:	b530      	push	{r4, r5, lr}
 8009cf4:	4b17      	ldr	r3, [pc, #92]	; (8009d54 <sniprintf+0x64>)
 8009cf6:	1e0c      	subs	r4, r1, #0
 8009cf8:	681d      	ldr	r5, [r3, #0]
 8009cfa:	b09d      	sub	sp, #116	; 0x74
 8009cfc:	da08      	bge.n	8009d10 <sniprintf+0x20>
 8009cfe:	238b      	movs	r3, #139	; 0x8b
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	b01d      	add	sp, #116	; 0x74
 8009d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d0c:	b002      	add	sp, #8
 8009d0e:	4770      	bx	lr
 8009d10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d18:	bf14      	ite	ne
 8009d1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d1e:	4623      	moveq	r3, r4
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d28:	9002      	str	r0, [sp, #8]
 8009d2a:	9006      	str	r0, [sp, #24]
 8009d2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d32:	ab21      	add	r3, sp, #132	; 0x84
 8009d34:	a902      	add	r1, sp, #8
 8009d36:	4628      	mov	r0, r5
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f000 fad3 	bl	800a2e4 <_svfiprintf_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	bfbc      	itt	lt
 8009d42:	238b      	movlt	r3, #139	; 0x8b
 8009d44:	602b      	strlt	r3, [r5, #0]
 8009d46:	2c00      	cmp	r4, #0
 8009d48:	d0dd      	beq.n	8009d06 <sniprintf+0x16>
 8009d4a:	9b02      	ldr	r3, [sp, #8]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	e7d9      	b.n	8009d06 <sniprintf+0x16>
 8009d52:	bf00      	nop
 8009d54:	2000016c 	.word	0x2000016c

08009d58 <siprintf>:
 8009d58:	b40e      	push	{r1, r2, r3}
 8009d5a:	b500      	push	{lr}
 8009d5c:	b09c      	sub	sp, #112	; 0x70
 8009d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d60:	9002      	str	r0, [sp, #8]
 8009d62:	9006      	str	r0, [sp, #24]
 8009d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d68:	4809      	ldr	r0, [pc, #36]	; (8009d90 <siprintf+0x38>)
 8009d6a:	9107      	str	r1, [sp, #28]
 8009d6c:	9104      	str	r1, [sp, #16]
 8009d6e:	4909      	ldr	r1, [pc, #36]	; (8009d94 <siprintf+0x3c>)
 8009d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d74:	9105      	str	r1, [sp, #20]
 8009d76:	6800      	ldr	r0, [r0, #0]
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	a902      	add	r1, sp, #8
 8009d7c:	f000 fab2 	bl	800a2e4 <_svfiprintf_r>
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	b01c      	add	sp, #112	; 0x70
 8009d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d8c:	b003      	add	sp, #12
 8009d8e:	4770      	bx	lr
 8009d90:	2000016c 	.word	0x2000016c
 8009d94:	ffff0208 	.word	0xffff0208

08009d98 <__sread>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	f000 f8fc 	bl	8009f9c <_read_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	bfab      	itete	ge
 8009da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009daa:	89a3      	ldrhlt	r3, [r4, #12]
 8009dac:	181b      	addge	r3, r3, r0
 8009dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009db2:	bfac      	ite	ge
 8009db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009db6:	81a3      	strhlt	r3, [r4, #12]
 8009db8:	bd10      	pop	{r4, pc}

08009dba <__swrite>:
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	898b      	ldrh	r3, [r1, #12]
 8009dc2:	05db      	lsls	r3, r3, #23
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4616      	mov	r6, r2
 8009dca:	d505      	bpl.n	8009dd8 <__swrite+0x1e>
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f000 f8d0 	bl	8009f78 <_lseek_r>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	f000 b8e7 	b.w	8009fc0 <_write_r>

08009df2 <__sseek>:
 8009df2:	b510      	push	{r4, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfa:	f000 f8bd 	bl	8009f78 <_lseek_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	bf15      	itete	ne
 8009e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e0e:	81a3      	strheq	r3, [r4, #12]
 8009e10:	bf18      	it	ne
 8009e12:	81a3      	strhne	r3, [r4, #12]
 8009e14:	bd10      	pop	{r4, pc}

08009e16 <__sclose>:
 8009e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1a:	f000 b89d 	b.w	8009f58 <_close_r>

08009e1e <__swbuf_r>:
 8009e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e20:	460e      	mov	r6, r1
 8009e22:	4614      	mov	r4, r2
 8009e24:	4605      	mov	r5, r0
 8009e26:	b118      	cbz	r0, 8009e30 <__swbuf_r+0x12>
 8009e28:	6a03      	ldr	r3, [r0, #32]
 8009e2a:	b90b      	cbnz	r3, 8009e30 <__swbuf_r+0x12>
 8009e2c:	f7ff febc 	bl	8009ba8 <__sinit>
 8009e30:	69a3      	ldr	r3, [r4, #24]
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	071a      	lsls	r2, r3, #28
 8009e38:	d525      	bpl.n	8009e86 <__swbuf_r+0x68>
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	b31b      	cbz	r3, 8009e86 <__swbuf_r+0x68>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	1a98      	subs	r0, r3, r2
 8009e44:	6963      	ldr	r3, [r4, #20]
 8009e46:	b2f6      	uxtb	r6, r6
 8009e48:	4283      	cmp	r3, r0
 8009e4a:	4637      	mov	r7, r6
 8009e4c:	dc04      	bgt.n	8009e58 <__swbuf_r+0x3a>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4628      	mov	r0, r5
 8009e52:	f000 fe9f 	bl	800ab94 <_fflush_r>
 8009e56:	b9e0      	cbnz	r0, 8009e92 <__swbuf_r+0x74>
 8009e58:	68a3      	ldr	r3, [r4, #8]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	60a3      	str	r3, [r4, #8]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	701e      	strb	r6, [r3, #0]
 8009e66:	6962      	ldr	r2, [r4, #20]
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d004      	beq.n	8009e78 <__swbuf_r+0x5a>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	07db      	lsls	r3, r3, #31
 8009e72:	d506      	bpl.n	8009e82 <__swbuf_r+0x64>
 8009e74:	2e0a      	cmp	r6, #10
 8009e76:	d104      	bne.n	8009e82 <__swbuf_r+0x64>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 fe8a 	bl	800ab94 <_fflush_r>
 8009e80:	b938      	cbnz	r0, 8009e92 <__swbuf_r+0x74>
 8009e82:	4638      	mov	r0, r7
 8009e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f000 f805 	bl	8009e98 <__swsetup_r>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d0d5      	beq.n	8009e3e <__swbuf_r+0x20>
 8009e92:	f04f 37ff 	mov.w	r7, #4294967295
 8009e96:	e7f4      	b.n	8009e82 <__swbuf_r+0x64>

08009e98 <__swsetup_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <__swsetup_r+0xac>)
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	b118      	cbz	r0, 8009eac <__swsetup_r+0x14>
 8009ea4:	6a03      	ldr	r3, [r0, #32]
 8009ea6:	b90b      	cbnz	r3, 8009eac <__swsetup_r+0x14>
 8009ea8:	f7ff fe7e 	bl	8009ba8 <__sinit>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb2:	0718      	lsls	r0, r3, #28
 8009eb4:	d422      	bmi.n	8009efc <__swsetup_r+0x64>
 8009eb6:	06d9      	lsls	r1, r3, #27
 8009eb8:	d407      	bmi.n	8009eca <__swsetup_r+0x32>
 8009eba:	2309      	movs	r3, #9
 8009ebc:	602b      	str	r3, [r5, #0]
 8009ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e034      	b.n	8009f34 <__swsetup_r+0x9c>
 8009eca:	0758      	lsls	r0, r3, #29
 8009ecc:	d512      	bpl.n	8009ef4 <__swsetup_r+0x5c>
 8009ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed0:	b141      	cbz	r1, 8009ee4 <__swsetup_r+0x4c>
 8009ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed6:	4299      	cmp	r1, r3
 8009ed8:	d002      	beq.n	8009ee0 <__swsetup_r+0x48>
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 f8b0 	bl	800a040 <_free_r>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	2300      	movs	r3, #0
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f043 0308 	orr.w	r3, r3, #8
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	b94b      	cbnz	r3, 8009f14 <__swsetup_r+0x7c>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0a:	d003      	beq.n	8009f14 <__swsetup_r+0x7c>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 fe8e 	bl	800ac30 <__smakebuf_r>
 8009f14:	89a0      	ldrh	r0, [r4, #12]
 8009f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f1a:	f010 0301 	ands.w	r3, r0, #1
 8009f1e:	d00a      	beq.n	8009f36 <__swsetup_r+0x9e>
 8009f20:	2300      	movs	r3, #0
 8009f22:	60a3      	str	r3, [r4, #8]
 8009f24:	6963      	ldr	r3, [r4, #20]
 8009f26:	425b      	negs	r3, r3
 8009f28:	61a3      	str	r3, [r4, #24]
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	b943      	cbnz	r3, 8009f40 <__swsetup_r+0xa8>
 8009f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f32:	d1c4      	bne.n	8009ebe <__swsetup_r+0x26>
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	0781      	lsls	r1, r0, #30
 8009f38:	bf58      	it	pl
 8009f3a:	6963      	ldrpl	r3, [r4, #20]
 8009f3c:	60a3      	str	r3, [r4, #8]
 8009f3e:	e7f4      	b.n	8009f2a <__swsetup_r+0x92>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7f7      	b.n	8009f34 <__swsetup_r+0x9c>
 8009f44:	2000016c 	.word	0x2000016c

08009f48 <memset>:
 8009f48:	4402      	add	r2, r0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <memset+0xa>
 8009f50:	4770      	bx	lr
 8009f52:	f803 1b01 	strb.w	r1, [r3], #1
 8009f56:	e7f9      	b.n	8009f4c <memset+0x4>

08009f58 <_close_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	; (8009f74 <_close_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f8 fbd5 	bl	8002712 <_close>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_close_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_close_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20000cd8 	.word	0x20000cd8

08009f78 <_lseek_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d07      	ldr	r5, [pc, #28]	; (8009f98 <_lseek_r+0x20>)
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4611      	mov	r1, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	602a      	str	r2, [r5, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f7f8 fbea 	bl	8002760 <_lseek>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_lseek_r+0x1e>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_lseek_r+0x1e>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20000cd8 	.word	0x20000cd8

08009f9c <_read_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_read_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f8 fb94 	bl	80026d8 <_read>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_read_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_read_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	20000cd8 	.word	0x20000cd8

08009fc0 <_write_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	; (8009fe0 <_write_r+0x20>)
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7f6 fc0a 	bl	80007e8 <_write>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_write_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_write_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	20000cd8 	.word	0x20000cd8

08009fe4 <__errno>:
 8009fe4:	4b01      	ldr	r3, [pc, #4]	; (8009fec <__errno+0x8>)
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	2000016c 	.word	0x2000016c

08009ff0 <__libc_init_array>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4d0d      	ldr	r5, [pc, #52]	; (800a028 <__libc_init_array+0x38>)
 8009ff4:	4c0d      	ldr	r4, [pc, #52]	; (800a02c <__libc_init_array+0x3c>)
 8009ff6:	1b64      	subs	r4, r4, r5
 8009ff8:	10a4      	asrs	r4, r4, #2
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	42a6      	cmp	r6, r4
 8009ffe:	d109      	bne.n	800a014 <__libc_init_array+0x24>
 800a000:	4d0b      	ldr	r5, [pc, #44]	; (800a030 <__libc_init_array+0x40>)
 800a002:	4c0c      	ldr	r4, [pc, #48]	; (800a034 <__libc_init_array+0x44>)
 800a004:	f000 fee2 	bl	800adcc <_init>
 800a008:	1b64      	subs	r4, r4, r5
 800a00a:	10a4      	asrs	r4, r4, #2
 800a00c:	2600      	movs	r6, #0
 800a00e:	42a6      	cmp	r6, r4
 800a010:	d105      	bne.n	800a01e <__libc_init_array+0x2e>
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	f855 3b04 	ldr.w	r3, [r5], #4
 800a018:	4798      	blx	r3
 800a01a:	3601      	adds	r6, #1
 800a01c:	e7ee      	b.n	8009ffc <__libc_init_array+0xc>
 800a01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a022:	4798      	blx	r3
 800a024:	3601      	adds	r6, #1
 800a026:	e7f2      	b.n	800a00e <__libc_init_array+0x1e>
 800a028:	0800b140 	.word	0x0800b140
 800a02c:	0800b140 	.word	0x0800b140
 800a030:	0800b140 	.word	0x0800b140
 800a034:	0800b144 	.word	0x0800b144

0800a038 <__retarget_lock_init_recursive>:
 800a038:	4770      	bx	lr

0800a03a <__retarget_lock_acquire_recursive>:
 800a03a:	4770      	bx	lr

0800a03c <__retarget_lock_release_recursive>:
 800a03c:	4770      	bx	lr
	...

0800a040 <_free_r>:
 800a040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a042:	2900      	cmp	r1, #0
 800a044:	d044      	beq.n	800a0d0 <_free_r+0x90>
 800a046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a04a:	9001      	str	r0, [sp, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f1a1 0404 	sub.w	r4, r1, #4
 800a052:	bfb8      	it	lt
 800a054:	18e4      	addlt	r4, r4, r3
 800a056:	f000 f8df 	bl	800a218 <__malloc_lock>
 800a05a:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <_free_r+0x94>)
 800a05c:	9801      	ldr	r0, [sp, #4]
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	b933      	cbnz	r3, 800a070 <_free_r+0x30>
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	6014      	str	r4, [r2, #0]
 800a066:	b003      	add	sp, #12
 800a068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a06c:	f000 b8da 	b.w	800a224 <__malloc_unlock>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d908      	bls.n	800a086 <_free_r+0x46>
 800a074:	6825      	ldr	r5, [r4, #0]
 800a076:	1961      	adds	r1, r4, r5
 800a078:	428b      	cmp	r3, r1
 800a07a:	bf01      	itttt	eq
 800a07c:	6819      	ldreq	r1, [r3, #0]
 800a07e:	685b      	ldreq	r3, [r3, #4]
 800a080:	1949      	addeq	r1, r1, r5
 800a082:	6021      	streq	r1, [r4, #0]
 800a084:	e7ed      	b.n	800a062 <_free_r+0x22>
 800a086:	461a      	mov	r2, r3
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	b10b      	cbz	r3, 800a090 <_free_r+0x50>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d9fa      	bls.n	800a086 <_free_r+0x46>
 800a090:	6811      	ldr	r1, [r2, #0]
 800a092:	1855      	adds	r5, r2, r1
 800a094:	42a5      	cmp	r5, r4
 800a096:	d10b      	bne.n	800a0b0 <_free_r+0x70>
 800a098:	6824      	ldr	r4, [r4, #0]
 800a09a:	4421      	add	r1, r4
 800a09c:	1854      	adds	r4, r2, r1
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	d1e0      	bne.n	800a066 <_free_r+0x26>
 800a0a4:	681c      	ldr	r4, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	6053      	str	r3, [r2, #4]
 800a0aa:	440c      	add	r4, r1
 800a0ac:	6014      	str	r4, [r2, #0]
 800a0ae:	e7da      	b.n	800a066 <_free_r+0x26>
 800a0b0:	d902      	bls.n	800a0b8 <_free_r+0x78>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	6003      	str	r3, [r0, #0]
 800a0b6:	e7d6      	b.n	800a066 <_free_r+0x26>
 800a0b8:	6825      	ldr	r5, [r4, #0]
 800a0ba:	1961      	adds	r1, r4, r5
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	bf04      	itt	eq
 800a0c0:	6819      	ldreq	r1, [r3, #0]
 800a0c2:	685b      	ldreq	r3, [r3, #4]
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	bf04      	itt	eq
 800a0c8:	1949      	addeq	r1, r1, r5
 800a0ca:	6021      	streq	r1, [r4, #0]
 800a0cc:	6054      	str	r4, [r2, #4]
 800a0ce:	e7ca      	b.n	800a066 <_free_r+0x26>
 800a0d0:	b003      	add	sp, #12
 800a0d2:	bd30      	pop	{r4, r5, pc}
 800a0d4:	20000ce0 	.word	0x20000ce0

0800a0d8 <sbrk_aligned>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	4e0e      	ldr	r6, [pc, #56]	; (800a114 <sbrk_aligned+0x3c>)
 800a0dc:	460c      	mov	r4, r1
 800a0de:	6831      	ldr	r1, [r6, #0]
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	b911      	cbnz	r1, 800a0ea <sbrk_aligned+0x12>
 800a0e4:	f000 fe1c 	bl	800ad20 <_sbrk_r>
 800a0e8:	6030      	str	r0, [r6, #0]
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 fe17 	bl	800ad20 <_sbrk_r>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d00a      	beq.n	800a10c <sbrk_aligned+0x34>
 800a0f6:	1cc4      	adds	r4, r0, #3
 800a0f8:	f024 0403 	bic.w	r4, r4, #3
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	d007      	beq.n	800a110 <sbrk_aligned+0x38>
 800a100:	1a21      	subs	r1, r4, r0
 800a102:	4628      	mov	r0, r5
 800a104:	f000 fe0c 	bl	800ad20 <_sbrk_r>
 800a108:	3001      	adds	r0, #1
 800a10a:	d101      	bne.n	800a110 <sbrk_aligned+0x38>
 800a10c:	f04f 34ff 	mov.w	r4, #4294967295
 800a110:	4620      	mov	r0, r4
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	20000ce4 	.word	0x20000ce4

0800a118 <_malloc_r>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	1ccd      	adds	r5, r1, #3
 800a11e:	f025 0503 	bic.w	r5, r5, #3
 800a122:	3508      	adds	r5, #8
 800a124:	2d0c      	cmp	r5, #12
 800a126:	bf38      	it	cc
 800a128:	250c      	movcc	r5, #12
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	4607      	mov	r7, r0
 800a12e:	db01      	blt.n	800a134 <_malloc_r+0x1c>
 800a130:	42a9      	cmp	r1, r5
 800a132:	d905      	bls.n	800a140 <_malloc_r+0x28>
 800a134:	230c      	movs	r3, #12
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	2600      	movs	r6, #0
 800a13a:	4630      	mov	r0, r6
 800a13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a140:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a214 <_malloc_r+0xfc>
 800a144:	f000 f868 	bl	800a218 <__malloc_lock>
 800a148:	f8d8 3000 	ldr.w	r3, [r8]
 800a14c:	461c      	mov	r4, r3
 800a14e:	bb5c      	cbnz	r4, 800a1a8 <_malloc_r+0x90>
 800a150:	4629      	mov	r1, r5
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ffc0 	bl	800a0d8 <sbrk_aligned>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	4604      	mov	r4, r0
 800a15c:	d155      	bne.n	800a20a <_malloc_r+0xf2>
 800a15e:	f8d8 4000 	ldr.w	r4, [r8]
 800a162:	4626      	mov	r6, r4
 800a164:	2e00      	cmp	r6, #0
 800a166:	d145      	bne.n	800a1f4 <_malloc_r+0xdc>
 800a168:	2c00      	cmp	r4, #0
 800a16a:	d048      	beq.n	800a1fe <_malloc_r+0xe6>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	4631      	mov	r1, r6
 800a170:	4638      	mov	r0, r7
 800a172:	eb04 0903 	add.w	r9, r4, r3
 800a176:	f000 fdd3 	bl	800ad20 <_sbrk_r>
 800a17a:	4581      	cmp	r9, r0
 800a17c:	d13f      	bne.n	800a1fe <_malloc_r+0xe6>
 800a17e:	6821      	ldr	r1, [r4, #0]
 800a180:	1a6d      	subs	r5, r5, r1
 800a182:	4629      	mov	r1, r5
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ffa7 	bl	800a0d8 <sbrk_aligned>
 800a18a:	3001      	adds	r0, #1
 800a18c:	d037      	beq.n	800a1fe <_malloc_r+0xe6>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	442b      	add	r3, r5
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	f8d8 3000 	ldr.w	r3, [r8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d038      	beq.n	800a20e <_malloc_r+0xf6>
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	42a2      	cmp	r2, r4
 800a1a0:	d12b      	bne.n	800a1fa <_malloc_r+0xe2>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	605a      	str	r2, [r3, #4]
 800a1a6:	e00f      	b.n	800a1c8 <_malloc_r+0xb0>
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	1b52      	subs	r2, r2, r5
 800a1ac:	d41f      	bmi.n	800a1ee <_malloc_r+0xd6>
 800a1ae:	2a0b      	cmp	r2, #11
 800a1b0:	d917      	bls.n	800a1e2 <_malloc_r+0xca>
 800a1b2:	1961      	adds	r1, r4, r5
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	6025      	str	r5, [r4, #0]
 800a1b8:	bf18      	it	ne
 800a1ba:	6059      	strne	r1, [r3, #4]
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	bf08      	it	eq
 800a1c0:	f8c8 1000 	streq.w	r1, [r8]
 800a1c4:	5162      	str	r2, [r4, r5]
 800a1c6:	604b      	str	r3, [r1, #4]
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f104 060b 	add.w	r6, r4, #11
 800a1ce:	f000 f829 	bl	800a224 <__malloc_unlock>
 800a1d2:	f026 0607 	bic.w	r6, r6, #7
 800a1d6:	1d23      	adds	r3, r4, #4
 800a1d8:	1af2      	subs	r2, r6, r3
 800a1da:	d0ae      	beq.n	800a13a <_malloc_r+0x22>
 800a1dc:	1b9b      	subs	r3, r3, r6
 800a1de:	50a3      	str	r3, [r4, r2]
 800a1e0:	e7ab      	b.n	800a13a <_malloc_r+0x22>
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	d1dd      	bne.n	800a1a4 <_malloc_r+0x8c>
 800a1e8:	f8c8 2000 	str.w	r2, [r8]
 800a1ec:	e7ec      	b.n	800a1c8 <_malloc_r+0xb0>
 800a1ee:	4623      	mov	r3, r4
 800a1f0:	6864      	ldr	r4, [r4, #4]
 800a1f2:	e7ac      	b.n	800a14e <_malloc_r+0x36>
 800a1f4:	4634      	mov	r4, r6
 800a1f6:	6876      	ldr	r6, [r6, #4]
 800a1f8:	e7b4      	b.n	800a164 <_malloc_r+0x4c>
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	e7cc      	b.n	800a198 <_malloc_r+0x80>
 800a1fe:	230c      	movs	r3, #12
 800a200:	603b      	str	r3, [r7, #0]
 800a202:	4638      	mov	r0, r7
 800a204:	f000 f80e 	bl	800a224 <__malloc_unlock>
 800a208:	e797      	b.n	800a13a <_malloc_r+0x22>
 800a20a:	6025      	str	r5, [r4, #0]
 800a20c:	e7dc      	b.n	800a1c8 <_malloc_r+0xb0>
 800a20e:	605b      	str	r3, [r3, #4]
 800a210:	deff      	udf	#255	; 0xff
 800a212:	bf00      	nop
 800a214:	20000ce0 	.word	0x20000ce0

0800a218 <__malloc_lock>:
 800a218:	4801      	ldr	r0, [pc, #4]	; (800a220 <__malloc_lock+0x8>)
 800a21a:	f7ff bf0e 	b.w	800a03a <__retarget_lock_acquire_recursive>
 800a21e:	bf00      	nop
 800a220:	20000cdc 	.word	0x20000cdc

0800a224 <__malloc_unlock>:
 800a224:	4801      	ldr	r0, [pc, #4]	; (800a22c <__malloc_unlock+0x8>)
 800a226:	f7ff bf09 	b.w	800a03c <__retarget_lock_release_recursive>
 800a22a:	bf00      	nop
 800a22c:	20000cdc 	.word	0x20000cdc

0800a230 <__ssputs_r>:
 800a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a234:	688e      	ldr	r6, [r1, #8]
 800a236:	461f      	mov	r7, r3
 800a238:	42be      	cmp	r6, r7
 800a23a:	680b      	ldr	r3, [r1, #0]
 800a23c:	4682      	mov	sl, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	4690      	mov	r8, r2
 800a242:	d82c      	bhi.n	800a29e <__ssputs_r+0x6e>
 800a244:	898a      	ldrh	r2, [r1, #12]
 800a246:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a24a:	d026      	beq.n	800a29a <__ssputs_r+0x6a>
 800a24c:	6965      	ldr	r5, [r4, #20]
 800a24e:	6909      	ldr	r1, [r1, #16]
 800a250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a254:	eba3 0901 	sub.w	r9, r3, r1
 800a258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a25c:	1c7b      	adds	r3, r7, #1
 800a25e:	444b      	add	r3, r9
 800a260:	106d      	asrs	r5, r5, #1
 800a262:	429d      	cmp	r5, r3
 800a264:	bf38      	it	cc
 800a266:	461d      	movcc	r5, r3
 800a268:	0553      	lsls	r3, r2, #21
 800a26a:	d527      	bpl.n	800a2bc <__ssputs_r+0x8c>
 800a26c:	4629      	mov	r1, r5
 800a26e:	f7ff ff53 	bl	800a118 <_malloc_r>
 800a272:	4606      	mov	r6, r0
 800a274:	b360      	cbz	r0, 800a2d0 <__ssputs_r+0xa0>
 800a276:	6921      	ldr	r1, [r4, #16]
 800a278:	464a      	mov	r2, r9
 800a27a:	f000 fd61 	bl	800ad40 <memcpy>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	6126      	str	r6, [r4, #16]
 800a28c:	6165      	str	r5, [r4, #20]
 800a28e:	444e      	add	r6, r9
 800a290:	eba5 0509 	sub.w	r5, r5, r9
 800a294:	6026      	str	r6, [r4, #0]
 800a296:	60a5      	str	r5, [r4, #8]
 800a298:	463e      	mov	r6, r7
 800a29a:	42be      	cmp	r6, r7
 800a29c:	d900      	bls.n	800a2a0 <__ssputs_r+0x70>
 800a29e:	463e      	mov	r6, r7
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	f000 fcff 	bl	800aca8 <memmove>
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	1b9b      	subs	r3, r3, r6
 800a2ae:	60a3      	str	r3, [r4, #8]
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	4433      	add	r3, r6
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2bc:	462a      	mov	r2, r5
 800a2be:	f000 fd4d 	bl	800ad5c <_realloc_r>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d1e0      	bne.n	800a28a <__ssputs_r+0x5a>
 800a2c8:	6921      	ldr	r1, [r4, #16]
 800a2ca:	4650      	mov	r0, sl
 800a2cc:	f7ff feb8 	bl	800a040 <_free_r>
 800a2d0:	230c      	movs	r3, #12
 800a2d2:	f8ca 3000 	str.w	r3, [sl]
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e2:	e7e9      	b.n	800a2b8 <__ssputs_r+0x88>

0800a2e4 <_svfiprintf_r>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4698      	mov	r8, r3
 800a2ea:	898b      	ldrh	r3, [r1, #12]
 800a2ec:	061b      	lsls	r3, r3, #24
 800a2ee:	b09d      	sub	sp, #116	; 0x74
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	d50e      	bpl.n	800a316 <_svfiprintf_r+0x32>
 800a2f8:	690b      	ldr	r3, [r1, #16]
 800a2fa:	b963      	cbnz	r3, 800a316 <_svfiprintf_r+0x32>
 800a2fc:	2140      	movs	r1, #64	; 0x40
 800a2fe:	f7ff ff0b 	bl	800a118 <_malloc_r>
 800a302:	6028      	str	r0, [r5, #0]
 800a304:	6128      	str	r0, [r5, #16]
 800a306:	b920      	cbnz	r0, 800a312 <_svfiprintf_r+0x2e>
 800a308:	230c      	movs	r3, #12
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e0d0      	b.n	800a4b4 <_svfiprintf_r+0x1d0>
 800a312:	2340      	movs	r3, #64	; 0x40
 800a314:	616b      	str	r3, [r5, #20]
 800a316:	2300      	movs	r3, #0
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	2320      	movs	r3, #32
 800a31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a320:	f8cd 800c 	str.w	r8, [sp, #12]
 800a324:	2330      	movs	r3, #48	; 0x30
 800a326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4cc <_svfiprintf_r+0x1e8>
 800a32a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a32e:	f04f 0901 	mov.w	r9, #1
 800a332:	4623      	mov	r3, r4
 800a334:	469a      	mov	sl, r3
 800a336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33a:	b10a      	cbz	r2, 800a340 <_svfiprintf_r+0x5c>
 800a33c:	2a25      	cmp	r2, #37	; 0x25
 800a33e:	d1f9      	bne.n	800a334 <_svfiprintf_r+0x50>
 800a340:	ebba 0b04 	subs.w	fp, sl, r4
 800a344:	d00b      	beq.n	800a35e <_svfiprintf_r+0x7a>
 800a346:	465b      	mov	r3, fp
 800a348:	4622      	mov	r2, r4
 800a34a:	4629      	mov	r1, r5
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff ff6f 	bl	800a230 <__ssputs_r>
 800a352:	3001      	adds	r0, #1
 800a354:	f000 80a9 	beq.w	800a4aa <_svfiprintf_r+0x1c6>
 800a358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a35a:	445a      	add	r2, fp
 800a35c:	9209      	str	r2, [sp, #36]	; 0x24
 800a35e:	f89a 3000 	ldrb.w	r3, [sl]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 80a1 	beq.w	800a4aa <_svfiprintf_r+0x1c6>
 800a368:	2300      	movs	r3, #0
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a372:	f10a 0a01 	add.w	sl, sl, #1
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a37e:	931a      	str	r3, [sp, #104]	; 0x68
 800a380:	4654      	mov	r4, sl
 800a382:	2205      	movs	r2, #5
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	4850      	ldr	r0, [pc, #320]	; (800a4cc <_svfiprintf_r+0x1e8>)
 800a38a:	f7f5 ff39 	bl	8000200 <memchr>
 800a38e:	9a04      	ldr	r2, [sp, #16]
 800a390:	b9d8      	cbnz	r0, 800a3ca <_svfiprintf_r+0xe6>
 800a392:	06d0      	lsls	r0, r2, #27
 800a394:	bf44      	itt	mi
 800a396:	2320      	movmi	r3, #32
 800a398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39c:	0711      	lsls	r1, r2, #28
 800a39e:	bf44      	itt	mi
 800a3a0:	232b      	movmi	r3, #43	; 0x2b
 800a3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d015      	beq.n	800a3da <_svfiprintf_r+0xf6>
 800a3ae:	9a07      	ldr	r2, [sp, #28]
 800a3b0:	4654      	mov	r4, sl
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f04f 0c0a 	mov.w	ip, #10
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3be:	3b30      	subs	r3, #48	; 0x30
 800a3c0:	2b09      	cmp	r3, #9
 800a3c2:	d94d      	bls.n	800a460 <_svfiprintf_r+0x17c>
 800a3c4:	b1b0      	cbz	r0, 800a3f4 <_svfiprintf_r+0x110>
 800a3c6:	9207      	str	r2, [sp, #28]
 800a3c8:	e014      	b.n	800a3f4 <_svfiprintf_r+0x110>
 800a3ca:	eba0 0308 	sub.w	r3, r0, r8
 800a3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	46a2      	mov	sl, r4
 800a3d8:	e7d2      	b.n	800a380 <_svfiprintf_r+0x9c>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	1d19      	adds	r1, r3, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	9103      	str	r1, [sp, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfbb      	ittet	lt
 800a3e6:	425b      	neglt	r3, r3
 800a3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ec:	9307      	strge	r3, [sp, #28]
 800a3ee:	9307      	strlt	r3, [sp, #28]
 800a3f0:	bfb8      	it	lt
 800a3f2:	9204      	strlt	r2, [sp, #16]
 800a3f4:	7823      	ldrb	r3, [r4, #0]
 800a3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f8:	d10c      	bne.n	800a414 <_svfiprintf_r+0x130>
 800a3fa:	7863      	ldrb	r3, [r4, #1]
 800a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fe:	d134      	bne.n	800a46a <_svfiprintf_r+0x186>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	9203      	str	r2, [sp, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bfb8      	it	lt
 800a40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a410:	3402      	adds	r4, #2
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a4dc <_svfiprintf_r+0x1f8>
 800a418:	7821      	ldrb	r1, [r4, #0]
 800a41a:	2203      	movs	r2, #3
 800a41c:	4650      	mov	r0, sl
 800a41e:	f7f5 feef 	bl	8000200 <memchr>
 800a422:	b138      	cbz	r0, 800a434 <_svfiprintf_r+0x150>
 800a424:	9b04      	ldr	r3, [sp, #16]
 800a426:	eba0 000a 	sub.w	r0, r0, sl
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	4082      	lsls	r2, r0
 800a42e:	4313      	orrs	r3, r2
 800a430:	3401      	adds	r4, #1
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a438:	4825      	ldr	r0, [pc, #148]	; (800a4d0 <_svfiprintf_r+0x1ec>)
 800a43a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a43e:	2206      	movs	r2, #6
 800a440:	f7f5 fede 	bl	8000200 <memchr>
 800a444:	2800      	cmp	r0, #0
 800a446:	d038      	beq.n	800a4ba <_svfiprintf_r+0x1d6>
 800a448:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <_svfiprintf_r+0x1f0>)
 800a44a:	bb1b      	cbnz	r3, 800a494 <_svfiprintf_r+0x1b0>
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	3307      	adds	r3, #7
 800a450:	f023 0307 	bic.w	r3, r3, #7
 800a454:	3308      	adds	r3, #8
 800a456:	9303      	str	r3, [sp, #12]
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	4433      	add	r3, r6
 800a45c:	9309      	str	r3, [sp, #36]	; 0x24
 800a45e:	e768      	b.n	800a332 <_svfiprintf_r+0x4e>
 800a460:	fb0c 3202 	mla	r2, ip, r2, r3
 800a464:	460c      	mov	r4, r1
 800a466:	2001      	movs	r0, #1
 800a468:	e7a6      	b.n	800a3b8 <_svfiprintf_r+0xd4>
 800a46a:	2300      	movs	r3, #0
 800a46c:	3401      	adds	r4, #1
 800a46e:	9305      	str	r3, [sp, #20]
 800a470:	4619      	mov	r1, r3
 800a472:	f04f 0c0a 	mov.w	ip, #10
 800a476:	4620      	mov	r0, r4
 800a478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a47c:	3a30      	subs	r2, #48	; 0x30
 800a47e:	2a09      	cmp	r2, #9
 800a480:	d903      	bls.n	800a48a <_svfiprintf_r+0x1a6>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0c6      	beq.n	800a414 <_svfiprintf_r+0x130>
 800a486:	9105      	str	r1, [sp, #20]
 800a488:	e7c4      	b.n	800a414 <_svfiprintf_r+0x130>
 800a48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a48e:	4604      	mov	r4, r0
 800a490:	2301      	movs	r3, #1
 800a492:	e7f0      	b.n	800a476 <_svfiprintf_r+0x192>
 800a494:	ab03      	add	r3, sp, #12
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	462a      	mov	r2, r5
 800a49a:	4b0f      	ldr	r3, [pc, #60]	; (800a4d8 <_svfiprintf_r+0x1f4>)
 800a49c:	a904      	add	r1, sp, #16
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f3af 8000 	nop.w
 800a4a4:	1c42      	adds	r2, r0, #1
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	d1d6      	bne.n	800a458 <_svfiprintf_r+0x174>
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	065b      	lsls	r3, r3, #25
 800a4ae:	f53f af2d 	bmi.w	800a30c <_svfiprintf_r+0x28>
 800a4b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b4:	b01d      	add	sp, #116	; 0x74
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	ab03      	add	r3, sp, #12
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	462a      	mov	r2, r5
 800a4c0:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <_svfiprintf_r+0x1f4>)
 800a4c2:	a904      	add	r1, sp, #16
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f000 f9bd 	bl	800a844 <_printf_i>
 800a4ca:	e7eb      	b.n	800a4a4 <_svfiprintf_r+0x1c0>
 800a4cc:	0800b104 	.word	0x0800b104
 800a4d0:	0800b10e 	.word	0x0800b10e
 800a4d4:	00000000 	.word	0x00000000
 800a4d8:	0800a231 	.word	0x0800a231
 800a4dc:	0800b10a 	.word	0x0800b10a

0800a4e0 <__sfputc_r>:
 800a4e0:	6893      	ldr	r3, [r2, #8]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	b410      	push	{r4}
 800a4e8:	6093      	str	r3, [r2, #8]
 800a4ea:	da08      	bge.n	800a4fe <__sfputc_r+0x1e>
 800a4ec:	6994      	ldr	r4, [r2, #24]
 800a4ee:	42a3      	cmp	r3, r4
 800a4f0:	db01      	blt.n	800a4f6 <__sfputc_r+0x16>
 800a4f2:	290a      	cmp	r1, #10
 800a4f4:	d103      	bne.n	800a4fe <__sfputc_r+0x1e>
 800a4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fa:	f7ff bc90 	b.w	8009e1e <__swbuf_r>
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	1c58      	adds	r0, r3, #1
 800a502:	6010      	str	r0, [r2, #0]
 800a504:	7019      	strb	r1, [r3, #0]
 800a506:	4608      	mov	r0, r1
 800a508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <__sfputs_r>:
 800a50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a510:	4606      	mov	r6, r0
 800a512:	460f      	mov	r7, r1
 800a514:	4614      	mov	r4, r2
 800a516:	18d5      	adds	r5, r2, r3
 800a518:	42ac      	cmp	r4, r5
 800a51a:	d101      	bne.n	800a520 <__sfputs_r+0x12>
 800a51c:	2000      	movs	r0, #0
 800a51e:	e007      	b.n	800a530 <__sfputs_r+0x22>
 800a520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a524:	463a      	mov	r2, r7
 800a526:	4630      	mov	r0, r6
 800a528:	f7ff ffda 	bl	800a4e0 <__sfputc_r>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d1f3      	bne.n	800a518 <__sfputs_r+0xa>
 800a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a534 <_vfiprintf_r>:
 800a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	460d      	mov	r5, r1
 800a53a:	b09d      	sub	sp, #116	; 0x74
 800a53c:	4614      	mov	r4, r2
 800a53e:	4698      	mov	r8, r3
 800a540:	4606      	mov	r6, r0
 800a542:	b118      	cbz	r0, 800a54c <_vfiprintf_r+0x18>
 800a544:	6a03      	ldr	r3, [r0, #32]
 800a546:	b90b      	cbnz	r3, 800a54c <_vfiprintf_r+0x18>
 800a548:	f7ff fb2e 	bl	8009ba8 <__sinit>
 800a54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54e:	07d9      	lsls	r1, r3, #31
 800a550:	d405      	bmi.n	800a55e <_vfiprintf_r+0x2a>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	059a      	lsls	r2, r3, #22
 800a556:	d402      	bmi.n	800a55e <_vfiprintf_r+0x2a>
 800a558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55a:	f7ff fd6e 	bl	800a03a <__retarget_lock_acquire_recursive>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	071b      	lsls	r3, r3, #28
 800a562:	d501      	bpl.n	800a568 <_vfiprintf_r+0x34>
 800a564:	692b      	ldr	r3, [r5, #16]
 800a566:	b99b      	cbnz	r3, 800a590 <_vfiprintf_r+0x5c>
 800a568:	4629      	mov	r1, r5
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff fc94 	bl	8009e98 <__swsetup_r>
 800a570:	b170      	cbz	r0, 800a590 <_vfiprintf_r+0x5c>
 800a572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a574:	07dc      	lsls	r4, r3, #31
 800a576:	d504      	bpl.n	800a582 <_vfiprintf_r+0x4e>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	b01d      	add	sp, #116	; 0x74
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	0598      	lsls	r0, r3, #22
 800a586:	d4f7      	bmi.n	800a578 <_vfiprintf_r+0x44>
 800a588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a58a:	f7ff fd57 	bl	800a03c <__retarget_lock_release_recursive>
 800a58e:	e7f3      	b.n	800a578 <_vfiprintf_r+0x44>
 800a590:	2300      	movs	r3, #0
 800a592:	9309      	str	r3, [sp, #36]	; 0x24
 800a594:	2320      	movs	r3, #32
 800a596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a59e:	2330      	movs	r3, #48	; 0x30
 800a5a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a754 <_vfiprintf_r+0x220>
 800a5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a8:	f04f 0901 	mov.w	r9, #1
 800a5ac:	4623      	mov	r3, r4
 800a5ae:	469a      	mov	sl, r3
 800a5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b4:	b10a      	cbz	r2, 800a5ba <_vfiprintf_r+0x86>
 800a5b6:	2a25      	cmp	r2, #37	; 0x25
 800a5b8:	d1f9      	bne.n	800a5ae <_vfiprintf_r+0x7a>
 800a5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a5be:	d00b      	beq.n	800a5d8 <_vfiprintf_r+0xa4>
 800a5c0:	465b      	mov	r3, fp
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff ffa1 	bl	800a50e <__sfputs_r>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f000 80a9 	beq.w	800a724 <_vfiprintf_r+0x1f0>
 800a5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d4:	445a      	add	r2, fp
 800a5d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 80a1 	beq.w	800a724 <_vfiprintf_r+0x1f0>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ec:	f10a 0a01 	add.w	sl, sl, #1
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	9307      	str	r3, [sp, #28]
 800a5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a5fa:	4654      	mov	r4, sl
 800a5fc:	2205      	movs	r2, #5
 800a5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a602:	4854      	ldr	r0, [pc, #336]	; (800a754 <_vfiprintf_r+0x220>)
 800a604:	f7f5 fdfc 	bl	8000200 <memchr>
 800a608:	9a04      	ldr	r2, [sp, #16]
 800a60a:	b9d8      	cbnz	r0, 800a644 <_vfiprintf_r+0x110>
 800a60c:	06d1      	lsls	r1, r2, #27
 800a60e:	bf44      	itt	mi
 800a610:	2320      	movmi	r3, #32
 800a612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a616:	0713      	lsls	r3, r2, #28
 800a618:	bf44      	itt	mi
 800a61a:	232b      	movmi	r3, #43	; 0x2b
 800a61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a620:	f89a 3000 	ldrb.w	r3, [sl]
 800a624:	2b2a      	cmp	r3, #42	; 0x2a
 800a626:	d015      	beq.n	800a654 <_vfiprintf_r+0x120>
 800a628:	9a07      	ldr	r2, [sp, #28]
 800a62a:	4654      	mov	r4, sl
 800a62c:	2000      	movs	r0, #0
 800a62e:	f04f 0c0a 	mov.w	ip, #10
 800a632:	4621      	mov	r1, r4
 800a634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a638:	3b30      	subs	r3, #48	; 0x30
 800a63a:	2b09      	cmp	r3, #9
 800a63c:	d94d      	bls.n	800a6da <_vfiprintf_r+0x1a6>
 800a63e:	b1b0      	cbz	r0, 800a66e <_vfiprintf_r+0x13a>
 800a640:	9207      	str	r2, [sp, #28]
 800a642:	e014      	b.n	800a66e <_vfiprintf_r+0x13a>
 800a644:	eba0 0308 	sub.w	r3, r0, r8
 800a648:	fa09 f303 	lsl.w	r3, r9, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	46a2      	mov	sl, r4
 800a652:	e7d2      	b.n	800a5fa <_vfiprintf_r+0xc6>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	1d19      	adds	r1, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	9103      	str	r1, [sp, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bfbb      	ittet	lt
 800a660:	425b      	neglt	r3, r3
 800a662:	f042 0202 	orrlt.w	r2, r2, #2
 800a666:	9307      	strge	r3, [sp, #28]
 800a668:	9307      	strlt	r3, [sp, #28]
 800a66a:	bfb8      	it	lt
 800a66c:	9204      	strlt	r2, [sp, #16]
 800a66e:	7823      	ldrb	r3, [r4, #0]
 800a670:	2b2e      	cmp	r3, #46	; 0x2e
 800a672:	d10c      	bne.n	800a68e <_vfiprintf_r+0x15a>
 800a674:	7863      	ldrb	r3, [r4, #1]
 800a676:	2b2a      	cmp	r3, #42	; 0x2a
 800a678:	d134      	bne.n	800a6e4 <_vfiprintf_r+0x1b0>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	9203      	str	r2, [sp, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfb8      	it	lt
 800a686:	f04f 33ff 	movlt.w	r3, #4294967295
 800a68a:	3402      	adds	r4, #2
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a764 <_vfiprintf_r+0x230>
 800a692:	7821      	ldrb	r1, [r4, #0]
 800a694:	2203      	movs	r2, #3
 800a696:	4650      	mov	r0, sl
 800a698:	f7f5 fdb2 	bl	8000200 <memchr>
 800a69c:	b138      	cbz	r0, 800a6ae <_vfiprintf_r+0x17a>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	eba0 000a 	sub.w	r0, r0, sl
 800a6a4:	2240      	movs	r2, #64	; 0x40
 800a6a6:	4082      	lsls	r2, r0
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	9304      	str	r3, [sp, #16]
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	4829      	ldr	r0, [pc, #164]	; (800a758 <_vfiprintf_r+0x224>)
 800a6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b8:	2206      	movs	r2, #6
 800a6ba:	f7f5 fda1 	bl	8000200 <memchr>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d03f      	beq.n	800a742 <_vfiprintf_r+0x20e>
 800a6c2:	4b26      	ldr	r3, [pc, #152]	; (800a75c <_vfiprintf_r+0x228>)
 800a6c4:	bb1b      	cbnz	r3, 800a70e <_vfiprintf_r+0x1da>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	3307      	adds	r3, #7
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	443b      	add	r3, r7
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	e768      	b.n	800a5ac <_vfiprintf_r+0x78>
 800a6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6de:	460c      	mov	r4, r1
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	e7a6      	b.n	800a632 <_vfiprintf_r+0xfe>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	3401      	adds	r4, #1
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	f04f 0c0a 	mov.w	ip, #10
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f6:	3a30      	subs	r2, #48	; 0x30
 800a6f8:	2a09      	cmp	r2, #9
 800a6fa:	d903      	bls.n	800a704 <_vfiprintf_r+0x1d0>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0c6      	beq.n	800a68e <_vfiprintf_r+0x15a>
 800a700:	9105      	str	r1, [sp, #20]
 800a702:	e7c4      	b.n	800a68e <_vfiprintf_r+0x15a>
 800a704:	fb0c 2101 	mla	r1, ip, r1, r2
 800a708:	4604      	mov	r4, r0
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7f0      	b.n	800a6f0 <_vfiprintf_r+0x1bc>
 800a70e:	ab03      	add	r3, sp, #12
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	462a      	mov	r2, r5
 800a714:	4b12      	ldr	r3, [pc, #72]	; (800a760 <_vfiprintf_r+0x22c>)
 800a716:	a904      	add	r1, sp, #16
 800a718:	4630      	mov	r0, r6
 800a71a:	f3af 8000 	nop.w
 800a71e:	4607      	mov	r7, r0
 800a720:	1c78      	adds	r0, r7, #1
 800a722:	d1d6      	bne.n	800a6d2 <_vfiprintf_r+0x19e>
 800a724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a726:	07d9      	lsls	r1, r3, #31
 800a728:	d405      	bmi.n	800a736 <_vfiprintf_r+0x202>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	059a      	lsls	r2, r3, #22
 800a72e:	d402      	bmi.n	800a736 <_vfiprintf_r+0x202>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f7ff fc83 	bl	800a03c <__retarget_lock_release_recursive>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	065b      	lsls	r3, r3, #25
 800a73a:	f53f af1d 	bmi.w	800a578 <_vfiprintf_r+0x44>
 800a73e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a740:	e71c      	b.n	800a57c <_vfiprintf_r+0x48>
 800a742:	ab03      	add	r3, sp, #12
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	462a      	mov	r2, r5
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <_vfiprintf_r+0x22c>)
 800a74a:	a904      	add	r1, sp, #16
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 f879 	bl	800a844 <_printf_i>
 800a752:	e7e4      	b.n	800a71e <_vfiprintf_r+0x1ea>
 800a754:	0800b104 	.word	0x0800b104
 800a758:	0800b10e 	.word	0x0800b10e
 800a75c:	00000000 	.word	0x00000000
 800a760:	0800a50f 	.word	0x0800a50f
 800a764:	0800b10a 	.word	0x0800b10a

0800a768 <_printf_common>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	4616      	mov	r6, r2
 800a76e:	4699      	mov	r9, r3
 800a770:	688a      	ldr	r2, [r1, #8]
 800a772:	690b      	ldr	r3, [r1, #16]
 800a774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a778:	4293      	cmp	r3, r2
 800a77a:	bfb8      	it	lt
 800a77c:	4613      	movlt	r3, r2
 800a77e:	6033      	str	r3, [r6, #0]
 800a780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a784:	4607      	mov	r7, r0
 800a786:	460c      	mov	r4, r1
 800a788:	b10a      	cbz	r2, 800a78e <_printf_common+0x26>
 800a78a:	3301      	adds	r3, #1
 800a78c:	6033      	str	r3, [r6, #0]
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	0699      	lsls	r1, r3, #26
 800a792:	bf42      	ittt	mi
 800a794:	6833      	ldrmi	r3, [r6, #0]
 800a796:	3302      	addmi	r3, #2
 800a798:	6033      	strmi	r3, [r6, #0]
 800a79a:	6825      	ldr	r5, [r4, #0]
 800a79c:	f015 0506 	ands.w	r5, r5, #6
 800a7a0:	d106      	bne.n	800a7b0 <_printf_common+0x48>
 800a7a2:	f104 0a19 	add.w	sl, r4, #25
 800a7a6:	68e3      	ldr	r3, [r4, #12]
 800a7a8:	6832      	ldr	r2, [r6, #0]
 800a7aa:	1a9b      	subs	r3, r3, r2
 800a7ac:	42ab      	cmp	r3, r5
 800a7ae:	dc26      	bgt.n	800a7fe <_printf_common+0x96>
 800a7b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7b4:	1e13      	subs	r3, r2, #0
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	bf18      	it	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	0692      	lsls	r2, r2, #26
 800a7be:	d42b      	bmi.n	800a818 <_printf_common+0xb0>
 800a7c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	47c0      	blx	r8
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d01e      	beq.n	800a80c <_printf_common+0xa4>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	f003 0306 	and.w	r3, r3, #6
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	bf02      	ittt	eq
 800a7da:	68e5      	ldreq	r5, [r4, #12]
 800a7dc:	6833      	ldreq	r3, [r6, #0]
 800a7de:	1aed      	subeq	r5, r5, r3
 800a7e0:	68a3      	ldr	r3, [r4, #8]
 800a7e2:	bf0c      	ite	eq
 800a7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7e8:	2500      	movne	r5, #0
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	bfc4      	itt	gt
 800a7ee:	1a9b      	subgt	r3, r3, r2
 800a7f0:	18ed      	addgt	r5, r5, r3
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	341a      	adds	r4, #26
 800a7f6:	42b5      	cmp	r5, r6
 800a7f8:	d11a      	bne.n	800a830 <_printf_common+0xc8>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e008      	b.n	800a810 <_printf_common+0xa8>
 800a7fe:	2301      	movs	r3, #1
 800a800:	4652      	mov	r2, sl
 800a802:	4649      	mov	r1, r9
 800a804:	4638      	mov	r0, r7
 800a806:	47c0      	blx	r8
 800a808:	3001      	adds	r0, #1
 800a80a:	d103      	bne.n	800a814 <_printf_common+0xac>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a814:	3501      	adds	r5, #1
 800a816:	e7c6      	b.n	800a7a6 <_printf_common+0x3e>
 800a818:	18e1      	adds	r1, r4, r3
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	2030      	movs	r0, #48	; 0x30
 800a81e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a822:	4422      	add	r2, r4
 800a824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a82c:	3302      	adds	r3, #2
 800a82e:	e7c7      	b.n	800a7c0 <_printf_common+0x58>
 800a830:	2301      	movs	r3, #1
 800a832:	4622      	mov	r2, r4
 800a834:	4649      	mov	r1, r9
 800a836:	4638      	mov	r0, r7
 800a838:	47c0      	blx	r8
 800a83a:	3001      	adds	r0, #1
 800a83c:	d0e6      	beq.n	800a80c <_printf_common+0xa4>
 800a83e:	3601      	adds	r6, #1
 800a840:	e7d9      	b.n	800a7f6 <_printf_common+0x8e>
	...

0800a844 <_printf_i>:
 800a844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a848:	7e0f      	ldrb	r7, [r1, #24]
 800a84a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a84c:	2f78      	cmp	r7, #120	; 0x78
 800a84e:	4691      	mov	r9, r2
 800a850:	4680      	mov	r8, r0
 800a852:	460c      	mov	r4, r1
 800a854:	469a      	mov	sl, r3
 800a856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a85a:	d807      	bhi.n	800a86c <_printf_i+0x28>
 800a85c:	2f62      	cmp	r7, #98	; 0x62
 800a85e:	d80a      	bhi.n	800a876 <_printf_i+0x32>
 800a860:	2f00      	cmp	r7, #0
 800a862:	f000 80d4 	beq.w	800aa0e <_printf_i+0x1ca>
 800a866:	2f58      	cmp	r7, #88	; 0x58
 800a868:	f000 80c0 	beq.w	800a9ec <_printf_i+0x1a8>
 800a86c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a874:	e03a      	b.n	800a8ec <_printf_i+0xa8>
 800a876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a87a:	2b15      	cmp	r3, #21
 800a87c:	d8f6      	bhi.n	800a86c <_printf_i+0x28>
 800a87e:	a101      	add	r1, pc, #4	; (adr r1, 800a884 <_printf_i+0x40>)
 800a880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a884:	0800a8dd 	.word	0x0800a8dd
 800a888:	0800a8f1 	.word	0x0800a8f1
 800a88c:	0800a86d 	.word	0x0800a86d
 800a890:	0800a86d 	.word	0x0800a86d
 800a894:	0800a86d 	.word	0x0800a86d
 800a898:	0800a86d 	.word	0x0800a86d
 800a89c:	0800a8f1 	.word	0x0800a8f1
 800a8a0:	0800a86d 	.word	0x0800a86d
 800a8a4:	0800a86d 	.word	0x0800a86d
 800a8a8:	0800a86d 	.word	0x0800a86d
 800a8ac:	0800a86d 	.word	0x0800a86d
 800a8b0:	0800a9f5 	.word	0x0800a9f5
 800a8b4:	0800a91d 	.word	0x0800a91d
 800a8b8:	0800a9af 	.word	0x0800a9af
 800a8bc:	0800a86d 	.word	0x0800a86d
 800a8c0:	0800a86d 	.word	0x0800a86d
 800a8c4:	0800aa17 	.word	0x0800aa17
 800a8c8:	0800a86d 	.word	0x0800a86d
 800a8cc:	0800a91d 	.word	0x0800a91d
 800a8d0:	0800a86d 	.word	0x0800a86d
 800a8d4:	0800a86d 	.word	0x0800a86d
 800a8d8:	0800a9b7 	.word	0x0800a9b7
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	1d1a      	adds	r2, r3, #4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	602a      	str	r2, [r5, #0]
 800a8e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e09f      	b.n	800aa30 <_printf_i+0x1ec>
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	0607      	lsls	r7, r0, #24
 800a8f6:	f103 0104 	add.w	r1, r3, #4
 800a8fa:	6029      	str	r1, [r5, #0]
 800a8fc:	d501      	bpl.n	800a902 <_printf_i+0xbe>
 800a8fe:	681e      	ldr	r6, [r3, #0]
 800a900:	e003      	b.n	800a90a <_printf_i+0xc6>
 800a902:	0646      	lsls	r6, r0, #25
 800a904:	d5fb      	bpl.n	800a8fe <_printf_i+0xba>
 800a906:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a90a:	2e00      	cmp	r6, #0
 800a90c:	da03      	bge.n	800a916 <_printf_i+0xd2>
 800a90e:	232d      	movs	r3, #45	; 0x2d
 800a910:	4276      	negs	r6, r6
 800a912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a916:	485a      	ldr	r0, [pc, #360]	; (800aa80 <_printf_i+0x23c>)
 800a918:	230a      	movs	r3, #10
 800a91a:	e012      	b.n	800a942 <_printf_i+0xfe>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	6820      	ldr	r0, [r4, #0]
 800a920:	1d19      	adds	r1, r3, #4
 800a922:	6029      	str	r1, [r5, #0]
 800a924:	0605      	lsls	r5, r0, #24
 800a926:	d501      	bpl.n	800a92c <_printf_i+0xe8>
 800a928:	681e      	ldr	r6, [r3, #0]
 800a92a:	e002      	b.n	800a932 <_printf_i+0xee>
 800a92c:	0641      	lsls	r1, r0, #25
 800a92e:	d5fb      	bpl.n	800a928 <_printf_i+0xe4>
 800a930:	881e      	ldrh	r6, [r3, #0]
 800a932:	4853      	ldr	r0, [pc, #332]	; (800aa80 <_printf_i+0x23c>)
 800a934:	2f6f      	cmp	r7, #111	; 0x6f
 800a936:	bf0c      	ite	eq
 800a938:	2308      	moveq	r3, #8
 800a93a:	230a      	movne	r3, #10
 800a93c:	2100      	movs	r1, #0
 800a93e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a942:	6865      	ldr	r5, [r4, #4]
 800a944:	60a5      	str	r5, [r4, #8]
 800a946:	2d00      	cmp	r5, #0
 800a948:	bfa2      	ittt	ge
 800a94a:	6821      	ldrge	r1, [r4, #0]
 800a94c:	f021 0104 	bicge.w	r1, r1, #4
 800a950:	6021      	strge	r1, [r4, #0]
 800a952:	b90e      	cbnz	r6, 800a958 <_printf_i+0x114>
 800a954:	2d00      	cmp	r5, #0
 800a956:	d04b      	beq.n	800a9f0 <_printf_i+0x1ac>
 800a958:	4615      	mov	r5, r2
 800a95a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a95e:	fb03 6711 	mls	r7, r3, r1, r6
 800a962:	5dc7      	ldrb	r7, [r0, r7]
 800a964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a968:	4637      	mov	r7, r6
 800a96a:	42bb      	cmp	r3, r7
 800a96c:	460e      	mov	r6, r1
 800a96e:	d9f4      	bls.n	800a95a <_printf_i+0x116>
 800a970:	2b08      	cmp	r3, #8
 800a972:	d10b      	bne.n	800a98c <_printf_i+0x148>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	07de      	lsls	r6, r3, #31
 800a978:	d508      	bpl.n	800a98c <_printf_i+0x148>
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	6861      	ldr	r1, [r4, #4]
 800a97e:	4299      	cmp	r1, r3
 800a980:	bfde      	ittt	le
 800a982:	2330      	movle	r3, #48	; 0x30
 800a984:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a988:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a98c:	1b52      	subs	r2, r2, r5
 800a98e:	6122      	str	r2, [r4, #16]
 800a990:	f8cd a000 	str.w	sl, [sp]
 800a994:	464b      	mov	r3, r9
 800a996:	aa03      	add	r2, sp, #12
 800a998:	4621      	mov	r1, r4
 800a99a:	4640      	mov	r0, r8
 800a99c:	f7ff fee4 	bl	800a768 <_printf_common>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d14a      	bne.n	800aa3a <_printf_i+0x1f6>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	b004      	add	sp, #16
 800a9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f043 0320 	orr.w	r3, r3, #32
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	4833      	ldr	r0, [pc, #204]	; (800aa84 <_printf_i+0x240>)
 800a9b8:	2778      	movs	r7, #120	; 0x78
 800a9ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	061f      	lsls	r7, r3, #24
 800a9c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9c8:	d402      	bmi.n	800a9d0 <_printf_i+0x18c>
 800a9ca:	065f      	lsls	r7, r3, #25
 800a9cc:	bf48      	it	mi
 800a9ce:	b2b6      	uxthmi	r6, r6
 800a9d0:	07df      	lsls	r7, r3, #31
 800a9d2:	bf48      	it	mi
 800a9d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a9d8:	6029      	str	r1, [r5, #0]
 800a9da:	bf48      	it	mi
 800a9dc:	6023      	strmi	r3, [r4, #0]
 800a9de:	b91e      	cbnz	r6, 800a9e8 <_printf_i+0x1a4>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	f023 0320 	bic.w	r3, r3, #32
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	e7a7      	b.n	800a93c <_printf_i+0xf8>
 800a9ec:	4824      	ldr	r0, [pc, #144]	; (800aa80 <_printf_i+0x23c>)
 800a9ee:	e7e4      	b.n	800a9ba <_printf_i+0x176>
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	e7bd      	b.n	800a970 <_printf_i+0x12c>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	6826      	ldr	r6, [r4, #0]
 800a9f8:	6961      	ldr	r1, [r4, #20]
 800a9fa:	1d18      	adds	r0, r3, #4
 800a9fc:	6028      	str	r0, [r5, #0]
 800a9fe:	0635      	lsls	r5, r6, #24
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	d501      	bpl.n	800aa08 <_printf_i+0x1c4>
 800aa04:	6019      	str	r1, [r3, #0]
 800aa06:	e002      	b.n	800aa0e <_printf_i+0x1ca>
 800aa08:	0670      	lsls	r0, r6, #25
 800aa0a:	d5fb      	bpl.n	800aa04 <_printf_i+0x1c0>
 800aa0c:	8019      	strh	r1, [r3, #0]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6123      	str	r3, [r4, #16]
 800aa12:	4615      	mov	r5, r2
 800aa14:	e7bc      	b.n	800a990 <_printf_i+0x14c>
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	1d1a      	adds	r2, r3, #4
 800aa1a:	602a      	str	r2, [r5, #0]
 800aa1c:	681d      	ldr	r5, [r3, #0]
 800aa1e:	6862      	ldr	r2, [r4, #4]
 800aa20:	2100      	movs	r1, #0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f7f5 fbec 	bl	8000200 <memchr>
 800aa28:	b108      	cbz	r0, 800aa2e <_printf_i+0x1ea>
 800aa2a:	1b40      	subs	r0, r0, r5
 800aa2c:	6060      	str	r0, [r4, #4]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	6123      	str	r3, [r4, #16]
 800aa32:	2300      	movs	r3, #0
 800aa34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa38:	e7aa      	b.n	800a990 <_printf_i+0x14c>
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4649      	mov	r1, r9
 800aa40:	4640      	mov	r0, r8
 800aa42:	47d0      	blx	sl
 800aa44:	3001      	adds	r0, #1
 800aa46:	d0ad      	beq.n	800a9a4 <_printf_i+0x160>
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	079b      	lsls	r3, r3, #30
 800aa4c:	d413      	bmi.n	800aa76 <_printf_i+0x232>
 800aa4e:	68e0      	ldr	r0, [r4, #12]
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	4298      	cmp	r0, r3
 800aa54:	bfb8      	it	lt
 800aa56:	4618      	movlt	r0, r3
 800aa58:	e7a6      	b.n	800a9a8 <_printf_i+0x164>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4649      	mov	r1, r9
 800aa60:	4640      	mov	r0, r8
 800aa62:	47d0      	blx	sl
 800aa64:	3001      	adds	r0, #1
 800aa66:	d09d      	beq.n	800a9a4 <_printf_i+0x160>
 800aa68:	3501      	adds	r5, #1
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	9903      	ldr	r1, [sp, #12]
 800aa6e:	1a5b      	subs	r3, r3, r1
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dcf2      	bgt.n	800aa5a <_printf_i+0x216>
 800aa74:	e7eb      	b.n	800aa4e <_printf_i+0x20a>
 800aa76:	2500      	movs	r5, #0
 800aa78:	f104 0619 	add.w	r6, r4, #25
 800aa7c:	e7f5      	b.n	800aa6a <_printf_i+0x226>
 800aa7e:	bf00      	nop
 800aa80:	0800b115 	.word	0x0800b115
 800aa84:	0800b126 	.word	0x0800b126

0800aa88 <__sflush_r>:
 800aa88:	898a      	ldrh	r2, [r1, #12]
 800aa8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	4605      	mov	r5, r0
 800aa90:	0710      	lsls	r0, r2, #28
 800aa92:	460c      	mov	r4, r1
 800aa94:	d458      	bmi.n	800ab48 <__sflush_r+0xc0>
 800aa96:	684b      	ldr	r3, [r1, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc05      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aa9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dc02      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d0f9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aab4:	682f      	ldr	r7, [r5, #0]
 800aab6:	6a21      	ldr	r1, [r4, #32]
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	d032      	beq.n	800ab22 <__sflush_r+0x9a>
 800aabc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	075a      	lsls	r2, r3, #29
 800aac2:	d505      	bpl.n	800aad0 <__sflush_r+0x48>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	1ac0      	subs	r0, r0, r3
 800aac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaca:	b10b      	cbz	r3, 800aad0 <__sflush_r+0x48>
 800aacc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aace:	1ac0      	subs	r0, r0, r3
 800aad0:	2300      	movs	r3, #0
 800aad2:	4602      	mov	r2, r0
 800aad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aad6:	6a21      	ldr	r1, [r4, #32]
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	d106      	bne.n	800aaf0 <__sflush_r+0x68>
 800aae2:	6829      	ldr	r1, [r5, #0]
 800aae4:	291d      	cmp	r1, #29
 800aae6:	d82b      	bhi.n	800ab40 <__sflush_r+0xb8>
 800aae8:	4a29      	ldr	r2, [pc, #164]	; (800ab90 <__sflush_r+0x108>)
 800aaea:	410a      	asrs	r2, r1
 800aaec:	07d6      	lsls	r6, r2, #31
 800aaee:	d427      	bmi.n	800ab40 <__sflush_r+0xb8>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	6062      	str	r2, [r4, #4]
 800aaf4:	04d9      	lsls	r1, r3, #19
 800aaf6:	6922      	ldr	r2, [r4, #16]
 800aaf8:	6022      	str	r2, [r4, #0]
 800aafa:	d504      	bpl.n	800ab06 <__sflush_r+0x7e>
 800aafc:	1c42      	adds	r2, r0, #1
 800aafe:	d101      	bne.n	800ab04 <__sflush_r+0x7c>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b903      	cbnz	r3, 800ab06 <__sflush_r+0x7e>
 800ab04:	6560      	str	r0, [r4, #84]	; 0x54
 800ab06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab08:	602f      	str	r7, [r5, #0]
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	d0c9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab12:	4299      	cmp	r1, r3
 800ab14:	d002      	beq.n	800ab1c <__sflush_r+0x94>
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7ff fa92 	bl	800a040 <_free_r>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	6360      	str	r0, [r4, #52]	; 0x34
 800ab20:	e7c0      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b0      	blx	r6
 800ab28:	1c41      	adds	r1, r0, #1
 800ab2a:	d1c8      	bne.n	800aabe <__sflush_r+0x36>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0c5      	beq.n	800aabe <__sflush_r+0x36>
 800ab32:	2b1d      	cmp	r3, #29
 800ab34:	d001      	beq.n	800ab3a <__sflush_r+0xb2>
 800ab36:	2b16      	cmp	r3, #22
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0xb6>
 800ab3a:	602f      	str	r7, [r5, #0]
 800ab3c:	e7b1      	b.n	800aaa2 <__sflush_r+0x1a>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	e7ad      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab48:	690f      	ldr	r7, [r1, #16]
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	d0a9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab4e:	0793      	lsls	r3, r2, #30
 800ab50:	680e      	ldr	r6, [r1, #0]
 800ab52:	bf08      	it	eq
 800ab54:	694b      	ldreq	r3, [r1, #20]
 800ab56:	600f      	str	r7, [r1, #0]
 800ab58:	bf18      	it	ne
 800ab5a:	2300      	movne	r3, #0
 800ab5c:	eba6 0807 	sub.w	r8, r6, r7
 800ab60:	608b      	str	r3, [r1, #8]
 800ab62:	f1b8 0f00 	cmp.w	r8, #0
 800ab66:	dd9c      	ble.n	800aaa2 <__sflush_r+0x1a>
 800ab68:	6a21      	ldr	r1, [r4, #32]
 800ab6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab6c:	4643      	mov	r3, r8
 800ab6e:	463a      	mov	r2, r7
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b0      	blx	r6
 800ab74:	2800      	cmp	r0, #0
 800ab76:	dc06      	bgt.n	800ab86 <__sflush_r+0xfe>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e78e      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab86:	4407      	add	r7, r0
 800ab88:	eba8 0800 	sub.w	r8, r8, r0
 800ab8c:	e7e9      	b.n	800ab62 <__sflush_r+0xda>
 800ab8e:	bf00      	nop
 800ab90:	dfbffffe 	.word	0xdfbffffe

0800ab94 <_fflush_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	690b      	ldr	r3, [r1, #16]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b913      	cbnz	r3, 800aba4 <_fflush_r+0x10>
 800ab9e:	2500      	movs	r5, #0
 800aba0:	4628      	mov	r0, r5
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	b118      	cbz	r0, 800abae <_fflush_r+0x1a>
 800aba6:	6a03      	ldr	r3, [r0, #32]
 800aba8:	b90b      	cbnz	r3, 800abae <_fflush_r+0x1a>
 800abaa:	f7fe fffd 	bl	8009ba8 <__sinit>
 800abae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0f3      	beq.n	800ab9e <_fflush_r+0xa>
 800abb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abb8:	07d0      	lsls	r0, r2, #31
 800abba:	d404      	bmi.n	800abc6 <_fflush_r+0x32>
 800abbc:	0599      	lsls	r1, r3, #22
 800abbe:	d402      	bmi.n	800abc6 <_fflush_r+0x32>
 800abc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc2:	f7ff fa3a 	bl	800a03a <__retarget_lock_acquire_recursive>
 800abc6:	4628      	mov	r0, r5
 800abc8:	4621      	mov	r1, r4
 800abca:	f7ff ff5d 	bl	800aa88 <__sflush_r>
 800abce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abd0:	07da      	lsls	r2, r3, #31
 800abd2:	4605      	mov	r5, r0
 800abd4:	d4e4      	bmi.n	800aba0 <_fflush_r+0xc>
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	059b      	lsls	r3, r3, #22
 800abda:	d4e1      	bmi.n	800aba0 <_fflush_r+0xc>
 800abdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abde:	f7ff fa2d 	bl	800a03c <__retarget_lock_release_recursive>
 800abe2:	e7dd      	b.n	800aba0 <_fflush_r+0xc>

0800abe4 <__swhatbuf_r>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	460c      	mov	r4, r1
 800abe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abec:	2900      	cmp	r1, #0
 800abee:	b096      	sub	sp, #88	; 0x58
 800abf0:	4615      	mov	r5, r2
 800abf2:	461e      	mov	r6, r3
 800abf4:	da0d      	bge.n	800ac12 <__swhatbuf_r+0x2e>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abfc:	f04f 0100 	mov.w	r1, #0
 800ac00:	bf0c      	ite	eq
 800ac02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ac06:	2340      	movne	r3, #64	; 0x40
 800ac08:	2000      	movs	r0, #0
 800ac0a:	6031      	str	r1, [r6, #0]
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	b016      	add	sp, #88	; 0x58
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	466a      	mov	r2, sp
 800ac14:	f000 f862 	bl	800acdc <_fstat_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dbec      	blt.n	800abf6 <__swhatbuf_r+0x12>
 800ac1c:	9901      	ldr	r1, [sp, #4]
 800ac1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ac22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ac26:	4259      	negs	r1, r3
 800ac28:	4159      	adcs	r1, r3
 800ac2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac2e:	e7eb      	b.n	800ac08 <__swhatbuf_r+0x24>

0800ac30 <__smakebuf_r>:
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac34:	079d      	lsls	r5, r3, #30
 800ac36:	4606      	mov	r6, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	d507      	bpl.n	800ac4c <__smakebuf_r+0x1c>
 800ac3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2301      	movs	r3, #1
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	ab01      	add	r3, sp, #4
 800ac4e:	466a      	mov	r2, sp
 800ac50:	f7ff ffc8 	bl	800abe4 <__swhatbuf_r>
 800ac54:	9900      	ldr	r1, [sp, #0]
 800ac56:	4605      	mov	r5, r0
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff fa5d 	bl	800a118 <_malloc_r>
 800ac5e:	b948      	cbnz	r0, 800ac74 <__smakebuf_r+0x44>
 800ac60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac64:	059a      	lsls	r2, r3, #22
 800ac66:	d4ef      	bmi.n	800ac48 <__smakebuf_r+0x18>
 800ac68:	f023 0303 	bic.w	r3, r3, #3
 800ac6c:	f043 0302 	orr.w	r3, r3, #2
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	e7e3      	b.n	800ac3c <__smakebuf_r+0xc>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	6020      	str	r0, [r4, #0]
 800ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	6163      	str	r3, [r4, #20]
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	6120      	str	r0, [r4, #16]
 800ac86:	b15b      	cbz	r3, 800aca0 <__smakebuf_r+0x70>
 800ac88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 f837 	bl	800ad00 <_isatty_r>
 800ac92:	b128      	cbz	r0, 800aca0 <__smakebuf_r+0x70>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	f043 0301 	orr.w	r3, r3, #1
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	431d      	orrs	r5, r3
 800aca4:	81a5      	strh	r5, [r4, #12]
 800aca6:	e7cf      	b.n	800ac48 <__smakebuf_r+0x18>

0800aca8 <memmove>:
 800aca8:	4288      	cmp	r0, r1
 800acaa:	b510      	push	{r4, lr}
 800acac:	eb01 0402 	add.w	r4, r1, r2
 800acb0:	d902      	bls.n	800acb8 <memmove+0x10>
 800acb2:	4284      	cmp	r4, r0
 800acb4:	4623      	mov	r3, r4
 800acb6:	d807      	bhi.n	800acc8 <memmove+0x20>
 800acb8:	1e43      	subs	r3, r0, #1
 800acba:	42a1      	cmp	r1, r4
 800acbc:	d008      	beq.n	800acd0 <memmove+0x28>
 800acbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acc6:	e7f8      	b.n	800acba <memmove+0x12>
 800acc8:	4402      	add	r2, r0
 800acca:	4601      	mov	r1, r0
 800accc:	428a      	cmp	r2, r1
 800acce:	d100      	bne.n	800acd2 <memmove+0x2a>
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acda:	e7f7      	b.n	800accc <memmove+0x24>

0800acdc <_fstat_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d07      	ldr	r5, [pc, #28]	; (800acfc <_fstat_r+0x20>)
 800ace0:	2300      	movs	r3, #0
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	4611      	mov	r1, r2
 800ace8:	602b      	str	r3, [r5, #0]
 800acea:	f7f7 fd1e 	bl	800272a <_fstat>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	d102      	bne.n	800acf8 <_fstat_r+0x1c>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	b103      	cbz	r3, 800acf8 <_fstat_r+0x1c>
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	bd38      	pop	{r3, r4, r5, pc}
 800acfa:	bf00      	nop
 800acfc:	20000cd8 	.word	0x20000cd8

0800ad00 <_isatty_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d06      	ldr	r5, [pc, #24]	; (800ad1c <_isatty_r+0x1c>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f7 fd1d 	bl	800274a <_isatty>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_isatty_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_isatty_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000cd8 	.word	0x20000cd8

0800ad20 <_sbrk_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d06      	ldr	r5, [pc, #24]	; (800ad3c <_sbrk_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f7 fd26 	bl	800277c <_sbrk>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_sbrk_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_sbrk_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20000cd8 	.word	0x20000cd8

0800ad40 <memcpy>:
 800ad40:	440a      	add	r2, r1
 800ad42:	4291      	cmp	r1, r2
 800ad44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad48:	d100      	bne.n	800ad4c <memcpy+0xc>
 800ad4a:	4770      	bx	lr
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad56:	4291      	cmp	r1, r2
 800ad58:	d1f9      	bne.n	800ad4e <memcpy+0xe>
 800ad5a:	bd10      	pop	{r4, pc}

0800ad5c <_realloc_r>:
 800ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	4680      	mov	r8, r0
 800ad62:	4614      	mov	r4, r2
 800ad64:	460e      	mov	r6, r1
 800ad66:	b921      	cbnz	r1, 800ad72 <_realloc_r+0x16>
 800ad68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	f7ff b9d3 	b.w	800a118 <_malloc_r>
 800ad72:	b92a      	cbnz	r2, 800ad80 <_realloc_r+0x24>
 800ad74:	f7ff f964 	bl	800a040 <_free_r>
 800ad78:	4625      	mov	r5, r4
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad80:	f000 f81b 	bl	800adba <_malloc_usable_size_r>
 800ad84:	4284      	cmp	r4, r0
 800ad86:	4607      	mov	r7, r0
 800ad88:	d802      	bhi.n	800ad90 <_realloc_r+0x34>
 800ad8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad8e:	d812      	bhi.n	800adb6 <_realloc_r+0x5a>
 800ad90:	4621      	mov	r1, r4
 800ad92:	4640      	mov	r0, r8
 800ad94:	f7ff f9c0 	bl	800a118 <_malloc_r>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0ed      	beq.n	800ad7a <_realloc_r+0x1e>
 800ad9e:	42bc      	cmp	r4, r7
 800ada0:	4622      	mov	r2, r4
 800ada2:	4631      	mov	r1, r6
 800ada4:	bf28      	it	cs
 800ada6:	463a      	movcs	r2, r7
 800ada8:	f7ff ffca 	bl	800ad40 <memcpy>
 800adac:	4631      	mov	r1, r6
 800adae:	4640      	mov	r0, r8
 800adb0:	f7ff f946 	bl	800a040 <_free_r>
 800adb4:	e7e1      	b.n	800ad7a <_realloc_r+0x1e>
 800adb6:	4635      	mov	r5, r6
 800adb8:	e7df      	b.n	800ad7a <_realloc_r+0x1e>

0800adba <_malloc_usable_size_r>:
 800adba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adbe:	1f18      	subs	r0, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bfbc      	itt	lt
 800adc4:	580b      	ldrlt	r3, [r1, r0]
 800adc6:	18c0      	addlt	r0, r0, r3
 800adc8:	4770      	bx	lr
	...

0800adcc <_init>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr

0800add8 <_fini>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr
